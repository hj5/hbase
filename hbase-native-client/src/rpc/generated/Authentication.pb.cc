// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authentication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Authentication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* AuthenticationKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticationKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenIdentifier_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TokenIdentifier_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Token_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Token_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAuthenticationTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAuthenticationTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAuthenticationTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAuthenticationTokenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhoAmIRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhoAmIRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhoAmIResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhoAmIResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Authentication_2eproto() {
  protobuf_AddDesc_Authentication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Authentication.proto");
  GOOGLE_CHECK(file != NULL);
  AuthenticationKey_descriptor_ = file->message_type(0);
  static const int AuthenticationKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationKey, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationKey, expiration_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationKey, key_),
  };
  AuthenticationKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthenticationKey_descriptor_,
      AuthenticationKey::default_instance_,
      AuthenticationKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthenticationKey));
  TokenIdentifier_descriptor_ = file->message_type(1);
  static const int TokenIdentifier_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, issue_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, expiration_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, sequence_number_),
  };
  TokenIdentifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenIdentifier_descriptor_,
      TokenIdentifier::default_instance_,
      TokenIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenIdentifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenIdentifier));
  TokenIdentifier_Kind_descriptor_ = TokenIdentifier_descriptor_->enum_type(0);
  Token_descriptor_ = file->message_type(2);
  static const int Token_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, service_),
  };
  Token_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Token_descriptor_,
      Token::default_instance_,
      Token_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Token));
  GetAuthenticationTokenRequest_descriptor_ = file->message_type(3);
  static const int GetAuthenticationTokenRequest_offsets_[1] = {
  };
  GetAuthenticationTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAuthenticationTokenRequest_descriptor_,
      GetAuthenticationTokenRequest::default_instance_,
      GetAuthenticationTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthenticationTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthenticationTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAuthenticationTokenRequest));
  GetAuthenticationTokenResponse_descriptor_ = file->message_type(4);
  static const int GetAuthenticationTokenResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthenticationTokenResponse, token_),
  };
  GetAuthenticationTokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAuthenticationTokenResponse_descriptor_,
      GetAuthenticationTokenResponse::default_instance_,
      GetAuthenticationTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthenticationTokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthenticationTokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAuthenticationTokenResponse));
  WhoAmIRequest_descriptor_ = file->message_type(5);
  static const int WhoAmIRequest_offsets_[1] = {
  };
  WhoAmIRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhoAmIRequest_descriptor_,
      WhoAmIRequest::default_instance_,
      WhoAmIRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhoAmIRequest));
  WhoAmIResponse_descriptor_ = file->message_type(6);
  static const int WhoAmIResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponse, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponse, auth_method_),
  };
  WhoAmIResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhoAmIResponse_descriptor_,
      WhoAmIResponse::default_instance_,
      WhoAmIResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhoAmIResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Authentication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthenticationKey_descriptor_, &AuthenticationKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenIdentifier_descriptor_, &TokenIdentifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Token_descriptor_, &Token::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAuthenticationTokenRequest_descriptor_, &GetAuthenticationTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAuthenticationTokenResponse_descriptor_, &GetAuthenticationTokenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhoAmIRequest_descriptor_, &WhoAmIRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhoAmIResponse_descriptor_, &WhoAmIResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Authentication_2eproto() {
  delete AuthenticationKey::default_instance_;
  delete AuthenticationKey_reflection_;
  delete TokenIdentifier::default_instance_;
  delete TokenIdentifier_reflection_;
  delete Token::default_instance_;
  delete Token_reflection_;
  delete GetAuthenticationTokenRequest::default_instance_;
  delete GetAuthenticationTokenRequest_reflection_;
  delete GetAuthenticationTokenResponse::default_instance_;
  delete GetAuthenticationTokenResponse_reflection_;
  delete WhoAmIRequest::default_instance_;
  delete WhoAmIRequest_reflection_;
  delete WhoAmIResponse::default_instance_;
  delete WhoAmIResponse_reflection_;
}

void protobuf_AddDesc_Authentication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024Authentication.proto\022\010hbase.pb\"E\n\021Auth"
    "enticationKey\022\n\n\002id\030\001 \002(\005\022\027\n\017expiration_"
    "date\030\002 \002(\003\022\013\n\003key\030\003 \002(\014\"\305\001\n\017TokenIdentif"
    "ier\022,\n\004kind\030\001 \002(\0162\036.hbase.pb.TokenIdenti"
    "fier.Kind\022\020\n\010username\030\002 \002(\014\022\016\n\006key_id\030\003 "
    "\002(\005\022\022\n\nissue_date\030\004 \001(\003\022\027\n\017expiration_da"
    "te\030\005 \001(\003\022\027\n\017sequence_number\030\006 \001(\003\"\034\n\004Kin"
    "d\022\024\n\020HBASE_AUTH_TOKEN\020\000\">\n\005Token\022\022\n\niden"
    "tifier\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\022\017\n\007servic"
    "e\030\003 \001(\014\"\037\n\035GetAuthenticationTokenRequest"
    "\"@\n\036GetAuthenticationTokenResponse\022\036\n\005to"
    "ken\030\001 \001(\0132\017.hbase.pb.Token\"\017\n\rWhoAmIRequ"
    "est\"7\n\016WhoAmIResponse\022\020\n\010username\030\001 \001(\t\022"
    "\023\n\013auth_method\030\002 \001(\t2\301\001\n\025AuthenticationS"
    "ervice\022k\n\026GetAuthenticationToken\022\'.hbase"
    ".pb.GetAuthenticationTokenRequest\032(.hbas"
    "e.pb.GetAuthenticationTokenResponse\022;\n\006W"
    "hoAmI\022\027.hbase.pb.WhoAmIRequest\032\030.hbase.p"
    "b.WhoAmIResponseBJ\n*org.apache.hadoop.hb"
    "ase.protobuf.generatedB\024AuthenticationPr"
    "otosH\001\210\001\001\240\001\001", 812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Authentication.proto", &protobuf_RegisterTypes);
  AuthenticationKey::default_instance_ = new AuthenticationKey();
  TokenIdentifier::default_instance_ = new TokenIdentifier();
  Token::default_instance_ = new Token();
  GetAuthenticationTokenRequest::default_instance_ = new GetAuthenticationTokenRequest();
  GetAuthenticationTokenResponse::default_instance_ = new GetAuthenticationTokenResponse();
  WhoAmIRequest::default_instance_ = new WhoAmIRequest();
  WhoAmIResponse::default_instance_ = new WhoAmIResponse();
  AuthenticationKey::default_instance_->InitAsDefaultInstance();
  TokenIdentifier::default_instance_->InitAsDefaultInstance();
  Token::default_instance_->InitAsDefaultInstance();
  GetAuthenticationTokenRequest::default_instance_->InitAsDefaultInstance();
  GetAuthenticationTokenResponse::default_instance_->InitAsDefaultInstance();
  WhoAmIRequest::default_instance_->InitAsDefaultInstance();
  WhoAmIResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Authentication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Authentication_2eproto {
  StaticDescriptorInitializer_Authentication_2eproto() {
    protobuf_AddDesc_Authentication_2eproto();
  }
} static_descriptor_initializer_Authentication_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthenticationKey::kIdFieldNumber;
const int AuthenticationKey::kExpirationDateFieldNumber;
const int AuthenticationKey::kKeyFieldNumber;
#endif  // !_MSC_VER

AuthenticationKey::AuthenticationKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthenticationKey::InitAsDefaultInstance() {
}

AuthenticationKey::AuthenticationKey(const AuthenticationKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticationKey::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  expiration_date_ = GOOGLE_LONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticationKey::~AuthenticationKey() {
  SharedDtor();
}

void AuthenticationKey::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void AuthenticationKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationKey_descriptor_;
}

const AuthenticationKey& AuthenticationKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

AuthenticationKey* AuthenticationKey::default_instance_ = NULL;

AuthenticationKey* AuthenticationKey::New() const {
  return new AuthenticationKey;
}

void AuthenticationKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    expiration_date_ = GOOGLE_LONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticationKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expiration_date;
        break;
      }

      // required int64 expiration_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_date_)));
          set_has_expiration_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticationKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 expiration_date = 2;
  if (has_expiration_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expiration_date(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthenticationKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 expiration_date = 2;
  if (has_expiration_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expiration_date(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthenticationKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 expiration_date = 2;
    if (has_expiration_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiration_date());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthenticationKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthenticationKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticationKey::MergeFrom(const AuthenticationKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expiration_date()) {
      set_expiration_date(from.expiration_date());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticationKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationKey::CopyFrom(const AuthenticationKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthenticationKey::Swap(AuthenticationKey* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expiration_date_, other->expiration_date_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthenticationKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticationKey_descriptor_;
  metadata.reflection = AuthenticationKey_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TokenIdentifier_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenIdentifier_Kind_descriptor_;
}
bool TokenIdentifier_Kind_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TokenIdentifier_Kind TokenIdentifier::HBASE_AUTH_TOKEN;
const TokenIdentifier_Kind TokenIdentifier::Kind_MIN;
const TokenIdentifier_Kind TokenIdentifier::Kind_MAX;
const int TokenIdentifier::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TokenIdentifier::kKindFieldNumber;
const int TokenIdentifier::kUsernameFieldNumber;
const int TokenIdentifier::kKeyIdFieldNumber;
const int TokenIdentifier::kIssueDateFieldNumber;
const int TokenIdentifier::kExpirationDateFieldNumber;
const int TokenIdentifier::kSequenceNumberFieldNumber;
#endif  // !_MSC_VER

TokenIdentifier::TokenIdentifier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenIdentifier::InitAsDefaultInstance() {
}

TokenIdentifier::TokenIdentifier(const TokenIdentifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenIdentifier::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_id_ = 0;
  issue_date_ = GOOGLE_LONGLONG(0);
  expiration_date_ = GOOGLE_LONGLONG(0);
  sequence_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenIdentifier::~TokenIdentifier() {
  SharedDtor();
}

void TokenIdentifier::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void TokenIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenIdentifier_descriptor_;
}

const TokenIdentifier& TokenIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

TokenIdentifier* TokenIdentifier::default_instance_ = NULL;

TokenIdentifier* TokenIdentifier::New() const {
  return new TokenIdentifier;
}

void TokenIdentifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    key_id_ = 0;
    issue_date_ = GOOGLE_LONGLONG(0);
    expiration_date_ = GOOGLE_LONGLONG(0);
    sequence_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TokenIdentifier.Kind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::TokenIdentifier_Kind_IsValid(value)) {
            set_kind(static_cast< ::hbase::pb::TokenIdentifier_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key_id;
        break;
      }

      // required int32 key_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_id_)));
          set_has_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_issue_date;
        break;
      }

      // optional int64 issue_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issue_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &issue_date_)));
          set_has_issue_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expiration_date;
        break;
      }

      // optional int64 expiration_date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_date_)));
          set_has_expiration_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sequence_number;
        break;
      }

      // optional int64 sequence_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TokenIdentifier.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // required bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // required int32 key_id = 3;
  if (has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key_id(), output);
  }

  // optional int64 issue_date = 4;
  if (has_issue_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->issue_date(), output);
  }

  // optional int64 expiration_date = 5;
  if (has_expiration_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expiration_date(), output);
  }

  // optional int64 sequence_number = 6;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sequence_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TokenIdentifier.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // required bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // required int32 key_id = 3;
  if (has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key_id(), target);
  }

  // optional int64 issue_date = 4;
  if (has_issue_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->issue_date(), target);
  }

  // optional int64 expiration_date = 5;
  if (has_expiration_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expiration_date(), target);
  }

  // optional int64 sequence_number = 6;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sequence_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenIdentifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TokenIdentifier.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // required bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required int32 key_id = 3;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_id());
    }

    // optional int64 issue_date = 4;
    if (has_issue_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->issue_date());
    }

    // optional int64 expiration_date = 5;
    if (has_expiration_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiration_date());
    }

    // optional int64 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenIdentifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenIdentifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenIdentifier::MergeFrom(const TokenIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_key_id()) {
      set_key_id(from.key_id());
    }
    if (from.has_issue_date()) {
      set_issue_date(from.issue_date());
    }
    if (from.has_expiration_date()) {
      set_expiration_date(from.expiration_date());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenIdentifier::CopyFrom(const TokenIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenIdentifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TokenIdentifier::Swap(TokenIdentifier* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(username_, other->username_);
    std::swap(key_id_, other->key_id_);
    std::swap(issue_date_, other->issue_date_);
    std::swap(expiration_date_, other->expiration_date_);
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenIdentifier_descriptor_;
  metadata.reflection = TokenIdentifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Token::kIdentifierFieldNumber;
const int Token::kPasswordFieldNumber;
const int Token::kServiceFieldNumber;
#endif  // !_MSC_VER

Token::Token()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Token::InitAsDefaultInstance() {
}

Token::Token(const Token& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Token::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Token::~Token() {
  SharedDtor();
}

void Token::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (this != default_instance_) {
  }
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Token::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Token_descriptor_;
}

const Token& Token::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

Token* Token::default_instance_ = NULL;

Token* Token::New() const {
  return new Token;
}

void Token::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service;
        break;
      }

      // optional bytes service = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->identifier(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  // optional bytes service = 3;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->service(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Token::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes identifier = 1;
  if (has_identifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identifier(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional bytes service = 3;
  if (has_service()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->service(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Token::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identifier());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional bytes service = 3;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->service());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Token* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Token*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Token::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {

  return true;
}

void Token::Swap(Token* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(password_, other->password_);
    std::swap(service_, other->service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Token::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Token_descriptor_;
  metadata.reflection = Token_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAuthenticationTokenRequest::GetAuthenticationTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAuthenticationTokenRequest::InitAsDefaultInstance() {
}

GetAuthenticationTokenRequest::GetAuthenticationTokenRequest(const GetAuthenticationTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAuthenticationTokenRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthenticationTokenRequest::~GetAuthenticationTokenRequest() {
  SharedDtor();
}

void GetAuthenticationTokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAuthenticationTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAuthenticationTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAuthenticationTokenRequest_descriptor_;
}

const GetAuthenticationTokenRequest& GetAuthenticationTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

GetAuthenticationTokenRequest* GetAuthenticationTokenRequest::default_instance_ = NULL;

GetAuthenticationTokenRequest* GetAuthenticationTokenRequest::New() const {
  return new GetAuthenticationTokenRequest;
}

void GetAuthenticationTokenRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAuthenticationTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAuthenticationTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAuthenticationTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAuthenticationTokenRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthenticationTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAuthenticationTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAuthenticationTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAuthenticationTokenRequest::MergeFrom(const GetAuthenticationTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAuthenticationTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthenticationTokenRequest::CopyFrom(const GetAuthenticationTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthenticationTokenRequest::IsInitialized() const {

  return true;
}

void GetAuthenticationTokenRequest::Swap(GetAuthenticationTokenRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAuthenticationTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAuthenticationTokenRequest_descriptor_;
  metadata.reflection = GetAuthenticationTokenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAuthenticationTokenResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

GetAuthenticationTokenResponse::GetAuthenticationTokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAuthenticationTokenResponse::InitAsDefaultInstance() {
  token_ = const_cast< ::hbase::pb::Token*>(&::hbase::pb::Token::default_instance());
}

GetAuthenticationTokenResponse::GetAuthenticationTokenResponse(const GetAuthenticationTokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAuthenticationTokenResponse::SharedCtor() {
  _cached_size_ = 0;
  token_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthenticationTokenResponse::~GetAuthenticationTokenResponse() {
  SharedDtor();
}

void GetAuthenticationTokenResponse::SharedDtor() {
  if (this != default_instance_) {
    delete token_;
  }
}

void GetAuthenticationTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAuthenticationTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAuthenticationTokenResponse_descriptor_;
}

const GetAuthenticationTokenResponse& GetAuthenticationTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

GetAuthenticationTokenResponse* GetAuthenticationTokenResponse::default_instance_ = NULL;

GetAuthenticationTokenResponse* GetAuthenticationTokenResponse::New() const {
  return new GetAuthenticationTokenResponse;
}

void GetAuthenticationTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != NULL) token_->::hbase::pb::Token::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAuthenticationTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.Token token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAuthenticationTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.Token token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAuthenticationTokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.Token token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAuthenticationTokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.Token token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthenticationTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAuthenticationTokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAuthenticationTokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAuthenticationTokenResponse::MergeFrom(const GetAuthenticationTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      mutable_token()->::hbase::pb::Token::MergeFrom(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAuthenticationTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthenticationTokenResponse::CopyFrom(const GetAuthenticationTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthenticationTokenResponse::IsInitialized() const {

  return true;
}

void GetAuthenticationTokenResponse::Swap(GetAuthenticationTokenResponse* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAuthenticationTokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAuthenticationTokenResponse_descriptor_;
  metadata.reflection = GetAuthenticationTokenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WhoAmIRequest::WhoAmIRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhoAmIRequest::InitAsDefaultInstance() {
}

WhoAmIRequest::WhoAmIRequest(const WhoAmIRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhoAmIRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhoAmIRequest::~WhoAmIRequest() {
  SharedDtor();
}

void WhoAmIRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhoAmIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhoAmIRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhoAmIRequest_descriptor_;
}

const WhoAmIRequest& WhoAmIRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

WhoAmIRequest* WhoAmIRequest::default_instance_ = NULL;

WhoAmIRequest* WhoAmIRequest::New() const {
  return new WhoAmIRequest;
}

void WhoAmIRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhoAmIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WhoAmIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhoAmIRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhoAmIRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoAmIRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhoAmIRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhoAmIRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhoAmIRequest::MergeFrom(const WhoAmIRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhoAmIRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhoAmIRequest::CopyFrom(const WhoAmIRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoAmIRequest::IsInitialized() const {

  return true;
}

void WhoAmIRequest::Swap(WhoAmIRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhoAmIRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhoAmIRequest_descriptor_;
  metadata.reflection = WhoAmIRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhoAmIResponse::kUsernameFieldNumber;
const int WhoAmIResponse::kAuthMethodFieldNumber;
#endif  // !_MSC_VER

WhoAmIResponse::WhoAmIResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhoAmIResponse::InitAsDefaultInstance() {
}

WhoAmIResponse::WhoAmIResponse(const WhoAmIResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhoAmIResponse::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhoAmIResponse::~WhoAmIResponse() {
  SharedDtor();
}

void WhoAmIResponse::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (auth_method_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_method_;
  }
  if (this != default_instance_) {
  }
}

void WhoAmIResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhoAmIResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhoAmIResponse_descriptor_;
}

const WhoAmIResponse& WhoAmIResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authentication_2eproto();
  return *default_instance_;
}

WhoAmIResponse* WhoAmIResponse::default_instance_ = NULL;

WhoAmIResponse* WhoAmIResponse::New() const {
  return new WhoAmIResponse;
}

void WhoAmIResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_auth_method()) {
      if (auth_method_ != &::google::protobuf::internal::kEmptyString) {
        auth_method_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhoAmIResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth_method;
        break;
      }

      // optional string auth_method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_method().data(), this->auth_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhoAmIResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string auth_method = 2;
  if (has_auth_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_method().data(), this->auth_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->auth_method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhoAmIResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string auth_method = 2;
  if (has_auth_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_method().data(), this->auth_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth_method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhoAmIResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string auth_method = 2;
    if (has_auth_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_method());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoAmIResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhoAmIResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhoAmIResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhoAmIResponse::MergeFrom(const WhoAmIResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_auth_method()) {
      set_auth_method(from.auth_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhoAmIResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhoAmIResponse::CopyFrom(const WhoAmIResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoAmIResponse::IsInitialized() const {

  return true;
}

void WhoAmIResponse::Swap(WhoAmIResponse* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(auth_method_, other->auth_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhoAmIResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhoAmIResponse_descriptor_;
  metadata.reflection = WhoAmIResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
