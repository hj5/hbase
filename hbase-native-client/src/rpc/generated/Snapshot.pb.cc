// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snapshot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* SnapshotFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotFileInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SnapshotFileInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SnapshotRegionManifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotRegionManifest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotRegionManifest_StoreFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotRegionManifest_StoreFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotRegionManifest_FamilyFiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotRegionManifest_FamilyFiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotDataManifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotDataManifest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Snapshot_2eproto() {
  protobuf_AddDesc_Snapshot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Snapshot.proto");
  GOOGLE_CHECK(file != NULL);
  SnapshotFileInfo_descriptor_ = file->message_type(0);
  static const int SnapshotFileInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotFileInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotFileInfo, hfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotFileInfo, wal_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotFileInfo, wal_name_),
  };
  SnapshotFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotFileInfo_descriptor_,
      SnapshotFileInfo::default_instance_,
      SnapshotFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotFileInfo));
  SnapshotFileInfo_Type_descriptor_ = SnapshotFileInfo_descriptor_->enum_type(0);
  SnapshotRegionManifest_descriptor_ = file->message_type(1);
  static const int SnapshotRegionManifest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest, region_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest, family_files_),
  };
  SnapshotRegionManifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotRegionManifest_descriptor_,
      SnapshotRegionManifest::default_instance_,
      SnapshotRegionManifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotRegionManifest));
  SnapshotRegionManifest_StoreFile_descriptor_ = SnapshotRegionManifest_descriptor_->nested_type(0);
  static const int SnapshotRegionManifest_StoreFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_StoreFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_StoreFile, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_StoreFile, file_size_),
  };
  SnapshotRegionManifest_StoreFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotRegionManifest_StoreFile_descriptor_,
      SnapshotRegionManifest_StoreFile::default_instance_,
      SnapshotRegionManifest_StoreFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_StoreFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_StoreFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotRegionManifest_StoreFile));
  SnapshotRegionManifest_FamilyFiles_descriptor_ = SnapshotRegionManifest_descriptor_->nested_type(1);
  static const int SnapshotRegionManifest_FamilyFiles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_FamilyFiles, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_FamilyFiles, store_files_),
  };
  SnapshotRegionManifest_FamilyFiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotRegionManifest_FamilyFiles_descriptor_,
      SnapshotRegionManifest_FamilyFiles::default_instance_,
      SnapshotRegionManifest_FamilyFiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_FamilyFiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRegionManifest_FamilyFiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotRegionManifest_FamilyFiles));
  SnapshotDataManifest_descriptor_ = file->message_type(2);
  static const int SnapshotDataManifest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDataManifest, table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDataManifest, region_manifests_),
  };
  SnapshotDataManifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotDataManifest_descriptor_,
      SnapshotDataManifest::default_instance_,
      SnapshotDataManifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDataManifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDataManifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotDataManifest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Snapshot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotFileInfo_descriptor_, &SnapshotFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotRegionManifest_descriptor_, &SnapshotRegionManifest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotRegionManifest_StoreFile_descriptor_, &SnapshotRegionManifest_StoreFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotRegionManifest_FamilyFiles_descriptor_, &SnapshotRegionManifest_FamilyFiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotDataManifest_descriptor_, &SnapshotDataManifest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Snapshot_2eproto() {
  delete SnapshotFileInfo::default_instance_;
  delete SnapshotFileInfo_reflection_;
  delete SnapshotRegionManifest::default_instance_;
  delete SnapshotRegionManifest_reflection_;
  delete SnapshotRegionManifest_StoreFile::default_instance_;
  delete SnapshotRegionManifest_StoreFile_reflection_;
  delete SnapshotRegionManifest_FamilyFiles::default_instance_;
  delete SnapshotRegionManifest_FamilyFiles_reflection_;
  delete SnapshotDataManifest::default_instance_;
  delete SnapshotDataManifest_reflection_;
}

void protobuf_AddDesc_Snapshot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_FS_2eproto();
  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Snapshot.proto\022\010hbase.pb\032\010FS.proto\032\013HB"
    "ase.proto\"\222\001\n\020SnapshotFileInfo\022-\n\004type\030\001"
    " \002(\0162\037.hbase.pb.SnapshotFileInfo.Type\022\r\n"
    "\005hfile\030\003 \001(\t\022\022\n\nwal_server\030\004 \001(\t\022\020\n\010wal_"
    "name\030\005 \001(\t\"\032\n\004Type\022\t\n\005HFILE\020\001\022\007\n\003WAL\020\002\"\323"
    "\002\n\026SnapshotRegionManifest\022\017\n\007version\030\001 \001"
    "(\005\022)\n\013region_info\030\002 \002(\0132\024.hbase.pb.Regio"
    "nInfo\022B\n\014family_files\030\003 \003(\0132,.hbase.pb.S"
    "napshotRegionManifest.FamilyFiles\032T\n\tSto"
    "reFile\022\014\n\004name\030\001 \002(\t\022&\n\treference\030\002 \001(\0132"
    "\023.hbase.pb.Reference\022\021\n\tfile_size\030\003 \001(\004\032"
    "c\n\013FamilyFiles\022\023\n\013family_name\030\001 \002(\014\022\?\n\013s"
    "tore_files\030\002 \003(\0132*.hbase.pb.SnapshotRegi"
    "onManifest.StoreFile\"\177\n\024SnapshotDataMani"
    "fest\022+\n\014table_schema\030\001 \002(\0132\025.hbase.pb.Ta"
    "bleSchema\022:\n\020region_manifests\030\002 \003(\0132 .hb"
    "ase.pb.SnapshotRegionManifestBD\n*org.apa"
    "che.hadoop.hbase.protobuf.generatedB\016Sna"
    "pshotProtosH\001\210\001\001\240\001\001", 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Snapshot.proto", &protobuf_RegisterTypes);
  SnapshotFileInfo::default_instance_ = new SnapshotFileInfo();
  SnapshotRegionManifest::default_instance_ = new SnapshotRegionManifest();
  SnapshotRegionManifest_StoreFile::default_instance_ = new SnapshotRegionManifest_StoreFile();
  SnapshotRegionManifest_FamilyFiles::default_instance_ = new SnapshotRegionManifest_FamilyFiles();
  SnapshotDataManifest::default_instance_ = new SnapshotDataManifest();
  SnapshotFileInfo::default_instance_->InitAsDefaultInstance();
  SnapshotRegionManifest::default_instance_->InitAsDefaultInstance();
  SnapshotRegionManifest_StoreFile::default_instance_->InitAsDefaultInstance();
  SnapshotRegionManifest_FamilyFiles::default_instance_->InitAsDefaultInstance();
  SnapshotDataManifest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Snapshot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Snapshot_2eproto {
  StaticDescriptorInitializer_Snapshot_2eproto() {
    protobuf_AddDesc_Snapshot_2eproto();
  }
} static_descriptor_initializer_Snapshot_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SnapshotFileInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotFileInfo_Type_descriptor_;
}
bool SnapshotFileInfo_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SnapshotFileInfo_Type SnapshotFileInfo::HFILE;
const SnapshotFileInfo_Type SnapshotFileInfo::WAL;
const SnapshotFileInfo_Type SnapshotFileInfo::Type_MIN;
const SnapshotFileInfo_Type SnapshotFileInfo::Type_MAX;
const int SnapshotFileInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SnapshotFileInfo::kTypeFieldNumber;
const int SnapshotFileInfo::kHfileFieldNumber;
const int SnapshotFileInfo::kWalServerFieldNumber;
const int SnapshotFileInfo::kWalNameFieldNumber;
#endif  // !_MSC_VER

SnapshotFileInfo::SnapshotFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotFileInfo::InitAsDefaultInstance() {
}

SnapshotFileInfo::SnapshotFileInfo(const SnapshotFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotFileInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  hfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wal_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wal_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotFileInfo::~SnapshotFileInfo() {
  SharedDtor();
}

void SnapshotFileInfo::SharedDtor() {
  if (hfile_ != &::google::protobuf::internal::kEmptyString) {
    delete hfile_;
  }
  if (wal_server_ != &::google::protobuf::internal::kEmptyString) {
    delete wal_server_;
  }
  if (wal_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wal_name_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotFileInfo_descriptor_;
}

const SnapshotFileInfo& SnapshotFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Snapshot_2eproto();
  return *default_instance_;
}

SnapshotFileInfo* SnapshotFileInfo::default_instance_ = NULL;

SnapshotFileInfo* SnapshotFileInfo::New() const {
  return new SnapshotFileInfo;
}

void SnapshotFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_hfile()) {
      if (hfile_ != &::google::protobuf::internal::kEmptyString) {
        hfile_->clear();
      }
    }
    if (has_wal_server()) {
      if (wal_server_ != &::google::protobuf::internal::kEmptyString) {
        wal_server_->clear();
      }
    }
    if (has_wal_name()) {
      if (wal_name_ != &::google::protobuf::internal::kEmptyString) {
        wal_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SnapshotFileInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::SnapshotFileInfo_Type_IsValid(value)) {
            set_type(static_cast< ::hbase::pb::SnapshotFileInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hfile;
        break;
      }

      // optional string hfile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hfile().data(), this->hfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wal_server;
        break;
      }

      // optional string wal_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wal_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wal_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wal_server().data(), this->wal_server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_wal_name;
        break;
      }

      // optional string wal_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wal_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wal_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wal_name().data(), this->wal_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string hfile = 3;
  if (has_hfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hfile().data(), this->hfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hfile(), output);
  }

  // optional string wal_server = 4;
  if (has_wal_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wal_server().data(), this->wal_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wal_server(), output);
  }

  // optional string wal_name = 5;
  if (has_wal_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wal_name().data(), this->wal_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wal_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string hfile = 3;
  if (has_hfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hfile().data(), this->hfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hfile(), target);
  }

  // optional string wal_server = 4;
  if (has_wal_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wal_server().data(), this->wal_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->wal_server(), target);
  }

  // optional string wal_name = 5;
  if (has_wal_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wal_name().data(), this->wal_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->wal_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.SnapshotFileInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string hfile = 3;
    if (has_hfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hfile());
    }

    // optional string wal_server = 4;
    if (has_wal_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wal_server());
    }

    // optional string wal_name = 5;
    if (has_wal_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wal_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotFileInfo::MergeFrom(const SnapshotFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hfile()) {
      set_hfile(from.hfile());
    }
    if (from.has_wal_server()) {
      set_wal_server(from.wal_server());
    }
    if (from.has_wal_name()) {
      set_wal_name(from.wal_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotFileInfo::CopyFrom(const SnapshotFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SnapshotFileInfo::Swap(SnapshotFileInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(hfile_, other->hfile_);
    std::swap(wal_server_, other->wal_server_);
    std::swap(wal_name_, other->wal_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotFileInfo_descriptor_;
  metadata.reflection = SnapshotFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotRegionManifest_StoreFile::kNameFieldNumber;
const int SnapshotRegionManifest_StoreFile::kReferenceFieldNumber;
const int SnapshotRegionManifest_StoreFile::kFileSizeFieldNumber;
#endif  // !_MSC_VER

SnapshotRegionManifest_StoreFile::SnapshotRegionManifest_StoreFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotRegionManifest_StoreFile::InitAsDefaultInstance() {
  reference_ = const_cast< ::hbase::pb::Reference*>(&::hbase::pb::Reference::default_instance());
}

SnapshotRegionManifest_StoreFile::SnapshotRegionManifest_StoreFile(const SnapshotRegionManifest_StoreFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotRegionManifest_StoreFile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reference_ = NULL;
  file_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotRegionManifest_StoreFile::~SnapshotRegionManifest_StoreFile() {
  SharedDtor();
}

void SnapshotRegionManifest_StoreFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete reference_;
  }
}

void SnapshotRegionManifest_StoreFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRegionManifest_StoreFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRegionManifest_StoreFile_descriptor_;
}

const SnapshotRegionManifest_StoreFile& SnapshotRegionManifest_StoreFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Snapshot_2eproto();
  return *default_instance_;
}

SnapshotRegionManifest_StoreFile* SnapshotRegionManifest_StoreFile::default_instance_ = NULL;

SnapshotRegionManifest_StoreFile* SnapshotRegionManifest_StoreFile::New() const {
  return new SnapshotRegionManifest_StoreFile;
}

void SnapshotRegionManifest_StoreFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_reference()) {
      if (reference_ != NULL) reference_->::hbase::pb::Reference::Clear();
    }
    file_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotRegionManifest_StoreFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reference;
        break;
      }

      // optional .hbase.pb.Reference reference = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotRegionManifest_StoreFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .hbase.pb.Reference reference = 2;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reference(), output);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotRegionManifest_StoreFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .hbase.pb.Reference reference = 2;
  if (has_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reference(), target);
  }

  // optional uint64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotRegionManifest_StoreFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .hbase.pb.Reference reference = 2;
    if (has_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference());
    }

    // optional uint64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRegionManifest_StoreFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotRegionManifest_StoreFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotRegionManifest_StoreFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotRegionManifest_StoreFile::MergeFrom(const SnapshotRegionManifest_StoreFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_reference()) {
      mutable_reference()->::hbase::pb::Reference::MergeFrom(from.reference());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotRegionManifest_StoreFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRegionManifest_StoreFile::CopyFrom(const SnapshotRegionManifest_StoreFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRegionManifest_StoreFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reference()) {
    if (!this->reference().IsInitialized()) return false;
  }
  return true;
}

void SnapshotRegionManifest_StoreFile::Swap(SnapshotRegionManifest_StoreFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(reference_, other->reference_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotRegionManifest_StoreFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotRegionManifest_StoreFile_descriptor_;
  metadata.reflection = SnapshotRegionManifest_StoreFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SnapshotRegionManifest_FamilyFiles::kFamilyNameFieldNumber;
const int SnapshotRegionManifest_FamilyFiles::kStoreFilesFieldNumber;
#endif  // !_MSC_VER

SnapshotRegionManifest_FamilyFiles::SnapshotRegionManifest_FamilyFiles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotRegionManifest_FamilyFiles::InitAsDefaultInstance() {
}

SnapshotRegionManifest_FamilyFiles::SnapshotRegionManifest_FamilyFiles(const SnapshotRegionManifest_FamilyFiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotRegionManifest_FamilyFiles::SharedCtor() {
  _cached_size_ = 0;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotRegionManifest_FamilyFiles::~SnapshotRegionManifest_FamilyFiles() {
  SharedDtor();
}

void SnapshotRegionManifest_FamilyFiles::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotRegionManifest_FamilyFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRegionManifest_FamilyFiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRegionManifest_FamilyFiles_descriptor_;
}

const SnapshotRegionManifest_FamilyFiles& SnapshotRegionManifest_FamilyFiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Snapshot_2eproto();
  return *default_instance_;
}

SnapshotRegionManifest_FamilyFiles* SnapshotRegionManifest_FamilyFiles::default_instance_ = NULL;

SnapshotRegionManifest_FamilyFiles* SnapshotRegionManifest_FamilyFiles::New() const {
  return new SnapshotRegionManifest_FamilyFiles;
}

void SnapshotRegionManifest_FamilyFiles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  store_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotRegionManifest_FamilyFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_files;
        break;
      }

      // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotRegionManifest_FamilyFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family_name(), output);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  for (int i = 0; i < this->store_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store_files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotRegionManifest_FamilyFiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  for (int i = 0; i < this->store_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store_files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotRegionManifest_FamilyFiles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family_name = 1;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family_name());
    }

  }
  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  total_size += 1 * this->store_files_size();
  for (int i = 0; i < this->store_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRegionManifest_FamilyFiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotRegionManifest_FamilyFiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotRegionManifest_FamilyFiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotRegionManifest_FamilyFiles::MergeFrom(const SnapshotRegionManifest_FamilyFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_files_.MergeFrom(from.store_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotRegionManifest_FamilyFiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRegionManifest_FamilyFiles::CopyFrom(const SnapshotRegionManifest_FamilyFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRegionManifest_FamilyFiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < store_files_size(); i++) {
    if (!this->store_files(i).IsInitialized()) return false;
  }
  return true;
}

void SnapshotRegionManifest_FamilyFiles::Swap(SnapshotRegionManifest_FamilyFiles* other) {
  if (other != this) {
    std::swap(family_name_, other->family_name_);
    store_files_.Swap(&other->store_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotRegionManifest_FamilyFiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotRegionManifest_FamilyFiles_descriptor_;
  metadata.reflection = SnapshotRegionManifest_FamilyFiles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SnapshotRegionManifest::kVersionFieldNumber;
const int SnapshotRegionManifest::kRegionInfoFieldNumber;
const int SnapshotRegionManifest::kFamilyFilesFieldNumber;
#endif  // !_MSC_VER

SnapshotRegionManifest::SnapshotRegionManifest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotRegionManifest::InitAsDefaultInstance() {
  region_info_ = const_cast< ::hbase::pb::RegionInfo*>(&::hbase::pb::RegionInfo::default_instance());
}

SnapshotRegionManifest::SnapshotRegionManifest(const SnapshotRegionManifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotRegionManifest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  region_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotRegionManifest::~SnapshotRegionManifest() {
  SharedDtor();
}

void SnapshotRegionManifest::SharedDtor() {
  if (this != default_instance_) {
    delete region_info_;
  }
}

void SnapshotRegionManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRegionManifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRegionManifest_descriptor_;
}

const SnapshotRegionManifest& SnapshotRegionManifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Snapshot_2eproto();
  return *default_instance_;
}

SnapshotRegionManifest* SnapshotRegionManifest::default_instance_ = NULL;

SnapshotRegionManifest* SnapshotRegionManifest::New() const {
  return new SnapshotRegionManifest;
}

void SnapshotRegionManifest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_region_info()) {
      if (region_info_ != NULL) region_info_->::hbase::pb::RegionInfo::Clear();
    }
  }
  family_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotRegionManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_info;
        break;
      }

      // required .hbase.pb.RegionInfo region_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_files;
        break;
      }

      // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_family_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotRegionManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required .hbase.pb.RegionInfo region_info = 2;
  if (has_region_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_info(), output);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  for (int i = 0; i < this->family_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->family_files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotRegionManifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required .hbase.pb.RegionInfo region_info = 2;
  if (has_region_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_info(), target);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  for (int i = 0; i < this->family_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->family_files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotRegionManifest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required .hbase.pb.RegionInfo region_info = 2;
    if (has_region_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_info());
    }

  }
  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  total_size += 1 * this->family_files_size();
  for (int i = 0; i < this->family_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->family_files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRegionManifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotRegionManifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotRegionManifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotRegionManifest::MergeFrom(const SnapshotRegionManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_files_.MergeFrom(from.family_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_region_info()) {
      mutable_region_info()->::hbase::pb::RegionInfo::MergeFrom(from.region_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotRegionManifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRegionManifest::CopyFrom(const SnapshotRegionManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRegionManifest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_region_info()) {
    if (!this->region_info().IsInitialized()) return false;
  }
  for (int i = 0; i < family_files_size(); i++) {
    if (!this->family_files(i).IsInitialized()) return false;
  }
  return true;
}

void SnapshotRegionManifest::Swap(SnapshotRegionManifest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(region_info_, other->region_info_);
    family_files_.Swap(&other->family_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotRegionManifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotRegionManifest_descriptor_;
  metadata.reflection = SnapshotRegionManifest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotDataManifest::kTableSchemaFieldNumber;
const int SnapshotDataManifest::kRegionManifestsFieldNumber;
#endif  // !_MSC_VER

SnapshotDataManifest::SnapshotDataManifest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotDataManifest::InitAsDefaultInstance() {
  table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

SnapshotDataManifest::SnapshotDataManifest(const SnapshotDataManifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotDataManifest::SharedCtor() {
  _cached_size_ = 0;
  table_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotDataManifest::~SnapshotDataManifest() {
  SharedDtor();
}

void SnapshotDataManifest::SharedDtor() {
  if (this != default_instance_) {
    delete table_schema_;
  }
}

void SnapshotDataManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotDataManifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotDataManifest_descriptor_;
}

const SnapshotDataManifest& SnapshotDataManifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Snapshot_2eproto();
  return *default_instance_;
}

SnapshotDataManifest* SnapshotDataManifest::default_instance_ = NULL;

SnapshotDataManifest* SnapshotDataManifest::New() const {
  return new SnapshotDataManifest;
}

void SnapshotDataManifest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_schema()) {
      if (table_schema_ != NULL) table_schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  region_manifests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotDataManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableSchema table_schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_manifests;
        break;
      }

      // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_manifests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_manifests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_manifests;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotDataManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableSchema table_schema = 1;
  if (has_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_schema(), output);
  }

  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  for (int i = 0; i < this->region_manifests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_manifests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotDataManifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableSchema table_schema = 1;
  if (has_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_schema(), target);
  }

  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  for (int i = 0; i < this->region_manifests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_manifests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotDataManifest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableSchema table_schema = 1;
    if (has_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_schema());
    }

  }
  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  total_size += 1 * this->region_manifests_size();
  for (int i = 0; i < this->region_manifests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_manifests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotDataManifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotDataManifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotDataManifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotDataManifest::MergeFrom(const SnapshotDataManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_manifests_.MergeFrom(from.region_manifests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_schema()) {
      mutable_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.table_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotDataManifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotDataManifest::CopyFrom(const SnapshotDataManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotDataManifest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_schema()) {
    if (!this->table_schema().IsInitialized()) return false;
  }
  for (int i = 0; i < region_manifests_size(); i++) {
    if (!this->region_manifests(i).IsInitialized()) return false;
  }
  return true;
}

void SnapshotDataManifest::Swap(SnapshotDataManifest* other) {
  if (other != this) {
    std::swap(table_schema_, other->table_schema_);
    region_manifests_.Swap(&other->region_manifests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotDataManifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotDataManifest_descriptor_;
  metadata.reflection = SnapshotDataManifest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
