// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HFile.proto

#ifndef PROTOBUF_HFile_2eproto__INCLUDED
#define PROTOBUF_HFile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "HBase.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HFile_2eproto();
void protobuf_AssignDesc_HFile_2eproto();
void protobuf_ShutdownFile_HFile_2eproto();

class FileInfoProto;
class FileTrailerProto;

// ===================================================================

class FileInfoProto : public ::google::protobuf::Message {
 public:
  FileInfoProto();
  virtual ~FileInfoProto();

  FileInfoProto(const FileInfoProto& from);

  inline FileInfoProto& operator=(const FileInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfoProto& default_instance();

  void Swap(FileInfoProto* other);

  // implements Message ----------------------------------------------

  FileInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfoProto& from);
  void MergeFrom(const FileInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  inline int map_entry_size() const;
  inline void clear_map_entry();
  static const int kMapEntryFieldNumber = 1;
  inline const ::hbase::pb::BytesBytesPair& map_entry(int index) const;
  inline ::hbase::pb::BytesBytesPair* mutable_map_entry(int index);
  inline ::hbase::pb::BytesBytesPair* add_map_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::BytesBytesPair >&
      map_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::BytesBytesPair >*
      mutable_map_entry();

  // @@protoc_insertion_point(class_scope:hbase.pb.FileInfoProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::BytesBytesPair > map_entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_HFile_2eproto();
  friend void protobuf_AssignDesc_HFile_2eproto();
  friend void protobuf_ShutdownFile_HFile_2eproto();

  void InitAsDefaultInstance();
  static FileInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class FileTrailerProto : public ::google::protobuf::Message {
 public:
  FileTrailerProto();
  virtual ~FileTrailerProto();

  FileTrailerProto(const FileTrailerProto& from);

  inline FileTrailerProto& operator=(const FileTrailerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileTrailerProto& default_instance();

  void Swap(FileTrailerProto* other);

  // implements Message ----------------------------------------------

  FileTrailerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileTrailerProto& from);
  void MergeFrom(const FileTrailerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 file_info_offset = 1;
  inline bool has_file_info_offset() const;
  inline void clear_file_info_offset();
  static const int kFileInfoOffsetFieldNumber = 1;
  inline ::google::protobuf::uint64 file_info_offset() const;
  inline void set_file_info_offset(::google::protobuf::uint64 value);

  // optional uint64 load_on_open_data_offset = 2;
  inline bool has_load_on_open_data_offset() const;
  inline void clear_load_on_open_data_offset();
  static const int kLoadOnOpenDataOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 load_on_open_data_offset() const;
  inline void set_load_on_open_data_offset(::google::protobuf::uint64 value);

  // optional uint64 uncompressed_data_index_size = 3;
  inline bool has_uncompressed_data_index_size() const;
  inline void clear_uncompressed_data_index_size();
  static const int kUncompressedDataIndexSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 uncompressed_data_index_size() const;
  inline void set_uncompressed_data_index_size(::google::protobuf::uint64 value);

  // optional uint64 total_uncompressed_bytes = 4;
  inline bool has_total_uncompressed_bytes() const;
  inline void clear_total_uncompressed_bytes();
  static const int kTotalUncompressedBytesFieldNumber = 4;
  inline ::google::protobuf::uint64 total_uncompressed_bytes() const;
  inline void set_total_uncompressed_bytes(::google::protobuf::uint64 value);

  // optional uint32 data_index_count = 5;
  inline bool has_data_index_count() const;
  inline void clear_data_index_count();
  static const int kDataIndexCountFieldNumber = 5;
  inline ::google::protobuf::uint32 data_index_count() const;
  inline void set_data_index_count(::google::protobuf::uint32 value);

  // optional uint32 meta_index_count = 6;
  inline bool has_meta_index_count() const;
  inline void clear_meta_index_count();
  static const int kMetaIndexCountFieldNumber = 6;
  inline ::google::protobuf::uint32 meta_index_count() const;
  inline void set_meta_index_count(::google::protobuf::uint32 value);

  // optional uint64 entry_count = 7;
  inline bool has_entry_count() const;
  inline void clear_entry_count();
  static const int kEntryCountFieldNumber = 7;
  inline ::google::protobuf::uint64 entry_count() const;
  inline void set_entry_count(::google::protobuf::uint64 value);

  // optional uint32 num_data_index_levels = 8;
  inline bool has_num_data_index_levels() const;
  inline void clear_num_data_index_levels();
  static const int kNumDataIndexLevelsFieldNumber = 8;
  inline ::google::protobuf::uint32 num_data_index_levels() const;
  inline void set_num_data_index_levels(::google::protobuf::uint32 value);

  // optional uint64 first_data_block_offset = 9;
  inline bool has_first_data_block_offset() const;
  inline void clear_first_data_block_offset();
  static const int kFirstDataBlockOffsetFieldNumber = 9;
  inline ::google::protobuf::uint64 first_data_block_offset() const;
  inline void set_first_data_block_offset(::google::protobuf::uint64 value);

  // optional uint64 last_data_block_offset = 10;
  inline bool has_last_data_block_offset() const;
  inline void clear_last_data_block_offset();
  static const int kLastDataBlockOffsetFieldNumber = 10;
  inline ::google::protobuf::uint64 last_data_block_offset() const;
  inline void set_last_data_block_offset(::google::protobuf::uint64 value);

  // optional string comparator_class_name = 11;
  inline bool has_comparator_class_name() const;
  inline void clear_comparator_class_name();
  static const int kComparatorClassNameFieldNumber = 11;
  inline const ::std::string& comparator_class_name() const;
  inline void set_comparator_class_name(const ::std::string& value);
  inline void set_comparator_class_name(const char* value);
  inline void set_comparator_class_name(const char* value, size_t size);
  inline ::std::string* mutable_comparator_class_name();
  inline ::std::string* release_comparator_class_name();
  inline void set_allocated_comparator_class_name(::std::string* comparator_class_name);

  // optional uint32 compression_codec = 12;
  inline bool has_compression_codec() const;
  inline void clear_compression_codec();
  static const int kCompressionCodecFieldNumber = 12;
  inline ::google::protobuf::uint32 compression_codec() const;
  inline void set_compression_codec(::google::protobuf::uint32 value);

  // optional bytes encryption_key = 13;
  inline bool has_encryption_key() const;
  inline void clear_encryption_key();
  static const int kEncryptionKeyFieldNumber = 13;
  inline const ::std::string& encryption_key() const;
  inline void set_encryption_key(const ::std::string& value);
  inline void set_encryption_key(const char* value);
  inline void set_encryption_key(const void* value, size_t size);
  inline ::std::string* mutable_encryption_key();
  inline ::std::string* release_encryption_key();
  inline void set_allocated_encryption_key(::std::string* encryption_key);

  // @@protoc_insertion_point(class_scope:hbase.pb.FileTrailerProto)
 private:
  inline void set_has_file_info_offset();
  inline void clear_has_file_info_offset();
  inline void set_has_load_on_open_data_offset();
  inline void clear_has_load_on_open_data_offset();
  inline void set_has_uncompressed_data_index_size();
  inline void clear_has_uncompressed_data_index_size();
  inline void set_has_total_uncompressed_bytes();
  inline void clear_has_total_uncompressed_bytes();
  inline void set_has_data_index_count();
  inline void clear_has_data_index_count();
  inline void set_has_meta_index_count();
  inline void clear_has_meta_index_count();
  inline void set_has_entry_count();
  inline void clear_has_entry_count();
  inline void set_has_num_data_index_levels();
  inline void clear_has_num_data_index_levels();
  inline void set_has_first_data_block_offset();
  inline void clear_has_first_data_block_offset();
  inline void set_has_last_data_block_offset();
  inline void clear_has_last_data_block_offset();
  inline void set_has_comparator_class_name();
  inline void clear_has_comparator_class_name();
  inline void set_has_compression_codec();
  inline void clear_has_compression_codec();
  inline void set_has_encryption_key();
  inline void clear_has_encryption_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 file_info_offset_;
  ::google::protobuf::uint64 load_on_open_data_offset_;
  ::google::protobuf::uint64 uncompressed_data_index_size_;
  ::google::protobuf::uint64 total_uncompressed_bytes_;
  ::google::protobuf::uint32 data_index_count_;
  ::google::protobuf::uint32 meta_index_count_;
  ::google::protobuf::uint64 entry_count_;
  ::google::protobuf::uint64 first_data_block_offset_;
  ::google::protobuf::uint64 last_data_block_offset_;
  ::google::protobuf::uint32 num_data_index_levels_;
  ::google::protobuf::uint32 compression_codec_;
  ::std::string* comparator_class_name_;
  ::std::string* encryption_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_HFile_2eproto();
  friend void protobuf_AssignDesc_HFile_2eproto();
  friend void protobuf_ShutdownFile_HFile_2eproto();

  void InitAsDefaultInstance();
  static FileTrailerProto* default_instance_;
};
// ===================================================================


// ===================================================================

// FileInfoProto

// repeated .hbase.pb.BytesBytesPair map_entry = 1;
inline int FileInfoProto::map_entry_size() const {
  return map_entry_.size();
}
inline void FileInfoProto::clear_map_entry() {
  map_entry_.Clear();
}
inline const ::hbase::pb::BytesBytesPair& FileInfoProto::map_entry(int index) const {
  return map_entry_.Get(index);
}
inline ::hbase::pb::BytesBytesPair* FileInfoProto::mutable_map_entry(int index) {
  return map_entry_.Mutable(index);
}
inline ::hbase::pb::BytesBytesPair* FileInfoProto::add_map_entry() {
  return map_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::BytesBytesPair >&
FileInfoProto::map_entry() const {
  return map_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::BytesBytesPair >*
FileInfoProto::mutable_map_entry() {
  return &map_entry_;
}

// -------------------------------------------------------------------

// FileTrailerProto

// optional uint64 file_info_offset = 1;
inline bool FileTrailerProto::has_file_info_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileTrailerProto::set_has_file_info_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileTrailerProto::clear_has_file_info_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileTrailerProto::clear_file_info_offset() {
  file_info_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_file_info_offset();
}
inline ::google::protobuf::uint64 FileTrailerProto::file_info_offset() const {
  return file_info_offset_;
}
inline void FileTrailerProto::set_file_info_offset(::google::protobuf::uint64 value) {
  set_has_file_info_offset();
  file_info_offset_ = value;
}

// optional uint64 load_on_open_data_offset = 2;
inline bool FileTrailerProto::has_load_on_open_data_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileTrailerProto::set_has_load_on_open_data_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileTrailerProto::clear_has_load_on_open_data_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileTrailerProto::clear_load_on_open_data_offset() {
  load_on_open_data_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_load_on_open_data_offset();
}
inline ::google::protobuf::uint64 FileTrailerProto::load_on_open_data_offset() const {
  return load_on_open_data_offset_;
}
inline void FileTrailerProto::set_load_on_open_data_offset(::google::protobuf::uint64 value) {
  set_has_load_on_open_data_offset();
  load_on_open_data_offset_ = value;
}

// optional uint64 uncompressed_data_index_size = 3;
inline bool FileTrailerProto::has_uncompressed_data_index_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileTrailerProto::set_has_uncompressed_data_index_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileTrailerProto::clear_has_uncompressed_data_index_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileTrailerProto::clear_uncompressed_data_index_size() {
  uncompressed_data_index_size_ = GOOGLE_ULONGLONG(0);
  clear_has_uncompressed_data_index_size();
}
inline ::google::protobuf::uint64 FileTrailerProto::uncompressed_data_index_size() const {
  return uncompressed_data_index_size_;
}
inline void FileTrailerProto::set_uncompressed_data_index_size(::google::protobuf::uint64 value) {
  set_has_uncompressed_data_index_size();
  uncompressed_data_index_size_ = value;
}

// optional uint64 total_uncompressed_bytes = 4;
inline bool FileTrailerProto::has_total_uncompressed_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileTrailerProto::set_has_total_uncompressed_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileTrailerProto::clear_has_total_uncompressed_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileTrailerProto::clear_total_uncompressed_bytes() {
  total_uncompressed_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_total_uncompressed_bytes();
}
inline ::google::protobuf::uint64 FileTrailerProto::total_uncompressed_bytes() const {
  return total_uncompressed_bytes_;
}
inline void FileTrailerProto::set_total_uncompressed_bytes(::google::protobuf::uint64 value) {
  set_has_total_uncompressed_bytes();
  total_uncompressed_bytes_ = value;
}

// optional uint32 data_index_count = 5;
inline bool FileTrailerProto::has_data_index_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileTrailerProto::set_has_data_index_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileTrailerProto::clear_has_data_index_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileTrailerProto::clear_data_index_count() {
  data_index_count_ = 0u;
  clear_has_data_index_count();
}
inline ::google::protobuf::uint32 FileTrailerProto::data_index_count() const {
  return data_index_count_;
}
inline void FileTrailerProto::set_data_index_count(::google::protobuf::uint32 value) {
  set_has_data_index_count();
  data_index_count_ = value;
}

// optional uint32 meta_index_count = 6;
inline bool FileTrailerProto::has_meta_index_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileTrailerProto::set_has_meta_index_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileTrailerProto::clear_has_meta_index_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileTrailerProto::clear_meta_index_count() {
  meta_index_count_ = 0u;
  clear_has_meta_index_count();
}
inline ::google::protobuf::uint32 FileTrailerProto::meta_index_count() const {
  return meta_index_count_;
}
inline void FileTrailerProto::set_meta_index_count(::google::protobuf::uint32 value) {
  set_has_meta_index_count();
  meta_index_count_ = value;
}

// optional uint64 entry_count = 7;
inline bool FileTrailerProto::has_entry_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileTrailerProto::set_has_entry_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileTrailerProto::clear_has_entry_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileTrailerProto::clear_entry_count() {
  entry_count_ = GOOGLE_ULONGLONG(0);
  clear_has_entry_count();
}
inline ::google::protobuf::uint64 FileTrailerProto::entry_count() const {
  return entry_count_;
}
inline void FileTrailerProto::set_entry_count(::google::protobuf::uint64 value) {
  set_has_entry_count();
  entry_count_ = value;
}

// optional uint32 num_data_index_levels = 8;
inline bool FileTrailerProto::has_num_data_index_levels() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileTrailerProto::set_has_num_data_index_levels() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileTrailerProto::clear_has_num_data_index_levels() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileTrailerProto::clear_num_data_index_levels() {
  num_data_index_levels_ = 0u;
  clear_has_num_data_index_levels();
}
inline ::google::protobuf::uint32 FileTrailerProto::num_data_index_levels() const {
  return num_data_index_levels_;
}
inline void FileTrailerProto::set_num_data_index_levels(::google::protobuf::uint32 value) {
  set_has_num_data_index_levels();
  num_data_index_levels_ = value;
}

// optional uint64 first_data_block_offset = 9;
inline bool FileTrailerProto::has_first_data_block_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FileTrailerProto::set_has_first_data_block_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FileTrailerProto::clear_has_first_data_block_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FileTrailerProto::clear_first_data_block_offset() {
  first_data_block_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_first_data_block_offset();
}
inline ::google::protobuf::uint64 FileTrailerProto::first_data_block_offset() const {
  return first_data_block_offset_;
}
inline void FileTrailerProto::set_first_data_block_offset(::google::protobuf::uint64 value) {
  set_has_first_data_block_offset();
  first_data_block_offset_ = value;
}

// optional uint64 last_data_block_offset = 10;
inline bool FileTrailerProto::has_last_data_block_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FileTrailerProto::set_has_last_data_block_offset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FileTrailerProto::clear_has_last_data_block_offset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FileTrailerProto::clear_last_data_block_offset() {
  last_data_block_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_last_data_block_offset();
}
inline ::google::protobuf::uint64 FileTrailerProto::last_data_block_offset() const {
  return last_data_block_offset_;
}
inline void FileTrailerProto::set_last_data_block_offset(::google::protobuf::uint64 value) {
  set_has_last_data_block_offset();
  last_data_block_offset_ = value;
}

// optional string comparator_class_name = 11;
inline bool FileTrailerProto::has_comparator_class_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FileTrailerProto::set_has_comparator_class_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FileTrailerProto::clear_has_comparator_class_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FileTrailerProto::clear_comparator_class_name() {
  if (comparator_class_name_ != &::google::protobuf::internal::kEmptyString) {
    comparator_class_name_->clear();
  }
  clear_has_comparator_class_name();
}
inline const ::std::string& FileTrailerProto::comparator_class_name() const {
  return *comparator_class_name_;
}
inline void FileTrailerProto::set_comparator_class_name(const ::std::string& value) {
  set_has_comparator_class_name();
  if (comparator_class_name_ == &::google::protobuf::internal::kEmptyString) {
    comparator_class_name_ = new ::std::string;
  }
  comparator_class_name_->assign(value);
}
inline void FileTrailerProto::set_comparator_class_name(const char* value) {
  set_has_comparator_class_name();
  if (comparator_class_name_ == &::google::protobuf::internal::kEmptyString) {
    comparator_class_name_ = new ::std::string;
  }
  comparator_class_name_->assign(value);
}
inline void FileTrailerProto::set_comparator_class_name(const char* value, size_t size) {
  set_has_comparator_class_name();
  if (comparator_class_name_ == &::google::protobuf::internal::kEmptyString) {
    comparator_class_name_ = new ::std::string;
  }
  comparator_class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileTrailerProto::mutable_comparator_class_name() {
  set_has_comparator_class_name();
  if (comparator_class_name_ == &::google::protobuf::internal::kEmptyString) {
    comparator_class_name_ = new ::std::string;
  }
  return comparator_class_name_;
}
inline ::std::string* FileTrailerProto::release_comparator_class_name() {
  clear_has_comparator_class_name();
  if (comparator_class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comparator_class_name_;
    comparator_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileTrailerProto::set_allocated_comparator_class_name(::std::string* comparator_class_name) {
  if (comparator_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete comparator_class_name_;
  }
  if (comparator_class_name) {
    set_has_comparator_class_name();
    comparator_class_name_ = comparator_class_name;
  } else {
    clear_has_comparator_class_name();
    comparator_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 compression_codec = 12;
inline bool FileTrailerProto::has_compression_codec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FileTrailerProto::set_has_compression_codec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FileTrailerProto::clear_has_compression_codec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FileTrailerProto::clear_compression_codec() {
  compression_codec_ = 0u;
  clear_has_compression_codec();
}
inline ::google::protobuf::uint32 FileTrailerProto::compression_codec() const {
  return compression_codec_;
}
inline void FileTrailerProto::set_compression_codec(::google::protobuf::uint32 value) {
  set_has_compression_codec();
  compression_codec_ = value;
}

// optional bytes encryption_key = 13;
inline bool FileTrailerProto::has_encryption_key() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FileTrailerProto::set_has_encryption_key() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FileTrailerProto::clear_has_encryption_key() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FileTrailerProto::clear_encryption_key() {
  if (encryption_key_ != &::google::protobuf::internal::kEmptyString) {
    encryption_key_->clear();
  }
  clear_has_encryption_key();
}
inline const ::std::string& FileTrailerProto::encryption_key() const {
  return *encryption_key_;
}
inline void FileTrailerProto::set_encryption_key(const ::std::string& value) {
  set_has_encryption_key();
  if (encryption_key_ == &::google::protobuf::internal::kEmptyString) {
    encryption_key_ = new ::std::string;
  }
  encryption_key_->assign(value);
}
inline void FileTrailerProto::set_encryption_key(const char* value) {
  set_has_encryption_key();
  if (encryption_key_ == &::google::protobuf::internal::kEmptyString) {
    encryption_key_ = new ::std::string;
  }
  encryption_key_->assign(value);
}
inline void FileTrailerProto::set_encryption_key(const void* value, size_t size) {
  set_has_encryption_key();
  if (encryption_key_ == &::google::protobuf::internal::kEmptyString) {
    encryption_key_ = new ::std::string;
  }
  encryption_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileTrailerProto::mutable_encryption_key() {
  set_has_encryption_key();
  if (encryption_key_ == &::google::protobuf::internal::kEmptyString) {
    encryption_key_ = new ::std::string;
  }
  return encryption_key_;
}
inline ::std::string* FileTrailerProto::release_encryption_key() {
  clear_has_encryption_key();
  if (encryption_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encryption_key_;
    encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileTrailerProto::set_allocated_encryption_key(::std::string* encryption_key) {
  if (encryption_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encryption_key_;
  }
  if (encryption_key) {
    set_has_encryption_key();
    encryption_key_ = encryption_key;
  } else {
    clear_has_encryption_key();
    encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HFile_2eproto__INCLUDED
