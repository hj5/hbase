// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegionServerStatus.proto

#ifndef PROTOBUF_RegionServerStatus_2eproto__INCLUDED
#define PROTOBUF_RegionServerStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "HBase.pb.h"
#include "ClusterStatus.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RegionServerStatus_2eproto();
void protobuf_AssignDesc_RegionServerStatus_2eproto();
void protobuf_ShutdownFile_RegionServerStatus_2eproto();

class RegionServerStartupRequest;
class RegionServerStartupResponse;
class RegionServerReportRequest;
class RegionServerReportResponse;
class ReportRSFatalErrorRequest;
class ReportRSFatalErrorResponse;
class GetLastFlushedSequenceIdRequest;
class GetLastFlushedSequenceIdResponse;
class RegionStateTransition;
class ReportRegionStateTransitionRequest;
class ReportRegionStateTransitionResponse;

enum RegionStateTransition_TransitionCode {
  RegionStateTransition_TransitionCode_OPENED = 0,
  RegionStateTransition_TransitionCode_FAILED_OPEN = 1,
  RegionStateTransition_TransitionCode_CLOSED = 2,
  RegionStateTransition_TransitionCode_READY_TO_SPLIT = 3,
  RegionStateTransition_TransitionCode_READY_TO_MERGE = 4,
  RegionStateTransition_TransitionCode_SPLIT_PONR = 5,
  RegionStateTransition_TransitionCode_MERGE_PONR = 6,
  RegionStateTransition_TransitionCode_SPLIT = 7,
  RegionStateTransition_TransitionCode_MERGED = 8,
  RegionStateTransition_TransitionCode_SPLIT_REVERTED = 9,
  RegionStateTransition_TransitionCode_MERGE_REVERTED = 10
};
bool RegionStateTransition_TransitionCode_IsValid(int value);
const RegionStateTransition_TransitionCode RegionStateTransition_TransitionCode_TransitionCode_MIN = RegionStateTransition_TransitionCode_OPENED;
const RegionStateTransition_TransitionCode RegionStateTransition_TransitionCode_TransitionCode_MAX = RegionStateTransition_TransitionCode_MERGE_REVERTED;
const int RegionStateTransition_TransitionCode_TransitionCode_ARRAYSIZE = RegionStateTransition_TransitionCode_TransitionCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegionStateTransition_TransitionCode_descriptor();
inline const ::std::string& RegionStateTransition_TransitionCode_Name(RegionStateTransition_TransitionCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegionStateTransition_TransitionCode_descriptor(), value);
}
inline bool RegionStateTransition_TransitionCode_Parse(
    const ::std::string& name, RegionStateTransition_TransitionCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegionStateTransition_TransitionCode>(
    RegionStateTransition_TransitionCode_descriptor(), name, value);
}
// ===================================================================

class RegionServerStartupRequest : public ::google::protobuf::Message {
 public:
  RegionServerStartupRequest();
  virtual ~RegionServerStartupRequest();

  RegionServerStartupRequest(const RegionServerStartupRequest& from);

  inline RegionServerStartupRequest& operator=(const RegionServerStartupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionServerStartupRequest& default_instance();

  void Swap(RegionServerStartupRequest* other);

  // implements Message ----------------------------------------------

  RegionServerStartupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionServerStartupRequest& from);
  void MergeFrom(const RegionServerStartupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint64 server_start_code = 2;
  inline bool has_server_start_code() const;
  inline void clear_server_start_code();
  static const int kServerStartCodeFieldNumber = 2;
  inline ::google::protobuf::uint64 server_start_code() const;
  inline void set_server_start_code(::google::protobuf::uint64 value);

  // required uint64 server_current_time = 3;
  inline bool has_server_current_time() const;
  inline void clear_server_current_time();
  static const int kServerCurrentTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 server_current_time() const;
  inline void set_server_current_time(::google::protobuf::uint64 value);

  // optional string use_this_hostname_instead = 4;
  inline bool has_use_this_hostname_instead() const;
  inline void clear_use_this_hostname_instead();
  static const int kUseThisHostnameInsteadFieldNumber = 4;
  inline const ::std::string& use_this_hostname_instead() const;
  inline void set_use_this_hostname_instead(const ::std::string& value);
  inline void set_use_this_hostname_instead(const char* value);
  inline void set_use_this_hostname_instead(const char* value, size_t size);
  inline ::std::string* mutable_use_this_hostname_instead();
  inline ::std::string* release_use_this_hostname_instead();
  inline void set_allocated_use_this_hostname_instead(::std::string* use_this_hostname_instead);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionServerStartupRequest)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_server_start_code();
  inline void clear_has_server_start_code();
  inline void set_has_server_current_time();
  inline void clear_has_server_current_time();
  inline void set_has_use_this_hostname_instead();
  inline void clear_has_use_this_hostname_instead();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 server_start_code_;
  ::google::protobuf::uint64 server_current_time_;
  ::std::string* use_this_hostname_instead_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionServerStartupRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegionServerStartupResponse : public ::google::protobuf::Message {
 public:
  RegionServerStartupResponse();
  virtual ~RegionServerStartupResponse();

  RegionServerStartupResponse(const RegionServerStartupResponse& from);

  inline RegionServerStartupResponse& operator=(const RegionServerStartupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionServerStartupResponse& default_instance();

  void Swap(RegionServerStartupResponse* other);

  // implements Message ----------------------------------------------

  RegionServerStartupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionServerStartupResponse& from);
  void MergeFrom(const RegionServerStartupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.NameStringPair map_entries = 1;
  inline int map_entries_size() const;
  inline void clear_map_entries();
  static const int kMapEntriesFieldNumber = 1;
  inline const ::hbase::pb::NameStringPair& map_entries(int index) const;
  inline ::hbase::pb::NameStringPair* mutable_map_entries(int index);
  inline ::hbase::pb::NameStringPair* add_map_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::NameStringPair >&
      map_entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::NameStringPair >*
      mutable_map_entries();

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionServerStartupResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::NameStringPair > map_entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionServerStartupResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegionServerReportRequest : public ::google::protobuf::Message {
 public:
  RegionServerReportRequest();
  virtual ~RegionServerReportRequest();

  RegionServerReportRequest(const RegionServerReportRequest& from);

  inline RegionServerReportRequest& operator=(const RegionServerReportRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionServerReportRequest& default_instance();

  void Swap(RegionServerReportRequest* other);

  // implements Message ----------------------------------------------

  RegionServerReportRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionServerReportRequest& from);
  void MergeFrom(const RegionServerReportRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ServerName server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::hbase::pb::ServerName& server() const;
  inline ::hbase::pb::ServerName* mutable_server();
  inline ::hbase::pb::ServerName* release_server();
  inline void set_allocated_server(::hbase::pb::ServerName* server);

  // optional .hbase.pb.ServerLoad load = 2;
  inline bool has_load() const;
  inline void clear_load();
  static const int kLoadFieldNumber = 2;
  inline const ::hbase::pb::ServerLoad& load() const;
  inline ::hbase::pb::ServerLoad* mutable_load();
  inline ::hbase::pb::ServerLoad* release_load();
  inline void set_allocated_load(::hbase::pb::ServerLoad* load);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionServerReportRequest)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_load();
  inline void clear_has_load();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ServerName* server_;
  ::hbase::pb::ServerLoad* load_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionServerReportRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegionServerReportResponse : public ::google::protobuf::Message {
 public:
  RegionServerReportResponse();
  virtual ~RegionServerReportResponse();

  RegionServerReportResponse(const RegionServerReportResponse& from);

  inline RegionServerReportResponse& operator=(const RegionServerReportResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionServerReportResponse& default_instance();

  void Swap(RegionServerReportResponse* other);

  // implements Message ----------------------------------------------

  RegionServerReportResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionServerReportResponse& from);
  void MergeFrom(const RegionServerReportResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionServerReportResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionServerReportResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportRSFatalErrorRequest : public ::google::protobuf::Message {
 public:
  ReportRSFatalErrorRequest();
  virtual ~ReportRSFatalErrorRequest();

  ReportRSFatalErrorRequest(const ReportRSFatalErrorRequest& from);

  inline ReportRSFatalErrorRequest& operator=(const ReportRSFatalErrorRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRSFatalErrorRequest& default_instance();

  void Swap(ReportRSFatalErrorRequest* other);

  // implements Message ----------------------------------------------

  ReportRSFatalErrorRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRSFatalErrorRequest& from);
  void MergeFrom(const ReportRSFatalErrorRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ServerName server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::hbase::pb::ServerName& server() const;
  inline ::hbase::pb::ServerName* mutable_server();
  inline ::hbase::pb::ServerName* release_server();
  inline void set_allocated_server(::hbase::pb::ServerName* server);

  // required string error_message = 2;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:hbase.pb.ReportRSFatalErrorRequest)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ServerName* server_;
  ::std::string* error_message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static ReportRSFatalErrorRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportRSFatalErrorResponse : public ::google::protobuf::Message {
 public:
  ReportRSFatalErrorResponse();
  virtual ~ReportRSFatalErrorResponse();

  ReportRSFatalErrorResponse(const ReportRSFatalErrorResponse& from);

  inline ReportRSFatalErrorResponse& operator=(const ReportRSFatalErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRSFatalErrorResponse& default_instance();

  void Swap(ReportRSFatalErrorResponse* other);

  // implements Message ----------------------------------------------

  ReportRSFatalErrorResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRSFatalErrorResponse& from);
  void MergeFrom(const ReportRSFatalErrorResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.ReportRSFatalErrorResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static ReportRSFatalErrorResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetLastFlushedSequenceIdRequest : public ::google::protobuf::Message {
 public:
  GetLastFlushedSequenceIdRequest();
  virtual ~GetLastFlushedSequenceIdRequest();

  GetLastFlushedSequenceIdRequest(const GetLastFlushedSequenceIdRequest& from);

  inline GetLastFlushedSequenceIdRequest& operator=(const GetLastFlushedSequenceIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastFlushedSequenceIdRequest& default_instance();

  void Swap(GetLastFlushedSequenceIdRequest* other);

  // implements Message ----------------------------------------------

  GetLastFlushedSequenceIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLastFlushedSequenceIdRequest& from);
  void MergeFrom(const GetLastFlushedSequenceIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes region_name = 1;
  inline bool has_region_name() const;
  inline void clear_region_name();
  static const int kRegionNameFieldNumber = 1;
  inline const ::std::string& region_name() const;
  inline void set_region_name(const ::std::string& value);
  inline void set_region_name(const char* value);
  inline void set_region_name(const void* value, size_t size);
  inline ::std::string* mutable_region_name();
  inline ::std::string* release_region_name();
  inline void set_allocated_region_name(::std::string* region_name);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetLastFlushedSequenceIdRequest)
 private:
  inline void set_has_region_name();
  inline void clear_has_region_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* region_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static GetLastFlushedSequenceIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetLastFlushedSequenceIdResponse : public ::google::protobuf::Message {
 public:
  GetLastFlushedSequenceIdResponse();
  virtual ~GetLastFlushedSequenceIdResponse();

  GetLastFlushedSequenceIdResponse(const GetLastFlushedSequenceIdResponse& from);

  inline GetLastFlushedSequenceIdResponse& operator=(const GetLastFlushedSequenceIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLastFlushedSequenceIdResponse& default_instance();

  void Swap(GetLastFlushedSequenceIdResponse* other);

  // implements Message ----------------------------------------------

  GetLastFlushedSequenceIdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLastFlushedSequenceIdResponse& from);
  void MergeFrom(const GetLastFlushedSequenceIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 last_flushed_sequence_id = 1;
  inline bool has_last_flushed_sequence_id() const;
  inline void clear_last_flushed_sequence_id();
  static const int kLastFlushedSequenceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 last_flushed_sequence_id() const;
  inline void set_last_flushed_sequence_id(::google::protobuf::uint64 value);

  // repeated .hbase.pb.StoreSequenceId store_last_flushed_sequence_id = 2;
  inline int store_last_flushed_sequence_id_size() const;
  inline void clear_store_last_flushed_sequence_id();
  static const int kStoreLastFlushedSequenceIdFieldNumber = 2;
  inline const ::hbase::pb::StoreSequenceId& store_last_flushed_sequence_id(int index) const;
  inline ::hbase::pb::StoreSequenceId* mutable_store_last_flushed_sequence_id(int index);
  inline ::hbase::pb::StoreSequenceId* add_store_last_flushed_sequence_id();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >&
      store_last_flushed_sequence_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >*
      mutable_store_last_flushed_sequence_id();

  // @@protoc_insertion_point(class_scope:hbase.pb.GetLastFlushedSequenceIdResponse)
 private:
  inline void set_has_last_flushed_sequence_id();
  inline void clear_has_last_flushed_sequence_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_flushed_sequence_id_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId > store_last_flushed_sequence_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static GetLastFlushedSequenceIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegionStateTransition : public ::google::protobuf::Message {
 public:
  RegionStateTransition();
  virtual ~RegionStateTransition();

  RegionStateTransition(const RegionStateTransition& from);

  inline RegionStateTransition& operator=(const RegionStateTransition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionStateTransition& default_instance();

  void Swap(RegionStateTransition* other);

  // implements Message ----------------------------------------------

  RegionStateTransition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionStateTransition& from);
  void MergeFrom(const RegionStateTransition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RegionStateTransition_TransitionCode TransitionCode;
  static const TransitionCode OPENED = RegionStateTransition_TransitionCode_OPENED;
  static const TransitionCode FAILED_OPEN = RegionStateTransition_TransitionCode_FAILED_OPEN;
  static const TransitionCode CLOSED = RegionStateTransition_TransitionCode_CLOSED;
  static const TransitionCode READY_TO_SPLIT = RegionStateTransition_TransitionCode_READY_TO_SPLIT;
  static const TransitionCode READY_TO_MERGE = RegionStateTransition_TransitionCode_READY_TO_MERGE;
  static const TransitionCode SPLIT_PONR = RegionStateTransition_TransitionCode_SPLIT_PONR;
  static const TransitionCode MERGE_PONR = RegionStateTransition_TransitionCode_MERGE_PONR;
  static const TransitionCode SPLIT = RegionStateTransition_TransitionCode_SPLIT;
  static const TransitionCode MERGED = RegionStateTransition_TransitionCode_MERGED;
  static const TransitionCode SPLIT_REVERTED = RegionStateTransition_TransitionCode_SPLIT_REVERTED;
  static const TransitionCode MERGE_REVERTED = RegionStateTransition_TransitionCode_MERGE_REVERTED;
  static inline bool TransitionCode_IsValid(int value) {
    return RegionStateTransition_TransitionCode_IsValid(value);
  }
  static const TransitionCode TransitionCode_MIN =
    RegionStateTransition_TransitionCode_TransitionCode_MIN;
  static const TransitionCode TransitionCode_MAX =
    RegionStateTransition_TransitionCode_TransitionCode_MAX;
  static const int TransitionCode_ARRAYSIZE =
    RegionStateTransition_TransitionCode_TransitionCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransitionCode_descriptor() {
    return RegionStateTransition_TransitionCode_descriptor();
  }
  static inline const ::std::string& TransitionCode_Name(TransitionCode value) {
    return RegionStateTransition_TransitionCode_Name(value);
  }
  static inline bool TransitionCode_Parse(const ::std::string& name,
      TransitionCode* value) {
    return RegionStateTransition_TransitionCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionStateTransition.TransitionCode transition_code = 1;
  inline bool has_transition_code() const;
  inline void clear_transition_code();
  static const int kTransitionCodeFieldNumber = 1;
  inline ::hbase::pb::RegionStateTransition_TransitionCode transition_code() const;
  inline void set_transition_code(::hbase::pb::RegionStateTransition_TransitionCode value);

  // repeated .hbase.pb.RegionInfo region_info = 2;
  inline int region_info_size() const;
  inline void clear_region_info();
  static const int kRegionInfoFieldNumber = 2;
  inline const ::hbase::pb::RegionInfo& region_info(int index) const;
  inline ::hbase::pb::RegionInfo* mutable_region_info(int index);
  inline ::hbase::pb::RegionInfo* add_region_info();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >&
      region_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >*
      mutable_region_info();

  // optional uint64 open_seq_num = 3;
  inline bool has_open_seq_num() const;
  inline void clear_open_seq_num();
  static const int kOpenSeqNumFieldNumber = 3;
  inline ::google::protobuf::uint64 open_seq_num() const;
  inline void set_open_seq_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionStateTransition)
 private:
  inline void set_has_transition_code();
  inline void clear_has_transition_code();
  inline void set_has_open_seq_num();
  inline void clear_has_open_seq_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo > region_info_;
  ::google::protobuf::uint64 open_seq_num_;
  int transition_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionStateTransition* default_instance_;
};
// -------------------------------------------------------------------

class ReportRegionStateTransitionRequest : public ::google::protobuf::Message {
 public:
  ReportRegionStateTransitionRequest();
  virtual ~ReportRegionStateTransitionRequest();

  ReportRegionStateTransitionRequest(const ReportRegionStateTransitionRequest& from);

  inline ReportRegionStateTransitionRequest& operator=(const ReportRegionStateTransitionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRegionStateTransitionRequest& default_instance();

  void Swap(ReportRegionStateTransitionRequest* other);

  // implements Message ----------------------------------------------

  ReportRegionStateTransitionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRegionStateTransitionRequest& from);
  void MergeFrom(const ReportRegionStateTransitionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ServerName server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::hbase::pb::ServerName& server() const;
  inline ::hbase::pb::ServerName* mutable_server();
  inline ::hbase::pb::ServerName* release_server();
  inline void set_allocated_server(::hbase::pb::ServerName* server);

  // repeated .hbase.pb.RegionStateTransition transition = 2;
  inline int transition_size() const;
  inline void clear_transition();
  static const int kTransitionFieldNumber = 2;
  inline const ::hbase::pb::RegionStateTransition& transition(int index) const;
  inline ::hbase::pb::RegionStateTransition* mutable_transition(int index);
  inline ::hbase::pb::RegionStateTransition* add_transition();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionStateTransition >&
      transition() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionStateTransition >*
      mutable_transition();

  // @@protoc_insertion_point(class_scope:hbase.pb.ReportRegionStateTransitionRequest)
 private:
  inline void set_has_server();
  inline void clear_has_server();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ServerName* server_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionStateTransition > transition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static ReportRegionStateTransitionRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportRegionStateTransitionResponse : public ::google::protobuf::Message {
 public:
  ReportRegionStateTransitionResponse();
  virtual ~ReportRegionStateTransitionResponse();

  ReportRegionStateTransitionResponse(const ReportRegionStateTransitionResponse& from);

  inline ReportRegionStateTransitionResponse& operator=(const ReportRegionStateTransitionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRegionStateTransitionResponse& default_instance();

  void Swap(ReportRegionStateTransitionResponse* other);

  // implements Message ----------------------------------------------

  ReportRegionStateTransitionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRegionStateTransitionResponse& from);
  void MergeFrom(const ReportRegionStateTransitionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_message = 1;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:hbase.pb.ReportRegionStateTransitionResponse)
 private:
  inline void set_has_error_message();
  inline void clear_has_error_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RegionServerStatus_2eproto();
  friend void protobuf_AssignDesc_RegionServerStatus_2eproto();
  friend void protobuf_ShutdownFile_RegionServerStatus_2eproto();

  void InitAsDefaultInstance();
  static ReportRegionStateTransitionResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RegionServerStartupRequest

// required uint32 port = 1;
inline bool RegionServerStartupRequest::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionServerStartupRequest::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionServerStartupRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionServerStartupRequest::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RegionServerStartupRequest::port() const {
  return port_;
}
inline void RegionServerStartupRequest::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 server_start_code = 2;
inline bool RegionServerStartupRequest::has_server_start_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionServerStartupRequest::set_has_server_start_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionServerStartupRequest::clear_has_server_start_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionServerStartupRequest::clear_server_start_code() {
  server_start_code_ = GOOGLE_ULONGLONG(0);
  clear_has_server_start_code();
}
inline ::google::protobuf::uint64 RegionServerStartupRequest::server_start_code() const {
  return server_start_code_;
}
inline void RegionServerStartupRequest::set_server_start_code(::google::protobuf::uint64 value) {
  set_has_server_start_code();
  server_start_code_ = value;
}

// required uint64 server_current_time = 3;
inline bool RegionServerStartupRequest::has_server_current_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionServerStartupRequest::set_has_server_current_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionServerStartupRequest::clear_has_server_current_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionServerStartupRequest::clear_server_current_time() {
  server_current_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_current_time();
}
inline ::google::protobuf::uint64 RegionServerStartupRequest::server_current_time() const {
  return server_current_time_;
}
inline void RegionServerStartupRequest::set_server_current_time(::google::protobuf::uint64 value) {
  set_has_server_current_time();
  server_current_time_ = value;
}

// optional string use_this_hostname_instead = 4;
inline bool RegionServerStartupRequest::has_use_this_hostname_instead() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionServerStartupRequest::set_has_use_this_hostname_instead() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionServerStartupRequest::clear_has_use_this_hostname_instead() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionServerStartupRequest::clear_use_this_hostname_instead() {
  if (use_this_hostname_instead_ != &::google::protobuf::internal::kEmptyString) {
    use_this_hostname_instead_->clear();
  }
  clear_has_use_this_hostname_instead();
}
inline const ::std::string& RegionServerStartupRequest::use_this_hostname_instead() const {
  return *use_this_hostname_instead_;
}
inline void RegionServerStartupRequest::set_use_this_hostname_instead(const ::std::string& value) {
  set_has_use_this_hostname_instead();
  if (use_this_hostname_instead_ == &::google::protobuf::internal::kEmptyString) {
    use_this_hostname_instead_ = new ::std::string;
  }
  use_this_hostname_instead_->assign(value);
}
inline void RegionServerStartupRequest::set_use_this_hostname_instead(const char* value) {
  set_has_use_this_hostname_instead();
  if (use_this_hostname_instead_ == &::google::protobuf::internal::kEmptyString) {
    use_this_hostname_instead_ = new ::std::string;
  }
  use_this_hostname_instead_->assign(value);
}
inline void RegionServerStartupRequest::set_use_this_hostname_instead(const char* value, size_t size) {
  set_has_use_this_hostname_instead();
  if (use_this_hostname_instead_ == &::google::protobuf::internal::kEmptyString) {
    use_this_hostname_instead_ = new ::std::string;
  }
  use_this_hostname_instead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegionServerStartupRequest::mutable_use_this_hostname_instead() {
  set_has_use_this_hostname_instead();
  if (use_this_hostname_instead_ == &::google::protobuf::internal::kEmptyString) {
    use_this_hostname_instead_ = new ::std::string;
  }
  return use_this_hostname_instead_;
}
inline ::std::string* RegionServerStartupRequest::release_use_this_hostname_instead() {
  clear_has_use_this_hostname_instead();
  if (use_this_hostname_instead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = use_this_hostname_instead_;
    use_this_hostname_instead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegionServerStartupRequest::set_allocated_use_this_hostname_instead(::std::string* use_this_hostname_instead) {
  if (use_this_hostname_instead_ != &::google::protobuf::internal::kEmptyString) {
    delete use_this_hostname_instead_;
  }
  if (use_this_hostname_instead) {
    set_has_use_this_hostname_instead();
    use_this_hostname_instead_ = use_this_hostname_instead;
  } else {
    clear_has_use_this_hostname_instead();
    use_this_hostname_instead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegionServerStartupResponse

// repeated .hbase.pb.NameStringPair map_entries = 1;
inline int RegionServerStartupResponse::map_entries_size() const {
  return map_entries_.size();
}
inline void RegionServerStartupResponse::clear_map_entries() {
  map_entries_.Clear();
}
inline const ::hbase::pb::NameStringPair& RegionServerStartupResponse::map_entries(int index) const {
  return map_entries_.Get(index);
}
inline ::hbase::pb::NameStringPair* RegionServerStartupResponse::mutable_map_entries(int index) {
  return map_entries_.Mutable(index);
}
inline ::hbase::pb::NameStringPair* RegionServerStartupResponse::add_map_entries() {
  return map_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::NameStringPair >&
RegionServerStartupResponse::map_entries() const {
  return map_entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::NameStringPair >*
RegionServerStartupResponse::mutable_map_entries() {
  return &map_entries_;
}

// -------------------------------------------------------------------

// RegionServerReportRequest

// required .hbase.pb.ServerName server = 1;
inline bool RegionServerReportRequest::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionServerReportRequest::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionServerReportRequest::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionServerReportRequest::clear_server() {
  if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
  clear_has_server();
}
inline const ::hbase::pb::ServerName& RegionServerReportRequest::server() const {
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::hbase::pb::ServerName* RegionServerReportRequest::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::hbase::pb::ServerName;
  return server_;
}
inline ::hbase::pb::ServerName* RegionServerReportRequest::release_server() {
  clear_has_server();
  ::hbase::pb::ServerName* temp = server_;
  server_ = NULL;
  return temp;
}
inline void RegionServerReportRequest::set_allocated_server(::hbase::pb::ServerName* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
}

// optional .hbase.pb.ServerLoad load = 2;
inline bool RegionServerReportRequest::has_load() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionServerReportRequest::set_has_load() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionServerReportRequest::clear_has_load() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionServerReportRequest::clear_load() {
  if (load_ != NULL) load_->::hbase::pb::ServerLoad::Clear();
  clear_has_load();
}
inline const ::hbase::pb::ServerLoad& RegionServerReportRequest::load() const {
  return load_ != NULL ? *load_ : *default_instance_->load_;
}
inline ::hbase::pb::ServerLoad* RegionServerReportRequest::mutable_load() {
  set_has_load();
  if (load_ == NULL) load_ = new ::hbase::pb::ServerLoad;
  return load_;
}
inline ::hbase::pb::ServerLoad* RegionServerReportRequest::release_load() {
  clear_has_load();
  ::hbase::pb::ServerLoad* temp = load_;
  load_ = NULL;
  return temp;
}
inline void RegionServerReportRequest::set_allocated_load(::hbase::pb::ServerLoad* load) {
  delete load_;
  load_ = load;
  if (load) {
    set_has_load();
  } else {
    clear_has_load();
  }
}

// -------------------------------------------------------------------

// RegionServerReportResponse

// -------------------------------------------------------------------

// ReportRSFatalErrorRequest

// required .hbase.pb.ServerName server = 1;
inline bool ReportRSFatalErrorRequest::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportRSFatalErrorRequest::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportRSFatalErrorRequest::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportRSFatalErrorRequest::clear_server() {
  if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
  clear_has_server();
}
inline const ::hbase::pb::ServerName& ReportRSFatalErrorRequest::server() const {
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::hbase::pb::ServerName* ReportRSFatalErrorRequest::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::hbase::pb::ServerName;
  return server_;
}
inline ::hbase::pb::ServerName* ReportRSFatalErrorRequest::release_server() {
  clear_has_server();
  ::hbase::pb::ServerName* temp = server_;
  server_ = NULL;
  return temp;
}
inline void ReportRSFatalErrorRequest::set_allocated_server(::hbase::pb::ServerName* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
}

// required string error_message = 2;
inline bool ReportRSFatalErrorRequest::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportRSFatalErrorRequest::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportRSFatalErrorRequest::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportRSFatalErrorRequest::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& ReportRSFatalErrorRequest::error_message() const {
  return *error_message_;
}
inline void ReportRSFatalErrorRequest::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ReportRSFatalErrorRequest::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ReportRSFatalErrorRequest::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportRSFatalErrorRequest::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* ReportRSFatalErrorRequest::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportRSFatalErrorRequest::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReportRSFatalErrorResponse

// -------------------------------------------------------------------

// GetLastFlushedSequenceIdRequest

// required bytes region_name = 1;
inline bool GetLastFlushedSequenceIdRequest::has_region_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastFlushedSequenceIdRequest::set_has_region_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastFlushedSequenceIdRequest::clear_has_region_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastFlushedSequenceIdRequest::clear_region_name() {
  if (region_name_ != &::google::protobuf::internal::kEmptyString) {
    region_name_->clear();
  }
  clear_has_region_name();
}
inline const ::std::string& GetLastFlushedSequenceIdRequest::region_name() const {
  return *region_name_;
}
inline void GetLastFlushedSequenceIdRequest::set_region_name(const ::std::string& value) {
  set_has_region_name();
  if (region_name_ == &::google::protobuf::internal::kEmptyString) {
    region_name_ = new ::std::string;
  }
  region_name_->assign(value);
}
inline void GetLastFlushedSequenceIdRequest::set_region_name(const char* value) {
  set_has_region_name();
  if (region_name_ == &::google::protobuf::internal::kEmptyString) {
    region_name_ = new ::std::string;
  }
  region_name_->assign(value);
}
inline void GetLastFlushedSequenceIdRequest::set_region_name(const void* value, size_t size) {
  set_has_region_name();
  if (region_name_ == &::google::protobuf::internal::kEmptyString) {
    region_name_ = new ::std::string;
  }
  region_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLastFlushedSequenceIdRequest::mutable_region_name() {
  set_has_region_name();
  if (region_name_ == &::google::protobuf::internal::kEmptyString) {
    region_name_ = new ::std::string;
  }
  return region_name_;
}
inline ::std::string* GetLastFlushedSequenceIdRequest::release_region_name() {
  clear_has_region_name();
  if (region_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_name_;
    region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetLastFlushedSequenceIdRequest::set_allocated_region_name(::std::string* region_name) {
  if (region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete region_name_;
  }
  if (region_name) {
    set_has_region_name();
    region_name_ = region_name;
  } else {
    clear_has_region_name();
    region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetLastFlushedSequenceIdResponse

// required uint64 last_flushed_sequence_id = 1;
inline bool GetLastFlushedSequenceIdResponse::has_last_flushed_sequence_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastFlushedSequenceIdResponse::set_has_last_flushed_sequence_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastFlushedSequenceIdResponse::clear_has_last_flushed_sequence_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastFlushedSequenceIdResponse::clear_last_flushed_sequence_id() {
  last_flushed_sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_last_flushed_sequence_id();
}
inline ::google::protobuf::uint64 GetLastFlushedSequenceIdResponse::last_flushed_sequence_id() const {
  return last_flushed_sequence_id_;
}
inline void GetLastFlushedSequenceIdResponse::set_last_flushed_sequence_id(::google::protobuf::uint64 value) {
  set_has_last_flushed_sequence_id();
  last_flushed_sequence_id_ = value;
}

// repeated .hbase.pb.StoreSequenceId store_last_flushed_sequence_id = 2;
inline int GetLastFlushedSequenceIdResponse::store_last_flushed_sequence_id_size() const {
  return store_last_flushed_sequence_id_.size();
}
inline void GetLastFlushedSequenceIdResponse::clear_store_last_flushed_sequence_id() {
  store_last_flushed_sequence_id_.Clear();
}
inline const ::hbase::pb::StoreSequenceId& GetLastFlushedSequenceIdResponse::store_last_flushed_sequence_id(int index) const {
  return store_last_flushed_sequence_id_.Get(index);
}
inline ::hbase::pb::StoreSequenceId* GetLastFlushedSequenceIdResponse::mutable_store_last_flushed_sequence_id(int index) {
  return store_last_flushed_sequence_id_.Mutable(index);
}
inline ::hbase::pb::StoreSequenceId* GetLastFlushedSequenceIdResponse::add_store_last_flushed_sequence_id() {
  return store_last_flushed_sequence_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >&
GetLastFlushedSequenceIdResponse::store_last_flushed_sequence_id() const {
  return store_last_flushed_sequence_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >*
GetLastFlushedSequenceIdResponse::mutable_store_last_flushed_sequence_id() {
  return &store_last_flushed_sequence_id_;
}

// -------------------------------------------------------------------

// RegionStateTransition

// required .hbase.pb.RegionStateTransition.TransitionCode transition_code = 1;
inline bool RegionStateTransition::has_transition_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionStateTransition::set_has_transition_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionStateTransition::clear_has_transition_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionStateTransition::clear_transition_code() {
  transition_code_ = 0;
  clear_has_transition_code();
}
inline ::hbase::pb::RegionStateTransition_TransitionCode RegionStateTransition::transition_code() const {
  return static_cast< ::hbase::pb::RegionStateTransition_TransitionCode >(transition_code_);
}
inline void RegionStateTransition::set_transition_code(::hbase::pb::RegionStateTransition_TransitionCode value) {
  assert(::hbase::pb::RegionStateTransition_TransitionCode_IsValid(value));
  set_has_transition_code();
  transition_code_ = value;
}

// repeated .hbase.pb.RegionInfo region_info = 2;
inline int RegionStateTransition::region_info_size() const {
  return region_info_.size();
}
inline void RegionStateTransition::clear_region_info() {
  region_info_.Clear();
}
inline const ::hbase::pb::RegionInfo& RegionStateTransition::region_info(int index) const {
  return region_info_.Get(index);
}
inline ::hbase::pb::RegionInfo* RegionStateTransition::mutable_region_info(int index) {
  return region_info_.Mutable(index);
}
inline ::hbase::pb::RegionInfo* RegionStateTransition::add_region_info() {
  return region_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >&
RegionStateTransition::region_info() const {
  return region_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >*
RegionStateTransition::mutable_region_info() {
  return &region_info_;
}

// optional uint64 open_seq_num = 3;
inline bool RegionStateTransition::has_open_seq_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionStateTransition::set_has_open_seq_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionStateTransition::clear_has_open_seq_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionStateTransition::clear_open_seq_num() {
  open_seq_num_ = GOOGLE_ULONGLONG(0);
  clear_has_open_seq_num();
}
inline ::google::protobuf::uint64 RegionStateTransition::open_seq_num() const {
  return open_seq_num_;
}
inline void RegionStateTransition::set_open_seq_num(::google::protobuf::uint64 value) {
  set_has_open_seq_num();
  open_seq_num_ = value;
}

// -------------------------------------------------------------------

// ReportRegionStateTransitionRequest

// required .hbase.pb.ServerName server = 1;
inline bool ReportRegionStateTransitionRequest::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportRegionStateTransitionRequest::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportRegionStateTransitionRequest::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportRegionStateTransitionRequest::clear_server() {
  if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
  clear_has_server();
}
inline const ::hbase::pb::ServerName& ReportRegionStateTransitionRequest::server() const {
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::hbase::pb::ServerName* ReportRegionStateTransitionRequest::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::hbase::pb::ServerName;
  return server_;
}
inline ::hbase::pb::ServerName* ReportRegionStateTransitionRequest::release_server() {
  clear_has_server();
  ::hbase::pb::ServerName* temp = server_;
  server_ = NULL;
  return temp;
}
inline void ReportRegionStateTransitionRequest::set_allocated_server(::hbase::pb::ServerName* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
}

// repeated .hbase.pb.RegionStateTransition transition = 2;
inline int ReportRegionStateTransitionRequest::transition_size() const {
  return transition_.size();
}
inline void ReportRegionStateTransitionRequest::clear_transition() {
  transition_.Clear();
}
inline const ::hbase::pb::RegionStateTransition& ReportRegionStateTransitionRequest::transition(int index) const {
  return transition_.Get(index);
}
inline ::hbase::pb::RegionStateTransition* ReportRegionStateTransitionRequest::mutable_transition(int index) {
  return transition_.Mutable(index);
}
inline ::hbase::pb::RegionStateTransition* ReportRegionStateTransitionRequest::add_transition() {
  return transition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionStateTransition >&
ReportRegionStateTransitionRequest::transition() const {
  return transition_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionStateTransition >*
ReportRegionStateTransitionRequest::mutable_transition() {
  return &transition_;
}

// -------------------------------------------------------------------

// ReportRegionStateTransitionResponse

// optional string error_message = 1;
inline bool ReportRegionStateTransitionResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportRegionStateTransitionResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportRegionStateTransitionResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportRegionStateTransitionResponse::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& ReportRegionStateTransitionResponse::error_message() const {
  return *error_message_;
}
inline void ReportRegionStateTransitionResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ReportRegionStateTransitionResponse::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ReportRegionStateTransitionResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportRegionStateTransitionResponse::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* ReportRegionStateTransitionResponse::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReportRegionStateTransitionResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::RegionStateTransition_TransitionCode>() {
  return ::hbase::pb::RegionStateTransition_TransitionCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RegionServerStatus_2eproto__INCLUDED
