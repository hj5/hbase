// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Quota.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Quota.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* TimedQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimedQuota_reflection_ = NULL;
const ::google::protobuf::Descriptor* Throttle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Throttle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThrottleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThrottleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quotas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quotas_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotaUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotaUsage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QuotaScope_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ThrottleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuotaType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Quota_2eproto() {
  protobuf_AddDesc_Quota_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Quota.proto");
  GOOGLE_CHECK(file != NULL);
  TimedQuota_descriptor_ = file->message_type(0);
  static const int TimedQuota_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedQuota, time_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedQuota, soft_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedQuota, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedQuota, scope_),
  };
  TimedQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimedQuota_descriptor_,
      TimedQuota::default_instance_,
      TimedQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimedQuota));
  Throttle_descriptor_ = file->message_type(1);
  static const int Throttle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, req_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, req_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, write_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, write_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, read_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, read_size_),
  };
  Throttle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Throttle_descriptor_,
      Throttle::default_instance_,
      Throttle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Throttle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Throttle));
  ThrottleRequest_descriptor_ = file->message_type(2);
  static const int ThrottleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrottleRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrottleRequest, timed_quota_),
  };
  ThrottleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThrottleRequest_descriptor_,
      ThrottleRequest::default_instance_,
      ThrottleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrottleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThrottleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThrottleRequest));
  Quotas_descriptor_ = file->message_type(3);
  static const int Quotas_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quotas, bypass_globals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quotas, throttle_),
  };
  Quotas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quotas_descriptor_,
      Quotas::default_instance_,
      Quotas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quotas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quotas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quotas));
  QuotaUsage_descriptor_ = file->message_type(4);
  static const int QuotaUsage_offsets_[1] = {
  };
  QuotaUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuotaUsage_descriptor_,
      QuotaUsage::default_instance_,
      QuotaUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuotaUsage));
  QuotaScope_descriptor_ = file->enum_type(0);
  ThrottleType_descriptor_ = file->enum_type(1);
  QuotaType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Quota_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimedQuota_descriptor_, &TimedQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Throttle_descriptor_, &Throttle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThrottleRequest_descriptor_, &ThrottleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quotas_descriptor_, &Quotas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuotaUsage_descriptor_, &QuotaUsage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Quota_2eproto() {
  delete TimedQuota::default_instance_;
  delete TimedQuota_reflection_;
  delete Throttle::default_instance_;
  delete Throttle_reflection_;
  delete ThrottleRequest::default_instance_;
  delete ThrottleRequest_reflection_;
  delete Quotas::default_instance_;
  delete Quotas_reflection_;
  delete QuotaUsage::default_instance_;
  delete QuotaUsage_reflection_;
}

void protobuf_AddDesc_Quota_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Quota.proto\022\010hbase.pb\032\013HBase.proto\"\204\001\n"
    "\nTimedQuota\022%\n\ttime_unit\030\001 \002(\0162\022.hbase.p"
    "b.TimeUnit\022\022\n\nsoft_limit\030\002 \001(\004\022\r\n\005share\030"
    "\003 \001(\002\022,\n\005scope\030\004 \001(\0162\024.hbase.pb.QuotaSco"
    "pe:\007MACHINE\"\375\001\n\010Throttle\022%\n\007req_num\030\001 \001("
    "\0132\024.hbase.pb.TimedQuota\022&\n\010req_size\030\002 \001("
    "\0132\024.hbase.pb.TimedQuota\022\'\n\twrite_num\030\003 \001"
    "(\0132\024.hbase.pb.TimedQuota\022(\n\nwrite_size\030\004"
    " \001(\0132\024.hbase.pb.TimedQuota\022&\n\010read_num\030\005"
    " \001(\0132\024.hbase.pb.TimedQuota\022\'\n\tread_size\030"
    "\006 \001(\0132\024.hbase.pb.TimedQuota\"b\n\017ThrottleR"
    "equest\022$\n\004type\030\001 \001(\0162\026.hbase.pb.Throttle"
    "Type\022)\n\013timed_quota\030\002 \001(\0132\024.hbase.pb.Tim"
    "edQuota\"M\n\006Quotas\022\035\n\016bypass_globals\030\001 \001("
    "\010:\005false\022$\n\010throttle\030\002 \001(\0132\022.hbase.pb.Th"
    "rottle\"\014\n\nQuotaUsage*&\n\nQuotaScope\022\013\n\007CL"
    "USTER\020\001\022\013\n\007MACHINE\020\002*v\n\014ThrottleType\022\022\n\016"
    "REQUEST_NUMBER\020\001\022\020\n\014REQUEST_SIZE\020\002\022\020\n\014WR"
    "ITE_NUMBER\020\003\022\016\n\nWRITE_SIZE\020\004\022\017\n\013READ_NUM"
    "BER\020\005\022\r\n\tREAD_SIZE\020\006*\031\n\tQuotaType\022\014\n\010THR"
    "OTTLE\020\001BA\n*org.apache.hadoop.hbase.proto"
    "buf.generatedB\013QuotaProtosH\001\210\001\001\240\001\001", 874);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Quota.proto", &protobuf_RegisterTypes);
  TimedQuota::default_instance_ = new TimedQuota();
  Throttle::default_instance_ = new Throttle();
  ThrottleRequest::default_instance_ = new ThrottleRequest();
  Quotas::default_instance_ = new Quotas();
  QuotaUsage::default_instance_ = new QuotaUsage();
  TimedQuota::default_instance_->InitAsDefaultInstance();
  Throttle::default_instance_->InitAsDefaultInstance();
  ThrottleRequest::default_instance_->InitAsDefaultInstance();
  Quotas::default_instance_->InitAsDefaultInstance();
  QuotaUsage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Quota_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Quota_2eproto {
  StaticDescriptorInitializer_Quota_2eproto() {
    protobuf_AddDesc_Quota_2eproto();
  }
} static_descriptor_initializer_Quota_2eproto_;
const ::google::protobuf::EnumDescriptor* QuotaScope_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaScope_descriptor_;
}
bool QuotaScope_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ThrottleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThrottleType_descriptor_;
}
bool ThrottleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuotaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaType_descriptor_;
}
bool QuotaType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TimedQuota::kTimeUnitFieldNumber;
const int TimedQuota::kSoftLimitFieldNumber;
const int TimedQuota::kShareFieldNumber;
const int TimedQuota::kScopeFieldNumber;
#endif  // !_MSC_VER

TimedQuota::TimedQuota()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimedQuota::InitAsDefaultInstance() {
}

TimedQuota::TimedQuota(const TimedQuota& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimedQuota::SharedCtor() {
  _cached_size_ = 0;
  time_unit_ = 1;
  soft_limit_ = GOOGLE_ULONGLONG(0);
  share_ = 0;
  scope_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimedQuota::~TimedQuota() {
  SharedDtor();
}

void TimedQuota::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimedQuota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimedQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimedQuota_descriptor_;
}

const TimedQuota& TimedQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quota_2eproto();
  return *default_instance_;
}

TimedQuota* TimedQuota::default_instance_ = NULL;

TimedQuota* TimedQuota::New() const {
  return new TimedQuota;
}

void TimedQuota::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_unit_ = 1;
    soft_limit_ = GOOGLE_ULONGLONG(0);
    share_ = 0;
    scope_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimedQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TimeUnit time_unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::TimeUnit_IsValid(value)) {
            set_time_unit(static_cast< ::hbase::pb::TimeUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soft_limit;
        break;
      }

      // optional uint64 soft_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soft_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &soft_limit_)));
          set_has_soft_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_share;
        break;
      }

      // optional float share = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &share_)));
          set_has_share();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scope;
        break;
      }

      // optional .hbase.pb.QuotaScope scope = 4 [default = MACHINE];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::QuotaScope_IsValid(value)) {
            set_scope(static_cast< ::hbase::pb::QuotaScope >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimedQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TimeUnit time_unit = 1;
  if (has_time_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->time_unit(), output);
  }

  // optional uint64 soft_limit = 2;
  if (has_soft_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->soft_limit(), output);
  }

  // optional float share = 3;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->share(), output);
  }

  // optional .hbase.pb.QuotaScope scope = 4 [default = MACHINE];
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scope(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimedQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TimeUnit time_unit = 1;
  if (has_time_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->time_unit(), target);
  }

  // optional uint64 soft_limit = 2;
  if (has_soft_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->soft_limit(), target);
  }

  // optional float share = 3;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->share(), target);
  }

  // optional .hbase.pb.QuotaScope scope = 4 [default = MACHINE];
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scope(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimedQuota::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TimeUnit time_unit = 1;
    if (has_time_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_unit());
    }

    // optional uint64 soft_limit = 2;
    if (has_soft_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->soft_limit());
    }

    // optional float share = 3;
    if (has_share()) {
      total_size += 1 + 4;
    }

    // optional .hbase.pb.QuotaScope scope = 4 [default = MACHINE];
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimedQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimedQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimedQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimedQuota::MergeFrom(const TimedQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_unit()) {
      set_time_unit(from.time_unit());
    }
    if (from.has_soft_limit()) {
      set_soft_limit(from.soft_limit());
    }
    if (from.has_share()) {
      set_share(from.share());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimedQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedQuota::CopyFrom(const TimedQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedQuota::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimedQuota::Swap(TimedQuota* other) {
  if (other != this) {
    std::swap(time_unit_, other->time_unit_);
    std::swap(soft_limit_, other->soft_limit_);
    std::swap(share_, other->share_);
    std::swap(scope_, other->scope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimedQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimedQuota_descriptor_;
  metadata.reflection = TimedQuota_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Throttle::kReqNumFieldNumber;
const int Throttle::kReqSizeFieldNumber;
const int Throttle::kWriteNumFieldNumber;
const int Throttle::kWriteSizeFieldNumber;
const int Throttle::kReadNumFieldNumber;
const int Throttle::kReadSizeFieldNumber;
#endif  // !_MSC_VER

Throttle::Throttle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Throttle::InitAsDefaultInstance() {
  req_num_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
  req_size_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
  write_num_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
  write_size_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
  read_num_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
  read_size_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
}

Throttle::Throttle(const Throttle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Throttle::SharedCtor() {
  _cached_size_ = 0;
  req_num_ = NULL;
  req_size_ = NULL;
  write_num_ = NULL;
  write_size_ = NULL;
  read_num_ = NULL;
  read_size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Throttle::~Throttle() {
  SharedDtor();
}

void Throttle::SharedDtor() {
  if (this != default_instance_) {
    delete req_num_;
    delete req_size_;
    delete write_num_;
    delete write_size_;
    delete read_num_;
    delete read_size_;
  }
}

void Throttle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Throttle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Throttle_descriptor_;
}

const Throttle& Throttle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quota_2eproto();
  return *default_instance_;
}

Throttle* Throttle::default_instance_ = NULL;

Throttle* Throttle::New() const {
  return new Throttle;
}

void Throttle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_num()) {
      if (req_num_ != NULL) req_num_->::hbase::pb::TimedQuota::Clear();
    }
    if (has_req_size()) {
      if (req_size_ != NULL) req_size_->::hbase::pb::TimedQuota::Clear();
    }
    if (has_write_num()) {
      if (write_num_ != NULL) write_num_->::hbase::pb::TimedQuota::Clear();
    }
    if (has_write_size()) {
      if (write_size_ != NULL) write_size_->::hbase::pb::TimedQuota::Clear();
    }
    if (has_read_num()) {
      if (read_num_ != NULL) read_num_->::hbase::pb::TimedQuota::Clear();
    }
    if (has_read_size()) {
      if (read_size_ != NULL) read_size_->::hbase::pb::TimedQuota::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Throttle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.TimedQuota req_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req_size;
        break;
      }

      // optional .hbase.pb.TimedQuota req_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_write_num;
        break;
      }

      // optional .hbase.pb.TimedQuota write_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_write_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_write_size;
        break;
      }

      // optional .hbase.pb.TimedQuota write_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_write_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_read_num;
        break;
      }

      // optional .hbase.pb.TimedQuota read_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_read_size;
        break;
      }

      // optional .hbase.pb.TimedQuota read_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Throttle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.TimedQuota req_num = 1;
  if (has_req_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req_num(), output);
  }

  // optional .hbase.pb.TimedQuota req_size = 2;
  if (has_req_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req_size(), output);
  }

  // optional .hbase.pb.TimedQuota write_num = 3;
  if (has_write_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->write_num(), output);
  }

  // optional .hbase.pb.TimedQuota write_size = 4;
  if (has_write_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->write_size(), output);
  }

  // optional .hbase.pb.TimedQuota read_num = 5;
  if (has_read_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read_num(), output);
  }

  // optional .hbase.pb.TimedQuota read_size = 6;
  if (has_read_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->read_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Throttle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.TimedQuota req_num = 1;
  if (has_req_num()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req_num(), target);
  }

  // optional .hbase.pb.TimedQuota req_size = 2;
  if (has_req_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req_size(), target);
  }

  // optional .hbase.pb.TimedQuota write_num = 3;
  if (has_write_num()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->write_num(), target);
  }

  // optional .hbase.pb.TimedQuota write_size = 4;
  if (has_write_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->write_size(), target);
  }

  // optional .hbase.pb.TimedQuota read_num = 5;
  if (has_read_num()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read_num(), target);
  }

  // optional .hbase.pb.TimedQuota read_size = 6;
  if (has_read_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->read_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Throttle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.TimedQuota req_num = 1;
    if (has_req_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req_num());
    }

    // optional .hbase.pb.TimedQuota req_size = 2;
    if (has_req_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req_size());
    }

    // optional .hbase.pb.TimedQuota write_num = 3;
    if (has_write_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_num());
    }

    // optional .hbase.pb.TimedQuota write_size = 4;
    if (has_write_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->write_size());
    }

    // optional .hbase.pb.TimedQuota read_num = 5;
    if (has_read_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_num());
    }

    // optional .hbase.pb.TimedQuota read_size = 6;
    if (has_read_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Throttle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Throttle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Throttle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Throttle::MergeFrom(const Throttle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_num()) {
      mutable_req_num()->::hbase::pb::TimedQuota::MergeFrom(from.req_num());
    }
    if (from.has_req_size()) {
      mutable_req_size()->::hbase::pb::TimedQuota::MergeFrom(from.req_size());
    }
    if (from.has_write_num()) {
      mutable_write_num()->::hbase::pb::TimedQuota::MergeFrom(from.write_num());
    }
    if (from.has_write_size()) {
      mutable_write_size()->::hbase::pb::TimedQuota::MergeFrom(from.write_size());
    }
    if (from.has_read_num()) {
      mutable_read_num()->::hbase::pb::TimedQuota::MergeFrom(from.read_num());
    }
    if (from.has_read_size()) {
      mutable_read_size()->::hbase::pb::TimedQuota::MergeFrom(from.read_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Throttle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Throttle::CopyFrom(const Throttle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle::IsInitialized() const {

  if (has_req_num()) {
    if (!this->req_num().IsInitialized()) return false;
  }
  if (has_req_size()) {
    if (!this->req_size().IsInitialized()) return false;
  }
  if (has_write_num()) {
    if (!this->write_num().IsInitialized()) return false;
  }
  if (has_write_size()) {
    if (!this->write_size().IsInitialized()) return false;
  }
  if (has_read_num()) {
    if (!this->read_num().IsInitialized()) return false;
  }
  if (has_read_size()) {
    if (!this->read_size().IsInitialized()) return false;
  }
  return true;
}

void Throttle::Swap(Throttle* other) {
  if (other != this) {
    std::swap(req_num_, other->req_num_);
    std::swap(req_size_, other->req_size_);
    std::swap(write_num_, other->write_num_);
    std::swap(write_size_, other->write_size_);
    std::swap(read_num_, other->read_num_);
    std::swap(read_size_, other->read_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Throttle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Throttle_descriptor_;
  metadata.reflection = Throttle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThrottleRequest::kTypeFieldNumber;
const int ThrottleRequest::kTimedQuotaFieldNumber;
#endif  // !_MSC_VER

ThrottleRequest::ThrottleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThrottleRequest::InitAsDefaultInstance() {
  timed_quota_ = const_cast< ::hbase::pb::TimedQuota*>(&::hbase::pb::TimedQuota::default_instance());
}

ThrottleRequest::ThrottleRequest(const ThrottleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThrottleRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  timed_quota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThrottleRequest::~ThrottleRequest() {
  SharedDtor();
}

void ThrottleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete timed_quota_;
  }
}

void ThrottleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThrottleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThrottleRequest_descriptor_;
}

const ThrottleRequest& ThrottleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quota_2eproto();
  return *default_instance_;
}

ThrottleRequest* ThrottleRequest::default_instance_ = NULL;

ThrottleRequest* ThrottleRequest::New() const {
  return new ThrottleRequest;
}

void ThrottleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_timed_quota()) {
      if (timed_quota_ != NULL) timed_quota_->::hbase::pb::TimedQuota::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThrottleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.ThrottleType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::ThrottleType_IsValid(value)) {
            set_type(static_cast< ::hbase::pb::ThrottleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timed_quota;
        break;
      }

      // optional .hbase.pb.TimedQuota timed_quota = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timed_quota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timed_quota()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThrottleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.ThrottleType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .hbase.pb.TimedQuota timed_quota = 2;
  if (has_timed_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timed_quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThrottleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.ThrottleType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .hbase.pb.TimedQuota timed_quota = 2;
  if (has_timed_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timed_quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThrottleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.ThrottleType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .hbase.pb.TimedQuota timed_quota = 2;
    if (has_timed_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timed_quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThrottleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThrottleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThrottleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThrottleRequest::MergeFrom(const ThrottleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timed_quota()) {
      mutable_timed_quota()->::hbase::pb::TimedQuota::MergeFrom(from.timed_quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThrottleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThrottleRequest::CopyFrom(const ThrottleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleRequest::IsInitialized() const {

  if (has_timed_quota()) {
    if (!this->timed_quota().IsInitialized()) return false;
  }
  return true;
}

void ThrottleRequest::Swap(ThrottleRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(timed_quota_, other->timed_quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThrottleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThrottleRequest_descriptor_;
  metadata.reflection = ThrottleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quotas::kBypassGlobalsFieldNumber;
const int Quotas::kThrottleFieldNumber;
#endif  // !_MSC_VER

Quotas::Quotas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quotas::InitAsDefaultInstance() {
  throttle_ = const_cast< ::hbase::pb::Throttle*>(&::hbase::pb::Throttle::default_instance());
}

Quotas::Quotas(const Quotas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quotas::SharedCtor() {
  _cached_size_ = 0;
  bypass_globals_ = false;
  throttle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quotas::~Quotas() {
  SharedDtor();
}

void Quotas::SharedDtor() {
  if (this != default_instance_) {
    delete throttle_;
  }
}

void Quotas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quotas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quotas_descriptor_;
}

const Quotas& Quotas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quota_2eproto();
  return *default_instance_;
}

Quotas* Quotas::default_instance_ = NULL;

Quotas* Quotas::New() const {
  return new Quotas;
}

void Quotas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bypass_globals_ = false;
    if (has_throttle()) {
      if (throttle_ != NULL) throttle_->::hbase::pb::Throttle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quotas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bypass_globals = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bypass_globals_)));
          set_has_bypass_globals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_throttle;
        break;
      }

      // optional .hbase.pb.Throttle throttle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_throttle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quotas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bypass_globals = 1 [default = false];
  if (has_bypass_globals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bypass_globals(), output);
  }

  // optional .hbase.pb.Throttle throttle = 2;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->throttle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quotas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bypass_globals = 1 [default = false];
  if (has_bypass_globals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bypass_globals(), target);
  }

  // optional .hbase.pb.Throttle throttle = 2;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->throttle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quotas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bypass_globals = 1 [default = false];
    if (has_bypass_globals()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.Throttle throttle = 2;
    if (has_throttle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->throttle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quotas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quotas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quotas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quotas::MergeFrom(const Quotas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bypass_globals()) {
      set_bypass_globals(from.bypass_globals());
    }
    if (from.has_throttle()) {
      mutable_throttle()->::hbase::pb::Throttle::MergeFrom(from.throttle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quotas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quotas::CopyFrom(const Quotas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quotas::IsInitialized() const {

  if (has_throttle()) {
    if (!this->throttle().IsInitialized()) return false;
  }
  return true;
}

void Quotas::Swap(Quotas* other) {
  if (other != this) {
    std::swap(bypass_globals_, other->bypass_globals_);
    std::swap(throttle_, other->throttle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quotas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quotas_descriptor_;
  metadata.reflection = Quotas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuotaUsage::QuotaUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuotaUsage::InitAsDefaultInstance() {
}

QuotaUsage::QuotaUsage(const QuotaUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuotaUsage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuotaUsage::~QuotaUsage() {
  SharedDtor();
}

void QuotaUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuotaUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotaUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotaUsage_descriptor_;
}

const QuotaUsage& QuotaUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quota_2eproto();
  return *default_instance_;
}

QuotaUsage* QuotaUsage::default_instance_ = NULL;

QuotaUsage* QuotaUsage::New() const {
  return new QuotaUsage;
}

void QuotaUsage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuotaUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuotaUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuotaUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuotaUsage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotaUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuotaUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuotaUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuotaUsage::MergeFrom(const QuotaUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuotaUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaUsage::CopyFrom(const QuotaUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaUsage::IsInitialized() const {

  return true;
}

void QuotaUsage::Swap(QuotaUsage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuotaUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotaUsage_descriptor_;
  metadata.reflection = QuotaUsage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
