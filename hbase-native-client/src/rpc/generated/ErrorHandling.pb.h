// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorHandling.proto

#ifndef PROTOBUF_ErrorHandling_2eproto__INCLUDED
#define PROTOBUF_ErrorHandling_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ErrorHandling_2eproto();
void protobuf_AssignDesc_ErrorHandling_2eproto();
void protobuf_ShutdownFile_ErrorHandling_2eproto();

class StackTraceElementMessage;
class GenericExceptionMessage;
class ForeignExceptionMessage;

// ===================================================================

class StackTraceElementMessage : public ::google::protobuf::Message {
 public:
  StackTraceElementMessage();
  virtual ~StackTraceElementMessage();

  StackTraceElementMessage(const StackTraceElementMessage& from);

  inline StackTraceElementMessage& operator=(const StackTraceElementMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StackTraceElementMessage& default_instance();

  void Swap(StackTraceElementMessage* other);

  // implements Message ----------------------------------------------

  StackTraceElementMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StackTraceElementMessage& from);
  void MergeFrom(const StackTraceElementMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string declaring_class = 1;
  inline bool has_declaring_class() const;
  inline void clear_declaring_class();
  static const int kDeclaringClassFieldNumber = 1;
  inline const ::std::string& declaring_class() const;
  inline void set_declaring_class(const ::std::string& value);
  inline void set_declaring_class(const char* value);
  inline void set_declaring_class(const char* value, size_t size);
  inline ::std::string* mutable_declaring_class();
  inline ::std::string* release_declaring_class();
  inline void set_allocated_declaring_class(::std::string* declaring_class);

  // optional string method_name = 2;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  inline void set_allocated_method_name(::std::string* method_name);

  // optional string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional int32 line_number = 4;
  inline bool has_line_number() const;
  inline void clear_line_number();
  static const int kLineNumberFieldNumber = 4;
  inline ::google::protobuf::int32 line_number() const;
  inline void set_line_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.StackTraceElementMessage)
 private:
  inline void set_has_declaring_class();
  inline void clear_has_declaring_class();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_line_number();
  inline void clear_has_line_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* declaring_class_;
  ::std::string* method_name_;
  ::std::string* file_name_;
  ::google::protobuf::int32 line_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ErrorHandling_2eproto();
  friend void protobuf_AssignDesc_ErrorHandling_2eproto();
  friend void protobuf_ShutdownFile_ErrorHandling_2eproto();

  void InitAsDefaultInstance();
  static StackTraceElementMessage* default_instance_;
};
// -------------------------------------------------------------------

class GenericExceptionMessage : public ::google::protobuf::Message {
 public:
  GenericExceptionMessage();
  virtual ~GenericExceptionMessage();

  GenericExceptionMessage(const GenericExceptionMessage& from);

  inline GenericExceptionMessage& operator=(const GenericExceptionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericExceptionMessage& default_instance();

  void Swap(GenericExceptionMessage* other);

  // implements Message ----------------------------------------------

  GenericExceptionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericExceptionMessage& from);
  void MergeFrom(const GenericExceptionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string class_name = 1;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 1;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional bytes error_info = 3;
  inline bool has_error_info() const;
  inline void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  inline const ::std::string& error_info() const;
  inline void set_error_info(const ::std::string& value);
  inline void set_error_info(const char* value);
  inline void set_error_info(const void* value, size_t size);
  inline ::std::string* mutable_error_info();
  inline ::std::string* release_error_info();
  inline void set_allocated_error_info(::std::string* error_info);

  // repeated .hbase.pb.StackTraceElementMessage trace = 4;
  inline int trace_size() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 4;
  inline const ::hbase::pb::StackTraceElementMessage& trace(int index) const;
  inline ::hbase::pb::StackTraceElementMessage* mutable_trace(int index);
  inline ::hbase::pb::StackTraceElementMessage* add_trace();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >&
      trace() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >*
      mutable_trace();

  // @@protoc_insertion_point(class_scope:hbase.pb.GenericExceptionMessage)
 private:
  inline void set_has_class_name();
  inline void clear_has_class_name();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_error_info();
  inline void clear_has_error_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_name_;
  ::std::string* message_;
  ::std::string* error_info_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage > trace_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ErrorHandling_2eproto();
  friend void protobuf_AssignDesc_ErrorHandling_2eproto();
  friend void protobuf_ShutdownFile_ErrorHandling_2eproto();

  void InitAsDefaultInstance();
  static GenericExceptionMessage* default_instance_;
};
// -------------------------------------------------------------------

class ForeignExceptionMessage : public ::google::protobuf::Message {
 public:
  ForeignExceptionMessage();
  virtual ~ForeignExceptionMessage();

  ForeignExceptionMessage(const ForeignExceptionMessage& from);

  inline ForeignExceptionMessage& operator=(const ForeignExceptionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForeignExceptionMessage& default_instance();

  void Swap(ForeignExceptionMessage* other);

  // implements Message ----------------------------------------------

  ForeignExceptionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForeignExceptionMessage& from);
  void MergeFrom(const ForeignExceptionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
  inline bool has_generic_exception() const;
  inline void clear_generic_exception();
  static const int kGenericExceptionFieldNumber = 2;
  inline const ::hbase::pb::GenericExceptionMessage& generic_exception() const;
  inline ::hbase::pb::GenericExceptionMessage* mutable_generic_exception();
  inline ::hbase::pb::GenericExceptionMessage* release_generic_exception();
  inline void set_allocated_generic_exception(::hbase::pb::GenericExceptionMessage* generic_exception);

  // @@protoc_insertion_point(class_scope:hbase.pb.ForeignExceptionMessage)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_generic_exception();
  inline void clear_has_generic_exception();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* source_;
  ::hbase::pb::GenericExceptionMessage* generic_exception_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ErrorHandling_2eproto();
  friend void protobuf_AssignDesc_ErrorHandling_2eproto();
  friend void protobuf_ShutdownFile_ErrorHandling_2eproto();

  void InitAsDefaultInstance();
  static ForeignExceptionMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// StackTraceElementMessage

// optional string declaring_class = 1;
inline bool StackTraceElementMessage::has_declaring_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StackTraceElementMessage::set_has_declaring_class() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StackTraceElementMessage::clear_has_declaring_class() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StackTraceElementMessage::clear_declaring_class() {
  if (declaring_class_ != &::google::protobuf::internal::kEmptyString) {
    declaring_class_->clear();
  }
  clear_has_declaring_class();
}
inline const ::std::string& StackTraceElementMessage::declaring_class() const {
  return *declaring_class_;
}
inline void StackTraceElementMessage::set_declaring_class(const ::std::string& value) {
  set_has_declaring_class();
  if (declaring_class_ == &::google::protobuf::internal::kEmptyString) {
    declaring_class_ = new ::std::string;
  }
  declaring_class_->assign(value);
}
inline void StackTraceElementMessage::set_declaring_class(const char* value) {
  set_has_declaring_class();
  if (declaring_class_ == &::google::protobuf::internal::kEmptyString) {
    declaring_class_ = new ::std::string;
  }
  declaring_class_->assign(value);
}
inline void StackTraceElementMessage::set_declaring_class(const char* value, size_t size) {
  set_has_declaring_class();
  if (declaring_class_ == &::google::protobuf::internal::kEmptyString) {
    declaring_class_ = new ::std::string;
  }
  declaring_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StackTraceElementMessage::mutable_declaring_class() {
  set_has_declaring_class();
  if (declaring_class_ == &::google::protobuf::internal::kEmptyString) {
    declaring_class_ = new ::std::string;
  }
  return declaring_class_;
}
inline ::std::string* StackTraceElementMessage::release_declaring_class() {
  clear_has_declaring_class();
  if (declaring_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaring_class_;
    declaring_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StackTraceElementMessage::set_allocated_declaring_class(::std::string* declaring_class) {
  if (declaring_class_ != &::google::protobuf::internal::kEmptyString) {
    delete declaring_class_;
  }
  if (declaring_class) {
    set_has_declaring_class();
    declaring_class_ = declaring_class;
  } else {
    clear_has_declaring_class();
    declaring_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string method_name = 2;
inline bool StackTraceElementMessage::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StackTraceElementMessage::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StackTraceElementMessage::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StackTraceElementMessage::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& StackTraceElementMessage::method_name() const {
  return *method_name_;
}
inline void StackTraceElementMessage::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void StackTraceElementMessage::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void StackTraceElementMessage::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StackTraceElementMessage::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* StackTraceElementMessage::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StackTraceElementMessage::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string file_name = 3;
inline bool StackTraceElementMessage::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StackTraceElementMessage::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StackTraceElementMessage::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StackTraceElementMessage::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& StackTraceElementMessage::file_name() const {
  return *file_name_;
}
inline void StackTraceElementMessage::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void StackTraceElementMessage::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void StackTraceElementMessage::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StackTraceElementMessage::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* StackTraceElementMessage::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StackTraceElementMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 line_number = 4;
inline bool StackTraceElementMessage::has_line_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StackTraceElementMessage::set_has_line_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StackTraceElementMessage::clear_has_line_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StackTraceElementMessage::clear_line_number() {
  line_number_ = 0;
  clear_has_line_number();
}
inline ::google::protobuf::int32 StackTraceElementMessage::line_number() const {
  return line_number_;
}
inline void StackTraceElementMessage::set_line_number(::google::protobuf::int32 value) {
  set_has_line_number();
  line_number_ = value;
}

// -------------------------------------------------------------------

// GenericExceptionMessage

// optional string class_name = 1;
inline bool GenericExceptionMessage::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericExceptionMessage::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericExceptionMessage::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericExceptionMessage::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& GenericExceptionMessage::class_name() const {
  return *class_name_;
}
inline void GenericExceptionMessage::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void GenericExceptionMessage::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void GenericExceptionMessage::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenericExceptionMessage::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* GenericExceptionMessage::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenericExceptionMessage::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string message = 2;
inline bool GenericExceptionMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericExceptionMessage::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericExceptionMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericExceptionMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& GenericExceptionMessage::message() const {
  return *message_;
}
inline void GenericExceptionMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void GenericExceptionMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void GenericExceptionMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenericExceptionMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* GenericExceptionMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenericExceptionMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes error_info = 3;
inline bool GenericExceptionMessage::has_error_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericExceptionMessage::set_has_error_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenericExceptionMessage::clear_has_error_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenericExceptionMessage::clear_error_info() {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    error_info_->clear();
  }
  clear_has_error_info();
}
inline const ::std::string& GenericExceptionMessage::error_info() const {
  return *error_info_;
}
inline void GenericExceptionMessage::set_error_info(const ::std::string& value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void GenericExceptionMessage::set_error_info(const char* value) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(value);
}
inline void GenericExceptionMessage::set_error_info(const void* value, size_t size) {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  error_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenericExceptionMessage::mutable_error_info() {
  set_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    error_info_ = new ::std::string;
  }
  return error_info_;
}
inline ::std::string* GenericExceptionMessage::release_error_info() {
  clear_has_error_info();
  if (error_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_info_;
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenericExceptionMessage::set_allocated_error_info(::std::string* error_info) {
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    delete error_info_;
  }
  if (error_info) {
    set_has_error_info();
    error_info_ = error_info;
  } else {
    clear_has_error_info();
    error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .hbase.pb.StackTraceElementMessage trace = 4;
inline int GenericExceptionMessage::trace_size() const {
  return trace_.size();
}
inline void GenericExceptionMessage::clear_trace() {
  trace_.Clear();
}
inline const ::hbase::pb::StackTraceElementMessage& GenericExceptionMessage::trace(int index) const {
  return trace_.Get(index);
}
inline ::hbase::pb::StackTraceElementMessage* GenericExceptionMessage::mutable_trace(int index) {
  return trace_.Mutable(index);
}
inline ::hbase::pb::StackTraceElementMessage* GenericExceptionMessage::add_trace() {
  return trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >&
GenericExceptionMessage::trace() const {
  return trace_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >*
GenericExceptionMessage::mutable_trace() {
  return &trace_;
}

// -------------------------------------------------------------------

// ForeignExceptionMessage

// optional string source = 1;
inline bool ForeignExceptionMessage::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForeignExceptionMessage::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForeignExceptionMessage::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForeignExceptionMessage::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& ForeignExceptionMessage::source() const {
  return *source_;
}
inline void ForeignExceptionMessage::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ForeignExceptionMessage::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ForeignExceptionMessage::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForeignExceptionMessage::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* ForeignExceptionMessage::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ForeignExceptionMessage::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
inline bool ForeignExceptionMessage::has_generic_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForeignExceptionMessage::set_has_generic_exception() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForeignExceptionMessage::clear_has_generic_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForeignExceptionMessage::clear_generic_exception() {
  if (generic_exception_ != NULL) generic_exception_->::hbase::pb::GenericExceptionMessage::Clear();
  clear_has_generic_exception();
}
inline const ::hbase::pb::GenericExceptionMessage& ForeignExceptionMessage::generic_exception() const {
  return generic_exception_ != NULL ? *generic_exception_ : *default_instance_->generic_exception_;
}
inline ::hbase::pb::GenericExceptionMessage* ForeignExceptionMessage::mutable_generic_exception() {
  set_has_generic_exception();
  if (generic_exception_ == NULL) generic_exception_ = new ::hbase::pb::GenericExceptionMessage;
  return generic_exception_;
}
inline ::hbase::pb::GenericExceptionMessage* ForeignExceptionMessage::release_generic_exception() {
  clear_has_generic_exception();
  ::hbase::pb::GenericExceptionMessage* temp = generic_exception_;
  generic_exception_ = NULL;
  return temp;
}
inline void ForeignExceptionMessage::set_allocated_generic_exception(::hbase::pb::GenericExceptionMessage* generic_exception) {
  delete generic_exception_;
  generic_exception_ = generic_exception;
  if (generic_exception) {
    set_has_generic_exception();
  } else {
    clear_has_generic_exception();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ErrorHandling_2eproto__INCLUDED
