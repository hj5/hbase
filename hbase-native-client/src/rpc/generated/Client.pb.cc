// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* Authorizations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Authorizations_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellVisibility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellVisibility_reflection_ = NULL;
const ::google::protobuf::Descriptor* Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Column_reflection_ = NULL;
const ::google::protobuf::Descriptor* Get_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Get_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Condition_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutationProto_ColumnValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationProto_ColumnValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutationProto_ColumnValue_QualifierValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationProto_ColumnValue_QualifierValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MutationProto_Durability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MutationProto_MutationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MutationProto_DeleteType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MutateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulkLoadHFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkLoadHFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulkLoadHFileRequest_FamilyPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkLoadHFileRequest_FamilyPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulkLoadHFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkLoadHFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoprocessorServiceCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoprocessorServiceCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoprocessorServiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoprocessorServiceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoprocessorServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoprocessorServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoprocessorServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoprocessorServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLoadStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLoadStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiRegionLoadStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRegionLoadStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultOrException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultOrException_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionActionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionActionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Consistency_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Client_2eproto() {
  protobuf_AddDesc_Client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Client.proto");
  GOOGLE_CHECK(file != NULL);
  Authorizations_descriptor_ = file->message_type(0);
  static const int Authorizations_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authorizations, label_),
  };
  Authorizations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Authorizations_descriptor_,
      Authorizations::default_instance_,
      Authorizations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authorizations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authorizations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Authorizations));
  CellVisibility_descriptor_ = file->message_type(1);
  static const int CellVisibility_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVisibility, expression_),
  };
  CellVisibility_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellVisibility_descriptor_,
      CellVisibility::default_instance_,
      CellVisibility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVisibility, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVisibility, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellVisibility));
  Column_descriptor_ = file->message_type(2);
  static const int Column_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, qualifier_),
  };
  Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Column_descriptor_,
      Column::default_instance_,
      Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Column));
  Get_descriptor_ = file->message_type(3);
  static const int Get_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, time_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, max_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, cache_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, store_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, store_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, existence_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, consistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, cf_time_range_),
  };
  Get_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Get_descriptor_,
      Get::default_instance_,
      Get_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Get));
  Result_descriptor_ = file->message_type(4);
  static const int Result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, associated_cell_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, stale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, partial_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  GetRequest_descriptor_ = file->message_type(5);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, get_),
  };
  GetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRequest));
  GetResponse_descriptor_ = file->message_type(6);
  static const int GetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, result_),
  };
  GetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetResponse));
  Condition_descriptor_ = file->message_type(7);
  static const int Condition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, compare_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, comparator_),
  };
  Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Condition_descriptor_,
      Condition::default_instance_,
      Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Condition));
  MutationProto_descriptor_ = file->message_type(8);
  static const int MutationProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, mutate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, column_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, time_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, associated_cell_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, nonce_),
  };
  MutationProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutationProto_descriptor_,
      MutationProto::default_instance_,
      MutationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutationProto));
  MutationProto_ColumnValue_descriptor_ = MutationProto_descriptor_->nested_type(0);
  static const int MutationProto_ColumnValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue, qualifier_value_),
  };
  MutationProto_ColumnValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutationProto_ColumnValue_descriptor_,
      MutationProto_ColumnValue::default_instance_,
      MutationProto_ColumnValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutationProto_ColumnValue));
  MutationProto_ColumnValue_QualifierValue_descriptor_ = MutationProto_ColumnValue_descriptor_->nested_type(0);
  static const int MutationProto_ColumnValue_QualifierValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, delete_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, tags_),
  };
  MutationProto_ColumnValue_QualifierValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutationProto_ColumnValue_QualifierValue_descriptor_,
      MutationProto_ColumnValue_QualifierValue::default_instance_,
      MutationProto_ColumnValue_QualifierValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationProto_ColumnValue_QualifierValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutationProto_ColumnValue_QualifierValue));
  MutationProto_Durability_descriptor_ = MutationProto_descriptor_->enum_type(0);
  MutationProto_MutationType_descriptor_ = MutationProto_descriptor_->enum_type(1);
  MutationProto_DeleteType_descriptor_ = MutationProto_descriptor_->enum_type(2);
  MutateRequest_descriptor_ = file->message_type(9);
  static const int MutateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRequest, mutation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRequest, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRequest, nonce_group_),
  };
  MutateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutateRequest_descriptor_,
      MutateRequest::default_instance_,
      MutateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutateRequest));
  MutateResponse_descriptor_ = file->message_type(10);
  static const int MutateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateResponse, processed_),
  };
  MutateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutateResponse_descriptor_,
      MutateResponse::default_instance_,
      MutateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutateResponse));
  Scan_descriptor_ = file->message_type(11);
  static const int Scan_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, start_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, stop_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, time_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, max_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, cache_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, max_result_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, store_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, store_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, load_column_families_on_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, reversed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, consistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, caching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, allow_partial_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, cf_time_range_),
  };
  Scan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scan_descriptor_,
      Scan::default_instance_,
      Scan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scan));
  ScanRequest_descriptor_ = file->message_type(12);
  static const int ScanRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, scanner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, number_of_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, close_scanner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, next_call_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, client_handles_partials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, client_handles_heartbeats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, track_scan_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, renew_),
  };
  ScanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanRequest_descriptor_,
      ScanRequest::default_instance_,
      ScanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanRequest));
  ScanResponse_descriptor_ = file->message_type(13);
  static const int ScanResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, cells_per_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, scanner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, more_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, stale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, partial_flag_per_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, more_results_in_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, heartbeat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, scan_metrics_),
  };
  ScanResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanResponse_descriptor_,
      ScanResponse::default_instance_,
      ScanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanResponse));
  BulkLoadHFileRequest_descriptor_ = file->message_type(14);
  static const int BulkLoadHFileRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest, family_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest, assign_seq_num_),
  };
  BulkLoadHFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulkLoadHFileRequest_descriptor_,
      BulkLoadHFileRequest::default_instance_,
      BulkLoadHFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulkLoadHFileRequest));
  BulkLoadHFileRequest_FamilyPath_descriptor_ = BulkLoadHFileRequest_descriptor_->nested_type(0);
  static const int BulkLoadHFileRequest_FamilyPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest_FamilyPath, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest_FamilyPath, path_),
  };
  BulkLoadHFileRequest_FamilyPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulkLoadHFileRequest_FamilyPath_descriptor_,
      BulkLoadHFileRequest_FamilyPath::default_instance_,
      BulkLoadHFileRequest_FamilyPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest_FamilyPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileRequest_FamilyPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulkLoadHFileRequest_FamilyPath));
  BulkLoadHFileResponse_descriptor_ = file->message_type(15);
  static const int BulkLoadHFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileResponse, loaded_),
  };
  BulkLoadHFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulkLoadHFileResponse_descriptor_,
      BulkLoadHFileResponse::default_instance_,
      BulkLoadHFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadHFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulkLoadHFileResponse));
  CoprocessorServiceCall_descriptor_ = file->message_type(16);
  static const int CoprocessorServiceCall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceCall, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceCall, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceCall, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceCall, request_),
  };
  CoprocessorServiceCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoprocessorServiceCall_descriptor_,
      CoprocessorServiceCall::default_instance_,
      CoprocessorServiceCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoprocessorServiceCall));
  CoprocessorServiceResult_descriptor_ = file->message_type(17);
  static const int CoprocessorServiceResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResult, value_),
  };
  CoprocessorServiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoprocessorServiceResult_descriptor_,
      CoprocessorServiceResult::default_instance_,
      CoprocessorServiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoprocessorServiceResult));
  CoprocessorServiceRequest_descriptor_ = file->message_type(18);
  static const int CoprocessorServiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceRequest, call_),
  };
  CoprocessorServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoprocessorServiceRequest_descriptor_,
      CoprocessorServiceRequest::default_instance_,
      CoprocessorServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoprocessorServiceRequest));
  CoprocessorServiceResponse_descriptor_ = file->message_type(19);
  static const int CoprocessorServiceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResponse, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResponse, value_),
  };
  CoprocessorServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoprocessorServiceResponse_descriptor_,
      CoprocessorServiceResponse::default_instance_,
      CoprocessorServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoprocessorServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoprocessorServiceResponse));
  Action_descriptor_ = file->message_type(20);
  static const int Action_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, mutation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, service_call_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  RegionAction_descriptor_ = file->message_type(21);
  static const int RegionAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionAction, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionAction, atomic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionAction, action_),
  };
  RegionAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionAction_descriptor_,
      RegionAction::default_instance_,
      RegionAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionAction));
  RegionLoadStats_descriptor_ = file->message_type(22);
  static const int RegionLoadStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoadStats, memstoreload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoadStats, heapoccupancy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoadStats, compactionpressure_),
  };
  RegionLoadStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLoadStats_descriptor_,
      RegionLoadStats::default_instance_,
      RegionLoadStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoadStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoadStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLoadStats));
  MultiRegionLoadStats_descriptor_ = file->message_type(23);
  static const int MultiRegionLoadStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRegionLoadStats, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRegionLoadStats, stat_),
  };
  MultiRegionLoadStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiRegionLoadStats_descriptor_,
      MultiRegionLoadStats::default_instance_,
      MultiRegionLoadStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRegionLoadStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRegionLoadStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiRegionLoadStats));
  ResultOrException_descriptor_ = file->message_type(24);
  static const int ResultOrException_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, service_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, loadstats_),
  };
  ResultOrException_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultOrException_descriptor_,
      ResultOrException::default_instance_,
      ResultOrException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultOrException, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultOrException));
  RegionActionResult_descriptor_ = file->message_type(25);
  static const int RegionActionResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionActionResult, resultorexception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionActionResult, exception_),
  };
  RegionActionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionActionResult_descriptor_,
      RegionActionResult::default_instance_,
      RegionActionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionActionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionActionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionActionResult));
  MultiRequest_descriptor_ = file->message_type(26);
  static const int MultiRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRequest, regionaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRequest, noncegroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRequest, condition_),
  };
  MultiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiRequest_descriptor_,
      MultiRequest::default_instance_,
      MultiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiRequest));
  MultiResponse_descriptor_ = file->message_type(27);
  static const int MultiResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiResponse, regionactionresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiResponse, processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiResponse, regionstatistics_),
  };
  MultiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiResponse_descriptor_,
      MultiResponse::default_instance_,
      MultiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiResponse));
  Consistency_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Authorizations_descriptor_, &Authorizations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellVisibility_descriptor_, &CellVisibility::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Column_descriptor_, &Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Get_descriptor_, &Get::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Condition_descriptor_, &Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutationProto_descriptor_, &MutationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutationProto_ColumnValue_descriptor_, &MutationProto_ColumnValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutationProto_ColumnValue_QualifierValue_descriptor_, &MutationProto_ColumnValue_QualifierValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutateRequest_descriptor_, &MutateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutateResponse_descriptor_, &MutateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scan_descriptor_, &Scan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanRequest_descriptor_, &ScanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanResponse_descriptor_, &ScanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulkLoadHFileRequest_descriptor_, &BulkLoadHFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulkLoadHFileRequest_FamilyPath_descriptor_, &BulkLoadHFileRequest_FamilyPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulkLoadHFileResponse_descriptor_, &BulkLoadHFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoprocessorServiceCall_descriptor_, &CoprocessorServiceCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoprocessorServiceResult_descriptor_, &CoprocessorServiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoprocessorServiceRequest_descriptor_, &CoprocessorServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoprocessorServiceResponse_descriptor_, &CoprocessorServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionAction_descriptor_, &RegionAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLoadStats_descriptor_, &RegionLoadStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiRegionLoadStats_descriptor_, &MultiRegionLoadStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultOrException_descriptor_, &ResultOrException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionActionResult_descriptor_, &RegionActionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiRequest_descriptor_, &MultiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiResponse_descriptor_, &MultiResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Client_2eproto() {
  delete Authorizations::default_instance_;
  delete Authorizations_reflection_;
  delete CellVisibility::default_instance_;
  delete CellVisibility_reflection_;
  delete Column::default_instance_;
  delete Column_reflection_;
  delete Get::default_instance_;
  delete Get_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete Condition::default_instance_;
  delete Condition_reflection_;
  delete MutationProto::default_instance_;
  delete MutationProto_reflection_;
  delete MutationProto_ColumnValue::default_instance_;
  delete MutationProto_ColumnValue_reflection_;
  delete MutationProto_ColumnValue_QualifierValue::default_instance_;
  delete MutationProto_ColumnValue_QualifierValue_reflection_;
  delete MutateRequest::default_instance_;
  delete MutateRequest_reflection_;
  delete MutateResponse::default_instance_;
  delete MutateResponse_reflection_;
  delete Scan::default_instance_;
  delete Scan_reflection_;
  delete ScanRequest::default_instance_;
  delete ScanRequest_reflection_;
  delete ScanResponse::default_instance_;
  delete ScanResponse_reflection_;
  delete BulkLoadHFileRequest::default_instance_;
  delete BulkLoadHFileRequest_reflection_;
  delete BulkLoadHFileRequest_FamilyPath::default_instance_;
  delete BulkLoadHFileRequest_FamilyPath_reflection_;
  delete BulkLoadHFileResponse::default_instance_;
  delete BulkLoadHFileResponse_reflection_;
  delete CoprocessorServiceCall::default_instance_;
  delete CoprocessorServiceCall_reflection_;
  delete CoprocessorServiceResult::default_instance_;
  delete CoprocessorServiceResult_reflection_;
  delete CoprocessorServiceRequest::default_instance_;
  delete CoprocessorServiceRequest_reflection_;
  delete CoprocessorServiceResponse::default_instance_;
  delete CoprocessorServiceResponse_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete RegionAction::default_instance_;
  delete RegionAction_reflection_;
  delete RegionLoadStats::default_instance_;
  delete RegionLoadStats_reflection_;
  delete MultiRegionLoadStats::default_instance_;
  delete MultiRegionLoadStats_reflection_;
  delete ResultOrException::default_instance_;
  delete ResultOrException_reflection_;
  delete RegionActionResult::default_instance_;
  delete RegionActionResult_reflection_;
  delete MultiRequest::default_instance_;
  delete MultiRequest_reflection_;
  delete MultiResponse::default_instance_;
  delete MultiResponse_reflection_;
}

void protobuf_AddDesc_Client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_Filter_2eproto();
  ::hbase::pb::protobuf_AddDesc_Cell_2eproto();
  ::hbase::pb::protobuf_AddDesc_Comparator_2eproto();
  ::hbase::pb::protobuf_AddDesc_MapReduce_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Client.proto\022\010hbase.pb\032\013HBase.proto\032\014F"
    "ilter.proto\032\nCell.proto\032\020Comparator.prot"
    "o\032\017MapReduce.proto\"\037\n\016Authorizations\022\r\n\005"
    "label\030\001 \003(\t\"$\n\016CellVisibility\022\022\n\nexpress"
    "ion\030\001 \002(\t\"+\n\006Column\022\016\n\006family\030\001 \002(\014\022\021\n\tq"
    "ualifier\030\002 \003(\014\"\226\003\n\003Get\022\013\n\003row\030\001 \002(\014\022 \n\006c"
    "olumn\030\002 \003(\0132\020.hbase.pb.Column\022*\n\tattribu"
    "te\030\003 \003(\0132\027.hbase.pb.NameBytesPair\022 \n\006fil"
    "ter\030\004 \001(\0132\020.hbase.pb.Filter\022\'\n\ntime_rang"
    "e\030\005 \001(\0132\023.hbase.pb.TimeRange\022\027\n\014max_vers"
    "ions\030\006 \001(\r:\0011\022\032\n\014cache_blocks\030\007 \001(\010:\004tru"
    "e\022\023\n\013store_limit\030\010 \001(\r\022\024\n\014store_offset\030\t"
    " \001(\r\022\035\n\016existence_only\030\n \001(\010:\005false\0222\n\013c"
    "onsistency\030\014 \001(\0162\025.hbase.pb.Consistency:"
    "\006STRONG\0226\n\rcf_time_range\030\r \003(\0132\037.hbase.p"
    "b.ColumnFamilyTimeRange\"\203\001\n\006Result\022\034\n\004ce"
    "ll\030\001 \003(\0132\016.hbase.pb.Cell\022\035\n\025associated_c"
    "ell_count\030\002 \001(\005\022\016\n\006exists\030\003 \001(\010\022\024\n\005stale"
    "\030\004 \001(\010:\005false\022\026\n\007partial\030\005 \001(\010:\005false\"S\n"
    "\nGetRequest\022)\n\006region\030\001 \002(\0132\031.hbase.pb.R"
    "egionSpecifier\022\032\n\003get\030\002 \002(\0132\r.hbase.pb.G"
    "et\"/\n\013GetResponse\022 \n\006result\030\001 \001(\0132\020.hbas"
    "e.pb.Result\"\222\001\n\tCondition\022\013\n\003row\030\001 \002(\014\022\016"
    "\n\006family\030\002 \002(\014\022\021\n\tqualifier\030\003 \002(\014\022+\n\014com"
    "pare_type\030\004 \002(\0162\025.hbase.pb.CompareType\022("
    "\n\ncomparator\030\005 \002(\0132\024.hbase.pb.Comparator"
    "\"\364\006\n\rMutationProto\022\013\n\003row\030\001 \001(\014\0229\n\013mutat"
    "e_type\030\002 \001(\0162$.hbase.pb.MutationProto.Mu"
    "tationType\0229\n\014column_value\030\003 \003(\0132#.hbase"
    ".pb.MutationProto.ColumnValue\022\021\n\ttimesta"
    "mp\030\004 \001(\004\022*\n\tattribute\030\005 \003(\0132\027.hbase.pb.N"
    "ameBytesPair\022C\n\ndurability\030\006 \001(\0162\".hbase"
    ".pb.MutationProto.Durability:\013USE_DEFAUL"
    "T\022\'\n\ntime_range\030\007 \001(\0132\023.hbase.pb.TimeRan"
    "ge\022\035\n\025associated_cell_count\030\010 \001(\005\022\r\n\005non"
    "ce\030\t \001(\004\032\371\001\n\013ColumnValue\022\016\n\006family\030\001 \002(\014"
    "\022K\n\017qualifier_value\030\002 \003(\01322.hbase.pb.Mut"
    "ationProto.ColumnValue.QualifierValue\032\214\001"
    "\n\016QualifierValue\022\021\n\tqualifier\030\001 \001(\014\022\r\n\005v"
    "alue\030\002 \001(\014\022\021\n\ttimestamp\030\003 \001(\004\0227\n\013delete_"
    "type\030\004 \001(\0162\".hbase.pb.MutationProto.Dele"
    "teType\022\014\n\004tags\030\005 \001(\014\"W\n\nDurability\022\017\n\013US"
    "E_DEFAULT\020\000\022\014\n\010SKIP_WAL\020\001\022\r\n\tASYNC_WAL\020\002"
    "\022\014\n\010SYNC_WAL\020\003\022\r\n\tFSYNC_WAL\020\004\">\n\014Mutatio"
    "nType\022\n\n\006APPEND\020\000\022\r\n\tINCREMENT\020\001\022\007\n\003PUT\020"
    "\002\022\n\n\006DELETE\020\003\"p\n\nDeleteType\022\026\n\022DELETE_ON"
    "E_VERSION\020\000\022\034\n\030DELETE_MULTIPLE_VERSIONS\020"
    "\001\022\021\n\rDELETE_FAMILY\020\002\022\031\n\025DELETE_FAMILY_VE"
    "RSION\020\003\"\242\001\n\rMutateRequest\022)\n\006region\030\001 \002("
    "\0132\031.hbase.pb.RegionSpecifier\022)\n\010mutation"
    "\030\002 \002(\0132\027.hbase.pb.MutationProto\022&\n\tcondi"
    "tion\030\003 \001(\0132\023.hbase.pb.Condition\022\023\n\013nonce"
    "_group\030\004 \001(\004\"E\n\016MutateResponse\022 \n\006result"
    "\030\001 \001(\0132\020.hbase.pb.Result\022\021\n\tprocessed\030\002 "
    "\001(\010\"\275\004\n\004Scan\022 \n\006column\030\001 \003(\0132\020.hbase.pb."
    "Column\022*\n\tattribute\030\002 \003(\0132\027.hbase.pb.Nam"
    "eBytesPair\022\021\n\tstart_row\030\003 \001(\014\022\020\n\010stop_ro"
    "w\030\004 \001(\014\022 \n\006filter\030\005 \001(\0132\020.hbase.pb.Filte"
    "r\022\'\n\ntime_range\030\006 \001(\0132\023.hbase.pb.TimeRan"
    "ge\022\027\n\014max_versions\030\007 \001(\r:\0011\022\032\n\014cache_blo"
    "cks\030\010 \001(\010:\004true\022\022\n\nbatch_size\030\t \001(\r\022\027\n\017m"
    "ax_result_size\030\n \001(\004\022\023\n\013store_limit\030\013 \001("
    "\r\022\024\n\014store_offset\030\014 \001(\r\022&\n\036load_column_f"
    "amilies_on_demand\030\r \001(\010\022\r\n\005small\030\016 \001(\010\022\027"
    "\n\010reversed\030\017 \001(\010:\005false\0222\n\013consistency\030\020"
    " \001(\0162\025.hbase.pb.Consistency:\006STRONG\022\017\n\007c"
    "aching\030\021 \001(\r\022\035\n\025allow_partial_results\030\022 "
    "\001(\010\0226\n\rcf_time_range\030\023 \003(\0132\037.hbase.pb.Co"
    "lumnFamilyTimeRange\"\246\002\n\013ScanRequest\022)\n\006r"
    "egion\030\001 \001(\0132\031.hbase.pb.RegionSpecifier\022\034"
    "\n\004scan\030\002 \001(\0132\016.hbase.pb.Scan\022\022\n\nscanner_"
    "id\030\003 \001(\004\022\026\n\016number_of_rows\030\004 \001(\r\022\025\n\rclos"
    "e_scanner\030\005 \001(\010\022\025\n\rnext_call_seq\030\006 \001(\004\022\037"
    "\n\027client_handles_partials\030\007 \001(\010\022!\n\031clien"
    "t_handles_heartbeats\030\010 \001(\010\022\032\n\022track_scan"
    "_metrics\030\t \001(\010\022\024\n\005renew\030\n \001(\010:\005false\"\232\002\n"
    "\014ScanResponse\022\030\n\020cells_per_result\030\001 \003(\r\022"
    "\022\n\nscanner_id\030\002 \001(\004\022\024\n\014more_results\030\003 \001("
    "\010\022\013\n\003ttl\030\004 \001(\r\022!\n\007results\030\005 \003(\0132\020.hbase."
    "pb.Result\022\r\n\005stale\030\006 \001(\010\022\037\n\027partial_flag"
    "_per_result\030\007 \003(\010\022\036\n\026more_results_in_reg"
    "ion\030\010 \001(\010\022\031\n\021heartbeat_message\030\t \001(\010\022+\n\014"
    "scan_metrics\030\n \001(\0132\025.hbase.pb.ScanMetric"
    "s\"\305\001\n\024BulkLoadHFileRequest\022)\n\006region\030\001 \002"
    "(\0132\031.hbase.pb.RegionSpecifier\022>\n\013family_"
    "path\030\002 \003(\0132).hbase.pb.BulkLoadHFileReque"
    "st.FamilyPath\022\026\n\016assign_seq_num\030\003 \001(\010\032*\n"
    "\nFamilyPath\022\016\n\006family\030\001 \002(\014\022\014\n\004path\030\002 \002("
    "\t\"\'\n\025BulkLoadHFileResponse\022\016\n\006loaded\030\001 \002"
    "(\010\"a\n\026CoprocessorServiceCall\022\013\n\003row\030\001 \002("
    "\014\022\024\n\014service_name\030\002 \002(\t\022\023\n\013method_name\030\003"
    " \002(\t\022\017\n\007request\030\004 \002(\014\"B\n\030CoprocessorServ"
    "iceResult\022&\n\005value\030\001 \001(\0132\027.hbase.pb.Name"
    "BytesPair\"v\n\031CoprocessorServiceRequest\022)"
    "\n\006region\030\001 \002(\0132\031.hbase.pb.RegionSpecifie"
    "r\022.\n\004call\030\002 \002(\0132 .hbase.pb.CoprocessorSe"
    "rviceCall\"o\n\032CoprocessorServiceResponse\022"
    ")\n\006region\030\001 \002(\0132\031.hbase.pb.RegionSpecifi"
    "er\022&\n\005value\030\002 \002(\0132\027.hbase.pb.NameBytesPa"
    "ir\"\226\001\n\006Action\022\r\n\005index\030\001 \001(\r\022)\n\010mutation"
    "\030\002 \001(\0132\027.hbase.pb.MutationProto\022\032\n\003get\030\003"
    " \001(\0132\r.hbase.pb.Get\0226\n\014service_call\030\004 \001("
    "\0132 .hbase.pb.CoprocessorServiceCall\"k\n\014R"
    "egionAction\022)\n\006region\030\001 \002(\0132\031.hbase.pb.R"
    "egionSpecifier\022\016\n\006atomic\030\002 \001(\010\022 \n\006action"
    "\030\003 \003(\0132\020.hbase.pb.Action\"c\n\017RegionLoadSt"
    "ats\022\027\n\014memstoreLoad\030\001 \001(\005:\0010\022\030\n\rheapOccu"
    "pancy\030\002 \001(\005:\0010\022\035\n\022compactionPressure\030\003 \001"
    "(\005:\0010\"j\n\024MultiRegionLoadStats\022)\n\006region\030"
    "\001 \003(\0132\031.hbase.pb.RegionSpecifier\022\'\n\004stat"
    "\030\002 \003(\0132\031.hbase.pb.RegionLoadStats\"\336\001\n\021Re"
    "sultOrException\022\r\n\005index\030\001 \001(\r\022 \n\006result"
    "\030\002 \001(\0132\020.hbase.pb.Result\022*\n\texception\030\003 "
    "\001(\0132\027.hbase.pb.NameBytesPair\022:\n\016service_"
    "result\030\004 \001(\0132\".hbase.pb.CoprocessorServi"
    "ceResult\0220\n\tloadStats\030\005 \001(\0132\031.hbase.pb.R"
    "egionLoadStatsB\002\030\001\"x\n\022RegionActionResult"
    "\0226\n\021resultOrException\030\001 \003(\0132\033.hbase.pb.R"
    "esultOrException\022*\n\texception\030\002 \001(\0132\027.hb"
    "ase.pb.NameBytesPair\"x\n\014MultiRequest\022,\n\014"
    "regionAction\030\001 \003(\0132\026.hbase.pb.RegionActi"
    "on\022\022\n\nnonceGroup\030\002 \001(\004\022&\n\tcondition\030\003 \001("
    "\0132\023.hbase.pb.Condition\"\226\001\n\rMultiResponse"
    "\0228\n\022regionActionResult\030\001 \003(\0132\034.hbase.pb."
    "RegionActionResult\022\021\n\tprocessed\030\002 \001(\010\0228\n"
    "\020regionStatistics\030\003 \001(\0132\036.hbase.pb.Multi"
    "RegionLoadStats*\'\n\013Consistency\022\n\n\006STRONG"
    "\020\000\022\014\n\010TIMELINE\020\0012\203\004\n\rClientService\0222\n\003Ge"
    "t\022\024.hbase.pb.GetRequest\032\025.hbase.pb.GetRe"
    "sponse\022;\n\006Mutate\022\027.hbase.pb.MutateReques"
    "t\032\030.hbase.pb.MutateResponse\0225\n\004Scan\022\025.hb"
    "ase.pb.ScanRequest\032\026.hbase.pb.ScanRespon"
    "se\022P\n\rBulkLoadHFile\022\036.hbase.pb.BulkLoadH"
    "FileRequest\032\037.hbase.pb.BulkLoadHFileResp"
    "onse\022X\n\013ExecService\022#.hbase.pb.Coprocess"
    "orServiceRequest\032$.hbase.pb.CoprocessorS"
    "erviceResponse\022d\n\027ExecRegionServerServic"
    "e\022#.hbase.pb.CoprocessorServiceRequest\032$"
    ".hbase.pb.CoprocessorServiceResponse\0228\n\005"
    "Multi\022\026.hbase.pb.MultiRequest\032\027.hbase.pb"
    ".MultiResponseBB\n*org.apache.hadoop.hbas"
    "e.protobuf.generatedB\014ClientProtosH\001\210\001\001\240"
    "\001\001", 5682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Client.proto", &protobuf_RegisterTypes);
  Authorizations::default_instance_ = new Authorizations();
  CellVisibility::default_instance_ = new CellVisibility();
  Column::default_instance_ = new Column();
  Get::default_instance_ = new Get();
  Result::default_instance_ = new Result();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  Condition::default_instance_ = new Condition();
  MutationProto::default_instance_ = new MutationProto();
  MutationProto_ColumnValue::default_instance_ = new MutationProto_ColumnValue();
  MutationProto_ColumnValue_QualifierValue::default_instance_ = new MutationProto_ColumnValue_QualifierValue();
  MutateRequest::default_instance_ = new MutateRequest();
  MutateResponse::default_instance_ = new MutateResponse();
  Scan::default_instance_ = new Scan();
  ScanRequest::default_instance_ = new ScanRequest();
  ScanResponse::default_instance_ = new ScanResponse();
  BulkLoadHFileRequest::default_instance_ = new BulkLoadHFileRequest();
  BulkLoadHFileRequest_FamilyPath::default_instance_ = new BulkLoadHFileRequest_FamilyPath();
  BulkLoadHFileResponse::default_instance_ = new BulkLoadHFileResponse();
  CoprocessorServiceCall::default_instance_ = new CoprocessorServiceCall();
  CoprocessorServiceResult::default_instance_ = new CoprocessorServiceResult();
  CoprocessorServiceRequest::default_instance_ = new CoprocessorServiceRequest();
  CoprocessorServiceResponse::default_instance_ = new CoprocessorServiceResponse();
  Action::default_instance_ = new Action();
  RegionAction::default_instance_ = new RegionAction();
  RegionLoadStats::default_instance_ = new RegionLoadStats();
  MultiRegionLoadStats::default_instance_ = new MultiRegionLoadStats();
  ResultOrException::default_instance_ = new ResultOrException();
  RegionActionResult::default_instance_ = new RegionActionResult();
  MultiRequest::default_instance_ = new MultiRequest();
  MultiResponse::default_instance_ = new MultiResponse();
  Authorizations::default_instance_->InitAsDefaultInstance();
  CellVisibility::default_instance_->InitAsDefaultInstance();
  Column::default_instance_->InitAsDefaultInstance();
  Get::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  Condition::default_instance_->InitAsDefaultInstance();
  MutationProto::default_instance_->InitAsDefaultInstance();
  MutationProto_ColumnValue::default_instance_->InitAsDefaultInstance();
  MutationProto_ColumnValue_QualifierValue::default_instance_->InitAsDefaultInstance();
  MutateRequest::default_instance_->InitAsDefaultInstance();
  MutateResponse::default_instance_->InitAsDefaultInstance();
  Scan::default_instance_->InitAsDefaultInstance();
  ScanRequest::default_instance_->InitAsDefaultInstance();
  ScanResponse::default_instance_->InitAsDefaultInstance();
  BulkLoadHFileRequest::default_instance_->InitAsDefaultInstance();
  BulkLoadHFileRequest_FamilyPath::default_instance_->InitAsDefaultInstance();
  BulkLoadHFileResponse::default_instance_->InitAsDefaultInstance();
  CoprocessorServiceCall::default_instance_->InitAsDefaultInstance();
  CoprocessorServiceResult::default_instance_->InitAsDefaultInstance();
  CoprocessorServiceRequest::default_instance_->InitAsDefaultInstance();
  CoprocessorServiceResponse::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  RegionAction::default_instance_->InitAsDefaultInstance();
  RegionLoadStats::default_instance_->InitAsDefaultInstance();
  MultiRegionLoadStats::default_instance_->InitAsDefaultInstance();
  ResultOrException::default_instance_->InitAsDefaultInstance();
  RegionActionResult::default_instance_->InitAsDefaultInstance();
  MultiRequest::default_instance_->InitAsDefaultInstance();
  MultiResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Client_2eproto {
  StaticDescriptorInitializer_Client_2eproto() {
    protobuf_AddDesc_Client_2eproto();
  }
} static_descriptor_initializer_Client_2eproto_;
const ::google::protobuf::EnumDescriptor* Consistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Consistency_descriptor_;
}
bool Consistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Authorizations::kLabelFieldNumber;
#endif  // !_MSC_VER

Authorizations::Authorizations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Authorizations::InitAsDefaultInstance() {
}

Authorizations::Authorizations(const Authorizations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Authorizations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Authorizations::~Authorizations() {
  SharedDtor();
}

void Authorizations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Authorizations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authorizations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Authorizations_descriptor_;
}

const Authorizations& Authorizations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Authorizations* Authorizations::default_instance_ = NULL;

Authorizations* Authorizations::New() const {
  return new Authorizations;
}

void Authorizations::Clear() {
  label_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Authorizations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label(this->label_size() - 1).data(),
            this->label(this->label_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_label;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Authorizations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string label = 1;
  for (int i = 0; i < this->label_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->label(i).data(), this->label(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Authorizations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string label = 1;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label(i).data(), this->label(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->label(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Authorizations::ByteSize() const {
  int total_size = 0;

  // repeated string label = 1;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->label(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authorizations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Authorizations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Authorizations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Authorizations::MergeFrom(const Authorizations& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Authorizations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authorizations::CopyFrom(const Authorizations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authorizations::IsInitialized() const {

  return true;
}

void Authorizations::Swap(Authorizations* other) {
  if (other != this) {
    label_.Swap(&other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Authorizations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Authorizations_descriptor_;
  metadata.reflection = Authorizations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellVisibility::kExpressionFieldNumber;
#endif  // !_MSC_VER

CellVisibility::CellVisibility()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellVisibility::InitAsDefaultInstance() {
}

CellVisibility::CellVisibility(const CellVisibility& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellVisibility::SharedCtor() {
  _cached_size_ = 0;
  expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellVisibility::~CellVisibility() {
  SharedDtor();
}

void CellVisibility::SharedDtor() {
  if (expression_ != &::google::protobuf::internal::kEmptyString) {
    delete expression_;
  }
  if (this != default_instance_) {
  }
}

void CellVisibility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellVisibility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellVisibility_descriptor_;
}

const CellVisibility& CellVisibility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

CellVisibility* CellVisibility::default_instance_ = NULL;

CellVisibility* CellVisibility::New() const {
  return new CellVisibility;
}

void CellVisibility::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expression()) {
      if (expression_ != &::google::protobuf::internal::kEmptyString) {
        expression_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellVisibility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string expression = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expression()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expression().data(), this->expression().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellVisibility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string expression = 1;
  if (has_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expression().data(), this->expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->expression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellVisibility::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string expression = 1;
  if (has_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expression().data(), this->expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->expression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellVisibility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string expression = 1;
    if (has_expression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expression());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellVisibility::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellVisibility* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellVisibility*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellVisibility::MergeFrom(const CellVisibility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expression()) {
      set_expression(from.expression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellVisibility::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellVisibility::CopyFrom(const CellVisibility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellVisibility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CellVisibility::Swap(CellVisibility* other) {
  if (other != this) {
    std::swap(expression_, other->expression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellVisibility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellVisibility_descriptor_;
  metadata.reflection = CellVisibility_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Column::kFamilyFieldNumber;
const int Column::kQualifierFieldNumber;
#endif  // !_MSC_VER

Column::Column()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Column::InitAsDefaultInstance() {
}

Column::Column(const Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Column::SharedCtor() {
  _cached_size_ = 0;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Column::~Column() {
  SharedDtor();
}

void Column::SharedDtor() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (this != default_instance_) {
  }
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_descriptor_;
}

const Column& Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Column* Column::default_instance_ = NULL;

Column* Column::New() const {
  return new Column;
}

void Column::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
  }
  qualifier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qualifier;
        break;
      }

      // repeated bytes qualifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_qualifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qualifier;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family = 1;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family(), output);
  }

  // repeated bytes qualifier = 2;
  for (int i = 0; i < this->qualifier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->qualifier(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family = 1;
  if (has_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // repeated bytes qualifier = 2;
  for (int i = 0; i < this->qualifier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->qualifier(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family());
    }

  }
  // repeated bytes qualifier = 2;
  total_size += 1 * this->qualifier_size();
  for (int i = 0; i < this->qualifier_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->qualifier(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  qualifier_.MergeFrom(from.qualifier_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family()) {
      set_family(from.family());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Column::Swap(Column* other) {
  if (other != this) {
    std::swap(family_, other->family_);
    qualifier_.Swap(&other->qualifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Column_descriptor_;
  metadata.reflection = Column_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Get::kRowFieldNumber;
const int Get::kColumnFieldNumber;
const int Get::kAttributeFieldNumber;
const int Get::kFilterFieldNumber;
const int Get::kTimeRangeFieldNumber;
const int Get::kMaxVersionsFieldNumber;
const int Get::kCacheBlocksFieldNumber;
const int Get::kStoreLimitFieldNumber;
const int Get::kStoreOffsetFieldNumber;
const int Get::kExistenceOnlyFieldNumber;
const int Get::kConsistencyFieldNumber;
const int Get::kCfTimeRangeFieldNumber;
#endif  // !_MSC_VER

Get::Get()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Get::InitAsDefaultInstance() {
  filter_ = const_cast< ::hbase::pb::Filter*>(&::hbase::pb::Filter::default_instance());
  time_range_ = const_cast< ::hbase::pb::TimeRange*>(&::hbase::pb::TimeRange::default_instance());
}

Get::Get(const Get& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Get::SharedCtor() {
  _cached_size_ = 0;
  row_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = NULL;
  time_range_ = NULL;
  max_versions_ = 1u;
  cache_blocks_ = true;
  store_limit_ = 0u;
  store_offset_ = 0u;
  existence_only_ = false;
  consistency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Get::~Get() {
  SharedDtor();
}

void Get::SharedDtor() {
  if (row_ != &::google::protobuf::internal::kEmptyString) {
    delete row_;
  }
  if (this != default_instance_) {
    delete filter_;
    delete time_range_;
  }
}

void Get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Get::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Get_descriptor_;
}

const Get& Get::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Get* Get::default_instance_ = NULL;

Get* Get::New() const {
  return new Get;
}

void Get::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row()) {
      if (row_ != &::google::protobuf::internal::kEmptyString) {
        row_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::hbase::pb::Filter::Clear();
    }
    if (has_time_range()) {
      if (time_range_ != NULL) time_range_->::hbase::pb::TimeRange::Clear();
    }
    max_versions_ = 1u;
    cache_blocks_ = true;
    store_limit_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    store_offset_ = 0u;
    existence_only_ = false;
    consistency_ = 0;
  }
  column_.Clear();
  attribute_.Clear();
  cf_time_range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column;
        break;
      }

      // repeated .hbase.pb.Column column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column;
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .hbase.pb.NameBytesPair attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectTag(34)) goto parse_filter;
        break;
      }

      // optional .hbase.pb.Filter filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time_range;
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_versions;
        break;
      }

      // optional uint32 max_versions = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_versions_)));
          set_has_max_versions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cache_blocks;
        break;
      }

      // optional bool cache_blocks = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_blocks_)));
          set_has_cache_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_store_limit;
        break;
      }

      // optional uint32 store_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_limit_)));
          set_has_store_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_store_offset;
        break;
      }

      // optional uint32 store_offset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_offset_)));
          set_has_store_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_existence_only;
        break;
      }

      // optional bool existence_only = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_existence_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &existence_only_)));
          set_has_existence_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_consistency;
        break;
      }

      // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::Consistency_IsValid(value)) {
            set_consistency(static_cast< ::hbase::pb::Consistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cf_time_range;
        break;
      }

      // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cf_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cf_time_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cf_time_range;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row(), output);
  }

  // repeated .hbase.pb.Column column = 2;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column(i), output);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  // optional .hbase.pb.Filter filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->filter(), output);
  }

  // optional .hbase.pb.TimeRange time_range = 5;
  if (has_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->time_range(), output);
  }

  // optional uint32 max_versions = 6 [default = 1];
  if (has_max_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_versions(), output);
  }

  // optional bool cache_blocks = 7 [default = true];
  if (has_cache_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->cache_blocks(), output);
  }

  // optional uint32 store_limit = 8;
  if (has_store_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->store_limit(), output);
  }

  // optional uint32 store_offset = 9;
  if (has_store_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->store_offset(), output);
  }

  // optional bool existence_only = 10 [default = false];
  if (has_existence_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->existence_only(), output);
  }

  // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
  if (has_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->consistency(), output);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
  for (int i = 0; i < this->cf_time_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cf_time_range(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Get::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes row = 1;
  if (has_row()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // repeated .hbase.pb.Column column = 2;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column(i), target);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  // optional .hbase.pb.Filter filter = 4;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->filter(), target);
  }

  // optional .hbase.pb.TimeRange time_range = 5;
  if (has_time_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->time_range(), target);
  }

  // optional uint32 max_versions = 6 [default = 1];
  if (has_max_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_versions(), target);
  }

  // optional bool cache_blocks = 7 [default = true];
  if (has_cache_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->cache_blocks(), target);
  }

  // optional uint32 store_limit = 8;
  if (has_store_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->store_limit(), target);
  }

  // optional uint32 store_offset = 9;
  if (has_store_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->store_offset(), target);
  }

  // optional bool existence_only = 10 [default = false];
  if (has_existence_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->existence_only(), target);
  }

  // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
  if (has_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->consistency(), target);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
  for (int i = 0; i < this->cf_time_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cf_time_range(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Get::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row());
    }

    // optional .hbase.pb.Filter filter = 4;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional .hbase.pb.TimeRange time_range = 5;
    if (has_time_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_range());
    }

    // optional uint32 max_versions = 6 [default = 1];
    if (has_max_versions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_versions());
    }

    // optional bool cache_blocks = 7 [default = true];
    if (has_cache_blocks()) {
      total_size += 1 + 1;
    }

    // optional uint32 store_limit = 8;
    if (has_store_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 store_offset = 9;
    if (has_store_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_offset());
    }

    // optional bool existence_only = 10 [default = false];
    if (has_existence_only()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
    if (has_consistency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consistency());
    }

  }
  // repeated .hbase.pb.Column column = 2;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  // repeated .hbase.pb.NameBytesPair attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
  total_size += 1 * this->cf_time_range_size();
  for (int i = 0; i < this->cf_time_range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cf_time_range(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Get::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Get* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Get*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  attribute_.MergeFrom(from.attribute_);
  cf_time_range_.MergeFrom(from.cf_time_range_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_filter()) {
      mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
    }
    if (from.has_time_range()) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (from.has_max_versions()) {
      set_max_versions(from.max_versions());
    }
    if (from.has_cache_blocks()) {
      set_cache_blocks(from.cache_blocks());
    }
    if (from.has_store_limit()) {
      set_store_limit(from.store_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_store_offset()) {
      set_store_offset(from.store_offset());
    }
    if (from.has_existence_only()) {
      set_existence_only(from.existence_only());
    }
    if (from.has_consistency()) {
      set_consistency(from.consistency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Get::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < column_size(); i++) {
    if (!this->column(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  for (int i = 0; i < cf_time_range_size(); i++) {
    if (!this->cf_time_range(i).IsInitialized()) return false;
  }
  return true;
}

void Get::Swap(Get* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    column_.Swap(&other->column_);
    attribute_.Swap(&other->attribute_);
    std::swap(filter_, other->filter_);
    std::swap(time_range_, other->time_range_);
    std::swap(max_versions_, other->max_versions_);
    std::swap(cache_blocks_, other->cache_blocks_);
    std::swap(store_limit_, other->store_limit_);
    std::swap(store_offset_, other->store_offset_);
    std::swap(existence_only_, other->existence_only_);
    std::swap(consistency_, other->consistency_);
    cf_time_range_.Swap(&other->cf_time_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Get::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Get_descriptor_;
  metadata.reflection = Get_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kCellFieldNumber;
const int Result::kAssociatedCellCountFieldNumber;
const int Result::kExistsFieldNumber;
const int Result::kStaleFieldNumber;
const int Result::kPartialFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  associated_cell_count_ = 0;
  exists_ = false;
  stale_ = false;
  partial_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    associated_cell_count_ = 0;
    exists_ = false;
    stale_ = false;
    partial_ = false;
  }
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.Cell cell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell;
        if (input->ExpectTag(16)) goto parse_associated_cell_count;
        break;
      }

      // optional int32 associated_cell_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_associated_cell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &associated_cell_count_)));
          set_has_associated_cell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exists;
        break;
      }

      // optional bool exists = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
          set_has_exists();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stale;
        break;
      }

      // optional bool stale = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_)));
          set_has_stale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_partial;
        break;
      }

      // optional bool partial = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partial_)));
          set_has_partial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.Cell cell = 1;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell(i), output);
  }

  // optional int32 associated_cell_count = 2;
  if (has_associated_cell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->associated_cell_count(), output);
  }

  // optional bool exists = 3;
  if (has_exists()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->exists(), output);
  }

  // optional bool stale = 4 [default = false];
  if (has_stale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stale(), output);
  }

  // optional bool partial = 5 [default = false];
  if (has_partial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->partial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.Cell cell = 1;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell(i), target);
  }

  // optional int32 associated_cell_count = 2;
  if (has_associated_cell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->associated_cell_count(), target);
  }

  // optional bool exists = 3;
  if (has_exists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->exists(), target);
  }

  // optional bool stale = 4 [default = false];
  if (has_stale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stale(), target);
  }

  // optional bool partial = 5 [default = false];
  if (has_partial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->partial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 associated_cell_count = 2;
    if (has_associated_cell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->associated_cell_count());
    }

    // optional bool exists = 3;
    if (has_exists()) {
      total_size += 1 + 1;
    }

    // optional bool stale = 4 [default = false];
    if (has_stale()) {
      total_size += 1 + 1;
    }

    // optional bool partial = 5 [default = false];
    if (has_partial()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.Cell cell = 1;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_associated_cell_count()) {
      set_associated_cell_count(from.associated_cell_count());
    }
    if (from.has_exists()) {
      set_exists(from.exists());
    }
    if (from.has_stale()) {
      set_stale(from.stale());
    }
    if (from.has_partial()) {
      set_partial(from.partial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    cell_.Swap(&other->cell_);
    std::swap(associated_cell_count_, other->associated_cell_count_);
    std::swap(exists_, other->exists_);
    std::swap(stale_, other->stale_);
    std::swap(partial_, other->partial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRequest::kRegionFieldNumber;
const int GetRequest::kGetFieldNumber;
#endif  // !_MSC_VER

GetRequest::GetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  get_ = const_cast< ::hbase::pb::Get*>(&::hbase::pb::Get::default_instance());
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  get_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRequest::~GetRequest() {
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete get_;
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New() const {
  return new GetRequest;
}

void GetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_get()) {
      if (get_ != NULL) get_->::hbase::pb::Get::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // required .hbase.pb.Get get = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // required .hbase.pb.Get get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // required .hbase.pb.Get get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // required .hbase.pb.Get get = 2;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_get()) {
      mutable_get()->::hbase::pb::Get::MergeFrom(from.get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_get()) {
    if (!this->get().IsInitialized()) return false;
  }
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(get_, other->get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GetResponse::GetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::hbase::pb::Result*>(&::hbase::pb::Result::default_instance());
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResponse::~GetResponse() {
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New() const {
  return new GetResponse;
}

void GetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::hbase::pb::Result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::hbase::pb::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Condition::kRowFieldNumber;
const int Condition::kFamilyFieldNumber;
const int Condition::kQualifierFieldNumber;
const int Condition::kCompareTypeFieldNumber;
const int Condition::kComparatorFieldNumber;
#endif  // !_MSC_VER

Condition::Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Condition::InitAsDefaultInstance() {
  comparator_ = const_cast< ::hbase::pb::Comparator*>(&::hbase::pb::Comparator::default_instance());
}

Condition::Condition(const Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Condition::SharedCtor() {
  _cached_size_ = 0;
  row_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compare_type_ = 0;
  comparator_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Condition::~Condition() {
  SharedDtor();
}

void Condition::SharedDtor() {
  if (row_ != &::google::protobuf::internal::kEmptyString) {
    delete row_;
  }
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
    delete qualifier_;
  }
  if (this != default_instance_) {
    delete comparator_;
  }
}

void Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Condition_descriptor_;
}

const Condition& Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Condition* Condition::default_instance_ = NULL;

Condition* Condition::New() const {
  return new Condition;
}

void Condition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row()) {
      if (row_ != &::google::protobuf::internal::kEmptyString) {
        row_->clear();
      }
    }
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
    if (has_qualifier()) {
      if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
        qualifier_->clear();
      }
    }
    compare_type_ = 0;
    if (has_comparator()) {
      if (comparator_ != NULL) comparator_->::hbase::pb::Comparator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family;
        break;
      }

      // required bytes family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qualifier;
        break;
      }

      // required bytes qualifier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_compare_type;
        break;
      }

      // required .hbase.pb.CompareType compare_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::CompareType_IsValid(value)) {
            set_compare_type(static_cast< ::hbase::pb::CompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comparator;
        break;
      }

      // required .hbase.pb.Comparator comparator = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comparator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row(), output);
  }

  // required bytes family = 2;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->family(), output);
  }

  // required bytes qualifier = 3;
  if (has_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->qualifier(), output);
  }

  // required .hbase.pb.CompareType compare_type = 4;
  if (has_compare_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compare_type(), output);
  }

  // required .hbase.pb.Comparator comparator = 5;
  if (has_comparator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->comparator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes row = 1;
  if (has_row()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // required bytes family = 2;
  if (has_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->family(), target);
  }

  // required bytes qualifier = 3;
  if (has_qualifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->qualifier(), target);
  }

  // required .hbase.pb.CompareType compare_type = 4;
  if (has_compare_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compare_type(), target);
  }

  // required .hbase.pb.Comparator comparator = 5;
  if (has_comparator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->comparator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row());
    }

    // required bytes family = 2;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family());
    }

    // required bytes qualifier = 3;
    if (has_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qualifier());
    }

    // required .hbase.pb.CompareType compare_type = 4;
    if (has_compare_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compare_type());
    }

    // required .hbase.pb.Comparator comparator = 5;
    if (has_comparator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comparator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_family()) {
      set_family(from.family());
    }
    if (from.has_qualifier()) {
      set_qualifier(from.qualifier());
    }
    if (from.has_compare_type()) {
      set_compare_type(from.compare_type());
    }
    if (from.has_comparator()) {
      mutable_comparator()->::hbase::pb::Comparator::MergeFrom(from.comparator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_comparator()) {
    if (!this->comparator().IsInitialized()) return false;
  }
  return true;
}

void Condition::Swap(Condition* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(family_, other->family_);
    std::swap(qualifier_, other->qualifier_);
    std::swap(compare_type_, other->compare_type_);
    std::swap(comparator_, other->comparator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Condition_descriptor_;
  metadata.reflection = Condition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MutationProto_Durability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationProto_Durability_descriptor_;
}
bool MutationProto_Durability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MutationProto_Durability MutationProto::USE_DEFAULT;
const MutationProto_Durability MutationProto::SKIP_WAL;
const MutationProto_Durability MutationProto::ASYNC_WAL;
const MutationProto_Durability MutationProto::SYNC_WAL;
const MutationProto_Durability MutationProto::FSYNC_WAL;
const MutationProto_Durability MutationProto::Durability_MIN;
const MutationProto_Durability MutationProto::Durability_MAX;
const int MutationProto::Durability_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MutationProto_MutationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationProto_MutationType_descriptor_;
}
bool MutationProto_MutationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MutationProto_MutationType MutationProto::APPEND;
const MutationProto_MutationType MutationProto::INCREMENT;
const MutationProto_MutationType MutationProto::PUT;
const MutationProto_MutationType MutationProto::DELETE;
const MutationProto_MutationType MutationProto::MutationType_MIN;
const MutationProto_MutationType MutationProto::MutationType_MAX;
const int MutationProto::MutationType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MutationProto_DeleteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationProto_DeleteType_descriptor_;
}
bool MutationProto_DeleteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MutationProto_DeleteType MutationProto::DELETE_ONE_VERSION;
const MutationProto_DeleteType MutationProto::DELETE_MULTIPLE_VERSIONS;
const MutationProto_DeleteType MutationProto::DELETE_FAMILY;
const MutationProto_DeleteType MutationProto::DELETE_FAMILY_VERSION;
const MutationProto_DeleteType MutationProto::DeleteType_MIN;
const MutationProto_DeleteType MutationProto::DeleteType_MAX;
const int MutationProto::DeleteType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MutationProto_ColumnValue_QualifierValue::kQualifierFieldNumber;
const int MutationProto_ColumnValue_QualifierValue::kValueFieldNumber;
const int MutationProto_ColumnValue_QualifierValue::kTimestampFieldNumber;
const int MutationProto_ColumnValue_QualifierValue::kDeleteTypeFieldNumber;
const int MutationProto_ColumnValue_QualifierValue::kTagsFieldNumber;
#endif  // !_MSC_VER

MutationProto_ColumnValue_QualifierValue::MutationProto_ColumnValue_QualifierValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutationProto_ColumnValue_QualifierValue::InitAsDefaultInstance() {
}

MutationProto_ColumnValue_QualifierValue::MutationProto_ColumnValue_QualifierValue(const MutationProto_ColumnValue_QualifierValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutationProto_ColumnValue_QualifierValue::SharedCtor() {
  _cached_size_ = 0;
  qualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  delete_type_ = 0;
  tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutationProto_ColumnValue_QualifierValue::~MutationProto_ColumnValue_QualifierValue() {
  SharedDtor();
}

void MutationProto_ColumnValue_QualifierValue::SharedDtor() {
  if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
    delete qualifier_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    delete tags_;
  }
  if (this != default_instance_) {
  }
}

void MutationProto_ColumnValue_QualifierValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationProto_ColumnValue_QualifierValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationProto_ColumnValue_QualifierValue_descriptor_;
}

const MutationProto_ColumnValue_QualifierValue& MutationProto_ColumnValue_QualifierValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MutationProto_ColumnValue_QualifierValue* MutationProto_ColumnValue_QualifierValue::default_instance_ = NULL;

MutationProto_ColumnValue_QualifierValue* MutationProto_ColumnValue_QualifierValue::New() const {
  return new MutationProto_ColumnValue_QualifierValue;
}

void MutationProto_ColumnValue_QualifierValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qualifier()) {
      if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
        qualifier_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    delete_type_ = 0;
    if (has_tags()) {
      if (tags_ != &::google::protobuf::internal::kEmptyString) {
        tags_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutationProto_ColumnValue_QualifierValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes qualifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delete_type;
        break;
      }

      // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MutationProto_DeleteType_IsValid(value)) {
            set_delete_type(static_cast< ::hbase::pb::MutationProto_DeleteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tags;
        break;
      }

      // optional bytes tags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutationProto_ColumnValue_QualifierValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes qualifier = 1;
  if (has_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->qualifier(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
  if (has_delete_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->delete_type(), output);
  }

  // optional bytes tags = 5;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->tags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutationProto_ColumnValue_QualifierValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes qualifier = 1;
  if (has_qualifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->qualifier(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
  if (has_delete_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->delete_type(), target);
  }

  // optional bytes tags = 5;
  if (has_tags()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->tags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutationProto_ColumnValue_QualifierValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes qualifier = 1;
    if (has_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qualifier());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
    if (has_delete_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->delete_type());
    }

    // optional bytes tags = 5;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationProto_ColumnValue_QualifierValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutationProto_ColumnValue_QualifierValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutationProto_ColumnValue_QualifierValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutationProto_ColumnValue_QualifierValue::MergeFrom(const MutationProto_ColumnValue_QualifierValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qualifier()) {
      set_qualifier(from.qualifier());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_delete_type()) {
      set_delete_type(from.delete_type());
    }
    if (from.has_tags()) {
      set_tags(from.tags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutationProto_ColumnValue_QualifierValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationProto_ColumnValue_QualifierValue::CopyFrom(const MutationProto_ColumnValue_QualifierValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationProto_ColumnValue_QualifierValue::IsInitialized() const {

  return true;
}

void MutationProto_ColumnValue_QualifierValue::Swap(MutationProto_ColumnValue_QualifierValue* other) {
  if (other != this) {
    std::swap(qualifier_, other->qualifier_);
    std::swap(value_, other->value_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(delete_type_, other->delete_type_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutationProto_ColumnValue_QualifierValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationProto_ColumnValue_QualifierValue_descriptor_;
  metadata.reflection = MutationProto_ColumnValue_QualifierValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MutationProto_ColumnValue::kFamilyFieldNumber;
const int MutationProto_ColumnValue::kQualifierValueFieldNumber;
#endif  // !_MSC_VER

MutationProto_ColumnValue::MutationProto_ColumnValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutationProto_ColumnValue::InitAsDefaultInstance() {
}

MutationProto_ColumnValue::MutationProto_ColumnValue(const MutationProto_ColumnValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutationProto_ColumnValue::SharedCtor() {
  _cached_size_ = 0;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutationProto_ColumnValue::~MutationProto_ColumnValue() {
  SharedDtor();
}

void MutationProto_ColumnValue::SharedDtor() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (this != default_instance_) {
  }
}

void MutationProto_ColumnValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationProto_ColumnValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationProto_ColumnValue_descriptor_;
}

const MutationProto_ColumnValue& MutationProto_ColumnValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MutationProto_ColumnValue* MutationProto_ColumnValue::default_instance_ = NULL;

MutationProto_ColumnValue* MutationProto_ColumnValue::New() const {
  return new MutationProto_ColumnValue;
}

void MutationProto_ColumnValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
  }
  qualifier_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutationProto_ColumnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qualifier_value;
        break;
      }

      // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualifier_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qualifier_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qualifier_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutationProto_ColumnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family = 1;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family(), output);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
  for (int i = 0; i < this->qualifier_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qualifier_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutationProto_ColumnValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family = 1;
  if (has_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
  for (int i = 0; i < this->qualifier_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->qualifier_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutationProto_ColumnValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family());
    }

  }
  // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
  total_size += 1 * this->qualifier_value_size();
  for (int i = 0; i < this->qualifier_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qualifier_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationProto_ColumnValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutationProto_ColumnValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutationProto_ColumnValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutationProto_ColumnValue::MergeFrom(const MutationProto_ColumnValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  qualifier_value_.MergeFrom(from.qualifier_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family()) {
      set_family(from.family());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutationProto_ColumnValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationProto_ColumnValue::CopyFrom(const MutationProto_ColumnValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationProto_ColumnValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MutationProto_ColumnValue::Swap(MutationProto_ColumnValue* other) {
  if (other != this) {
    std::swap(family_, other->family_);
    qualifier_value_.Swap(&other->qualifier_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutationProto_ColumnValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationProto_ColumnValue_descriptor_;
  metadata.reflection = MutationProto_ColumnValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MutationProto::kRowFieldNumber;
const int MutationProto::kMutateTypeFieldNumber;
const int MutationProto::kColumnValueFieldNumber;
const int MutationProto::kTimestampFieldNumber;
const int MutationProto::kAttributeFieldNumber;
const int MutationProto::kDurabilityFieldNumber;
const int MutationProto::kTimeRangeFieldNumber;
const int MutationProto::kAssociatedCellCountFieldNumber;
const int MutationProto::kNonceFieldNumber;
#endif  // !_MSC_VER

MutationProto::MutationProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutationProto::InitAsDefaultInstance() {
  time_range_ = const_cast< ::hbase::pb::TimeRange*>(&::hbase::pb::TimeRange::default_instance());
}

MutationProto::MutationProto(const MutationProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutationProto::SharedCtor() {
  _cached_size_ = 0;
  row_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mutate_type_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  durability_ = 0;
  time_range_ = NULL;
  associated_cell_count_ = 0;
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutationProto::~MutationProto() {
  SharedDtor();
}

void MutationProto::SharedDtor() {
  if (row_ != &::google::protobuf::internal::kEmptyString) {
    delete row_;
  }
  if (this != default_instance_) {
    delete time_range_;
  }
}

void MutationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationProto_descriptor_;
}

const MutationProto& MutationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MutationProto* MutationProto::default_instance_ = NULL;

MutationProto* MutationProto::New() const {
  return new MutationProto;
}

void MutationProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row()) {
      if (row_ != &::google::protobuf::internal::kEmptyString) {
        row_->clear();
      }
    }
    mutate_type_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
    durability_ = 0;
    if (has_time_range()) {
      if (time_range_ != NULL) time_range_->::hbase::pb::TimeRange::Clear();
    }
    associated_cell_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  column_value_.Clear();
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mutate_type;
        break;
      }

      // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mutate_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MutationProto_MutationType_IsValid(value)) {
            set_mutate_type(static_cast< ::hbase::pb::MutationProto_MutationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_column_value;
        break;
      }

      // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_column_value;
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // repeated .hbase.pb.NameBytesPair attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectTag(48)) goto parse_durability;
        break;
      }

      // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durability:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MutationProto_Durability_IsValid(value)) {
            set_durability(static_cast< ::hbase::pb::MutationProto_Durability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_time_range;
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_associated_cell_count;
        break;
      }

      // optional int32 associated_cell_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_associated_cell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &associated_cell_count_)));
          set_has_associated_cell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row(), output);
  }

  // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
  if (has_mutate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mutate_type(), output);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
  for (int i = 0; i < this->column_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->column_value(i), output);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }

  // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->durability(), output);
  }

  // optional .hbase.pb.TimeRange time_range = 7;
  if (has_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->time_range(), output);
  }

  // optional int32 associated_cell_count = 8;
  if (has_associated_cell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->associated_cell_count(), output);
  }

  // optional uint64 nonce = 9;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutationProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes row = 1;
  if (has_row()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
  if (has_mutate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mutate_type(), target);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
  for (int i = 0; i < this->column_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->column_value(i), target);
  }

  // optional uint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }

  // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->durability(), target);
  }

  // optional .hbase.pb.TimeRange time_range = 7;
  if (has_time_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->time_range(), target);
  }

  // optional int32 associated_cell_count = 8;
  if (has_associated_cell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->associated_cell_count(), target);
  }

  // optional uint64 nonce = 9;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutationProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row());
    }

    // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
    if (has_mutate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mutate_type());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->durability());
    }

    // optional .hbase.pb.TimeRange time_range = 7;
    if (has_time_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_range());
    }

    // optional int32 associated_cell_count = 8;
    if (has_associated_cell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->associated_cell_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 nonce = 9;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
  total_size += 1 * this->column_value_size();
  for (int i = 0; i < this->column_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_value(i));
  }

  // repeated .hbase.pb.NameBytesPair attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutationProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutationProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutationProto::MergeFrom(const MutationProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_value_.MergeFrom(from.column_value_);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_mutate_type()) {
      set_mutate_type(from.mutate_type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_durability()) {
      set_durability(from.durability());
    }
    if (from.has_time_range()) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (from.has_associated_cell_count()) {
      set_associated_cell_count(from.associated_cell_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutationProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationProto::CopyFrom(const MutationProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationProto::IsInitialized() const {

  for (int i = 0; i < column_value_size(); i++) {
    if (!this->column_value(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void MutationProto::Swap(MutationProto* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(mutate_type_, other->mutate_type_);
    column_value_.Swap(&other->column_value_);
    std::swap(timestamp_, other->timestamp_);
    attribute_.Swap(&other->attribute_);
    std::swap(durability_, other->durability_);
    std::swap(time_range_, other->time_range_);
    std::swap(associated_cell_count_, other->associated_cell_count_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationProto_descriptor_;
  metadata.reflection = MutationProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutateRequest::kRegionFieldNumber;
const int MutateRequest::kMutationFieldNumber;
const int MutateRequest::kConditionFieldNumber;
const int MutateRequest::kNonceGroupFieldNumber;
#endif  // !_MSC_VER

MutateRequest::MutateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutateRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  mutation_ = const_cast< ::hbase::pb::MutationProto*>(&::hbase::pb::MutationProto::default_instance());
  condition_ = const_cast< ::hbase::pb::Condition*>(&::hbase::pb::Condition::default_instance());
}

MutateRequest::MutateRequest(const MutateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutateRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  mutation_ = NULL;
  condition_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutateRequest::~MutateRequest() {
  SharedDtor();
}

void MutateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete mutation_;
    delete condition_;
  }
}

void MutateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRequest_descriptor_;
}

const MutateRequest& MutateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MutateRequest* MutateRequest::default_instance_ = NULL;

MutateRequest* MutateRequest::New() const {
  return new MutateRequest;
}

void MutateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_mutation()) {
      if (mutation_ != NULL) mutation_->::hbase::pb::MutationProto::Clear();
    }
    if (has_condition()) {
      if (condition_ != NULL) condition_->::hbase::pb::Condition::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mutation;
        break;
      }

      // required .hbase.pb.MutationProto mutation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mutation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_condition;
        break;
      }

      // optional .hbase.pb.Condition condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // required .hbase.pb.MutationProto mutation = 2;
  if (has_mutation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mutation(), output);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->condition(), output);
  }

  // optional uint64 nonce_group = 4;
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // required .hbase.pb.MutationProto mutation = 2;
  if (has_mutation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mutation(), target);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->condition(), target);
  }

  // optional uint64 nonce_group = 4;
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // required .hbase.pb.MutationProto mutation = 2;
    if (has_mutation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutation());
    }

    // optional .hbase.pb.Condition condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // optional uint64 nonce_group = 4;
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutateRequest::MergeFrom(const MutateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_mutation()) {
      mutable_mutation()->::hbase::pb::MutationProto::MergeFrom(from.mutation());
    }
    if (from.has_condition()) {
      mutable_condition()->::hbase::pb::Condition::MergeFrom(from.condition());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRequest::CopyFrom(const MutateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_mutation()) {
    if (!this->mutation().IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  return true;
}

void MutateRequest::Swap(MutateRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(mutation_, other->mutation_);
    std::swap(condition_, other->condition_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRequest_descriptor_;
  metadata.reflection = MutateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutateResponse::kResultFieldNumber;
const int MutateResponse::kProcessedFieldNumber;
#endif  // !_MSC_VER

MutateResponse::MutateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutateResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::hbase::pb::Result*>(&::hbase::pb::Result::default_instance());
}

MutateResponse::MutateResponse(const MutateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  processed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutateResponse::~MutateResponse() {
  SharedDtor();
}

void MutateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void MutateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateResponse_descriptor_;
}

const MutateResponse& MutateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MutateResponse* MutateResponse::default_instance_ = NULL;

MutateResponse* MutateResponse::New() const {
  return new MutateResponse;
}

void MutateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::hbase::pb::Result::Clear();
    }
    processed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_processed;
        break;
      }

      // optional bool processed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
          set_has_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional bool processed = 2;
  if (has_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->processed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional bool processed = 2;
  if (has_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->processed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional bool processed = 2;
    if (has_processed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutateResponse::MergeFrom(const MutateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::hbase::pb::Result::MergeFrom(from.result());
    }
    if (from.has_processed()) {
      set_processed(from.processed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateResponse::CopyFrom(const MutateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateResponse::IsInitialized() const {

  return true;
}

void MutateResponse::Swap(MutateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(processed_, other->processed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateResponse_descriptor_;
  metadata.reflection = MutateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scan::kColumnFieldNumber;
const int Scan::kAttributeFieldNumber;
const int Scan::kStartRowFieldNumber;
const int Scan::kStopRowFieldNumber;
const int Scan::kFilterFieldNumber;
const int Scan::kTimeRangeFieldNumber;
const int Scan::kMaxVersionsFieldNumber;
const int Scan::kCacheBlocksFieldNumber;
const int Scan::kBatchSizeFieldNumber;
const int Scan::kMaxResultSizeFieldNumber;
const int Scan::kStoreLimitFieldNumber;
const int Scan::kStoreOffsetFieldNumber;
const int Scan::kLoadColumnFamiliesOnDemandFieldNumber;
const int Scan::kSmallFieldNumber;
const int Scan::kReversedFieldNumber;
const int Scan::kConsistencyFieldNumber;
const int Scan::kCachingFieldNumber;
const int Scan::kAllowPartialResultsFieldNumber;
const int Scan::kCfTimeRangeFieldNumber;
#endif  // !_MSC_VER

Scan::Scan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scan::InitAsDefaultInstance() {
  filter_ = const_cast< ::hbase::pb::Filter*>(&::hbase::pb::Filter::default_instance());
  time_range_ = const_cast< ::hbase::pb::TimeRange*>(&::hbase::pb::TimeRange::default_instance());
}

Scan::Scan(const Scan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scan::SharedCtor() {
  _cached_size_ = 0;
  start_row_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stop_row_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = NULL;
  time_range_ = NULL;
  max_versions_ = 1u;
  cache_blocks_ = true;
  batch_size_ = 0u;
  max_result_size_ = GOOGLE_ULONGLONG(0);
  store_limit_ = 0u;
  store_offset_ = 0u;
  load_column_families_on_demand_ = false;
  small_ = false;
  reversed_ = false;
  consistency_ = 0;
  caching_ = 0u;
  allow_partial_results_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scan::~Scan() {
  SharedDtor();
}

void Scan::SharedDtor() {
  if (start_row_ != &::google::protobuf::internal::kEmptyString) {
    delete start_row_;
  }
  if (stop_row_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_row_;
  }
  if (this != default_instance_) {
    delete filter_;
    delete time_range_;
  }
}

void Scan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scan_descriptor_;
}

const Scan& Scan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Scan* Scan::default_instance_ = NULL;

Scan* Scan::New() const {
  return new Scan;
}

void Scan::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_start_row()) {
      if (start_row_ != &::google::protobuf::internal::kEmptyString) {
        start_row_->clear();
      }
    }
    if (has_stop_row()) {
      if (stop_row_ != &::google::protobuf::internal::kEmptyString) {
        stop_row_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::hbase::pb::Filter::Clear();
    }
    if (has_time_range()) {
      if (time_range_ != NULL) time_range_->::hbase::pb::TimeRange::Clear();
    }
    max_versions_ = 1u;
    cache_blocks_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    batch_size_ = 0u;
    max_result_size_ = GOOGLE_ULONGLONG(0);
    store_limit_ = 0u;
    store_offset_ = 0u;
    load_column_families_on_demand_ = false;
    small_ = false;
    reversed_ = false;
    consistency_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    caching_ = 0u;
    allow_partial_results_ = false;
  }
  column_.Clear();
  attribute_.Clear();
  cf_time_range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.Column column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_column;
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .hbase.pb.NameBytesPair attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(26)) goto parse_start_row;
        break;
      }

      // optional bytes start_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stop_row;
        break;
      }

      // optional bytes stop_row = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stop_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filter;
        break;
      }

      // optional .hbase.pb.Filter filter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_time_range;
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_versions;
        break;
      }

      // optional uint32 max_versions = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_versions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_versions_)));
          set_has_max_versions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cache_blocks;
        break;
      }

      // optional bool cache_blocks = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_blocks_)));
          set_has_cache_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_result_size;
        break;
      }

      // optional uint64 max_result_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_result_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_result_size_)));
          set_has_max_result_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_store_limit;
        break;
      }

      // optional uint32 store_limit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_limit_)));
          set_has_store_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_store_offset;
        break;
      }

      // optional uint32 store_offset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_offset_)));
          set_has_store_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_load_column_families_on_demand;
        break;
      }

      // optional bool load_column_families_on_demand = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_column_families_on_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_column_families_on_demand_)));
          set_has_load_column_families_on_demand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_small;
        break;
      }

      // optional bool small = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_small:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &small_)));
          set_has_small();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_reversed;
        break;
      }

      // optional bool reversed = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reversed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reversed_)));
          set_has_reversed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_consistency;
        break;
      }

      // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::Consistency_IsValid(value)) {
            set_consistency(static_cast< ::hbase::pb::Consistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_caching;
        break;
      }

      // optional uint32 caching = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caching_)));
          set_has_caching();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_allow_partial_results;
        break;
      }

      // optional bool allow_partial_results = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_partial_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_partial_results_)));
          set_has_allow_partial_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_cf_time_range;
        break;
      }

      // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cf_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cf_time_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_cf_time_range;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.Column column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column(i), output);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  // optional bytes start_row = 3;
  if (has_start_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->start_row(), output);
  }

  // optional bytes stop_row = 4;
  if (has_stop_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stop_row(), output);
  }

  // optional .hbase.pb.Filter filter = 5;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filter(), output);
  }

  // optional .hbase.pb.TimeRange time_range = 6;
  if (has_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->time_range(), output);
  }

  // optional uint32 max_versions = 7 [default = 1];
  if (has_max_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_versions(), output);
  }

  // optional bool cache_blocks = 8 [default = true];
  if (has_cache_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->cache_blocks(), output);
  }

  // optional uint32 batch_size = 9;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->batch_size(), output);
  }

  // optional uint64 max_result_size = 10;
  if (has_max_result_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->max_result_size(), output);
  }

  // optional uint32 store_limit = 11;
  if (has_store_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->store_limit(), output);
  }

  // optional uint32 store_offset = 12;
  if (has_store_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->store_offset(), output);
  }

  // optional bool load_column_families_on_demand = 13;
  if (has_load_column_families_on_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->load_column_families_on_demand(), output);
  }

  // optional bool small = 14;
  if (has_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->small(), output);
  }

  // optional bool reversed = 15 [default = false];
  if (has_reversed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->reversed(), output);
  }

  // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
  if (has_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->consistency(), output);
  }

  // optional uint32 caching = 17;
  if (has_caching()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->caching(), output);
  }

  // optional bool allow_partial_results = 18;
  if (has_allow_partial_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->allow_partial_results(), output);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
  for (int i = 0; i < this->cf_time_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->cf_time_range(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.Column column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column(i), target);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  // optional bytes start_row = 3;
  if (has_start_row()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_row(), target);
  }

  // optional bytes stop_row = 4;
  if (has_stop_row()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stop_row(), target);
  }

  // optional .hbase.pb.Filter filter = 5;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filter(), target);
  }

  // optional .hbase.pb.TimeRange time_range = 6;
  if (has_time_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->time_range(), target);
  }

  // optional uint32 max_versions = 7 [default = 1];
  if (has_max_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_versions(), target);
  }

  // optional bool cache_blocks = 8 [default = true];
  if (has_cache_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->cache_blocks(), target);
  }

  // optional uint32 batch_size = 9;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->batch_size(), target);
  }

  // optional uint64 max_result_size = 10;
  if (has_max_result_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->max_result_size(), target);
  }

  // optional uint32 store_limit = 11;
  if (has_store_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->store_limit(), target);
  }

  // optional uint32 store_offset = 12;
  if (has_store_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->store_offset(), target);
  }

  // optional bool load_column_families_on_demand = 13;
  if (has_load_column_families_on_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->load_column_families_on_demand(), target);
  }

  // optional bool small = 14;
  if (has_small()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->small(), target);
  }

  // optional bool reversed = 15 [default = false];
  if (has_reversed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->reversed(), target);
  }

  // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
  if (has_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->consistency(), target);
  }

  // optional uint32 caching = 17;
  if (has_caching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->caching(), target);
  }

  // optional bool allow_partial_results = 18;
  if (has_allow_partial_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->allow_partial_results(), target);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
  for (int i = 0; i < this->cf_time_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->cf_time_range(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bytes start_row = 3;
    if (has_start_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_row());
    }

    // optional bytes stop_row = 4;
    if (has_stop_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stop_row());
    }

    // optional .hbase.pb.Filter filter = 5;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional .hbase.pb.TimeRange time_range = 6;
    if (has_time_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_range());
    }

    // optional uint32 max_versions = 7 [default = 1];
    if (has_max_versions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_versions());
    }

    // optional bool cache_blocks = 8 [default = true];
    if (has_cache_blocks()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 batch_size = 9;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint64 max_result_size = 10;
    if (has_max_result_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_result_size());
    }

    // optional uint32 store_limit = 11;
    if (has_store_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_limit());
    }

    // optional uint32 store_offset = 12;
    if (has_store_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_offset());
    }

    // optional bool load_column_families_on_demand = 13;
    if (has_load_column_families_on_demand()) {
      total_size += 1 + 1;
    }

    // optional bool small = 14;
    if (has_small()) {
      total_size += 1 + 1;
    }

    // optional bool reversed = 15 [default = false];
    if (has_reversed()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
    if (has_consistency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consistency());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 caching = 17;
    if (has_caching()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caching());
    }

    // optional bool allow_partial_results = 18;
    if (has_allow_partial_results()) {
      total_size += 2 + 1;
    }

  }
  // repeated .hbase.pb.Column column = 1;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  // repeated .hbase.pb.NameBytesPair attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
  total_size += 2 * this->cf_time_range_size();
  for (int i = 0; i < this->cf_time_range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cf_time_range(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scan::MergeFrom(const Scan& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  attribute_.MergeFrom(from.attribute_);
  cf_time_range_.MergeFrom(from.cf_time_range_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_start_row()) {
      set_start_row(from.start_row());
    }
    if (from.has_stop_row()) {
      set_stop_row(from.stop_row());
    }
    if (from.has_filter()) {
      mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
    }
    if (from.has_time_range()) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (from.has_max_versions()) {
      set_max_versions(from.max_versions());
    }
    if (from.has_cache_blocks()) {
      set_cache_blocks(from.cache_blocks());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_max_result_size()) {
      set_max_result_size(from.max_result_size());
    }
    if (from.has_store_limit()) {
      set_store_limit(from.store_limit());
    }
    if (from.has_store_offset()) {
      set_store_offset(from.store_offset());
    }
    if (from.has_load_column_families_on_demand()) {
      set_load_column_families_on_demand(from.load_column_families_on_demand());
    }
    if (from.has_small()) {
      set_small(from.small());
    }
    if (from.has_reversed()) {
      set_reversed(from.reversed());
    }
    if (from.has_consistency()) {
      set_consistency(from.consistency());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_caching()) {
      set_caching(from.caching());
    }
    if (from.has_allow_partial_results()) {
      set_allow_partial_results(from.allow_partial_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scan::CopyFrom(const Scan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scan::IsInitialized() const {

  for (int i = 0; i < column_size(); i++) {
    if (!this->column(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  for (int i = 0; i < cf_time_range_size(); i++) {
    if (!this->cf_time_range(i).IsInitialized()) return false;
  }
  return true;
}

void Scan::Swap(Scan* other) {
  if (other != this) {
    column_.Swap(&other->column_);
    attribute_.Swap(&other->attribute_);
    std::swap(start_row_, other->start_row_);
    std::swap(stop_row_, other->stop_row_);
    std::swap(filter_, other->filter_);
    std::swap(time_range_, other->time_range_);
    std::swap(max_versions_, other->max_versions_);
    std::swap(cache_blocks_, other->cache_blocks_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(max_result_size_, other->max_result_size_);
    std::swap(store_limit_, other->store_limit_);
    std::swap(store_offset_, other->store_offset_);
    std::swap(load_column_families_on_demand_, other->load_column_families_on_demand_);
    std::swap(small_, other->small_);
    std::swap(reversed_, other->reversed_);
    std::swap(consistency_, other->consistency_);
    std::swap(caching_, other->caching_);
    std::swap(allow_partial_results_, other->allow_partial_results_);
    cf_time_range_.Swap(&other->cf_time_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scan_descriptor_;
  metadata.reflection = Scan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanRequest::kRegionFieldNumber;
const int ScanRequest::kScanFieldNumber;
const int ScanRequest::kScannerIdFieldNumber;
const int ScanRequest::kNumberOfRowsFieldNumber;
const int ScanRequest::kCloseScannerFieldNumber;
const int ScanRequest::kNextCallSeqFieldNumber;
const int ScanRequest::kClientHandlesPartialsFieldNumber;
const int ScanRequest::kClientHandlesHeartbeatsFieldNumber;
const int ScanRequest::kTrackScanMetricsFieldNumber;
const int ScanRequest::kRenewFieldNumber;
#endif  // !_MSC_VER

ScanRequest::ScanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  scan_ = const_cast< ::hbase::pb::Scan*>(&::hbase::pb::Scan::default_instance());
}

ScanRequest::ScanRequest(const ScanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  scan_ = NULL;
  scanner_id_ = GOOGLE_ULONGLONG(0);
  number_of_rows_ = 0u;
  close_scanner_ = false;
  next_call_seq_ = GOOGLE_ULONGLONG(0);
  client_handles_partials_ = false;
  client_handles_heartbeats_ = false;
  track_scan_metrics_ = false;
  renew_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanRequest::~ScanRequest() {
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete scan_;
  }
}

void ScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanRequest_descriptor_;
}

const ScanRequest& ScanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

ScanRequest* ScanRequest::default_instance_ = NULL;

ScanRequest* ScanRequest::New() const {
  return new ScanRequest;
}

void ScanRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_scan()) {
      if (scan_ != NULL) scan_->::hbase::pb::Scan::Clear();
    }
    scanner_id_ = GOOGLE_ULONGLONG(0);
    number_of_rows_ = 0u;
    close_scanner_ = false;
    next_call_seq_ = GOOGLE_ULONGLONG(0);
    client_handles_partials_ = false;
    client_handles_heartbeats_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    track_scan_metrics_ = false;
    renew_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scan;
        break;
      }

      // optional .hbase.pb.Scan scan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scanner_id;
        break;
      }

      // optional uint64 scanner_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scanner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scanner_id_)));
          set_has_scanner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_number_of_rows;
        break;
      }

      // optional uint32 number_of_rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rows_)));
          set_has_number_of_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_close_scanner;
        break;
      }

      // optional bool close_scanner = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_scanner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_scanner_)));
          set_has_close_scanner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_next_call_seq;
        break;
      }

      // optional uint64 next_call_seq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_call_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_call_seq_)));
          set_has_next_call_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_client_handles_partials;
        break;
      }

      // optional bool client_handles_partials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_handles_partials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_handles_partials_)));
          set_has_client_handles_partials();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_client_handles_heartbeats;
        break;
      }

      // optional bool client_handles_heartbeats = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_handles_heartbeats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_handles_heartbeats_)));
          set_has_client_handles_heartbeats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_track_scan_metrics;
        break;
      }

      // optional bool track_scan_metrics = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_scan_metrics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_scan_metrics_)));
          set_has_track_scan_metrics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_renew;
        break;
      }

      // optional bool renew = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &renew_)));
          set_has_renew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional .hbase.pb.Scan scan = 2;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scan(), output);
  }

  // optional uint64 scanner_id = 3;
  if (has_scanner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scanner_id(), output);
  }

  // optional uint32 number_of_rows = 4;
  if (has_number_of_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->number_of_rows(), output);
  }

  // optional bool close_scanner = 5;
  if (has_close_scanner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->close_scanner(), output);
  }

  // optional uint64 next_call_seq = 6;
  if (has_next_call_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->next_call_seq(), output);
  }

  // optional bool client_handles_partials = 7;
  if (has_client_handles_partials()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->client_handles_partials(), output);
  }

  // optional bool client_handles_heartbeats = 8;
  if (has_client_handles_heartbeats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->client_handles_heartbeats(), output);
  }

  // optional bool track_scan_metrics = 9;
  if (has_track_scan_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->track_scan_metrics(), output);
  }

  // optional bool renew = 10 [default = false];
  if (has_renew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->renew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional .hbase.pb.Scan scan = 2;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scan(), target);
  }

  // optional uint64 scanner_id = 3;
  if (has_scanner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scanner_id(), target);
  }

  // optional uint32 number_of_rows = 4;
  if (has_number_of_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->number_of_rows(), target);
  }

  // optional bool close_scanner = 5;
  if (has_close_scanner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->close_scanner(), target);
  }

  // optional uint64 next_call_seq = 6;
  if (has_next_call_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->next_call_seq(), target);
  }

  // optional bool client_handles_partials = 7;
  if (has_client_handles_partials()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->client_handles_partials(), target);
  }

  // optional bool client_handles_heartbeats = 8;
  if (has_client_handles_heartbeats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->client_handles_heartbeats(), target);
  }

  // optional bool track_scan_metrics = 9;
  if (has_track_scan_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->track_scan_metrics(), target);
  }

  // optional bool renew = 10 [default = false];
  if (has_renew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->renew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .hbase.pb.Scan scan = 2;
    if (has_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan());
    }

    // optional uint64 scanner_id = 3;
    if (has_scanner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scanner_id());
    }

    // optional uint32 number_of_rows = 4;
    if (has_number_of_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rows());
    }

    // optional bool close_scanner = 5;
    if (has_close_scanner()) {
      total_size += 1 + 1;
    }

    // optional uint64 next_call_seq = 6;
    if (has_next_call_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_call_seq());
    }

    // optional bool client_handles_partials = 7;
    if (has_client_handles_partials()) {
      total_size += 1 + 1;
    }

    // optional bool client_handles_heartbeats = 8;
    if (has_client_handles_heartbeats()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool track_scan_metrics = 9;
    if (has_track_scan_metrics()) {
      total_size += 1 + 1;
    }

    // optional bool renew = 10 [default = false];
    if (has_renew()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_scan()) {
      mutable_scan()->::hbase::pb::Scan::MergeFrom(from.scan());
    }
    if (from.has_scanner_id()) {
      set_scanner_id(from.scanner_id());
    }
    if (from.has_number_of_rows()) {
      set_number_of_rows(from.number_of_rows());
    }
    if (from.has_close_scanner()) {
      set_close_scanner(from.close_scanner());
    }
    if (from.has_next_call_seq()) {
      set_next_call_seq(from.next_call_seq());
    }
    if (from.has_client_handles_partials()) {
      set_client_handles_partials(from.client_handles_partials());
    }
    if (from.has_client_handles_heartbeats()) {
      set_client_handles_heartbeats(from.client_handles_heartbeats());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_track_scan_metrics()) {
      set_track_scan_metrics(from.track_scan_metrics());
    }
    if (from.has_renew()) {
      set_renew(from.renew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_scan()) {
    if (!this->scan().IsInitialized()) return false;
  }
  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(scan_, other->scan_);
    std::swap(scanner_id_, other->scanner_id_);
    std::swap(number_of_rows_, other->number_of_rows_);
    std::swap(close_scanner_, other->close_scanner_);
    std::swap(next_call_seq_, other->next_call_seq_);
    std::swap(client_handles_partials_, other->client_handles_partials_);
    std::swap(client_handles_heartbeats_, other->client_handles_heartbeats_);
    std::swap(track_scan_metrics_, other->track_scan_metrics_);
    std::swap(renew_, other->renew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanRequest_descriptor_;
  metadata.reflection = ScanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanResponse::kCellsPerResultFieldNumber;
const int ScanResponse::kScannerIdFieldNumber;
const int ScanResponse::kMoreResultsFieldNumber;
const int ScanResponse::kTtlFieldNumber;
const int ScanResponse::kResultsFieldNumber;
const int ScanResponse::kStaleFieldNumber;
const int ScanResponse::kPartialFlagPerResultFieldNumber;
const int ScanResponse::kMoreResultsInRegionFieldNumber;
const int ScanResponse::kHeartbeatMessageFieldNumber;
const int ScanResponse::kScanMetricsFieldNumber;
#endif  // !_MSC_VER

ScanResponse::ScanResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanResponse::InitAsDefaultInstance() {
  scan_metrics_ = const_cast< ::hbase::pb::ScanMetrics*>(&::hbase::pb::ScanMetrics::default_instance());
}

ScanResponse::ScanResponse(const ScanResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanResponse::SharedCtor() {
  _cached_size_ = 0;
  scanner_id_ = GOOGLE_ULONGLONG(0);
  more_results_ = false;
  ttl_ = 0u;
  stale_ = false;
  more_results_in_region_ = false;
  heartbeat_message_ = false;
  scan_metrics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanResponse::~ScanResponse() {
  SharedDtor();
}

void ScanResponse::SharedDtor() {
  if (this != default_instance_) {
    delete scan_metrics_;
  }
}

void ScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanResponse_descriptor_;
}

const ScanResponse& ScanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

ScanResponse* ScanResponse::default_instance_ = NULL;

ScanResponse* ScanResponse::New() const {
  return new ScanResponse;
}

void ScanResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    scanner_id_ = GOOGLE_ULONGLONG(0);
    more_results_ = false;
    ttl_ = 0u;
    stale_ = false;
    more_results_in_region_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    heartbeat_message_ = false;
    if (has_scan_metrics()) {
      if (scan_metrics_ != NULL) scan_metrics_->::hbase::pb::ScanMetrics::Clear();
    }
  }
  cells_per_result_.Clear();
  results_.Clear();
  partial_flag_per_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cells_per_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cells_per_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cells_per_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cells_per_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cells_per_result;
        if (input->ExpectTag(16)) goto parse_scanner_id;
        break;
      }

      // optional uint64 scanner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scanner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scanner_id_)));
          set_has_scanner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_more_results;
        break;
      }

      // optional bool more_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_more_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_results_)));
          set_has_more_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }

      // optional uint32 ttl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_results;
        break;
      }

      // repeated .hbase.pb.Result results = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_results;
        if (input->ExpectTag(48)) goto parse_stale;
        break;
      }

      // optional bool stale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_)));
          set_has_stale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_partial_flag_per_result;
        break;
      }

      // repeated bool partial_flag_per_result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial_flag_per_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56, input, this->mutable_partial_flag_per_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_partial_flag_per_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_partial_flag_per_result;
        if (input->ExpectTag(64)) goto parse_more_results_in_region;
        break;
      }

      // optional bool more_results_in_region = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_more_results_in_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_results_in_region_)));
          set_has_more_results_in_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_heartbeat_message;
        break;
      }

      // optional bool heartbeat_message = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartbeat_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heartbeat_message_)));
          set_has_heartbeat_message();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_scan_metrics;
        break;
      }

      // optional .hbase.pb.ScanMetrics scan_metrics = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cells_per_result = 1;
  for (int i = 0; i < this->cells_per_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cells_per_result(i), output);
  }

  // optional uint64 scanner_id = 2;
  if (has_scanner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scanner_id(), output);
  }

  // optional bool more_results = 3;
  if (has_more_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->more_results(), output);
  }

  // optional uint32 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ttl(), output);
  }

  // repeated .hbase.pb.Result results = 5;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->results(i), output);
  }

  // optional bool stale = 6;
  if (has_stale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stale(), output);
  }

  // repeated bool partial_flag_per_result = 7;
  for (int i = 0; i < this->partial_flag_per_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      7, this->partial_flag_per_result(i), output);
  }

  // optional bool more_results_in_region = 8;
  if (has_more_results_in_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->more_results_in_region(), output);
  }

  // optional bool heartbeat_message = 9;
  if (has_heartbeat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->heartbeat_message(), output);
  }

  // optional .hbase.pb.ScanMetrics scan_metrics = 10;
  if (has_scan_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->scan_metrics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cells_per_result = 1;
  for (int i = 0; i < this->cells_per_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cells_per_result(i), target);
  }

  // optional uint64 scanner_id = 2;
  if (has_scanner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scanner_id(), target);
  }

  // optional bool more_results = 3;
  if (has_more_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->more_results(), target);
  }

  // optional uint32 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ttl(), target);
  }

  // repeated .hbase.pb.Result results = 5;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->results(i), target);
  }

  // optional bool stale = 6;
  if (has_stale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->stale(), target);
  }

  // repeated bool partial_flag_per_result = 7;
  for (int i = 0; i < this->partial_flag_per_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(7, this->partial_flag_per_result(i), target);
  }

  // optional bool more_results_in_region = 8;
  if (has_more_results_in_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->more_results_in_region(), target);
  }

  // optional bool heartbeat_message = 9;
  if (has_heartbeat_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->heartbeat_message(), target);
  }

  // optional .hbase.pb.ScanMetrics scan_metrics = 10;
  if (has_scan_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->scan_metrics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 scanner_id = 2;
    if (has_scanner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scanner_id());
    }

    // optional bool more_results = 3;
    if (has_more_results()) {
      total_size += 1 + 1;
    }

    // optional uint32 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }

    // optional bool stale = 6;
    if (has_stale()) {
      total_size += 1 + 1;
    }

    // optional bool more_results_in_region = 8;
    if (has_more_results_in_region()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool heartbeat_message = 9;
    if (has_heartbeat_message()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.ScanMetrics scan_metrics = 10;
    if (has_scan_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan_metrics());
    }

  }
  // repeated uint32 cells_per_result = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cells_per_result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cells_per_result(i));
    }
    total_size += 1 * this->cells_per_result_size() + data_size;
  }

  // repeated .hbase.pb.Result results = 5;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  // repeated bool partial_flag_per_result = 7;
  {
    int data_size = 0;
    data_size = 1 * this->partial_flag_per_result_size();
    total_size += 1 * this->partial_flag_per_result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_per_result_.MergeFrom(from.cells_per_result_);
  results_.MergeFrom(from.results_);
  partial_flag_per_result_.MergeFrom(from.partial_flag_per_result_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scanner_id()) {
      set_scanner_id(from.scanner_id());
    }
    if (from.has_more_results()) {
      set_more_results(from.more_results());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_stale()) {
      set_stale(from.stale());
    }
    if (from.has_more_results_in_region()) {
      set_more_results_in_region(from.more_results_in_region());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heartbeat_message()) {
      set_heartbeat_message(from.heartbeat_message());
    }
    if (from.has_scan_metrics()) {
      mutable_scan_metrics()->::hbase::pb::ScanMetrics::MergeFrom(from.scan_metrics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {

  return true;
}

void ScanResponse::Swap(ScanResponse* other) {
  if (other != this) {
    cells_per_result_.Swap(&other->cells_per_result_);
    std::swap(scanner_id_, other->scanner_id_);
    std::swap(more_results_, other->more_results_);
    std::swap(ttl_, other->ttl_);
    results_.Swap(&other->results_);
    std::swap(stale_, other->stale_);
    partial_flag_per_result_.Swap(&other->partial_flag_per_result_);
    std::swap(more_results_in_region_, other->more_results_in_region_);
    std::swap(heartbeat_message_, other->heartbeat_message_);
    std::swap(scan_metrics_, other->scan_metrics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanResponse_descriptor_;
  metadata.reflection = ScanResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulkLoadHFileRequest_FamilyPath::kFamilyFieldNumber;
const int BulkLoadHFileRequest_FamilyPath::kPathFieldNumber;
#endif  // !_MSC_VER

BulkLoadHFileRequest_FamilyPath::BulkLoadHFileRequest_FamilyPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulkLoadHFileRequest_FamilyPath::InitAsDefaultInstance() {
}

BulkLoadHFileRequest_FamilyPath::BulkLoadHFileRequest_FamilyPath(const BulkLoadHFileRequest_FamilyPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulkLoadHFileRequest_FamilyPath::SharedCtor() {
  _cached_size_ = 0;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulkLoadHFileRequest_FamilyPath::~BulkLoadHFileRequest_FamilyPath() {
  SharedDtor();
}

void BulkLoadHFileRequest_FamilyPath::SharedDtor() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void BulkLoadHFileRequest_FamilyPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkLoadHFileRequest_FamilyPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkLoadHFileRequest_FamilyPath_descriptor_;
}

const BulkLoadHFileRequest_FamilyPath& BulkLoadHFileRequest_FamilyPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

BulkLoadHFileRequest_FamilyPath* BulkLoadHFileRequest_FamilyPath::default_instance_ = NULL;

BulkLoadHFileRequest_FamilyPath* BulkLoadHFileRequest_FamilyPath::New() const {
  return new BulkLoadHFileRequest_FamilyPath;
}

void BulkLoadHFileRequest_FamilyPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulkLoadHFileRequest_FamilyPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulkLoadHFileRequest_FamilyPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family = 1;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulkLoadHFileRequest_FamilyPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family = 1;
  if (has_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulkLoadHFileRequest_FamilyPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkLoadHFileRequest_FamilyPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulkLoadHFileRequest_FamilyPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulkLoadHFileRequest_FamilyPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulkLoadHFileRequest_FamilyPath::MergeFrom(const BulkLoadHFileRequest_FamilyPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family()) {
      set_family(from.family());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulkLoadHFileRequest_FamilyPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadHFileRequest_FamilyPath::CopyFrom(const BulkLoadHFileRequest_FamilyPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadHFileRequest_FamilyPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BulkLoadHFileRequest_FamilyPath::Swap(BulkLoadHFileRequest_FamilyPath* other) {
  if (other != this) {
    std::swap(family_, other->family_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulkLoadHFileRequest_FamilyPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkLoadHFileRequest_FamilyPath_descriptor_;
  metadata.reflection = BulkLoadHFileRequest_FamilyPath_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BulkLoadHFileRequest::kRegionFieldNumber;
const int BulkLoadHFileRequest::kFamilyPathFieldNumber;
const int BulkLoadHFileRequest::kAssignSeqNumFieldNumber;
#endif  // !_MSC_VER

BulkLoadHFileRequest::BulkLoadHFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulkLoadHFileRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

BulkLoadHFileRequest::BulkLoadHFileRequest(const BulkLoadHFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulkLoadHFileRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  assign_seq_num_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulkLoadHFileRequest::~BulkLoadHFileRequest() {
  SharedDtor();
}

void BulkLoadHFileRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void BulkLoadHFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkLoadHFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkLoadHFileRequest_descriptor_;
}

const BulkLoadHFileRequest& BulkLoadHFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

BulkLoadHFileRequest* BulkLoadHFileRequest::default_instance_ = NULL;

BulkLoadHFileRequest* BulkLoadHFileRequest::New() const {
  return new BulkLoadHFileRequest;
}

void BulkLoadHFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    assign_seq_num_ = false;
  }
  family_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulkLoadHFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_path;
        break;
      }

      // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_family_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_path;
        if (input->ExpectTag(24)) goto parse_assign_seq_num;
        break;
      }

      // optional bool assign_seq_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assign_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assign_seq_num_)));
          set_has_assign_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulkLoadHFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
  for (int i = 0; i < this->family_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->family_path(i), output);
  }

  // optional bool assign_seq_num = 3;
  if (has_assign_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->assign_seq_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulkLoadHFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
  for (int i = 0; i < this->family_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->family_path(i), target);
  }

  // optional bool assign_seq_num = 3;
  if (has_assign_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->assign_seq_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulkLoadHFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional bool assign_seq_num = 3;
    if (has_assign_seq_num()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
  total_size += 1 * this->family_path_size();
  for (int i = 0; i < this->family_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->family_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkLoadHFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulkLoadHFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulkLoadHFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulkLoadHFileRequest::MergeFrom(const BulkLoadHFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_path_.MergeFrom(from.family_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_assign_seq_num()) {
      set_assign_seq_num(from.assign_seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulkLoadHFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadHFileRequest::CopyFrom(const BulkLoadHFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadHFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  for (int i = 0; i < family_path_size(); i++) {
    if (!this->family_path(i).IsInitialized()) return false;
  }
  return true;
}

void BulkLoadHFileRequest::Swap(BulkLoadHFileRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    family_path_.Swap(&other->family_path_);
    std::swap(assign_seq_num_, other->assign_seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulkLoadHFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkLoadHFileRequest_descriptor_;
  metadata.reflection = BulkLoadHFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulkLoadHFileResponse::kLoadedFieldNumber;
#endif  // !_MSC_VER

BulkLoadHFileResponse::BulkLoadHFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulkLoadHFileResponse::InitAsDefaultInstance() {
}

BulkLoadHFileResponse::BulkLoadHFileResponse(const BulkLoadHFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulkLoadHFileResponse::SharedCtor() {
  _cached_size_ = 0;
  loaded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulkLoadHFileResponse::~BulkLoadHFileResponse() {
  SharedDtor();
}

void BulkLoadHFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BulkLoadHFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkLoadHFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkLoadHFileResponse_descriptor_;
}

const BulkLoadHFileResponse& BulkLoadHFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

BulkLoadHFileResponse* BulkLoadHFileResponse::default_instance_ = NULL;

BulkLoadHFileResponse* BulkLoadHFileResponse::New() const {
  return new BulkLoadHFileResponse;
}

void BulkLoadHFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loaded_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulkLoadHFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool loaded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loaded_)));
          set_has_loaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulkLoadHFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool loaded = 1;
  if (has_loaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->loaded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulkLoadHFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool loaded = 1;
  if (has_loaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->loaded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulkLoadHFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool loaded = 1;
    if (has_loaded()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkLoadHFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulkLoadHFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulkLoadHFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulkLoadHFileResponse::MergeFrom(const BulkLoadHFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loaded()) {
      set_loaded(from.loaded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulkLoadHFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadHFileResponse::CopyFrom(const BulkLoadHFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadHFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BulkLoadHFileResponse::Swap(BulkLoadHFileResponse* other) {
  if (other != this) {
    std::swap(loaded_, other->loaded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulkLoadHFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkLoadHFileResponse_descriptor_;
  metadata.reflection = BulkLoadHFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoprocessorServiceCall::kRowFieldNumber;
const int CoprocessorServiceCall::kServiceNameFieldNumber;
const int CoprocessorServiceCall::kMethodNameFieldNumber;
const int CoprocessorServiceCall::kRequestFieldNumber;
#endif  // !_MSC_VER

CoprocessorServiceCall::CoprocessorServiceCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoprocessorServiceCall::InitAsDefaultInstance() {
}

CoprocessorServiceCall::CoprocessorServiceCall(const CoprocessorServiceCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoprocessorServiceCall::SharedCtor() {
  _cached_size_ = 0;
  row_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoprocessorServiceCall::~CoprocessorServiceCall() {
  SharedDtor();
}

void CoprocessorServiceCall::SharedDtor() {
  if (row_ != &::google::protobuf::internal::kEmptyString) {
    delete row_;
  }
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (this != default_instance_) {
  }
}

void CoprocessorServiceCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoprocessorServiceCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoprocessorServiceCall_descriptor_;
}

const CoprocessorServiceCall& CoprocessorServiceCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

CoprocessorServiceCall* CoprocessorServiceCall::default_instance_ = NULL;

CoprocessorServiceCall* CoprocessorServiceCall::New() const {
  return new CoprocessorServiceCall;
}

void CoprocessorServiceCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row()) {
      if (row_ != &::google::protobuf::internal::kEmptyString) {
        row_->clear();
      }
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::kEmptyString) {
        request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoprocessorServiceCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }

      // required string service_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_method_name;
        break;
      }

      // required string method_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }

      // required bytes request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoprocessorServiceCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row(), output);
  }

  // required string service_name = 2;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }

  // required string method_name = 3;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method_name(), output);
  }

  // required bytes request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoprocessorServiceCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes row = 1;
  if (has_row()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // required string service_name = 2;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // required string method_name = 3;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // required bytes request = 4;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoprocessorServiceCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row());
    }

    // required string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // required string method_name = 3;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // required bytes request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoprocessorServiceCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoprocessorServiceCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoprocessorServiceCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoprocessorServiceCall::MergeFrom(const CoprocessorServiceCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoprocessorServiceCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceCall::CopyFrom(const CoprocessorServiceCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CoprocessorServiceCall::Swap(CoprocessorServiceCall* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(service_name_, other->service_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoprocessorServiceCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoprocessorServiceCall_descriptor_;
  metadata.reflection = CoprocessorServiceCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoprocessorServiceResult::kValueFieldNumber;
#endif  // !_MSC_VER

CoprocessorServiceResult::CoprocessorServiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoprocessorServiceResult::InitAsDefaultInstance() {
  value_ = const_cast< ::hbase::pb::NameBytesPair*>(&::hbase::pb::NameBytesPair::default_instance());
}

CoprocessorServiceResult::CoprocessorServiceResult(const CoprocessorServiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoprocessorServiceResult::SharedCtor() {
  _cached_size_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoprocessorServiceResult::~CoprocessorServiceResult() {
  SharedDtor();
}

void CoprocessorServiceResult::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void CoprocessorServiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoprocessorServiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoprocessorServiceResult_descriptor_;
}

const CoprocessorServiceResult& CoprocessorServiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

CoprocessorServiceResult* CoprocessorServiceResult::default_instance_ = NULL;

CoprocessorServiceResult* CoprocessorServiceResult::New() const {
  return new CoprocessorServiceResult;
}

void CoprocessorServiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != NULL) value_->::hbase::pb::NameBytesPair::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoprocessorServiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.NameBytesPair value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoprocessorServiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.NameBytesPair value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoprocessorServiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.NameBytesPair value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoprocessorServiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.NameBytesPair value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoprocessorServiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoprocessorServiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoprocessorServiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoprocessorServiceResult::MergeFrom(const CoprocessorServiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      mutable_value()->::hbase::pb::NameBytesPair::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoprocessorServiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceResult::CopyFrom(const CoprocessorServiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceResult::IsInitialized() const {

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void CoprocessorServiceResult::Swap(CoprocessorServiceResult* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoprocessorServiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoprocessorServiceResult_descriptor_;
  metadata.reflection = CoprocessorServiceResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoprocessorServiceRequest::kRegionFieldNumber;
const int CoprocessorServiceRequest::kCallFieldNumber;
#endif  // !_MSC_VER

CoprocessorServiceRequest::CoprocessorServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoprocessorServiceRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  call_ = const_cast< ::hbase::pb::CoprocessorServiceCall*>(&::hbase::pb::CoprocessorServiceCall::default_instance());
}

CoprocessorServiceRequest::CoprocessorServiceRequest(const CoprocessorServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoprocessorServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  call_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoprocessorServiceRequest::~CoprocessorServiceRequest() {
  SharedDtor();
}

void CoprocessorServiceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete call_;
  }
}

void CoprocessorServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoprocessorServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoprocessorServiceRequest_descriptor_;
}

const CoprocessorServiceRequest& CoprocessorServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

CoprocessorServiceRequest* CoprocessorServiceRequest::default_instance_ = NULL;

CoprocessorServiceRequest* CoprocessorServiceRequest::New() const {
  return new CoprocessorServiceRequest;
}

void CoprocessorServiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_call()) {
      if (call_ != NULL) call_->::hbase::pb::CoprocessorServiceCall::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoprocessorServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_call;
        break;
      }

      // required .hbase.pb.CoprocessorServiceCall call = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoprocessorServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // required .hbase.pb.CoprocessorServiceCall call = 2;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoprocessorServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // required .hbase.pb.CoprocessorServiceCall call = 2;
  if (has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoprocessorServiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // required .hbase.pb.CoprocessorServiceCall call = 2;
    if (has_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoprocessorServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoprocessorServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoprocessorServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoprocessorServiceRequest::MergeFrom(const CoprocessorServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_call()) {
      mutable_call()->::hbase::pb::CoprocessorServiceCall::MergeFrom(from.call());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoprocessorServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceRequest::CopyFrom(const CoprocessorServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_call()) {
    if (!this->call().IsInitialized()) return false;
  }
  return true;
}

void CoprocessorServiceRequest::Swap(CoprocessorServiceRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(call_, other->call_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoprocessorServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoprocessorServiceRequest_descriptor_;
  metadata.reflection = CoprocessorServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoprocessorServiceResponse::kRegionFieldNumber;
const int CoprocessorServiceResponse::kValueFieldNumber;
#endif  // !_MSC_VER

CoprocessorServiceResponse::CoprocessorServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoprocessorServiceResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  value_ = const_cast< ::hbase::pb::NameBytesPair*>(&::hbase::pb::NameBytesPair::default_instance());
}

CoprocessorServiceResponse::CoprocessorServiceResponse(const CoprocessorServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoprocessorServiceResponse::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoprocessorServiceResponse::~CoprocessorServiceResponse() {
  SharedDtor();
}

void CoprocessorServiceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete value_;
  }
}

void CoprocessorServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoprocessorServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoprocessorServiceResponse_descriptor_;
}

const CoprocessorServiceResponse& CoprocessorServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

CoprocessorServiceResponse* CoprocessorServiceResponse::default_instance_ = NULL;

CoprocessorServiceResponse* CoprocessorServiceResponse::New() const {
  return new CoprocessorServiceResponse;
}

void CoprocessorServiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::hbase::pb::NameBytesPair::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoprocessorServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .hbase.pb.NameBytesPair value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoprocessorServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // required .hbase.pb.NameBytesPair value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoprocessorServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // required .hbase.pb.NameBytesPair value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoprocessorServiceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // required .hbase.pb.NameBytesPair value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoprocessorServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoprocessorServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoprocessorServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoprocessorServiceResponse::MergeFrom(const CoprocessorServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_value()) {
      mutable_value()->::hbase::pb::NameBytesPair::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoprocessorServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceResponse::CopyFrom(const CoprocessorServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void CoprocessorServiceResponse::Swap(CoprocessorServiceResponse* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoprocessorServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoprocessorServiceResponse_descriptor_;
  metadata.reflection = CoprocessorServiceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Action::kIndexFieldNumber;
const int Action::kMutationFieldNumber;
const int Action::kGetFieldNumber;
const int Action::kServiceCallFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action::InitAsDefaultInstance() {
  mutation_ = const_cast< ::hbase::pb::MutationProto*>(&::hbase::pb::MutationProto::default_instance());
  get_ = const_cast< ::hbase::pb::Get*>(&::hbase::pb::Get::default_instance());
  service_call_ = const_cast< ::hbase::pb::CoprocessorServiceCall*>(&::hbase::pb::CoprocessorServiceCall::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  mutation_ = NULL;
  get_ = NULL;
  service_call_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
    delete mutation_;
    delete get_;
    delete service_call_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_mutation()) {
      if (mutation_ != NULL) mutation_->::hbase::pb::MutationProto::Clear();
    }
    if (has_get()) {
      if (get_ != NULL) get_->::hbase::pb::Get::Clear();
    }
    if (has_service_call()) {
      if (service_call_ != NULL) service_call_->::hbase::pb::CoprocessorServiceCall::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mutation;
        break;
      }

      // optional .hbase.pb.MutationProto mutation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mutation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get;
        break;
      }

      // optional .hbase.pb.Get get = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_service_call;
        break;
      }

      // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_call()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .hbase.pb.MutationProto mutation = 2;
  if (has_mutation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mutation(), output);
  }

  // optional .hbase.pb.Get get = 3;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get(), output);
  }

  // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
  if (has_service_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->service_call(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .hbase.pb.MutationProto mutation = 2;
  if (has_mutation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mutation(), target);
  }

  // optional .hbase.pb.Get get = 3;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get(), target);
  }

  // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
  if (has_service_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->service_call(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .hbase.pb.MutationProto mutation = 2;
    if (has_mutation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutation());
    }

    // optional .hbase.pb.Get get = 3;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
    }

    // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
    if (has_service_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_call());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_mutation()) {
      mutable_mutation()->::hbase::pb::MutationProto::MergeFrom(from.mutation());
    }
    if (from.has_get()) {
      mutable_get()->::hbase::pb::Get::MergeFrom(from.get());
    }
    if (from.has_service_call()) {
      mutable_service_call()->::hbase::pb::CoprocessorServiceCall::MergeFrom(from.service_call());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {

  if (has_mutation()) {
    if (!this->mutation().IsInitialized()) return false;
  }
  if (has_get()) {
    if (!this->get().IsInitialized()) return false;
  }
  if (has_service_call()) {
    if (!this->service_call().IsInitialized()) return false;
  }
  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(mutation_, other->mutation_);
    std::swap(get_, other->get_);
    std::swap(service_call_, other->service_call_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionAction::kRegionFieldNumber;
const int RegionAction::kAtomicFieldNumber;
const int RegionAction::kActionFieldNumber;
#endif  // !_MSC_VER

RegionAction::RegionAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionAction::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

RegionAction::RegionAction(const RegionAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionAction::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  atomic_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionAction::~RegionAction() {
  SharedDtor();
}

void RegionAction::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void RegionAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionAction_descriptor_;
}

const RegionAction& RegionAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

RegionAction* RegionAction::default_instance_ = NULL;

RegionAction* RegionAction::New() const {
  return new RegionAction;
}

void RegionAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    atomic_ = false;
  }
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atomic;
        break;
      }

      // optional bool atomic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atomic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &atomic_)));
          set_has_atomic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // repeated .hbase.pb.Action action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional bool atomic = 2;
  if (has_atomic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->atomic(), output);
  }

  // repeated .hbase.pb.Action action = 3;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional bool atomic = 2;
  if (has_atomic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->atomic(), target);
  }

  // repeated .hbase.pb.Action action = 3;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional bool atomic = 2;
    if (has_atomic()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.Action action = 3;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionAction::MergeFrom(const RegionAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_atomic()) {
      set_atomic(from.atomic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionAction::CopyFrom(const RegionAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  for (int i = 0; i < action_size(); i++) {
    if (!this->action(i).IsInitialized()) return false;
  }
  return true;
}

void RegionAction::Swap(RegionAction* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(atomic_, other->atomic_);
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionAction_descriptor_;
  metadata.reflection = RegionAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionLoadStats::kMemstoreLoadFieldNumber;
const int RegionLoadStats::kHeapOccupancyFieldNumber;
const int RegionLoadStats::kCompactionPressureFieldNumber;
#endif  // !_MSC_VER

RegionLoadStats::RegionLoadStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionLoadStats::InitAsDefaultInstance() {
}

RegionLoadStats::RegionLoadStats(const RegionLoadStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionLoadStats::SharedCtor() {
  _cached_size_ = 0;
  memstoreload_ = 0;
  heapoccupancy_ = 0;
  compactionpressure_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLoadStats::~RegionLoadStats() {
  SharedDtor();
}

void RegionLoadStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionLoadStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLoadStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLoadStats_descriptor_;
}

const RegionLoadStats& RegionLoadStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

RegionLoadStats* RegionLoadStats::default_instance_ = NULL;

RegionLoadStats* RegionLoadStats::New() const {
  return new RegionLoadStats;
}

void RegionLoadStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memstoreload_ = 0;
    heapoccupancy_ = 0;
    compactionpressure_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLoadStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 memstoreLoad = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memstoreload_)));
          set_has_memstoreload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heapOccupancy;
        break;
      }

      // optional int32 heapOccupancy = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heapOccupancy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heapoccupancy_)));
          set_has_heapoccupancy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compactionPressure;
        break;
      }

      // optional int32 compactionPressure = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compactionPressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compactionpressure_)));
          set_has_compactionpressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionLoadStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 memstoreLoad = 1 [default = 0];
  if (has_memstoreload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->memstoreload(), output);
  }

  // optional int32 heapOccupancy = 2 [default = 0];
  if (has_heapoccupancy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heapoccupancy(), output);
  }

  // optional int32 compactionPressure = 3 [default = 0];
  if (has_compactionpressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compactionpressure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionLoadStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 memstoreLoad = 1 [default = 0];
  if (has_memstoreload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->memstoreload(), target);
  }

  // optional int32 heapOccupancy = 2 [default = 0];
  if (has_heapoccupancy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heapoccupancy(), target);
  }

  // optional int32 compactionPressure = 3 [default = 0];
  if (has_compactionpressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compactionpressure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionLoadStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 memstoreLoad = 1 [default = 0];
    if (has_memstoreload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memstoreload());
    }

    // optional int32 heapOccupancy = 2 [default = 0];
    if (has_heapoccupancy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heapoccupancy());
    }

    // optional int32 compactionPressure = 3 [default = 0];
    if (has_compactionpressure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compactionpressure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLoadStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLoadStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLoadStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLoadStats::MergeFrom(const RegionLoadStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memstoreload()) {
      set_memstoreload(from.memstoreload());
    }
    if (from.has_heapoccupancy()) {
      set_heapoccupancy(from.heapoccupancy());
    }
    if (from.has_compactionpressure()) {
      set_compactionpressure(from.compactionpressure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLoadStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLoadStats::CopyFrom(const RegionLoadStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLoadStats::IsInitialized() const {

  return true;
}

void RegionLoadStats::Swap(RegionLoadStats* other) {
  if (other != this) {
    std::swap(memstoreload_, other->memstoreload_);
    std::swap(heapoccupancy_, other->heapoccupancy_);
    std::swap(compactionpressure_, other->compactionpressure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLoadStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLoadStats_descriptor_;
  metadata.reflection = RegionLoadStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiRegionLoadStats::kRegionFieldNumber;
const int MultiRegionLoadStats::kStatFieldNumber;
#endif  // !_MSC_VER

MultiRegionLoadStats::MultiRegionLoadStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiRegionLoadStats::InitAsDefaultInstance() {
}

MultiRegionLoadStats::MultiRegionLoadStats(const MultiRegionLoadStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiRegionLoadStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRegionLoadStats::~MultiRegionLoadStats() {
  SharedDtor();
}

void MultiRegionLoadStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiRegionLoadStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRegionLoadStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRegionLoadStats_descriptor_;
}

const MultiRegionLoadStats& MultiRegionLoadStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MultiRegionLoadStats* MultiRegionLoadStats::default_instance_ = NULL;

MultiRegionLoadStats* MultiRegionLoadStats::New() const {
  return new MultiRegionLoadStats;
}

void MultiRegionLoadStats::Clear() {
  region_.Clear();
  stat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiRegionLoadStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_region;
        if (input->ExpectTag(18)) goto parse_stat;
        break;
      }

      // repeated .hbase.pb.RegionLoadStats stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stat;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiRegionLoadStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.RegionSpecifier region = 1;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(i), output);
  }

  // repeated .hbase.pb.RegionLoadStats stat = 2;
  for (int i = 0; i < this->stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiRegionLoadStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.RegionSpecifier region = 1;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(i), target);
  }

  // repeated .hbase.pb.RegionLoadStats stat = 2;
  for (int i = 0; i < this->stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stat(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiRegionLoadStats::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.RegionSpecifier region = 1;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  // repeated .hbase.pb.RegionLoadStats stat = 2;
  total_size += 1 * this->stat_size();
  for (int i = 0; i < this->stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRegionLoadStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiRegionLoadStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiRegionLoadStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiRegionLoadStats::MergeFrom(const MultiRegionLoadStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  stat_.MergeFrom(from.stat_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiRegionLoadStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRegionLoadStats::CopyFrom(const MultiRegionLoadStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRegionLoadStats::IsInitialized() const {

  for (int i = 0; i < region_size(); i++) {
    if (!this->region(i).IsInitialized()) return false;
  }
  return true;
}

void MultiRegionLoadStats::Swap(MultiRegionLoadStats* other) {
  if (other != this) {
    region_.Swap(&other->region_);
    stat_.Swap(&other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiRegionLoadStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRegionLoadStats_descriptor_;
  metadata.reflection = MultiRegionLoadStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultOrException::kIndexFieldNumber;
const int ResultOrException::kResultFieldNumber;
const int ResultOrException::kExceptionFieldNumber;
const int ResultOrException::kServiceResultFieldNumber;
const int ResultOrException::kLoadStatsFieldNumber;
#endif  // !_MSC_VER

ResultOrException::ResultOrException()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultOrException::InitAsDefaultInstance() {
  result_ = const_cast< ::hbase::pb::Result*>(&::hbase::pb::Result::default_instance());
  exception_ = const_cast< ::hbase::pb::NameBytesPair*>(&::hbase::pb::NameBytesPair::default_instance());
  service_result_ = const_cast< ::hbase::pb::CoprocessorServiceResult*>(&::hbase::pb::CoprocessorServiceResult::default_instance());
  loadstats_ = const_cast< ::hbase::pb::RegionLoadStats*>(&::hbase::pb::RegionLoadStats::default_instance());
}

ResultOrException::ResultOrException(const ResultOrException& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultOrException::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  result_ = NULL;
  exception_ = NULL;
  service_result_ = NULL;
  loadstats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultOrException::~ResultOrException() {
  SharedDtor();
}

void ResultOrException::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete exception_;
    delete service_result_;
    delete loadstats_;
  }
}

void ResultOrException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultOrException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultOrException_descriptor_;
}

const ResultOrException& ResultOrException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

ResultOrException* ResultOrException::default_instance_ = NULL;

ResultOrException* ResultOrException::New() const {
  return new ResultOrException;
}

void ResultOrException::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_result()) {
      if (result_ != NULL) result_->::hbase::pb::Result::Clear();
    }
    if (has_exception()) {
      if (exception_ != NULL) exception_->::hbase::pb::NameBytesPair::Clear();
    }
    if (has_service_result()) {
      if (service_result_ != NULL) service_result_->::hbase::pb::CoprocessorServiceResult::Clear();
    }
    if (has_loadstats()) {
      if (loadstats_ != NULL) loadstats_->::hbase::pb::RegionLoadStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultOrException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .hbase.pb.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exception;
        break;
      }

      // optional .hbase.pb.NameBytesPair exception = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_service_result;
        break;
      }

      // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_loadStats;
        break;
      }

      // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loadStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultOrException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .hbase.pb.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  // optional .hbase.pb.NameBytesPair exception = 3;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exception(), output);
  }

  // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
  if (has_service_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->service_result(), output);
  }

  // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
  if (has_loadstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->loadstats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultOrException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .hbase.pb.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  // optional .hbase.pb.NameBytesPair exception = 3;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exception(), target);
  }

  // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
  if (has_service_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->service_result(), target);
  }

  // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
  if (has_loadstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->loadstats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultOrException::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .hbase.pb.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .hbase.pb.NameBytesPair exception = 3;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception());
    }

    // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
    if (has_service_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_result());
    }

    // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
    if (has_loadstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loadstats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultOrException::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultOrException* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultOrException*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultOrException::MergeFrom(const ResultOrException& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_result()) {
      mutable_result()->::hbase::pb::Result::MergeFrom(from.result());
    }
    if (from.has_exception()) {
      mutable_exception()->::hbase::pb::NameBytesPair::MergeFrom(from.exception());
    }
    if (from.has_service_result()) {
      mutable_service_result()->::hbase::pb::CoprocessorServiceResult::MergeFrom(from.service_result());
    }
    if (from.has_loadstats()) {
      mutable_loadstats()->::hbase::pb::RegionLoadStats::MergeFrom(from.loadstats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultOrException::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultOrException::CopyFrom(const ResultOrException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultOrException::IsInitialized() const {

  if (has_exception()) {
    if (!this->exception().IsInitialized()) return false;
  }
  if (has_service_result()) {
    if (!this->service_result().IsInitialized()) return false;
  }
  return true;
}

void ResultOrException::Swap(ResultOrException* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(result_, other->result_);
    std::swap(exception_, other->exception_);
    std::swap(service_result_, other->service_result_);
    std::swap(loadstats_, other->loadstats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultOrException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultOrException_descriptor_;
  metadata.reflection = ResultOrException_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionActionResult::kResultOrExceptionFieldNumber;
const int RegionActionResult::kExceptionFieldNumber;
#endif  // !_MSC_VER

RegionActionResult::RegionActionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionActionResult::InitAsDefaultInstance() {
  exception_ = const_cast< ::hbase::pb::NameBytesPair*>(&::hbase::pb::NameBytesPair::default_instance());
}

RegionActionResult::RegionActionResult(const RegionActionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionActionResult::SharedCtor() {
  _cached_size_ = 0;
  exception_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionActionResult::~RegionActionResult() {
  SharedDtor();
}

void RegionActionResult::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
  }
}

void RegionActionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionActionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionActionResult_descriptor_;
}

const RegionActionResult& RegionActionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

RegionActionResult* RegionActionResult::default_instance_ = NULL;

RegionActionResult* RegionActionResult::New() const {
  return new RegionActionResult;
}

void RegionActionResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_exception()) {
      if (exception_ != NULL) exception_->::hbase::pb::NameBytesPair::Clear();
    }
  }
  resultorexception_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionActionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.ResultOrException resultOrException = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultOrException:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resultorexception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resultOrException;
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .hbase.pb.NameBytesPair exception = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionActionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.ResultOrException resultOrException = 1;
  for (int i = 0; i < this->resultorexception_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resultorexception(i), output);
  }

  // optional .hbase.pb.NameBytesPair exception = 2;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exception(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionActionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.ResultOrException resultOrException = 1;
  for (int i = 0; i < this->resultorexception_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resultorexception(i), target);
  }

  // optional .hbase.pb.NameBytesPair exception = 2;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exception(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionActionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .hbase.pb.NameBytesPair exception = 2;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception());
    }

  }
  // repeated .hbase.pb.ResultOrException resultOrException = 1;
  total_size += 1 * this->resultorexception_size();
  for (int i = 0; i < this->resultorexception_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resultorexception(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionActionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionActionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionActionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionActionResult::MergeFrom(const RegionActionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  resultorexception_.MergeFrom(from.resultorexception_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_exception()) {
      mutable_exception()->::hbase::pb::NameBytesPair::MergeFrom(from.exception());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionActionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionActionResult::CopyFrom(const RegionActionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionActionResult::IsInitialized() const {

  for (int i = 0; i < resultorexception_size(); i++) {
    if (!this->resultorexception(i).IsInitialized()) return false;
  }
  if (has_exception()) {
    if (!this->exception().IsInitialized()) return false;
  }
  return true;
}

void RegionActionResult::Swap(RegionActionResult* other) {
  if (other != this) {
    resultorexception_.Swap(&other->resultorexception_);
    std::swap(exception_, other->exception_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionActionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionActionResult_descriptor_;
  metadata.reflection = RegionActionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiRequest::kRegionActionFieldNumber;
const int MultiRequest::kNonceGroupFieldNumber;
const int MultiRequest::kConditionFieldNumber;
#endif  // !_MSC_VER

MultiRequest::MultiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiRequest::InitAsDefaultInstance() {
  condition_ = const_cast< ::hbase::pb::Condition*>(&::hbase::pb::Condition::default_instance());
}

MultiRequest::MultiRequest(const MultiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiRequest::SharedCtor() {
  _cached_size_ = 0;
  noncegroup_ = GOOGLE_ULONGLONG(0);
  condition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRequest::~MultiRequest() {
  SharedDtor();
}

void MultiRequest::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
  }
}

void MultiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRequest_descriptor_;
}

const MultiRequest& MultiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MultiRequest* MultiRequest::default_instance_ = NULL;

MultiRequest* MultiRequest::New() const {
  return new MultiRequest;
}

void MultiRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    noncegroup_ = GOOGLE_ULONGLONG(0);
    if (has_condition()) {
      if (condition_ != NULL) condition_->::hbase::pb::Condition::Clear();
    }
  }
  regionaction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionAction regionAction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regionAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regionaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_regionAction;
        if (input->ExpectTag(16)) goto parse_nonceGroup;
        break;
      }

      // optional uint64 nonceGroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonceGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &noncegroup_)));
          set_has_noncegroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_condition;
        break;
      }

      // optional .hbase.pb.Condition condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.RegionAction regionAction = 1;
  for (int i = 0; i < this->regionaction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regionaction(i), output);
  }

  // optional uint64 nonceGroup = 2;
  if (has_noncegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->noncegroup(), output);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.RegionAction regionAction = 1;
  for (int i = 0; i < this->regionaction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->regionaction(i), target);
  }

  // optional uint64 nonceGroup = 2;
  if (has_noncegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->noncegroup(), target);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 nonceGroup = 2;
    if (has_noncegroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->noncegroup());
    }

    // optional .hbase.pb.Condition condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

  }
  // repeated .hbase.pb.RegionAction regionAction = 1;
  total_size += 1 * this->regionaction_size();
  for (int i = 0; i < this->regionaction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regionaction(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiRequest::MergeFrom(const MultiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  regionaction_.MergeFrom(from.regionaction_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_noncegroup()) {
      set_noncegroup(from.noncegroup());
    }
    if (from.has_condition()) {
      mutable_condition()->::hbase::pb::Condition::MergeFrom(from.condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRequest::CopyFrom(const MultiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRequest::IsInitialized() const {

  for (int i = 0; i < regionaction_size(); i++) {
    if (!this->regionaction(i).IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  return true;
}

void MultiRequest::Swap(MultiRequest* other) {
  if (other != this) {
    regionaction_.Swap(&other->regionaction_);
    std::swap(noncegroup_, other->noncegroup_);
    std::swap(condition_, other->condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRequest_descriptor_;
  metadata.reflection = MultiRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiResponse::kRegionActionResultFieldNumber;
const int MultiResponse::kProcessedFieldNumber;
const int MultiResponse::kRegionStatisticsFieldNumber;
#endif  // !_MSC_VER

MultiResponse::MultiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiResponse::InitAsDefaultInstance() {
  regionstatistics_ = const_cast< ::hbase::pb::MultiRegionLoadStats*>(&::hbase::pb::MultiRegionLoadStats::default_instance());
}

MultiResponse::MultiResponse(const MultiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiResponse::SharedCtor() {
  _cached_size_ = 0;
  processed_ = false;
  regionstatistics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiResponse::~MultiResponse() {
  SharedDtor();
}

void MultiResponse::SharedDtor() {
  if (this != default_instance_) {
    delete regionstatistics_;
  }
}

void MultiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiResponse_descriptor_;
}

const MultiResponse& MultiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Client_2eproto();
  return *default_instance_;
}

MultiResponse* MultiResponse::default_instance_ = NULL;

MultiResponse* MultiResponse::New() const {
  return new MultiResponse;
}

void MultiResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    processed_ = false;
    if (has_regionstatistics()) {
      if (regionstatistics_ != NULL) regionstatistics_->::hbase::pb::MultiRegionLoadStats::Clear();
    }
  }
  regionactionresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regionActionResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regionactionresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_regionActionResult;
        if (input->ExpectTag(16)) goto parse_processed;
        break;
      }

      // optional bool processed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
          set_has_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regionStatistics;
        break;
      }

      // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regionStatistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regionstatistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
  for (int i = 0; i < this->regionactionresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regionactionresult(i), output);
  }

  // optional bool processed = 2;
  if (has_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->processed(), output);
  }

  // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
  if (has_regionstatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regionstatistics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
  for (int i = 0; i < this->regionactionresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->regionactionresult(i), target);
  }

  // optional bool processed = 2;
  if (has_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->processed(), target);
  }

  // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
  if (has_regionstatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->regionstatistics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool processed = 2;
    if (has_processed()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
    if (has_regionstatistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regionstatistics());
    }

  }
  // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
  total_size += 1 * this->regionactionresult_size();
  for (int i = 0; i < this->regionactionresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regionactionresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiResponse::MergeFrom(const MultiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  regionactionresult_.MergeFrom(from.regionactionresult_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_processed()) {
      set_processed(from.processed());
    }
    if (from.has_regionstatistics()) {
      mutable_regionstatistics()->::hbase::pb::MultiRegionLoadStats::MergeFrom(from.regionstatistics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiResponse::CopyFrom(const MultiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiResponse::IsInitialized() const {

  for (int i = 0; i < regionactionresult_size(); i++) {
    if (!this->regionactionresult(i).IsInitialized()) return false;
  }
  if (has_regionstatistics()) {
    if (!this->regionstatistics().IsInitialized()) return false;
  }
  return true;
}

void MultiResponse::Swap(MultiResponse* other) {
  if (other != this) {
    regionactionresult_.Swap(&other->regionactionresult_);
    std::swap(processed_, other->processed_);
    std::swap(regionstatistics_, other->regionstatistics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiResponse_descriptor_;
  metadata.reflection = MultiResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
