// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MasterProcedure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MasterProcedure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* CreateTableStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTableStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyTableStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyTableStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateTableStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateTableStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTableStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTableStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateNamespaceStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateNamespaceStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyNamespaceStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyNamespaceStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteNamespaceStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteNamespaceStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddColumnFamilyStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddColumnFamilyStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyColumnFamilyStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyColumnFamilyStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteColumnFamilyStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteColumnFamilyStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableTableStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableTableStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisableTableStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisableTableStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCrashStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCrashStateData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateTableState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyTableState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TruncateTableState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeleteTableState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateNamespaceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyNamespaceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeleteNamespaceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddColumnFamilyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ModifyColumnFamilyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeleteColumnFamilyState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnableTableState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DisableTableState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerCrashState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MasterProcedure_2eproto() {
  protobuf_AddDesc_MasterProcedure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MasterProcedure.proto");
  GOOGLE_CHECK(file != NULL);
  CreateTableStateData_descriptor_ = file->message_type(0);
  static const int CreateTableStateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableStateData, table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableStateData, region_info_),
  };
  CreateTableStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTableStateData_descriptor_,
      CreateTableStateData::default_instance_,
      CreateTableStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTableStateData));
  ModifyTableStateData_descriptor_ = file->message_type(1);
  static const int ModifyTableStateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableStateData, unmodified_table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableStateData, modified_table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableStateData, delete_column_family_in_modify_),
  };
  ModifyTableStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyTableStateData_descriptor_,
      ModifyTableStateData::default_instance_,
      ModifyTableStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyTableStateData));
  TruncateTableStateData_descriptor_ = file->message_type(2);
  static const int TruncateTableStateData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, preserve_splits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, region_info_),
  };
  TruncateTableStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateTableStateData_descriptor_,
      TruncateTableStateData::default_instance_,
      TruncateTableStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateTableStateData));
  DeleteTableStateData_descriptor_ = file->message_type(3);
  static const int DeleteTableStateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableStateData, region_info_),
  };
  DeleteTableStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTableStateData_descriptor_,
      DeleteTableStateData::default_instance_,
      DeleteTableStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTableStateData));
  CreateNamespaceStateData_descriptor_ = file->message_type(4);
  static const int CreateNamespaceStateData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceStateData, namespace_descriptor_),
  };
  CreateNamespaceStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateNamespaceStateData_descriptor_,
      CreateNamespaceStateData::default_instance_,
      CreateNamespaceStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateNamespaceStateData));
  ModifyNamespaceStateData_descriptor_ = file->message_type(5);
  static const int ModifyNamespaceStateData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceStateData, namespace_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceStateData, unmodified_namespace_descriptor_),
  };
  ModifyNamespaceStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyNamespaceStateData_descriptor_,
      ModifyNamespaceStateData::default_instance_,
      ModifyNamespaceStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyNamespaceStateData));
  DeleteNamespaceStateData_descriptor_ = file->message_type(6);
  static const int DeleteNamespaceStateData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceStateData, namespace_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceStateData, namespace_descriptor_),
  };
  DeleteNamespaceStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteNamespaceStateData_descriptor_,
      DeleteNamespaceStateData::default_instance_,
      DeleteNamespaceStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteNamespaceStateData));
  AddColumnFamilyStateData_descriptor_ = file->message_type(7);
  static const int AddColumnFamilyStateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnFamilyStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnFamilyStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnFamilyStateData, columnfamily_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnFamilyStateData, unmodified_table_schema_),
  };
  AddColumnFamilyStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddColumnFamilyStateData_descriptor_,
      AddColumnFamilyStateData::default_instance_,
      AddColumnFamilyStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnFamilyStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnFamilyStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddColumnFamilyStateData));
  ModifyColumnFamilyStateData_descriptor_ = file->message_type(8);
  static const int ModifyColumnFamilyStateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnFamilyStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnFamilyStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnFamilyStateData, columnfamily_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnFamilyStateData, unmodified_table_schema_),
  };
  ModifyColumnFamilyStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyColumnFamilyStateData_descriptor_,
      ModifyColumnFamilyStateData::default_instance_,
      ModifyColumnFamilyStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnFamilyStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnFamilyStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyColumnFamilyStateData));
  DeleteColumnFamilyStateData_descriptor_ = file->message_type(9);
  static const int DeleteColumnFamilyStateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyStateData, columnfamily_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyStateData, unmodified_table_schema_),
  };
  DeleteColumnFamilyStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteColumnFamilyStateData_descriptor_,
      DeleteColumnFamilyStateData::default_instance_,
      DeleteColumnFamilyStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnFamilyStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteColumnFamilyStateData));
  EnableTableStateData_descriptor_ = file->message_type(10);
  static const int EnableTableStateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableStateData, skip_table_state_check_),
  };
  EnableTableStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableTableStateData_descriptor_,
      EnableTableStateData::default_instance_,
      EnableTableStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableTableStateData));
  DisableTableStateData_descriptor_ = file->message_type(11);
  static const int DisableTableStateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableStateData, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableStateData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableStateData, skip_table_state_check_),
  };
  DisableTableStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisableTableStateData_descriptor_,
      DisableTableStateData::default_instance_,
      DisableTableStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisableTableStateData));
  ServerCrashStateData_descriptor_ = file->message_type(12);
  static const int ServerCrashStateData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, distributed_log_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, regions_on_crashed_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, regions_assigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, carrying_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, should_split_wal_),
  };
  ServerCrashStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCrashStateData_descriptor_,
      ServerCrashStateData::default_instance_,
      ServerCrashStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCrashStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCrashStateData));
  CreateTableState_descriptor_ = file->enum_type(0);
  ModifyTableState_descriptor_ = file->enum_type(1);
  TruncateTableState_descriptor_ = file->enum_type(2);
  DeleteTableState_descriptor_ = file->enum_type(3);
  CreateNamespaceState_descriptor_ = file->enum_type(4);
  ModifyNamespaceState_descriptor_ = file->enum_type(5);
  DeleteNamespaceState_descriptor_ = file->enum_type(6);
  AddColumnFamilyState_descriptor_ = file->enum_type(7);
  ModifyColumnFamilyState_descriptor_ = file->enum_type(8);
  DeleteColumnFamilyState_descriptor_ = file->enum_type(9);
  EnableTableState_descriptor_ = file->enum_type(10);
  DisableTableState_descriptor_ = file->enum_type(11);
  ServerCrashState_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MasterProcedure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTableStateData_descriptor_, &CreateTableStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyTableStateData_descriptor_, &ModifyTableStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateTableStateData_descriptor_, &TruncateTableStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTableStateData_descriptor_, &DeleteTableStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateNamespaceStateData_descriptor_, &CreateNamespaceStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyNamespaceStateData_descriptor_, &ModifyNamespaceStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteNamespaceStateData_descriptor_, &DeleteNamespaceStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddColumnFamilyStateData_descriptor_, &AddColumnFamilyStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyColumnFamilyStateData_descriptor_, &ModifyColumnFamilyStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteColumnFamilyStateData_descriptor_, &DeleteColumnFamilyStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableTableStateData_descriptor_, &EnableTableStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisableTableStateData_descriptor_, &DisableTableStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCrashStateData_descriptor_, &ServerCrashStateData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MasterProcedure_2eproto() {
  delete CreateTableStateData::default_instance_;
  delete CreateTableStateData_reflection_;
  delete ModifyTableStateData::default_instance_;
  delete ModifyTableStateData_reflection_;
  delete TruncateTableStateData::default_instance_;
  delete TruncateTableStateData_reflection_;
  delete DeleteTableStateData::default_instance_;
  delete DeleteTableStateData_reflection_;
  delete CreateNamespaceStateData::default_instance_;
  delete CreateNamespaceStateData_reflection_;
  delete ModifyNamespaceStateData::default_instance_;
  delete ModifyNamespaceStateData_reflection_;
  delete DeleteNamespaceStateData::default_instance_;
  delete DeleteNamespaceStateData_reflection_;
  delete AddColumnFamilyStateData::default_instance_;
  delete AddColumnFamilyStateData_reflection_;
  delete ModifyColumnFamilyStateData::default_instance_;
  delete ModifyColumnFamilyStateData_reflection_;
  delete DeleteColumnFamilyStateData::default_instance_;
  delete DeleteColumnFamilyStateData_reflection_;
  delete EnableTableStateData::default_instance_;
  delete EnableTableStateData_reflection_;
  delete DisableTableStateData::default_instance_;
  delete DisableTableStateData_reflection_;
  delete ServerCrashStateData::default_instance_;
  delete ServerCrashStateData_reflection_;
}

void protobuf_AddDesc_MasterProcedure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_RPC_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MasterProcedure.proto\022\010hbase.pb\032\013HBase"
    ".proto\032\tRPC.proto\"\234\001\n\024CreateTableStateDa"
    "ta\022,\n\tuser_info\030\001 \002(\0132\031.hbase.pb.UserInf"
    "ormation\022+\n\014table_schema\030\002 \002(\0132\025.hbase.p"
    "b.TableSchema\022)\n\013region_info\030\003 \003(\0132\024.hba"
    "se.pb.RegionInfo\"\332\001\n\024ModifyTableStateDat"
    "a\022,\n\tuser_info\030\001 \002(\0132\031.hbase.pb.UserInfo"
    "rmation\0226\n\027unmodified_table_schema\030\002 \001(\013"
    "2\025.hbase.pb.TableSchema\0224\n\025modified_tabl"
    "e_schema\030\003 \002(\0132\025.hbase.pb.TableSchema\022&\n"
    "\036delete_column_family_in_modify\030\004 \002(\010\"\340\001"
    "\n\026TruncateTableStateData\022,\n\tuser_info\030\001 "
    "\002(\0132\031.hbase.pb.UserInformation\022\027\n\017preser"
    "ve_splits\030\002 \002(\010\022\'\n\ntable_name\030\003 \001(\0132\023.hb"
    "ase.pb.TableName\022+\n\014table_schema\030\004 \001(\0132\025"
    ".hbase.pb.TableSchema\022)\n\013region_info\030\005 \003"
    "(\0132\024.hbase.pb.RegionInfo\"\230\001\n\024DeleteTable"
    "StateData\022,\n\tuser_info\030\001 \002(\0132\031.hbase.pb."
    "UserInformation\022\'\n\ntable_name\030\002 \002(\0132\023.hb"
    "ase.pb.TableName\022)\n\013region_info\030\003 \003(\0132\024."
    "hbase.pb.RegionInfo\"W\n\030CreateNamespaceSt"
    "ateData\022;\n\024namespace_descriptor\030\001 \002(\0132\035."
    "hbase.pb.NamespaceDescriptor\"\237\001\n\030ModifyN"
    "amespaceStateData\022;\n\024namespace_descripto"
    "r\030\001 \002(\0132\035.hbase.pb.NamespaceDescriptor\022F"
    "\n\037unmodified_namespace_descriptor\030\002 \001(\0132"
    "\035.hbase.pb.NamespaceDescriptor\"o\n\030Delete"
    "NamespaceStateData\022\026\n\016namespace_name\030\001 \002"
    "(\t\022;\n\024namespace_descriptor\030\002 \001(\0132\035.hbase"
    ".pb.NamespaceDescriptor\"\344\001\n\030AddColumnFam"
    "ilyStateData\022,\n\tuser_info\030\001 \002(\0132\031.hbase."
    "pb.UserInformation\022\'\n\ntable_name\030\002 \002(\0132\023"
    ".hbase.pb.TableName\0229\n\023columnfamily_sche"
    "ma\030\003 \002(\0132\034.hbase.pb.ColumnFamilySchema\0226"
    "\n\027unmodified_table_schema\030\004 \001(\0132\025.hbase."
    "pb.TableSchema\"\347\001\n\033ModifyColumnFamilySta"
    "teData\022,\n\tuser_info\030\001 \002(\0132\031.hbase.pb.Use"
    "rInformation\022\'\n\ntable_name\030\002 \002(\0132\023.hbase"
    ".pb.TableName\0229\n\023columnfamily_schema\030\003 \002"
    "(\0132\034.hbase.pb.ColumnFamilySchema\0226\n\027unmo"
    "dified_table_schema\030\004 \001(\0132\025.hbase.pb.Tab"
    "leSchema\"\307\001\n\033DeleteColumnFamilyStateData"
    "\022,\n\tuser_info\030\001 \002(\0132\031.hbase.pb.UserInfor"
    "mation\022\'\n\ntable_name\030\002 \002(\0132\023.hbase.pb.Ta"
    "bleName\022\031\n\021columnfamily_name\030\003 \002(\014\0226\n\027un"
    "modified_table_schema\030\004 \001(\0132\025.hbase.pb.T"
    "ableSchema\"\215\001\n\024EnableTableStateData\022,\n\tu"
    "ser_info\030\001 \002(\0132\031.hbase.pb.UserInformatio"
    "n\022\'\n\ntable_name\030\002 \002(\0132\023.hbase.pb.TableNa"
    "me\022\036\n\026skip_table_state_check\030\003 \002(\010\"\216\001\n\025D"
    "isableTableStateData\022,\n\tuser_info\030\001 \002(\0132"
    "\031.hbase.pb.UserInformation\022\'\n\ntable_name"
    "\030\002 \002(\0132\023.hbase.pb.TableName\022\036\n\026skip_tabl"
    "e_state_check\030\003 \002(\010\"\201\002\n\024ServerCrashState"
    "Data\022)\n\013server_name\030\001 \002(\0132\024.hbase.pb.Ser"
    "verName\022\036\n\026distributed_log_replay\030\002 \001(\010\022"
    "7\n\031regions_on_crashed_server\030\003 \003(\0132\024.hba"
    "se.pb.RegionInfo\022.\n\020regions_assigned\030\004 \003"
    "(\0132\024.hbase.pb.RegionInfo\022\025\n\rcarrying_met"
    "a\030\005 \001(\010\022\036\n\020should_split_wal\030\006 \001(\010:\004true*"
    "\330\001\n\020CreateTableState\022\036\n\032CREATE_TABLE_PRE"
    "_OPERATION\020\001\022 \n\034CREATE_TABLE_WRITE_FS_LA"
    "YOUT\020\002\022\034\n\030CREATE_TABLE_ADD_TO_META\020\003\022\037\n\033"
    "CREATE_TABLE_ASSIGN_REGIONS\020\004\022\"\n\036CREATE_"
    "TABLE_UPDATE_DESC_CACHE\020\005\022\037\n\033CREATE_TABL"
    "E_POST_OPERATION\020\006*\207\002\n\020ModifyTableState\022"
    "\030\n\024MODIFY_TABLE_PREPARE\020\001\022\036\n\032MODIFY_TABL"
    "E_PRE_OPERATION\020\002\022(\n$MODIFY_TABLE_UPDATE"
    "_TABLE_DESCRIPTOR\020\003\022&\n\"MODIFY_TABLE_REMO"
    "VE_REPLICA_COLUMN\020\004\022!\n\035MODIFY_TABLE_DELE"
    "TE_FS_LAYOUT\020\005\022\037\n\033MODIFY_TABLE_POST_OPER"
    "ATION\020\006\022#\n\037MODIFY_TABLE_REOPEN_ALL_REGIO"
    "NS\020\007*\212\002\n\022TruncateTableState\022 \n\034TRUNCATE_"
    "TABLE_PRE_OPERATION\020\001\022#\n\037TRUNCATE_TABLE_"
    "REMOVE_FROM_META\020\002\022\"\n\036TRUNCATE_TABLE_CLE"
    "AR_FS_LAYOUT\020\003\022#\n\037TRUNCATE_TABLE_CREATE_"
    "FS_LAYOUT\020\004\022\036\n\032TRUNCATE_TABLE_ADD_TO_MET"
    "A\020\005\022!\n\035TRUNCATE_TABLE_ASSIGN_REGIONS\020\006\022!"
    "\n\035TRUNCATE_TABLE_POST_OPERATION\020\007*\337\001\n\020De"
    "leteTableState\022\036\n\032DELETE_TABLE_PRE_OPERA"
    "TION\020\001\022!\n\035DELETE_TABLE_REMOVE_FROM_META\020"
    "\002\022 \n\034DELETE_TABLE_CLEAR_FS_LAYOUT\020\003\022\"\n\036D"
    "ELETE_TABLE_UPDATE_DESC_CACHE\020\004\022!\n\035DELET"
    "E_TABLE_UNASSIGN_REGIONS\020\005\022\037\n\033DELETE_TAB"
    "LE_POST_OPERATION\020\006*\320\001\n\024CreateNamespaceS"
    "tate\022\034\n\030CREATE_NAMESPACE_PREPARE\020\001\022%\n!CR"
    "EATE_NAMESPACE_CREATE_DIRECTORY\020\002\022)\n%CRE"
    "ATE_NAMESPACE_INSERT_INTO_NS_TABLE\020\003\022\036\n\032"
    "CREATE_NAMESPACE_UPDATE_ZK\020\004\022(\n$CREATE_N"
    "AMESPACE_SET_NAMESPACE_QUOTA\020\005*z\n\024Modify"
    "NamespaceState\022\034\n\030MODIFY_NAMESPACE_PREPA"
    "RE\020\001\022$\n MODIFY_NAMESPACE_UPDATE_NS_TABLE"
    "\020\002\022\036\n\032MODIFY_NAMESPACE_UPDATE_ZK\020\003*\332\001\n\024D"
    "eleteNamespaceState\022\034\n\030DELETE_NAMESPACE_"
    "PREPARE\020\001\022)\n%DELETE_NAMESPACE_DELETE_FRO"
    "M_NS_TABLE\020\002\022#\n\037DELETE_NAMESPACE_REMOVE_"
    "FROM_ZK\020\003\022\'\n#DELETE_NAMESPACE_DELETE_DIR"
    "ECTORIES\020\004\022+\n\'DELETE_NAMESPACE_REMOVE_NA"
    "MESPACE_QUOTA\020\005*\331\001\n\024AddColumnFamilyState"
    "\022\035\n\031ADD_COLUMN_FAMILY_PREPARE\020\001\022#\n\037ADD_C"
    "OLUMN_FAMILY_PRE_OPERATION\020\002\022-\n)ADD_COLU"
    "MN_FAMILY_UPDATE_TABLE_DESCRIPTOR\020\003\022$\n A"
    "DD_COLUMN_FAMILY_POST_OPERATION\020\004\022(\n$ADD"
    "_COLUMN_FAMILY_REOPEN_ALL_REGIONS\020\005*\353\001\n\027"
    "ModifyColumnFamilyState\022 \n\034MODIFY_COLUMN"
    "_FAMILY_PREPARE\020\001\022&\n\"MODIFY_COLUMN_FAMIL"
    "Y_PRE_OPERATION\020\002\0220\n,MODIFY_COLUMN_FAMIL"
    "Y_UPDATE_TABLE_DESCRIPTOR\020\003\022\'\n#MODIFY_CO"
    "LUMN_FAMILY_POST_OPERATION\020\004\022+\n\'MODIFY_C"
    "OLUMN_FAMILY_REOPEN_ALL_REGIONS\020\005*\226\002\n\027De"
    "leteColumnFamilyState\022 \n\034DELETE_COLUMN_F"
    "AMILY_PREPARE\020\001\022&\n\"DELETE_COLUMN_FAMILY_"
    "PRE_OPERATION\020\002\0220\n,DELETE_COLUMN_FAMILY_"
    "UPDATE_TABLE_DESCRIPTOR\020\003\022)\n%DELETE_COLU"
    "MN_FAMILY_DELETE_FS_LAYOUT\020\004\022\'\n#DELETE_C"
    "OLUMN_FAMILY_POST_OPERATION\020\005\022+\n\'DELETE_"
    "COLUMN_FAMILY_REOPEN_ALL_REGIONS\020\006*\350\001\n\020E"
    "nableTableState\022\030\n\024ENABLE_TABLE_PREPARE\020"
    "\001\022\036\n\032ENABLE_TABLE_PRE_OPERATION\020\002\022)\n%ENA"
    "BLE_TABLE_SET_ENABLING_TABLE_STATE\020\003\022$\n "
    "ENABLE_TABLE_MARK_REGIONS_ONLINE\020\004\022(\n$EN"
    "ABLE_TABLE_SET_ENABLED_TABLE_STATE\020\005\022\037\n\033"
    "ENABLE_TABLE_POST_OPERATION\020\006*\362\001\n\021Disabl"
    "eTableState\022\031\n\025DISABLE_TABLE_PREPARE\020\001\022\037"
    "\n\033DISABLE_TABLE_PRE_OPERATION\020\002\022+\n\'DISAB"
    "LE_TABLE_SET_DISABLING_TABLE_STATE\020\003\022&\n\""
    "DISABLE_TABLE_MARK_REGIONS_OFFLINE\020\004\022*\n&"
    "DISABLE_TABLE_SET_DISABLED_TABLE_STATE\020\005"
    "\022 \n\034DISABLE_TABLE_POST_OPERATION\020\006*\234\002\n\020S"
    "erverCrashState\022\026\n\022SERVER_CRASH_START\020\001\022"
    "\035\n\031SERVER_CRASH_PROCESS_META\020\002\022\034\n\030SERVER"
    "_CRASH_GET_REGIONS\020\003\022\036\n\032SERVER_CRASH_NO_"
    "SPLIT_LOGS\020\004\022\033\n\027SERVER_CRASH_SPLIT_LOGS\020"
    "\005\022#\n\037SERVER_CRASH_PREPARE_LOG_REPLAY\020\006\022\027"
    "\n\023SERVER_CRASH_ASSIGN\020\010\022\037\n\033SERVER_CRASH_"
    "WAIT_ON_ASSIGN\020\t\022\027\n\023SERVER_CRASH_FINISH\020"
    "dBK\n*org.apache.hadoop.hbase.protobuf.ge"
    "neratedB\025MasterProcedureProtosH\001\210\001\001\240\001\001", 5518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MasterProcedure.proto", &protobuf_RegisterTypes);
  CreateTableStateData::default_instance_ = new CreateTableStateData();
  ModifyTableStateData::default_instance_ = new ModifyTableStateData();
  TruncateTableStateData::default_instance_ = new TruncateTableStateData();
  DeleteTableStateData::default_instance_ = new DeleteTableStateData();
  CreateNamespaceStateData::default_instance_ = new CreateNamespaceStateData();
  ModifyNamespaceStateData::default_instance_ = new ModifyNamespaceStateData();
  DeleteNamespaceStateData::default_instance_ = new DeleteNamespaceStateData();
  AddColumnFamilyStateData::default_instance_ = new AddColumnFamilyStateData();
  ModifyColumnFamilyStateData::default_instance_ = new ModifyColumnFamilyStateData();
  DeleteColumnFamilyStateData::default_instance_ = new DeleteColumnFamilyStateData();
  EnableTableStateData::default_instance_ = new EnableTableStateData();
  DisableTableStateData::default_instance_ = new DisableTableStateData();
  ServerCrashStateData::default_instance_ = new ServerCrashStateData();
  CreateTableStateData::default_instance_->InitAsDefaultInstance();
  ModifyTableStateData::default_instance_->InitAsDefaultInstance();
  TruncateTableStateData::default_instance_->InitAsDefaultInstance();
  DeleteTableStateData::default_instance_->InitAsDefaultInstance();
  CreateNamespaceStateData::default_instance_->InitAsDefaultInstance();
  ModifyNamespaceStateData::default_instance_->InitAsDefaultInstance();
  DeleteNamespaceStateData::default_instance_->InitAsDefaultInstance();
  AddColumnFamilyStateData::default_instance_->InitAsDefaultInstance();
  ModifyColumnFamilyStateData::default_instance_->InitAsDefaultInstance();
  DeleteColumnFamilyStateData::default_instance_->InitAsDefaultInstance();
  EnableTableStateData::default_instance_->InitAsDefaultInstance();
  DisableTableStateData::default_instance_->InitAsDefaultInstance();
  ServerCrashStateData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MasterProcedure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MasterProcedure_2eproto {
  StaticDescriptorInitializer_MasterProcedure_2eproto() {
    protobuf_AddDesc_MasterProcedure_2eproto();
  }
} static_descriptor_initializer_MasterProcedure_2eproto_;
const ::google::protobuf::EnumDescriptor* CreateTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableState_descriptor_;
}
bool CreateTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ModifyTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTableState_descriptor_;
}
bool ModifyTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TruncateTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateTableState_descriptor_;
}
bool TruncateTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeleteTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableState_descriptor_;
}
bool DeleteTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreateNamespaceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateNamespaceState_descriptor_;
}
bool CreateNamespaceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ModifyNamespaceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyNamespaceState_descriptor_;
}
bool ModifyNamespaceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeleteNamespaceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteNamespaceState_descriptor_;
}
bool DeleteNamespaceState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddColumnFamilyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddColumnFamilyState_descriptor_;
}
bool AddColumnFamilyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ModifyColumnFamilyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyColumnFamilyState_descriptor_;
}
bool ModifyColumnFamilyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeleteColumnFamilyState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteColumnFamilyState_descriptor_;
}
bool DeleteColumnFamilyState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnableTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableTableState_descriptor_;
}
bool EnableTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisableTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableTableState_descriptor_;
}
bool DisableTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerCrashState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCrashState_descriptor_;
}
bool ServerCrashState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTableStateData::kUserInfoFieldNumber;
const int CreateTableStateData::kTableSchemaFieldNumber;
const int CreateTableStateData::kRegionInfoFieldNumber;
#endif  // !_MSC_VER

CreateTableStateData::CreateTableStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTableStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

CreateTableStateData::CreateTableStateData(const CreateTableStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTableStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTableStateData::~CreateTableStateData() {
  SharedDtor();
}

void CreateTableStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_schema_;
  }
}

void CreateTableStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableStateData_descriptor_;
}

const CreateTableStateData& CreateTableStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

CreateTableStateData* CreateTableStateData::default_instance_ = NULL;

CreateTableStateData* CreateTableStateData::New() const {
  return new CreateTableStateData;
}

void CreateTableStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_schema()) {
      if (table_schema_ != NULL) table_schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  region_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTableStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_schema;
        break;
      }

      // required .hbase.pb.TableSchema table_schema = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region_info;
        break;
      }

      // repeated .hbase.pb.RegionInfo region_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTableStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableSchema table_schema = 2;
  if (has_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_schema(), output);
  }

  // repeated .hbase.pb.RegionInfo region_info = 3;
  for (int i = 0; i < this->region_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTableStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableSchema table_schema = 2;
  if (has_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_schema(), target);
  }

  // repeated .hbase.pb.RegionInfo region_info = 3;
  for (int i = 0; i < this->region_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTableStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableSchema table_schema = 2;
    if (has_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_schema());
    }

  }
  // repeated .hbase.pb.RegionInfo region_info = 3;
  total_size += 1 * this->region_info_size();
  for (int i = 0; i < this->region_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTableStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTableStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTableStateData::MergeFrom(const CreateTableStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_info_.MergeFrom(from.region_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_schema()) {
      mutable_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.table_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTableStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableStateData::CopyFrom(const CreateTableStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_schema()) {
    if (!this->table_schema().IsInitialized()) return false;
  }
  for (int i = 0; i < region_info_size(); i++) {
    if (!this->region_info(i).IsInitialized()) return false;
  }
  return true;
}

void CreateTableStateData::Swap(CreateTableStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_schema_, other->table_schema_);
    region_info_.Swap(&other->region_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTableStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTableStateData_descriptor_;
  metadata.reflection = CreateTableStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyTableStateData::kUserInfoFieldNumber;
const int ModifyTableStateData::kUnmodifiedTableSchemaFieldNumber;
const int ModifyTableStateData::kModifiedTableSchemaFieldNumber;
const int ModifyTableStateData::kDeleteColumnFamilyInModifyFieldNumber;
#endif  // !_MSC_VER

ModifyTableStateData::ModifyTableStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyTableStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  unmodified_table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
  modified_table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

ModifyTableStateData::ModifyTableStateData(const ModifyTableStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyTableStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  unmodified_table_schema_ = NULL;
  modified_table_schema_ = NULL;
  delete_column_family_in_modify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyTableStateData::~ModifyTableStateData() {
  SharedDtor();
}

void ModifyTableStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete unmodified_table_schema_;
    delete modified_table_schema_;
  }
}

void ModifyTableStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyTableStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTableStateData_descriptor_;
}

const ModifyTableStateData& ModifyTableStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

ModifyTableStateData* ModifyTableStateData::default_instance_ = NULL;

ModifyTableStateData* ModifyTableStateData::New() const {
  return new ModifyTableStateData;
}

void ModifyTableStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_unmodified_table_schema()) {
      if (unmodified_table_schema_ != NULL) unmodified_table_schema_->::hbase::pb::TableSchema::Clear();
    }
    if (has_modified_table_schema()) {
      if (modified_table_schema_ != NULL) modified_table_schema_->::hbase::pb::TableSchema::Clear();
    }
    delete_column_family_in_modify_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyTableStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unmodified_table_schema;
        break;
      }

      // optional .hbase.pb.TableSchema unmodified_table_schema = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unmodified_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unmodified_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modified_table_schema;
        break;
      }

      // required .hbase.pb.TableSchema modified_table_schema = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modified_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modified_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delete_column_family_in_modify;
        break;
      }

      // required bool delete_column_family_in_modify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_column_family_in_modify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_column_family_in_modify_)));
          set_has_delete_column_family_in_modify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyTableStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 2;
  if (has_unmodified_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unmodified_table_schema(), output);
  }

  // required .hbase.pb.TableSchema modified_table_schema = 3;
  if (has_modified_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->modified_table_schema(), output);
  }

  // required bool delete_column_family_in_modify = 4;
  if (has_delete_column_family_in_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->delete_column_family_in_modify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyTableStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 2;
  if (has_unmodified_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unmodified_table_schema(), target);
  }

  // required .hbase.pb.TableSchema modified_table_schema = 3;
  if (has_modified_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->modified_table_schema(), target);
  }

  // required bool delete_column_family_in_modify = 4;
  if (has_delete_column_family_in_modify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->delete_column_family_in_modify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyTableStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional .hbase.pb.TableSchema unmodified_table_schema = 2;
    if (has_unmodified_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unmodified_table_schema());
    }

    // required .hbase.pb.TableSchema modified_table_schema = 3;
    if (has_modified_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modified_table_schema());
    }

    // required bool delete_column_family_in_modify = 4;
    if (has_delete_column_family_in_modify()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyTableStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyTableStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyTableStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyTableStateData::MergeFrom(const ModifyTableStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_unmodified_table_schema()) {
      mutable_unmodified_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.unmodified_table_schema());
    }
    if (from.has_modified_table_schema()) {
      mutable_modified_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.modified_table_schema());
    }
    if (from.has_delete_column_family_in_modify()) {
      set_delete_column_family_in_modify(from.delete_column_family_in_modify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyTableStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTableStateData::CopyFrom(const ModifyTableStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTableStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_unmodified_table_schema()) {
    if (!this->unmodified_table_schema().IsInitialized()) return false;
  }
  if (has_modified_table_schema()) {
    if (!this->modified_table_schema().IsInitialized()) return false;
  }
  return true;
}

void ModifyTableStateData::Swap(ModifyTableStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(unmodified_table_schema_, other->unmodified_table_schema_);
    std::swap(modified_table_schema_, other->modified_table_schema_);
    std::swap(delete_column_family_in_modify_, other->delete_column_family_in_modify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyTableStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyTableStateData_descriptor_;
  metadata.reflection = ModifyTableStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateTableStateData::kUserInfoFieldNumber;
const int TruncateTableStateData::kPreserveSplitsFieldNumber;
const int TruncateTableStateData::kTableNameFieldNumber;
const int TruncateTableStateData::kTableSchemaFieldNumber;
const int TruncateTableStateData::kRegionInfoFieldNumber;
#endif  // !_MSC_VER

TruncateTableStateData::TruncateTableStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateTableStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

TruncateTableStateData::TruncateTableStateData(const TruncateTableStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateTableStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  preserve_splits_ = false;
  table_name_ = NULL;
  table_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateTableStateData::~TruncateTableStateData() {
  SharedDtor();
}

void TruncateTableStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
    delete table_schema_;
  }
}

void TruncateTableStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateTableStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateTableStateData_descriptor_;
}

const TruncateTableStateData& TruncateTableStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

TruncateTableStateData* TruncateTableStateData::default_instance_ = NULL;

TruncateTableStateData* TruncateTableStateData::New() const {
  return new TruncateTableStateData;
}

void TruncateTableStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    preserve_splits_ = false;
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_table_schema()) {
      if (table_schema_ != NULL) table_schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  region_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateTableStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preserve_splits;
        break;
      }

      // required bool preserve_splits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_splits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_splits_)));
          set_has_preserve_splits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }

      // optional .hbase.pb.TableName table_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_schema;
        break;
      }

      // optional .hbase.pb.TableSchema table_schema = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_region_info;
        break;
      }

      // repeated .hbase.pb.RegionInfo region_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_region_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateTableStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required bool preserve_splits = 2;
  if (has_preserve_splits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->preserve_splits(), output);
  }

  // optional .hbase.pb.TableName table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_name(), output);
  }

  // optional .hbase.pb.TableSchema table_schema = 4;
  if (has_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_schema(), output);
  }

  // repeated .hbase.pb.RegionInfo region_info = 5;
  for (int i = 0; i < this->region_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->region_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateTableStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required bool preserve_splits = 2;
  if (has_preserve_splits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->preserve_splits(), target);
  }

  // optional .hbase.pb.TableName table_name = 3;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_name(), target);
  }

  // optional .hbase.pb.TableSchema table_schema = 4;
  if (has_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_schema(), target);
  }

  // repeated .hbase.pb.RegionInfo region_info = 5;
  for (int i = 0; i < this->region_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->region_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateTableStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required bool preserve_splits = 2;
    if (has_preserve_splits()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.TableName table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // optional .hbase.pb.TableSchema table_schema = 4;
    if (has_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_schema());
    }

  }
  // repeated .hbase.pb.RegionInfo region_info = 5;
  total_size += 1 * this->region_info_size();
  for (int i = 0; i < this->region_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateTableStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateTableStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateTableStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateTableStateData::MergeFrom(const TruncateTableStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_info_.MergeFrom(from.region_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_preserve_splits()) {
      set_preserve_splits(from.preserve_splits());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_table_schema()) {
      mutable_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.table_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateTableStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateTableStateData::CopyFrom(const TruncateTableStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateTableStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_table_schema()) {
    if (!this->table_schema().IsInitialized()) return false;
  }
  for (int i = 0; i < region_info_size(); i++) {
    if (!this->region_info(i).IsInitialized()) return false;
  }
  return true;
}

void TruncateTableStateData::Swap(TruncateTableStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(preserve_splits_, other->preserve_splits_);
    std::swap(table_name_, other->table_name_);
    std::swap(table_schema_, other->table_schema_);
    region_info_.Swap(&other->region_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateTableStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateTableStateData_descriptor_;
  metadata.reflection = TruncateTableStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTableStateData::kUserInfoFieldNumber;
const int DeleteTableStateData::kTableNameFieldNumber;
const int DeleteTableStateData::kRegionInfoFieldNumber;
#endif  // !_MSC_VER

DeleteTableStateData::DeleteTableStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTableStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

DeleteTableStateData::DeleteTableStateData(const DeleteTableStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTableStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTableStateData::~DeleteTableStateData() {
  SharedDtor();
}

void DeleteTableStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
  }
}

void DeleteTableStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTableStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableStateData_descriptor_;
}

const DeleteTableStateData& DeleteTableStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

DeleteTableStateData* DeleteTableStateData::default_instance_ = NULL;

DeleteTableStateData* DeleteTableStateData::New() const {
  return new DeleteTableStateData;
}

void DeleteTableStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  region_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTableStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region_info;
        break;
      }

      // repeated .hbase.pb.RegionInfo region_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTableStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // repeated .hbase.pb.RegionInfo region_info = 3;
  for (int i = 0; i < this->region_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTableStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // repeated .hbase.pb.RegionInfo region_info = 3;
  for (int i = 0; i < this->region_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTableStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  // repeated .hbase.pb.RegionInfo region_info = 3;
  total_size += 1 * this->region_info_size();
  for (int i = 0; i < this->region_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTableStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTableStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTableStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTableStateData::MergeFrom(const DeleteTableStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_info_.MergeFrom(from.region_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTableStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTableStateData::CopyFrom(const DeleteTableStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTableStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  for (int i = 0; i < region_info_size(); i++) {
    if (!this->region_info(i).IsInitialized()) return false;
  }
  return true;
}

void DeleteTableStateData::Swap(DeleteTableStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_name_, other->table_name_);
    region_info_.Swap(&other->region_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTableStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTableStateData_descriptor_;
  metadata.reflection = DeleteTableStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateNamespaceStateData::kNamespaceDescriptorFieldNumber;
#endif  // !_MSC_VER

CreateNamespaceStateData::CreateNamespaceStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateNamespaceStateData::InitAsDefaultInstance() {
  namespace_descriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
}

CreateNamespaceStateData::CreateNamespaceStateData(const CreateNamespaceStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateNamespaceStateData::SharedCtor() {
  _cached_size_ = 0;
  namespace_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateNamespaceStateData::~CreateNamespaceStateData() {
  SharedDtor();
}

void CreateNamespaceStateData::SharedDtor() {
  if (this != default_instance_) {
    delete namespace_descriptor_;
  }
}

void CreateNamespaceStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateNamespaceStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateNamespaceStateData_descriptor_;
}

const CreateNamespaceStateData& CreateNamespaceStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

CreateNamespaceStateData* CreateNamespaceStateData::default_instance_ = NULL;

CreateNamespaceStateData* CreateNamespaceStateData::New() const {
  return new CreateNamespaceStateData;
}

void CreateNamespaceStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespace_descriptor()) {
      if (namespace_descriptor_ != NULL) namespace_descriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateNamespaceStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namespace_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateNamespaceStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
  if (has_namespace_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespace_descriptor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateNamespaceStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
  if (has_namespace_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespace_descriptor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateNamespaceStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
    if (has_namespace_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespace_descriptor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateNamespaceStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateNamespaceStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateNamespaceStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateNamespaceStateData::MergeFrom(const CreateNamespaceStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespace_descriptor()) {
      mutable_namespace_descriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.namespace_descriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateNamespaceStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNamespaceStateData::CopyFrom(const CreateNamespaceStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNamespaceStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_namespace_descriptor()) {
    if (!this->namespace_descriptor().IsInitialized()) return false;
  }
  return true;
}

void CreateNamespaceStateData::Swap(CreateNamespaceStateData* other) {
  if (other != this) {
    std::swap(namespace_descriptor_, other->namespace_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateNamespaceStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateNamespaceStateData_descriptor_;
  metadata.reflection = CreateNamespaceStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyNamespaceStateData::kNamespaceDescriptorFieldNumber;
const int ModifyNamespaceStateData::kUnmodifiedNamespaceDescriptorFieldNumber;
#endif  // !_MSC_VER

ModifyNamespaceStateData::ModifyNamespaceStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyNamespaceStateData::InitAsDefaultInstance() {
  namespace_descriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
  unmodified_namespace_descriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
}

ModifyNamespaceStateData::ModifyNamespaceStateData(const ModifyNamespaceStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyNamespaceStateData::SharedCtor() {
  _cached_size_ = 0;
  namespace_descriptor_ = NULL;
  unmodified_namespace_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyNamespaceStateData::~ModifyNamespaceStateData() {
  SharedDtor();
}

void ModifyNamespaceStateData::SharedDtor() {
  if (this != default_instance_) {
    delete namespace_descriptor_;
    delete unmodified_namespace_descriptor_;
  }
}

void ModifyNamespaceStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyNamespaceStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyNamespaceStateData_descriptor_;
}

const ModifyNamespaceStateData& ModifyNamespaceStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

ModifyNamespaceStateData* ModifyNamespaceStateData::default_instance_ = NULL;

ModifyNamespaceStateData* ModifyNamespaceStateData::New() const {
  return new ModifyNamespaceStateData;
}

void ModifyNamespaceStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespace_descriptor()) {
      if (namespace_descriptor_ != NULL) namespace_descriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
    if (has_unmodified_namespace_descriptor()) {
      if (unmodified_namespace_descriptor_ != NULL) unmodified_namespace_descriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyNamespaceStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namespace_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unmodified_namespace_descriptor;
        break;
      }

      // optional .hbase.pb.NamespaceDescriptor unmodified_namespace_descriptor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unmodified_namespace_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unmodified_namespace_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyNamespaceStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
  if (has_namespace_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespace_descriptor(), output);
  }

  // optional .hbase.pb.NamespaceDescriptor unmodified_namespace_descriptor = 2;
  if (has_unmodified_namespace_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unmodified_namespace_descriptor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyNamespaceStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
  if (has_namespace_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespace_descriptor(), target);
  }

  // optional .hbase.pb.NamespaceDescriptor unmodified_namespace_descriptor = 2;
  if (has_unmodified_namespace_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unmodified_namespace_descriptor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyNamespaceStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.NamespaceDescriptor namespace_descriptor = 1;
    if (has_namespace_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespace_descriptor());
    }

    // optional .hbase.pb.NamespaceDescriptor unmodified_namespace_descriptor = 2;
    if (has_unmodified_namespace_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unmodified_namespace_descriptor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyNamespaceStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyNamespaceStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyNamespaceStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyNamespaceStateData::MergeFrom(const ModifyNamespaceStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespace_descriptor()) {
      mutable_namespace_descriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.namespace_descriptor());
    }
    if (from.has_unmodified_namespace_descriptor()) {
      mutable_unmodified_namespace_descriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.unmodified_namespace_descriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyNamespaceStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyNamespaceStateData::CopyFrom(const ModifyNamespaceStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyNamespaceStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_namespace_descriptor()) {
    if (!this->namespace_descriptor().IsInitialized()) return false;
  }
  if (has_unmodified_namespace_descriptor()) {
    if (!this->unmodified_namespace_descriptor().IsInitialized()) return false;
  }
  return true;
}

void ModifyNamespaceStateData::Swap(ModifyNamespaceStateData* other) {
  if (other != this) {
    std::swap(namespace_descriptor_, other->namespace_descriptor_);
    std::swap(unmodified_namespace_descriptor_, other->unmodified_namespace_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyNamespaceStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyNamespaceStateData_descriptor_;
  metadata.reflection = ModifyNamespaceStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteNamespaceStateData::kNamespaceNameFieldNumber;
const int DeleteNamespaceStateData::kNamespaceDescriptorFieldNumber;
#endif  // !_MSC_VER

DeleteNamespaceStateData::DeleteNamespaceStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteNamespaceStateData::InitAsDefaultInstance() {
  namespace_descriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
}

DeleteNamespaceStateData::DeleteNamespaceStateData(const DeleteNamespaceStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteNamespaceStateData::SharedCtor() {
  _cached_size_ = 0;
  namespace_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespace_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteNamespaceStateData::~DeleteNamespaceStateData() {
  SharedDtor();
}

void DeleteNamespaceStateData::SharedDtor() {
  if (namespace_name_ != &::google::protobuf::internal::kEmptyString) {
    delete namespace_name_;
  }
  if (this != default_instance_) {
    delete namespace_descriptor_;
  }
}

void DeleteNamespaceStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNamespaceStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteNamespaceStateData_descriptor_;
}

const DeleteNamespaceStateData& DeleteNamespaceStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

DeleteNamespaceStateData* DeleteNamespaceStateData::default_instance_ = NULL;

DeleteNamespaceStateData* DeleteNamespaceStateData::New() const {
  return new DeleteNamespaceStateData;
}

void DeleteNamespaceStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespace_name()) {
      if (namespace_name_ != &::google::protobuf::internal::kEmptyString) {
        namespace_name_->clear();
      }
    }
    if (has_namespace_descriptor()) {
      if (namespace_descriptor_ != NULL) namespace_descriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteNamespaceStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string namespace_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_name().data(), this->namespace_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_namespace_descriptor;
        break;
      }

      // optional .hbase.pb.NamespaceDescriptor namespace_descriptor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespace_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namespace_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteNamespaceStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string namespace_name = 1;
  if (has_namespace_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_name().data(), this->namespace_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namespace_name(), output);
  }

  // optional .hbase.pb.NamespaceDescriptor namespace_descriptor = 2;
  if (has_namespace_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->namespace_descriptor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteNamespaceStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string namespace_name = 1;
  if (has_namespace_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_name().data(), this->namespace_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_name(), target);
  }

  // optional .hbase.pb.NamespaceDescriptor namespace_descriptor = 2;
  if (has_namespace_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->namespace_descriptor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteNamespaceStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string namespace_name = 1;
    if (has_namespace_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_name());
    }

    // optional .hbase.pb.NamespaceDescriptor namespace_descriptor = 2;
    if (has_namespace_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespace_descriptor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNamespaceStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteNamespaceStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteNamespaceStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteNamespaceStateData::MergeFrom(const DeleteNamespaceStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespace_name()) {
      set_namespace_name(from.namespace_name());
    }
    if (from.has_namespace_descriptor()) {
      mutable_namespace_descriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.namespace_descriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteNamespaceStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNamespaceStateData::CopyFrom(const DeleteNamespaceStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNamespaceStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_namespace_descriptor()) {
    if (!this->namespace_descriptor().IsInitialized()) return false;
  }
  return true;
}

void DeleteNamespaceStateData::Swap(DeleteNamespaceStateData* other) {
  if (other != this) {
    std::swap(namespace_name_, other->namespace_name_);
    std::swap(namespace_descriptor_, other->namespace_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteNamespaceStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteNamespaceStateData_descriptor_;
  metadata.reflection = DeleteNamespaceStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddColumnFamilyStateData::kUserInfoFieldNumber;
const int AddColumnFamilyStateData::kTableNameFieldNumber;
const int AddColumnFamilyStateData::kColumnfamilySchemaFieldNumber;
const int AddColumnFamilyStateData::kUnmodifiedTableSchemaFieldNumber;
#endif  // !_MSC_VER

AddColumnFamilyStateData::AddColumnFamilyStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddColumnFamilyStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  columnfamily_schema_ = const_cast< ::hbase::pb::ColumnFamilySchema*>(&::hbase::pb::ColumnFamilySchema::default_instance());
  unmodified_table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

AddColumnFamilyStateData::AddColumnFamilyStateData(const AddColumnFamilyStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddColumnFamilyStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_name_ = NULL;
  columnfamily_schema_ = NULL;
  unmodified_table_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddColumnFamilyStateData::~AddColumnFamilyStateData() {
  SharedDtor();
}

void AddColumnFamilyStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
    delete columnfamily_schema_;
    delete unmodified_table_schema_;
  }
}

void AddColumnFamilyStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddColumnFamilyStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddColumnFamilyStateData_descriptor_;
}

const AddColumnFamilyStateData& AddColumnFamilyStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

AddColumnFamilyStateData* AddColumnFamilyStateData::default_instance_ = NULL;

AddColumnFamilyStateData* AddColumnFamilyStateData::New() const {
  return new AddColumnFamilyStateData;
}

void AddColumnFamilyStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_columnfamily_schema()) {
      if (columnfamily_schema_ != NULL) columnfamily_schema_->::hbase::pb::ColumnFamilySchema::Clear();
    }
    if (has_unmodified_table_schema()) {
      if (unmodified_table_schema_ != NULL) unmodified_table_schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddColumnFamilyStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnfamily_schema;
        break;
      }

      // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnfamily_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_columnfamily_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unmodified_table_schema;
        break;
      }

      // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unmodified_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unmodified_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddColumnFamilyStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
  if (has_columnfamily_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columnfamily_schema(), output);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
  if (has_unmodified_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unmodified_table_schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddColumnFamilyStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
  if (has_columnfamily_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->columnfamily_schema(), target);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
  if (has_unmodified_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unmodified_table_schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddColumnFamilyStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
    if (has_columnfamily_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columnfamily_schema());
    }

    // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
    if (has_unmodified_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unmodified_table_schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddColumnFamilyStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddColumnFamilyStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddColumnFamilyStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddColumnFamilyStateData::MergeFrom(const AddColumnFamilyStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_columnfamily_schema()) {
      mutable_columnfamily_schema()->::hbase::pb::ColumnFamilySchema::MergeFrom(from.columnfamily_schema());
    }
    if (from.has_unmodified_table_schema()) {
      mutable_unmodified_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.unmodified_table_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddColumnFamilyStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddColumnFamilyStateData::CopyFrom(const AddColumnFamilyStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddColumnFamilyStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_columnfamily_schema()) {
    if (!this->columnfamily_schema().IsInitialized()) return false;
  }
  if (has_unmodified_table_schema()) {
    if (!this->unmodified_table_schema().IsInitialized()) return false;
  }
  return true;
}

void AddColumnFamilyStateData::Swap(AddColumnFamilyStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_name_, other->table_name_);
    std::swap(columnfamily_schema_, other->columnfamily_schema_);
    std::swap(unmodified_table_schema_, other->unmodified_table_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddColumnFamilyStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddColumnFamilyStateData_descriptor_;
  metadata.reflection = AddColumnFamilyStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyColumnFamilyStateData::kUserInfoFieldNumber;
const int ModifyColumnFamilyStateData::kTableNameFieldNumber;
const int ModifyColumnFamilyStateData::kColumnfamilySchemaFieldNumber;
const int ModifyColumnFamilyStateData::kUnmodifiedTableSchemaFieldNumber;
#endif  // !_MSC_VER

ModifyColumnFamilyStateData::ModifyColumnFamilyStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyColumnFamilyStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  columnfamily_schema_ = const_cast< ::hbase::pb::ColumnFamilySchema*>(&::hbase::pb::ColumnFamilySchema::default_instance());
  unmodified_table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

ModifyColumnFamilyStateData::ModifyColumnFamilyStateData(const ModifyColumnFamilyStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyColumnFamilyStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_name_ = NULL;
  columnfamily_schema_ = NULL;
  unmodified_table_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyColumnFamilyStateData::~ModifyColumnFamilyStateData() {
  SharedDtor();
}

void ModifyColumnFamilyStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
    delete columnfamily_schema_;
    delete unmodified_table_schema_;
  }
}

void ModifyColumnFamilyStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyColumnFamilyStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyColumnFamilyStateData_descriptor_;
}

const ModifyColumnFamilyStateData& ModifyColumnFamilyStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

ModifyColumnFamilyStateData* ModifyColumnFamilyStateData::default_instance_ = NULL;

ModifyColumnFamilyStateData* ModifyColumnFamilyStateData::New() const {
  return new ModifyColumnFamilyStateData;
}

void ModifyColumnFamilyStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_columnfamily_schema()) {
      if (columnfamily_schema_ != NULL) columnfamily_schema_->::hbase::pb::ColumnFamilySchema::Clear();
    }
    if (has_unmodified_table_schema()) {
      if (unmodified_table_schema_ != NULL) unmodified_table_schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyColumnFamilyStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnfamily_schema;
        break;
      }

      // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnfamily_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_columnfamily_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unmodified_table_schema;
        break;
      }

      // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unmodified_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unmodified_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyColumnFamilyStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
  if (has_columnfamily_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columnfamily_schema(), output);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
  if (has_unmodified_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unmodified_table_schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyColumnFamilyStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
  if (has_columnfamily_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->columnfamily_schema(), target);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
  if (has_unmodified_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unmodified_table_schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyColumnFamilyStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required .hbase.pb.ColumnFamilySchema columnfamily_schema = 3;
    if (has_columnfamily_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columnfamily_schema());
    }

    // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
    if (has_unmodified_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unmodified_table_schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyColumnFamilyStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyColumnFamilyStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyColumnFamilyStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyColumnFamilyStateData::MergeFrom(const ModifyColumnFamilyStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_columnfamily_schema()) {
      mutable_columnfamily_schema()->::hbase::pb::ColumnFamilySchema::MergeFrom(from.columnfamily_schema());
    }
    if (from.has_unmodified_table_schema()) {
      mutable_unmodified_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.unmodified_table_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyColumnFamilyStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyColumnFamilyStateData::CopyFrom(const ModifyColumnFamilyStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyColumnFamilyStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_columnfamily_schema()) {
    if (!this->columnfamily_schema().IsInitialized()) return false;
  }
  if (has_unmodified_table_schema()) {
    if (!this->unmodified_table_schema().IsInitialized()) return false;
  }
  return true;
}

void ModifyColumnFamilyStateData::Swap(ModifyColumnFamilyStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_name_, other->table_name_);
    std::swap(columnfamily_schema_, other->columnfamily_schema_);
    std::swap(unmodified_table_schema_, other->unmodified_table_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyColumnFamilyStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyColumnFamilyStateData_descriptor_;
  metadata.reflection = ModifyColumnFamilyStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteColumnFamilyStateData::kUserInfoFieldNumber;
const int DeleteColumnFamilyStateData::kTableNameFieldNumber;
const int DeleteColumnFamilyStateData::kColumnfamilyNameFieldNumber;
const int DeleteColumnFamilyStateData::kUnmodifiedTableSchemaFieldNumber;
#endif  // !_MSC_VER

DeleteColumnFamilyStateData::DeleteColumnFamilyStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteColumnFamilyStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  unmodified_table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

DeleteColumnFamilyStateData::DeleteColumnFamilyStateData(const DeleteColumnFamilyStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteColumnFamilyStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_name_ = NULL;
  columnfamily_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unmodified_table_schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteColumnFamilyStateData::~DeleteColumnFamilyStateData() {
  SharedDtor();
}

void DeleteColumnFamilyStateData::SharedDtor() {
  if (columnfamily_name_ != &::google::protobuf::internal::kEmptyString) {
    delete columnfamily_name_;
  }
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
    delete unmodified_table_schema_;
  }
}

void DeleteColumnFamilyStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteColumnFamilyStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteColumnFamilyStateData_descriptor_;
}

const DeleteColumnFamilyStateData& DeleteColumnFamilyStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

DeleteColumnFamilyStateData* DeleteColumnFamilyStateData::default_instance_ = NULL;

DeleteColumnFamilyStateData* DeleteColumnFamilyStateData::New() const {
  return new DeleteColumnFamilyStateData;
}

void DeleteColumnFamilyStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_columnfamily_name()) {
      if (columnfamily_name_ != &::google::protobuf::internal::kEmptyString) {
        columnfamily_name_->clear();
      }
    }
    if (has_unmodified_table_schema()) {
      if (unmodified_table_schema_ != NULL) unmodified_table_schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteColumnFamilyStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnfamily_name;
        break;
      }

      // required bytes columnfamily_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnfamily_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_columnfamily_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unmodified_table_schema;
        break;
      }

      // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unmodified_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unmodified_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteColumnFamilyStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // required bytes columnfamily_name = 3;
  if (has_columnfamily_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->columnfamily_name(), output);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
  if (has_unmodified_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unmodified_table_schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteColumnFamilyStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // required bytes columnfamily_name = 3;
  if (has_columnfamily_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->columnfamily_name(), target);
  }

  // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
  if (has_unmodified_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unmodified_table_schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteColumnFamilyStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required bytes columnfamily_name = 3;
    if (has_columnfamily_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->columnfamily_name());
    }

    // optional .hbase.pb.TableSchema unmodified_table_schema = 4;
    if (has_unmodified_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unmodified_table_schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteColumnFamilyStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteColumnFamilyStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteColumnFamilyStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteColumnFamilyStateData::MergeFrom(const DeleteColumnFamilyStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_columnfamily_name()) {
      set_columnfamily_name(from.columnfamily_name());
    }
    if (from.has_unmodified_table_schema()) {
      mutable_unmodified_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.unmodified_table_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteColumnFamilyStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteColumnFamilyStateData::CopyFrom(const DeleteColumnFamilyStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteColumnFamilyStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_unmodified_table_schema()) {
    if (!this->unmodified_table_schema().IsInitialized()) return false;
  }
  return true;
}

void DeleteColumnFamilyStateData::Swap(DeleteColumnFamilyStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_name_, other->table_name_);
    std::swap(columnfamily_name_, other->columnfamily_name_);
    std::swap(unmodified_table_schema_, other->unmodified_table_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteColumnFamilyStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteColumnFamilyStateData_descriptor_;
  metadata.reflection = DeleteColumnFamilyStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnableTableStateData::kUserInfoFieldNumber;
const int EnableTableStateData::kTableNameFieldNumber;
const int EnableTableStateData::kSkipTableStateCheckFieldNumber;
#endif  // !_MSC_VER

EnableTableStateData::EnableTableStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableTableStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

EnableTableStateData::EnableTableStateData(const EnableTableStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableTableStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_name_ = NULL;
  skip_table_state_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableTableStateData::~EnableTableStateData() {
  SharedDtor();
}

void EnableTableStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
  }
}

void EnableTableStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableTableStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableTableStateData_descriptor_;
}

const EnableTableStateData& EnableTableStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

EnableTableStateData* EnableTableStateData::default_instance_ = NULL;

EnableTableStateData* EnableTableStateData::New() const {
  return new EnableTableStateData;
}

void EnableTableStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    skip_table_state_check_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableTableStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skip_table_state_check;
        break;
      }

      // required bool skip_table_state_check = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip_table_state_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_table_state_check_)));
          set_has_skip_table_state_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableTableStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // required bool skip_table_state_check = 3;
  if (has_skip_table_state_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->skip_table_state_check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableTableStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // required bool skip_table_state_check = 3;
  if (has_skip_table_state_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->skip_table_state_check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableTableStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required bool skip_table_state_check = 3;
    if (has_skip_table_state_check()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableTableStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableTableStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableTableStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableTableStateData::MergeFrom(const EnableTableStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_skip_table_state_check()) {
      set_skip_table_state_check(from.skip_table_state_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableTableStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableTableStateData::CopyFrom(const EnableTableStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableTableStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void EnableTableStateData::Swap(EnableTableStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_name_, other->table_name_);
    std::swap(skip_table_state_check_, other->skip_table_state_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableTableStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableTableStateData_descriptor_;
  metadata.reflection = EnableTableStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisableTableStateData::kUserInfoFieldNumber;
const int DisableTableStateData::kTableNameFieldNumber;
const int DisableTableStateData::kSkipTableStateCheckFieldNumber;
#endif  // !_MSC_VER

DisableTableStateData::DisableTableStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisableTableStateData::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

DisableTableStateData::DisableTableStateData(const DisableTableStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisableTableStateData::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  table_name_ = NULL;
  skip_table_state_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisableTableStateData::~DisableTableStateData() {
  SharedDtor();
}

void DisableTableStateData::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete table_name_;
  }
}

void DisableTableStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableTableStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableTableStateData_descriptor_;
}

const DisableTableStateData& DisableTableStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

DisableTableStateData* DisableTableStateData::default_instance_ = NULL;

DisableTableStateData* DisableTableStateData::New() const {
  return new DisableTableStateData;
}

void DisableTableStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    skip_table_state_check_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisableTableStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skip_table_state_check;
        break;
      }

      // required bool skip_table_state_check = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip_table_state_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_table_state_check_)));
          set_has_skip_table_state_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisableTableStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // required bool skip_table_state_check = 3;
  if (has_skip_table_state_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->skip_table_state_check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisableTableStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // required bool skip_table_state_check = 3;
  if (has_skip_table_state_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->skip_table_state_check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisableTableStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required bool skip_table_state_check = 3;
    if (has_skip_table_state_check()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableTableStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisableTableStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisableTableStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisableTableStateData::MergeFrom(const DisableTableStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_skip_table_state_check()) {
      set_skip_table_state_check(from.skip_table_state_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisableTableStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableTableStateData::CopyFrom(const DisableTableStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTableStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void DisableTableStateData::Swap(DisableTableStateData* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(table_name_, other->table_name_);
    std::swap(skip_table_state_check_, other->skip_table_state_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisableTableStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisableTableStateData_descriptor_;
  metadata.reflection = DisableTableStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCrashStateData::kServerNameFieldNumber;
const int ServerCrashStateData::kDistributedLogReplayFieldNumber;
const int ServerCrashStateData::kRegionsOnCrashedServerFieldNumber;
const int ServerCrashStateData::kRegionsAssignedFieldNumber;
const int ServerCrashStateData::kCarryingMetaFieldNumber;
const int ServerCrashStateData::kShouldSplitWalFieldNumber;
#endif  // !_MSC_VER

ServerCrashStateData::ServerCrashStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerCrashStateData::InitAsDefaultInstance() {
  server_name_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

ServerCrashStateData::ServerCrashStateData(const ServerCrashStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerCrashStateData::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = NULL;
  distributed_log_replay_ = false;
  carrying_meta_ = false;
  should_split_wal_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCrashStateData::~ServerCrashStateData() {
  SharedDtor();
}

void ServerCrashStateData::SharedDtor() {
  if (this != default_instance_) {
    delete server_name_;
  }
}

void ServerCrashStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCrashStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCrashStateData_descriptor_;
}

const ServerCrashStateData& ServerCrashStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterProcedure_2eproto();
  return *default_instance_;
}

ServerCrashStateData* ServerCrashStateData::default_instance_ = NULL;

ServerCrashStateData* ServerCrashStateData::New() const {
  return new ServerCrashStateData;
}

void ServerCrashStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != NULL) server_name_->::hbase::pb::ServerName::Clear();
    }
    distributed_log_replay_ = false;
    carrying_meta_ = false;
    should_split_wal_ = true;
  }
  regions_on_crashed_server_.Clear();
  regions_assigned_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCrashStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_distributed_log_replay;
        break;
      }

      // optional bool distributed_log_replay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distributed_log_replay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distributed_log_replay_)));
          set_has_distributed_log_replay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regions_on_crashed_server;
        break;
      }

      // repeated .hbase.pb.RegionInfo regions_on_crashed_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regions_on_crashed_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regions_on_crashed_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regions_on_crashed_server;
        if (input->ExpectTag(34)) goto parse_regions_assigned;
        break;
      }

      // repeated .hbase.pb.RegionInfo regions_assigned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regions_assigned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regions_assigned()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_regions_assigned;
        if (input->ExpectTag(40)) goto parse_carrying_meta;
        break;
      }

      // optional bool carrying_meta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carrying_meta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &carrying_meta_)));
          set_has_carrying_meta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_should_split_wal;
        break;
      }

      // optional bool should_split_wal = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_split_wal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_split_wal_)));
          set_has_should_split_wal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerCrashStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_name(), output);
  }

  // optional bool distributed_log_replay = 2;
  if (has_distributed_log_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->distributed_log_replay(), output);
  }

  // repeated .hbase.pb.RegionInfo regions_on_crashed_server = 3;
  for (int i = 0; i < this->regions_on_crashed_server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regions_on_crashed_server(i), output);
  }

  // repeated .hbase.pb.RegionInfo regions_assigned = 4;
  for (int i = 0; i < this->regions_assigned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->regions_assigned(i), output);
  }

  // optional bool carrying_meta = 5;
  if (has_carrying_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->carrying_meta(), output);
  }

  // optional bool should_split_wal = 6 [default = true];
  if (has_should_split_wal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->should_split_wal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerCrashStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server_name = 1;
  if (has_server_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_name(), target);
  }

  // optional bool distributed_log_replay = 2;
  if (has_distributed_log_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->distributed_log_replay(), target);
  }

  // repeated .hbase.pb.RegionInfo regions_on_crashed_server = 3;
  for (int i = 0; i < this->regions_on_crashed_server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->regions_on_crashed_server(i), target);
  }

  // repeated .hbase.pb.RegionInfo regions_assigned = 4;
  for (int i = 0; i < this->regions_assigned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->regions_assigned(i), target);
  }

  // optional bool carrying_meta = 5;
  if (has_carrying_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->carrying_meta(), target);
  }

  // optional bool should_split_wal = 6 [default = true];
  if (has_should_split_wal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->should_split_wal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerCrashStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_name());
    }

    // optional bool distributed_log_replay = 2;
    if (has_distributed_log_replay()) {
      total_size += 1 + 1;
    }

    // optional bool carrying_meta = 5;
    if (has_carrying_meta()) {
      total_size += 1 + 1;
    }

    // optional bool should_split_wal = 6 [default = true];
    if (has_should_split_wal()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.RegionInfo regions_on_crashed_server = 3;
  total_size += 1 * this->regions_on_crashed_server_size();
  for (int i = 0; i < this->regions_on_crashed_server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regions_on_crashed_server(i));
  }

  // repeated .hbase.pb.RegionInfo regions_assigned = 4;
  total_size += 1 * this->regions_assigned_size();
  for (int i = 0; i < this->regions_assigned_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regions_assigned(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCrashStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCrashStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCrashStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCrashStateData::MergeFrom(const ServerCrashStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  regions_on_crashed_server_.MergeFrom(from.regions_on_crashed_server_);
  regions_assigned_.MergeFrom(from.regions_assigned_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      mutable_server_name()->::hbase::pb::ServerName::MergeFrom(from.server_name());
    }
    if (from.has_distributed_log_replay()) {
      set_distributed_log_replay(from.distributed_log_replay());
    }
    if (from.has_carrying_meta()) {
      set_carrying_meta(from.carrying_meta());
    }
    if (from.has_should_split_wal()) {
      set_should_split_wal(from.should_split_wal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCrashStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCrashStateData::CopyFrom(const ServerCrashStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCrashStateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server_name()) {
    if (!this->server_name().IsInitialized()) return false;
  }
  for (int i = 0; i < regions_on_crashed_server_size(); i++) {
    if (!this->regions_on_crashed_server(i).IsInitialized()) return false;
  }
  for (int i = 0; i < regions_assigned_size(); i++) {
    if (!this->regions_assigned(i).IsInitialized()) return false;
  }
  return true;
}

void ServerCrashStateData::Swap(ServerCrashStateData* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(distributed_log_replay_, other->distributed_log_replay_);
    regions_on_crashed_server_.Swap(&other->regions_on_crashed_server_);
    regions_assigned_.Swap(&other->regions_assigned_);
    std::swap(carrying_meta_, other->carrying_meta_);
    std::swap(should_split_wal_, other->should_split_wal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCrashStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCrashStateData_descriptor_;
  metadata.reflection = ServerCrashStateData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
