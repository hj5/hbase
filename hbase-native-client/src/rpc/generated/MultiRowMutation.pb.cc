// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiRowMutation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MultiRowMutation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* MultiRowMutationProcessorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRowMutationProcessorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiRowMutationProcessorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRowMutationProcessorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutateRowsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutateRowsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MultiRowMutation_2eproto() {
  protobuf_AddDesc_MultiRowMutation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MultiRowMutation.proto");
  GOOGLE_CHECK(file != NULL);
  MultiRowMutationProcessorRequest_descriptor_ = file->message_type(0);
  static const int MultiRowMutationProcessorRequest_offsets_[1] = {
  };
  MultiRowMutationProcessorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiRowMutationProcessorRequest_descriptor_,
      MultiRowMutationProcessorRequest::default_instance_,
      MultiRowMutationProcessorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRowMutationProcessorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRowMutationProcessorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiRowMutationProcessorRequest));
  MultiRowMutationProcessorResponse_descriptor_ = file->message_type(1);
  static const int MultiRowMutationProcessorResponse_offsets_[1] = {
  };
  MultiRowMutationProcessorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiRowMutationProcessorResponse_descriptor_,
      MultiRowMutationProcessorResponse::default_instance_,
      MultiRowMutationProcessorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRowMutationProcessorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRowMutationProcessorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiRowMutationProcessorResponse));
  MutateRowsRequest_descriptor_ = file->message_type(2);
  static const int MutateRowsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, mutation_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, nonce_),
  };
  MutateRowsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutateRowsRequest_descriptor_,
      MutateRowsRequest::default_instance_,
      MutateRowsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutateRowsRequest));
  MutateRowsResponse_descriptor_ = file->message_type(3);
  static const int MutateRowsResponse_offsets_[1] = {
  };
  MutateRowsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutateRowsResponse_descriptor_,
      MutateRowsResponse::default_instance_,
      MutateRowsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutateRowsResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MultiRowMutation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiRowMutationProcessorRequest_descriptor_, &MultiRowMutationProcessorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiRowMutationProcessorResponse_descriptor_, &MultiRowMutationProcessorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutateRowsRequest_descriptor_, &MutateRowsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutateRowsResponse_descriptor_, &MutateRowsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MultiRowMutation_2eproto() {
  delete MultiRowMutationProcessorRequest::default_instance_;
  delete MultiRowMutationProcessorRequest_reflection_;
  delete MultiRowMutationProcessorResponse::default_instance_;
  delete MultiRowMutationProcessorResponse_reflection_;
  delete MutateRowsRequest::default_instance_;
  delete MutateRowsRequest_reflection_;
  delete MutateRowsResponse::default_instance_;
  delete MutateRowsResponse_reflection_;
}

void protobuf_AddDesc_MultiRowMutation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MultiRowMutation.proto\022\010hbase.pb\032\014Clie"
    "nt.proto\"\"\n MultiRowMutationProcessorReq"
    "uest\"#\n!MultiRowMutationProcessorRespons"
    "e\"j\n\021MutateRowsRequest\0221\n\020mutation_reque"
    "st\030\001 \003(\0132\027.hbase.pb.MutationProto\022\023\n\013non"
    "ce_group\030\002 \001(\004\022\r\n\005nonce\030\003 \001(\004\"\024\n\022MutateR"
    "owsResponse2b\n\027MultiRowMutationService\022G"
    "\n\nMutateRows\022\033.hbase.pb.MutateRowsReques"
    "t\032\034.hbase.pb.MutateRowsResponseBL\n*org.a"
    "pache.hadoop.hbase.protobuf.generatedB\026M"
    "ultiRowMutationProtosH\001\210\001\001\240\001\001", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MultiRowMutation.proto", &protobuf_RegisterTypes);
  MultiRowMutationProcessorRequest::default_instance_ = new MultiRowMutationProcessorRequest();
  MultiRowMutationProcessorResponse::default_instance_ = new MultiRowMutationProcessorResponse();
  MutateRowsRequest::default_instance_ = new MutateRowsRequest();
  MutateRowsResponse::default_instance_ = new MutateRowsResponse();
  MultiRowMutationProcessorRequest::default_instance_->InitAsDefaultInstance();
  MultiRowMutationProcessorResponse::default_instance_->InitAsDefaultInstance();
  MutateRowsRequest::default_instance_->InitAsDefaultInstance();
  MutateRowsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MultiRowMutation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MultiRowMutation_2eproto {
  StaticDescriptorInitializer_MultiRowMutation_2eproto() {
    protobuf_AddDesc_MultiRowMutation_2eproto();
  }
} static_descriptor_initializer_MultiRowMutation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MultiRowMutationProcessorRequest::MultiRowMutationProcessorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiRowMutationProcessorRequest::InitAsDefaultInstance() {
}

MultiRowMutationProcessorRequest::MultiRowMutationProcessorRequest(const MultiRowMutationProcessorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiRowMutationProcessorRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRowMutationProcessorRequest::~MultiRowMutationProcessorRequest() {
  SharedDtor();
}

void MultiRowMutationProcessorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiRowMutationProcessorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRowMutationProcessorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRowMutationProcessorRequest_descriptor_;
}

const MultiRowMutationProcessorRequest& MultiRowMutationProcessorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MultiRowMutation_2eproto();
  return *default_instance_;
}

MultiRowMutationProcessorRequest* MultiRowMutationProcessorRequest::default_instance_ = NULL;

MultiRowMutationProcessorRequest* MultiRowMutationProcessorRequest::New() const {
  return new MultiRowMutationProcessorRequest;
}

void MultiRowMutationProcessorRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiRowMutationProcessorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MultiRowMutationProcessorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiRowMutationProcessorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiRowMutationProcessorRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRowMutationProcessorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiRowMutationProcessorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiRowMutationProcessorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiRowMutationProcessorRequest::MergeFrom(const MultiRowMutationProcessorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiRowMutationProcessorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRowMutationProcessorRequest::CopyFrom(const MultiRowMutationProcessorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRowMutationProcessorRequest::IsInitialized() const {

  return true;
}

void MultiRowMutationProcessorRequest::Swap(MultiRowMutationProcessorRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiRowMutationProcessorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRowMutationProcessorRequest_descriptor_;
  metadata.reflection = MultiRowMutationProcessorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MultiRowMutationProcessorResponse::MultiRowMutationProcessorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiRowMutationProcessorResponse::InitAsDefaultInstance() {
}

MultiRowMutationProcessorResponse::MultiRowMutationProcessorResponse(const MultiRowMutationProcessorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiRowMutationProcessorResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRowMutationProcessorResponse::~MultiRowMutationProcessorResponse() {
  SharedDtor();
}

void MultiRowMutationProcessorResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiRowMutationProcessorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRowMutationProcessorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRowMutationProcessorResponse_descriptor_;
}

const MultiRowMutationProcessorResponse& MultiRowMutationProcessorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MultiRowMutation_2eproto();
  return *default_instance_;
}

MultiRowMutationProcessorResponse* MultiRowMutationProcessorResponse::default_instance_ = NULL;

MultiRowMutationProcessorResponse* MultiRowMutationProcessorResponse::New() const {
  return new MultiRowMutationProcessorResponse;
}

void MultiRowMutationProcessorResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiRowMutationProcessorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MultiRowMutationProcessorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiRowMutationProcessorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiRowMutationProcessorResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRowMutationProcessorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiRowMutationProcessorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiRowMutationProcessorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiRowMutationProcessorResponse::MergeFrom(const MultiRowMutationProcessorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiRowMutationProcessorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRowMutationProcessorResponse::CopyFrom(const MultiRowMutationProcessorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRowMutationProcessorResponse::IsInitialized() const {

  return true;
}

void MultiRowMutationProcessorResponse::Swap(MultiRowMutationProcessorResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiRowMutationProcessorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRowMutationProcessorResponse_descriptor_;
  metadata.reflection = MultiRowMutationProcessorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutateRowsRequest::kMutationRequestFieldNumber;
const int MutateRowsRequest::kNonceGroupFieldNumber;
const int MutateRowsRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

MutateRowsRequest::MutateRowsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutateRowsRequest::InitAsDefaultInstance() {
}

MutateRowsRequest::MutateRowsRequest(const MutateRowsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutateRowsRequest::SharedCtor() {
  _cached_size_ = 0;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutateRowsRequest::~MutateRowsRequest() {
  SharedDtor();
}

void MutateRowsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MutateRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsRequest_descriptor_;
}

const MutateRowsRequest& MutateRowsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MultiRowMutation_2eproto();
  return *default_instance_;
}

MutateRowsRequest* MutateRowsRequest::default_instance_ = NULL;

MutateRowsRequest* MutateRowsRequest::New() const {
  return new MutateRowsRequest;
}

void MutateRowsRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  mutation_request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutateRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.MutationProto mutation_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mutation_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutation_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mutation_request;
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutateRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.MutationProto mutation_request = 1;
  for (int i = 0; i < this->mutation_request_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutation_request(i), output);
  }

  // optional uint64 nonce_group = 2;
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutateRowsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.MutationProto mutation_request = 1;
  for (int i = 0; i < this->mutation_request_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mutation_request(i), target);
  }

  // optional uint64 nonce_group = 2;
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutateRowsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 nonce_group = 2;
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  // repeated .hbase.pb.MutationProto mutation_request = 1;
  total_size += 1 * this->mutation_request_size();
  for (int i = 0; i < this->mutation_request_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mutation_request(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutateRowsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutateRowsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutateRowsRequest::MergeFrom(const MutateRowsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutation_request_.MergeFrom(from.mutation_request_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutateRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest::CopyFrom(const MutateRowsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsRequest::IsInitialized() const {

  for (int i = 0; i < mutation_request_size(); i++) {
    if (!this->mutation_request(i).IsInitialized()) return false;
  }
  return true;
}

void MutateRowsRequest::Swap(MutateRowsRequest* other) {
  if (other != this) {
    mutation_request_.Swap(&other->mutation_request_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutateRowsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsRequest_descriptor_;
  metadata.reflection = MutateRowsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MutateRowsResponse::MutateRowsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutateRowsResponse::InitAsDefaultInstance() {
}

MutateRowsResponse::MutateRowsResponse(const MutateRowsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutateRowsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutateRowsResponse::~MutateRowsResponse() {
  SharedDtor();
}

void MutateRowsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MutateRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutateRowsResponse_descriptor_;
}

const MutateRowsResponse& MutateRowsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MultiRowMutation_2eproto();
  return *default_instance_;
}

MutateRowsResponse* MutateRowsResponse::default_instance_ = NULL;

MutateRowsResponse* MutateRowsResponse::New() const {
  return new MutateRowsResponse;
}

void MutateRowsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutateRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MutateRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutateRowsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutateRowsResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutateRowsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutateRowsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutateRowsResponse::MergeFrom(const MutateRowsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutateRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsResponse::CopyFrom(const MutateRowsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsResponse::IsInitialized() const {

  return true;
}

void MutateRowsResponse::Swap(MutateRowsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutateRowsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutateRowsResponse_descriptor_;
  metadata.reflection = MutateRowsResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
