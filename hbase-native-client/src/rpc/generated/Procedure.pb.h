// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Procedure.proto

#ifndef PROTOBUF_Procedure_2eproto__INCLUDED
#define PROTOBUF_Procedure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ErrorHandling.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Procedure_2eproto();
void protobuf_AssignDesc_Procedure_2eproto();
void protobuf_ShutdownFile_Procedure_2eproto();

class Procedure;
class SequentialProcedureData;
class StateMachineProcedureData;
class ProcedureWALHeader;
class ProcedureWALTrailer;
class ProcedureStoreTracker;
class ProcedureStoreTracker_TrackerNode;
class ProcedureWALEntry;

enum ProcedureWALEntry_Type {
  ProcedureWALEntry_Type_PROCEDURE_WAL_EOF = 1,
  ProcedureWALEntry_Type_PROCEDURE_WAL_INIT = 2,
  ProcedureWALEntry_Type_PROCEDURE_WAL_INSERT = 3,
  ProcedureWALEntry_Type_PROCEDURE_WAL_UPDATE = 4,
  ProcedureWALEntry_Type_PROCEDURE_WAL_DELETE = 5,
  ProcedureWALEntry_Type_PROCEDURE_WAL_COMPACT = 6
};
bool ProcedureWALEntry_Type_IsValid(int value);
const ProcedureWALEntry_Type ProcedureWALEntry_Type_Type_MIN = ProcedureWALEntry_Type_PROCEDURE_WAL_EOF;
const ProcedureWALEntry_Type ProcedureWALEntry_Type_Type_MAX = ProcedureWALEntry_Type_PROCEDURE_WAL_COMPACT;
const int ProcedureWALEntry_Type_Type_ARRAYSIZE = ProcedureWALEntry_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcedureWALEntry_Type_descriptor();
inline const ::std::string& ProcedureWALEntry_Type_Name(ProcedureWALEntry_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcedureWALEntry_Type_descriptor(), value);
}
inline bool ProcedureWALEntry_Type_Parse(
    const ::std::string& name, ProcedureWALEntry_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcedureWALEntry_Type>(
    ProcedureWALEntry_Type_descriptor(), name, value);
}
enum ProcedureState {
  INITIALIZING = 1,
  RUNNABLE = 2,
  WAITING = 3,
  WAITING_TIMEOUT = 4,
  ROLLEDBACK = 5,
  FINISHED = 6
};
bool ProcedureState_IsValid(int value);
const ProcedureState ProcedureState_MIN = INITIALIZING;
const ProcedureState ProcedureState_MAX = FINISHED;
const int ProcedureState_ARRAYSIZE = ProcedureState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcedureState_descriptor();
inline const ::std::string& ProcedureState_Name(ProcedureState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcedureState_descriptor(), value);
}
inline bool ProcedureState_Parse(
    const ::std::string& name, ProcedureState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcedureState>(
    ProcedureState_descriptor(), name, value);
}
// ===================================================================

class Procedure : public ::google::protobuf::Message {
 public:
  Procedure();
  virtual ~Procedure();

  Procedure(const Procedure& from);

  inline Procedure& operator=(const Procedure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Procedure& default_instance();

  void Swap(Procedure* other);

  // implements Message ----------------------------------------------

  Procedure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Procedure& from);
  void MergeFrom(const Procedure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string class_name = 1;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 1;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const char* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // optional uint64 parent_id = 2;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  inline ::google::protobuf::uint64 parent_id() const;
  inline void set_parent_id(::google::protobuf::uint64 value);

  // required uint64 proc_id = 3;
  inline bool has_proc_id() const;
  inline void clear_proc_id();
  static const int kProcIdFieldNumber = 3;
  inline ::google::protobuf::uint64 proc_id() const;
  inline void set_proc_id(::google::protobuf::uint64 value);

  // required uint64 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional string owner = 5;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 5;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  inline void set_allocated_owner(::std::string* owner);

  // required .hbase.pb.ProcedureState state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::hbase::pb::ProcedureState state() const;
  inline void set_state(::hbase::pb::ProcedureState value);

  // repeated uint32 stack_id = 7;
  inline int stack_id_size() const;
  inline void clear_stack_id();
  static const int kStackIdFieldNumber = 7;
  inline ::google::protobuf::uint32 stack_id(int index) const;
  inline void set_stack_id(int index, ::google::protobuf::uint32 value);
  inline void add_stack_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stack_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stack_id();

  // required uint64 last_update = 8;
  inline bool has_last_update() const;
  inline void clear_last_update();
  static const int kLastUpdateFieldNumber = 8;
  inline ::google::protobuf::uint64 last_update() const;
  inline void set_last_update(::google::protobuf::uint64 value);

  // optional uint32 timeout = 9;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 9;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);

  // optional .hbase.pb.ForeignExceptionMessage exception = 10;
  inline bool has_exception() const;
  inline void clear_exception();
  static const int kExceptionFieldNumber = 10;
  inline const ::hbase::pb::ForeignExceptionMessage& exception() const;
  inline ::hbase::pb::ForeignExceptionMessage* mutable_exception();
  inline ::hbase::pb::ForeignExceptionMessage* release_exception();
  inline void set_allocated_exception(::hbase::pb::ForeignExceptionMessage* exception);

  // optional bytes result = 11;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 11;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const void* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // optional bytes state_data = 12;
  inline bool has_state_data() const;
  inline void clear_state_data();
  static const int kStateDataFieldNumber = 12;
  inline const ::std::string& state_data() const;
  inline void set_state_data(const ::std::string& value);
  inline void set_state_data(const char* value);
  inline void set_state_data(const void* value, size_t size);
  inline ::std::string* mutable_state_data();
  inline ::std::string* release_state_data();
  inline void set_allocated_state_data(::std::string* state_data);

  // optional uint64 nonce_group = 13 [default = 0];
  inline bool has_nonce_group() const;
  inline void clear_nonce_group();
  static const int kNonceGroupFieldNumber = 13;
  inline ::google::protobuf::uint64 nonce_group() const;
  inline void set_nonce_group(::google::protobuf::uint64 value);

  // optional uint64 nonce = 14 [default = 0];
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 14;
  inline ::google::protobuf::uint64 nonce() const;
  inline void set_nonce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.Procedure)
 private:
  inline void set_has_class_name();
  inline void clear_has_class_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_proc_id();
  inline void clear_has_proc_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_last_update();
  inline void clear_has_last_update();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_exception();
  inline void clear_has_exception();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_state_data();
  inline void clear_has_state_data();
  inline void set_has_nonce_group();
  inline void clear_has_nonce_group();
  inline void set_has_nonce();
  inline void clear_has_nonce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_name_;
  ::google::protobuf::uint64 parent_id_;
  ::google::protobuf::uint64 proc_id_;
  ::google::protobuf::uint64 start_time_;
  ::std::string* owner_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stack_id_;
  int state_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::uint64 last_update_;
  ::hbase::pb::ForeignExceptionMessage* exception_;
  ::std::string* result_;
  ::std::string* state_data_;
  ::google::protobuf::uint64 nonce_group_;
  ::google::protobuf::uint64 nonce_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static Procedure* default_instance_;
};
// -------------------------------------------------------------------

class SequentialProcedureData : public ::google::protobuf::Message {
 public:
  SequentialProcedureData();
  virtual ~SequentialProcedureData();

  SequentialProcedureData(const SequentialProcedureData& from);

  inline SequentialProcedureData& operator=(const SequentialProcedureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SequentialProcedureData& default_instance();

  void Swap(SequentialProcedureData* other);

  // implements Message ----------------------------------------------

  SequentialProcedureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SequentialProcedureData& from);
  void MergeFrom(const SequentialProcedureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool executed = 1;
  inline bool has_executed() const;
  inline void clear_executed();
  static const int kExecutedFieldNumber = 1;
  inline bool executed() const;
  inline void set_executed(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.SequentialProcedureData)
 private:
  inline void set_has_executed();
  inline void clear_has_executed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool executed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static SequentialProcedureData* default_instance_;
};
// -------------------------------------------------------------------

class StateMachineProcedureData : public ::google::protobuf::Message {
 public:
  StateMachineProcedureData();
  virtual ~StateMachineProcedureData();

  StateMachineProcedureData(const StateMachineProcedureData& from);

  inline StateMachineProcedureData& operator=(const StateMachineProcedureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineProcedureData& default_instance();

  void Swap(StateMachineProcedureData* other);

  // implements Message ----------------------------------------------

  StateMachineProcedureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineProcedureData& from);
  void MergeFrom(const StateMachineProcedureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 state = 1;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::uint32 state(int index) const;
  inline void set_state(int index, ::google::protobuf::uint32 value);
  inline void add_state(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      state() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_state();

  // @@protoc_insertion_point(class_scope:hbase.pb.StateMachineProcedureData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static StateMachineProcedureData* default_instance_;
};
// -------------------------------------------------------------------

class ProcedureWALHeader : public ::google::protobuf::Message {
 public:
  ProcedureWALHeader();
  virtual ~ProcedureWALHeader();

  ProcedureWALHeader(const ProcedureWALHeader& from);

  inline ProcedureWALHeader& operator=(const ProcedureWALHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureWALHeader& default_instance();

  void Swap(ProcedureWALHeader* other);

  // implements Message ----------------------------------------------

  ProcedureWALHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcedureWALHeader& from);
  void MergeFrom(const ProcedureWALHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint64 log_id = 3;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 3;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);

  // required uint64 min_proc_id = 4;
  inline bool has_min_proc_id() const;
  inline void clear_min_proc_id();
  static const int kMinProcIdFieldNumber = 4;
  inline ::google::protobuf::uint64 min_proc_id() const;
  inline void set_min_proc_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcedureWALHeader)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_min_proc_id();
  inline void clear_has_min_proc_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint64 min_proc_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static ProcedureWALHeader* default_instance_;
};
// -------------------------------------------------------------------

class ProcedureWALTrailer : public ::google::protobuf::Message {
 public:
  ProcedureWALTrailer();
  virtual ~ProcedureWALTrailer();

  ProcedureWALTrailer(const ProcedureWALTrailer& from);

  inline ProcedureWALTrailer& operator=(const ProcedureWALTrailer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureWALTrailer& default_instance();

  void Swap(ProcedureWALTrailer* other);

  // implements Message ----------------------------------------------

  ProcedureWALTrailer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcedureWALTrailer& from);
  void MergeFrom(const ProcedureWALTrailer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required uint64 tracker_pos = 2;
  inline bool has_tracker_pos() const;
  inline void clear_tracker_pos();
  static const int kTrackerPosFieldNumber = 2;
  inline ::google::protobuf::uint64 tracker_pos() const;
  inline void set_tracker_pos(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcedureWALTrailer)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_tracker_pos();
  inline void clear_has_tracker_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tracker_pos_;
  ::google::protobuf::uint32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static ProcedureWALTrailer* default_instance_;
};
// -------------------------------------------------------------------

class ProcedureStoreTracker_TrackerNode : public ::google::protobuf::Message {
 public:
  ProcedureStoreTracker_TrackerNode();
  virtual ~ProcedureStoreTracker_TrackerNode();

  ProcedureStoreTracker_TrackerNode(const ProcedureStoreTracker_TrackerNode& from);

  inline ProcedureStoreTracker_TrackerNode& operator=(const ProcedureStoreTracker_TrackerNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureStoreTracker_TrackerNode& default_instance();

  void Swap(ProcedureStoreTracker_TrackerNode* other);

  // implements Message ----------------------------------------------

  ProcedureStoreTracker_TrackerNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcedureStoreTracker_TrackerNode& from);
  void MergeFrom(const ProcedureStoreTracker_TrackerNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 start_id = 1;
  inline bool has_start_id() const;
  inline void clear_start_id();
  static const int kStartIdFieldNumber = 1;
  inline ::google::protobuf::uint64 start_id() const;
  inline void set_start_id(::google::protobuf::uint64 value);

  // repeated uint64 updated = 2;
  inline int updated_size() const;
  inline void clear_updated();
  static const int kUpdatedFieldNumber = 2;
  inline ::google::protobuf::uint64 updated(int index) const;
  inline void set_updated(int index, ::google::protobuf::uint64 value);
  inline void add_updated(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      updated() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_updated();

  // repeated uint64 deleted = 3;
  inline int deleted_size() const;
  inline void clear_deleted();
  static const int kDeletedFieldNumber = 3;
  inline ::google::protobuf::uint64 deleted(int index) const;
  inline void set_deleted(int index, ::google::protobuf::uint64 value);
  inline void add_deleted(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      deleted() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_deleted();

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcedureStoreTracker.TrackerNode)
 private:
  inline void set_has_start_id();
  inline void clear_has_start_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 start_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > updated_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > deleted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static ProcedureStoreTracker_TrackerNode* default_instance_;
};
// -------------------------------------------------------------------

class ProcedureStoreTracker : public ::google::protobuf::Message {
 public:
  ProcedureStoreTracker();
  virtual ~ProcedureStoreTracker();

  ProcedureStoreTracker(const ProcedureStoreTracker& from);

  inline ProcedureStoreTracker& operator=(const ProcedureStoreTracker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureStoreTracker& default_instance();

  void Swap(ProcedureStoreTracker* other);

  // implements Message ----------------------------------------------

  ProcedureStoreTracker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcedureStoreTracker& from);
  void MergeFrom(const ProcedureStoreTracker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProcedureStoreTracker_TrackerNode TrackerNode;

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.ProcedureStoreTracker.TrackerNode node = 1;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::hbase::pb::ProcedureStoreTracker_TrackerNode& node(int index) const;
  inline ::hbase::pb::ProcedureStoreTracker_TrackerNode* mutable_node(int index);
  inline ::hbase::pb::ProcedureStoreTracker_TrackerNode* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ProcedureStoreTracker_TrackerNode >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ProcedureStoreTracker_TrackerNode >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcedureStoreTracker)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::ProcedureStoreTracker_TrackerNode > node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static ProcedureStoreTracker* default_instance_;
};
// -------------------------------------------------------------------

class ProcedureWALEntry : public ::google::protobuf::Message {
 public:
  ProcedureWALEntry();
  virtual ~ProcedureWALEntry();

  ProcedureWALEntry(const ProcedureWALEntry& from);

  inline ProcedureWALEntry& operator=(const ProcedureWALEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureWALEntry& default_instance();

  void Swap(ProcedureWALEntry* other);

  // implements Message ----------------------------------------------

  ProcedureWALEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcedureWALEntry& from);
  void MergeFrom(const ProcedureWALEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProcedureWALEntry_Type Type;
  static const Type PROCEDURE_WAL_EOF = ProcedureWALEntry_Type_PROCEDURE_WAL_EOF;
  static const Type PROCEDURE_WAL_INIT = ProcedureWALEntry_Type_PROCEDURE_WAL_INIT;
  static const Type PROCEDURE_WAL_INSERT = ProcedureWALEntry_Type_PROCEDURE_WAL_INSERT;
  static const Type PROCEDURE_WAL_UPDATE = ProcedureWALEntry_Type_PROCEDURE_WAL_UPDATE;
  static const Type PROCEDURE_WAL_DELETE = ProcedureWALEntry_Type_PROCEDURE_WAL_DELETE;
  static const Type PROCEDURE_WAL_COMPACT = ProcedureWALEntry_Type_PROCEDURE_WAL_COMPACT;
  static inline bool Type_IsValid(int value) {
    return ProcedureWALEntry_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ProcedureWALEntry_Type_Type_MIN;
  static const Type Type_MAX =
    ProcedureWALEntry_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ProcedureWALEntry_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ProcedureWALEntry_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ProcedureWALEntry_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ProcedureWALEntry_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.ProcedureWALEntry.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::hbase::pb::ProcedureWALEntry_Type type() const;
  inline void set_type(::hbase::pb::ProcedureWALEntry_Type value);

  // repeated .hbase.pb.Procedure procedure = 2;
  inline int procedure_size() const;
  inline void clear_procedure();
  static const int kProcedureFieldNumber = 2;
  inline const ::hbase::pb::Procedure& procedure(int index) const;
  inline ::hbase::pb::Procedure* mutable_procedure(int index);
  inline ::hbase::pb::Procedure* add_procedure();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::Procedure >&
      procedure() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::Procedure >*
      mutable_procedure();

  // optional uint64 proc_id = 3;
  inline bool has_proc_id() const;
  inline void clear_proc_id();
  static const int kProcIdFieldNumber = 3;
  inline ::google::protobuf::uint64 proc_id() const;
  inline void set_proc_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcedureWALEntry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_proc_id();
  inline void clear_has_proc_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::Procedure > procedure_;
  ::google::protobuf::uint64 proc_id_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Procedure_2eproto();
  friend void protobuf_AssignDesc_Procedure_2eproto();
  friend void protobuf_ShutdownFile_Procedure_2eproto();

  void InitAsDefaultInstance();
  static ProcedureWALEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// Procedure

// required string class_name = 1;
inline bool Procedure::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Procedure::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Procedure::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Procedure::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& Procedure::class_name() const {
  return *class_name_;
}
inline void Procedure::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void Procedure::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void Procedure::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Procedure::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* Procedure::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Procedure::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 parent_id = 2;
inline bool Procedure::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Procedure::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Procedure::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Procedure::clear_parent_id() {
  parent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_parent_id();
}
inline ::google::protobuf::uint64 Procedure::parent_id() const {
  return parent_id_;
}
inline void Procedure::set_parent_id(::google::protobuf::uint64 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// required uint64 proc_id = 3;
inline bool Procedure::has_proc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Procedure::set_has_proc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Procedure::clear_has_proc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Procedure::clear_proc_id() {
  proc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_proc_id();
}
inline ::google::protobuf::uint64 Procedure::proc_id() const {
  return proc_id_;
}
inline void Procedure::set_proc_id(::google::protobuf::uint64 value) {
  set_has_proc_id();
  proc_id_ = value;
}

// required uint64 start_time = 4;
inline bool Procedure::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Procedure::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Procedure::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Procedure::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 Procedure::start_time() const {
  return start_time_;
}
inline void Procedure::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional string owner = 5;
inline bool Procedure::has_owner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Procedure::set_has_owner() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Procedure::clear_has_owner() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Procedure::clear_owner() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    owner_->clear();
  }
  clear_has_owner();
}
inline const ::std::string& Procedure::owner() const {
  return *owner_;
}
inline void Procedure::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void Procedure::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void Procedure::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Procedure::mutable_owner() {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  return owner_;
}
inline ::std::string* Procedure::release_owner() {
  clear_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Procedure::set_allocated_owner(::std::string* owner) {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (owner) {
    set_has_owner();
    owner_ = owner;
  } else {
    clear_has_owner();
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .hbase.pb.ProcedureState state = 6;
inline bool Procedure::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Procedure::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Procedure::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Procedure::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::hbase::pb::ProcedureState Procedure::state() const {
  return static_cast< ::hbase::pb::ProcedureState >(state_);
}
inline void Procedure::set_state(::hbase::pb::ProcedureState value) {
  assert(::hbase::pb::ProcedureState_IsValid(value));
  set_has_state();
  state_ = value;
}

// repeated uint32 stack_id = 7;
inline int Procedure::stack_id_size() const {
  return stack_id_.size();
}
inline void Procedure::clear_stack_id() {
  stack_id_.Clear();
}
inline ::google::protobuf::uint32 Procedure::stack_id(int index) const {
  return stack_id_.Get(index);
}
inline void Procedure::set_stack_id(int index, ::google::protobuf::uint32 value) {
  stack_id_.Set(index, value);
}
inline void Procedure::add_stack_id(::google::protobuf::uint32 value) {
  stack_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Procedure::stack_id() const {
  return stack_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Procedure::mutable_stack_id() {
  return &stack_id_;
}

// required uint64 last_update = 8;
inline bool Procedure::has_last_update() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Procedure::set_has_last_update() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Procedure::clear_has_last_update() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Procedure::clear_last_update() {
  last_update_ = GOOGLE_ULONGLONG(0);
  clear_has_last_update();
}
inline ::google::protobuf::uint64 Procedure::last_update() const {
  return last_update_;
}
inline void Procedure::set_last_update(::google::protobuf::uint64 value) {
  set_has_last_update();
  last_update_ = value;
}

// optional uint32 timeout = 9;
inline bool Procedure::has_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Procedure::set_has_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Procedure::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Procedure::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 Procedure::timeout() const {
  return timeout_;
}
inline void Procedure::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional .hbase.pb.ForeignExceptionMessage exception = 10;
inline bool Procedure::has_exception() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Procedure::set_has_exception() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Procedure::clear_has_exception() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Procedure::clear_exception() {
  if (exception_ != NULL) exception_->::hbase::pb::ForeignExceptionMessage::Clear();
  clear_has_exception();
}
inline const ::hbase::pb::ForeignExceptionMessage& Procedure::exception() const {
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::hbase::pb::ForeignExceptionMessage* Procedure::mutable_exception() {
  set_has_exception();
  if (exception_ == NULL) exception_ = new ::hbase::pb::ForeignExceptionMessage;
  return exception_;
}
inline ::hbase::pb::ForeignExceptionMessage* Procedure::release_exception() {
  clear_has_exception();
  ::hbase::pb::ForeignExceptionMessage* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void Procedure::set_allocated_exception(::hbase::pb::ForeignExceptionMessage* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    set_has_exception();
  } else {
    clear_has_exception();
  }
}

// optional bytes result = 11;
inline bool Procedure::has_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Procedure::set_has_result() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Procedure::clear_has_result() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Procedure::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& Procedure::result() const {
  return *result_;
}
inline void Procedure::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Procedure::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Procedure::set_result(const void* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Procedure::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* Procedure::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Procedure::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes state_data = 12;
inline bool Procedure::has_state_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Procedure::set_has_state_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Procedure::clear_has_state_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Procedure::clear_state_data() {
  if (state_data_ != &::google::protobuf::internal::kEmptyString) {
    state_data_->clear();
  }
  clear_has_state_data();
}
inline const ::std::string& Procedure::state_data() const {
  return *state_data_;
}
inline void Procedure::set_state_data(const ::std::string& value) {
  set_has_state_data();
  if (state_data_ == &::google::protobuf::internal::kEmptyString) {
    state_data_ = new ::std::string;
  }
  state_data_->assign(value);
}
inline void Procedure::set_state_data(const char* value) {
  set_has_state_data();
  if (state_data_ == &::google::protobuf::internal::kEmptyString) {
    state_data_ = new ::std::string;
  }
  state_data_->assign(value);
}
inline void Procedure::set_state_data(const void* value, size_t size) {
  set_has_state_data();
  if (state_data_ == &::google::protobuf::internal::kEmptyString) {
    state_data_ = new ::std::string;
  }
  state_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Procedure::mutable_state_data() {
  set_has_state_data();
  if (state_data_ == &::google::protobuf::internal::kEmptyString) {
    state_data_ = new ::std::string;
  }
  return state_data_;
}
inline ::std::string* Procedure::release_state_data() {
  clear_has_state_data();
  if (state_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = state_data_;
    state_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Procedure::set_allocated_state_data(::std::string* state_data) {
  if (state_data_ != &::google::protobuf::internal::kEmptyString) {
    delete state_data_;
  }
  if (state_data) {
    set_has_state_data();
    state_data_ = state_data;
  } else {
    clear_has_state_data();
    state_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 nonce_group = 13 [default = 0];
inline bool Procedure::has_nonce_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Procedure::set_has_nonce_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Procedure::clear_has_nonce_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Procedure::clear_nonce_group() {
  nonce_group_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce_group();
}
inline ::google::protobuf::uint64 Procedure::nonce_group() const {
  return nonce_group_;
}
inline void Procedure::set_nonce_group(::google::protobuf::uint64 value) {
  set_has_nonce_group();
  nonce_group_ = value;
}

// optional uint64 nonce = 14 [default = 0];
inline bool Procedure::has_nonce() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Procedure::set_has_nonce() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Procedure::clear_has_nonce() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Procedure::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::uint64 Procedure::nonce() const {
  return nonce_;
}
inline void Procedure::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
}

// -------------------------------------------------------------------

// SequentialProcedureData

// required bool executed = 1;
inline bool SequentialProcedureData::has_executed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SequentialProcedureData::set_has_executed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SequentialProcedureData::clear_has_executed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SequentialProcedureData::clear_executed() {
  executed_ = false;
  clear_has_executed();
}
inline bool SequentialProcedureData::executed() const {
  return executed_;
}
inline void SequentialProcedureData::set_executed(bool value) {
  set_has_executed();
  executed_ = value;
}

// -------------------------------------------------------------------

// StateMachineProcedureData

// repeated uint32 state = 1;
inline int StateMachineProcedureData::state_size() const {
  return state_.size();
}
inline void StateMachineProcedureData::clear_state() {
  state_.Clear();
}
inline ::google::protobuf::uint32 StateMachineProcedureData::state(int index) const {
  return state_.Get(index);
}
inline void StateMachineProcedureData::set_state(int index, ::google::protobuf::uint32 value) {
  state_.Set(index, value);
}
inline void StateMachineProcedureData::add_state(::google::protobuf::uint32 value) {
  state_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StateMachineProcedureData::state() const {
  return state_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StateMachineProcedureData::mutable_state() {
  return &state_;
}

// -------------------------------------------------------------------

// ProcedureWALHeader

// required uint32 version = 1;
inline bool ProcedureWALHeader::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcedureWALHeader::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcedureWALHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcedureWALHeader::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ProcedureWALHeader::version() const {
  return version_;
}
inline void ProcedureWALHeader::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required uint32 type = 2;
inline bool ProcedureWALHeader::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcedureWALHeader::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcedureWALHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcedureWALHeader::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ProcedureWALHeader::type() const {
  return type_;
}
inline void ProcedureWALHeader::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 log_id = 3;
inline bool ProcedureWALHeader::has_log_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcedureWALHeader::set_has_log_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcedureWALHeader::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcedureWALHeader::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::uint64 ProcedureWALHeader::log_id() const {
  return log_id_;
}
inline void ProcedureWALHeader::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
}

// required uint64 min_proc_id = 4;
inline bool ProcedureWALHeader::has_min_proc_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcedureWALHeader::set_has_min_proc_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcedureWALHeader::clear_has_min_proc_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcedureWALHeader::clear_min_proc_id() {
  min_proc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_min_proc_id();
}
inline ::google::protobuf::uint64 ProcedureWALHeader::min_proc_id() const {
  return min_proc_id_;
}
inline void ProcedureWALHeader::set_min_proc_id(::google::protobuf::uint64 value) {
  set_has_min_proc_id();
  min_proc_id_ = value;
}

// -------------------------------------------------------------------

// ProcedureWALTrailer

// required uint32 version = 1;
inline bool ProcedureWALTrailer::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcedureWALTrailer::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcedureWALTrailer::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcedureWALTrailer::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ProcedureWALTrailer::version() const {
  return version_;
}
inline void ProcedureWALTrailer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required uint64 tracker_pos = 2;
inline bool ProcedureWALTrailer::has_tracker_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcedureWALTrailer::set_has_tracker_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcedureWALTrailer::clear_has_tracker_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcedureWALTrailer::clear_tracker_pos() {
  tracker_pos_ = GOOGLE_ULONGLONG(0);
  clear_has_tracker_pos();
}
inline ::google::protobuf::uint64 ProcedureWALTrailer::tracker_pos() const {
  return tracker_pos_;
}
inline void ProcedureWALTrailer::set_tracker_pos(::google::protobuf::uint64 value) {
  set_has_tracker_pos();
  tracker_pos_ = value;
}

// -------------------------------------------------------------------

// ProcedureStoreTracker_TrackerNode

// required uint64 start_id = 1;
inline bool ProcedureStoreTracker_TrackerNode::has_start_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcedureStoreTracker_TrackerNode::set_has_start_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcedureStoreTracker_TrackerNode::clear_has_start_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcedureStoreTracker_TrackerNode::clear_start_id() {
  start_id_ = GOOGLE_ULONGLONG(0);
  clear_has_start_id();
}
inline ::google::protobuf::uint64 ProcedureStoreTracker_TrackerNode::start_id() const {
  return start_id_;
}
inline void ProcedureStoreTracker_TrackerNode::set_start_id(::google::protobuf::uint64 value) {
  set_has_start_id();
  start_id_ = value;
}

// repeated uint64 updated = 2;
inline int ProcedureStoreTracker_TrackerNode::updated_size() const {
  return updated_.size();
}
inline void ProcedureStoreTracker_TrackerNode::clear_updated() {
  updated_.Clear();
}
inline ::google::protobuf::uint64 ProcedureStoreTracker_TrackerNode::updated(int index) const {
  return updated_.Get(index);
}
inline void ProcedureStoreTracker_TrackerNode::set_updated(int index, ::google::protobuf::uint64 value) {
  updated_.Set(index, value);
}
inline void ProcedureStoreTracker_TrackerNode::add_updated(::google::protobuf::uint64 value) {
  updated_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ProcedureStoreTracker_TrackerNode::updated() const {
  return updated_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ProcedureStoreTracker_TrackerNode::mutable_updated() {
  return &updated_;
}

// repeated uint64 deleted = 3;
inline int ProcedureStoreTracker_TrackerNode::deleted_size() const {
  return deleted_.size();
}
inline void ProcedureStoreTracker_TrackerNode::clear_deleted() {
  deleted_.Clear();
}
inline ::google::protobuf::uint64 ProcedureStoreTracker_TrackerNode::deleted(int index) const {
  return deleted_.Get(index);
}
inline void ProcedureStoreTracker_TrackerNode::set_deleted(int index, ::google::protobuf::uint64 value) {
  deleted_.Set(index, value);
}
inline void ProcedureStoreTracker_TrackerNode::add_deleted(::google::protobuf::uint64 value) {
  deleted_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ProcedureStoreTracker_TrackerNode::deleted() const {
  return deleted_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ProcedureStoreTracker_TrackerNode::mutable_deleted() {
  return &deleted_;
}

// -------------------------------------------------------------------

// ProcedureStoreTracker

// repeated .hbase.pb.ProcedureStoreTracker.TrackerNode node = 1;
inline int ProcedureStoreTracker::node_size() const {
  return node_.size();
}
inline void ProcedureStoreTracker::clear_node() {
  node_.Clear();
}
inline const ::hbase::pb::ProcedureStoreTracker_TrackerNode& ProcedureStoreTracker::node(int index) const {
  return node_.Get(index);
}
inline ::hbase::pb::ProcedureStoreTracker_TrackerNode* ProcedureStoreTracker::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::hbase::pb::ProcedureStoreTracker_TrackerNode* ProcedureStoreTracker::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ProcedureStoreTracker_TrackerNode >&
ProcedureStoreTracker::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ProcedureStoreTracker_TrackerNode >*
ProcedureStoreTracker::mutable_node() {
  return &node_;
}

// -------------------------------------------------------------------

// ProcedureWALEntry

// required .hbase.pb.ProcedureWALEntry.Type type = 1;
inline bool ProcedureWALEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcedureWALEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcedureWALEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcedureWALEntry::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::hbase::pb::ProcedureWALEntry_Type ProcedureWALEntry::type() const {
  return static_cast< ::hbase::pb::ProcedureWALEntry_Type >(type_);
}
inline void ProcedureWALEntry::set_type(::hbase::pb::ProcedureWALEntry_Type value) {
  assert(::hbase::pb::ProcedureWALEntry_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .hbase.pb.Procedure procedure = 2;
inline int ProcedureWALEntry::procedure_size() const {
  return procedure_.size();
}
inline void ProcedureWALEntry::clear_procedure() {
  procedure_.Clear();
}
inline const ::hbase::pb::Procedure& ProcedureWALEntry::procedure(int index) const {
  return procedure_.Get(index);
}
inline ::hbase::pb::Procedure* ProcedureWALEntry::mutable_procedure(int index) {
  return procedure_.Mutable(index);
}
inline ::hbase::pb::Procedure* ProcedureWALEntry::add_procedure() {
  return procedure_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::Procedure >&
ProcedureWALEntry::procedure() const {
  return procedure_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::Procedure >*
ProcedureWALEntry::mutable_procedure() {
  return &procedure_;
}

// optional uint64 proc_id = 3;
inline bool ProcedureWALEntry::has_proc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcedureWALEntry::set_has_proc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcedureWALEntry::clear_has_proc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcedureWALEntry::clear_proc_id() {
  proc_id_ = GOOGLE_ULONGLONG(0);
  clear_has_proc_id();
}
inline ::google::protobuf::uint64 ProcedureWALEntry::proc_id() const {
  return proc_id_;
}
inline void ProcedureWALEntry::set_proc_id(::google::protobuf::uint64 value) {
  set_has_proc_id();
  proc_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::ProcedureWALEntry_Type>() {
  return ::hbase::pb::ProcedureWALEntry_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::ProcedureState>() {
  return ::hbase::pb::ProcedureState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Procedure_2eproto__INCLUDED
