// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisibilityLabels.proto

#ifndef PROTOBUF_VisibilityLabels_2eproto__INCLUDED
#define PROTOBUF_VisibilityLabels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Client.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VisibilityLabels_2eproto();
void protobuf_AssignDesc_VisibilityLabels_2eproto();
void protobuf_ShutdownFile_VisibilityLabels_2eproto();

class VisibilityLabelsRequest;
class VisibilityLabel;
class VisibilityLabelsResponse;
class SetAuthsRequest;
class UserAuthorizations;
class MultiUserAuthorizations;
class GetAuthsRequest;
class GetAuthsResponse;
class ListLabelsRequest;
class ListLabelsResponse;

// ===================================================================

class VisibilityLabelsRequest : public ::google::protobuf::Message {
 public:
  VisibilityLabelsRequest();
  virtual ~VisibilityLabelsRequest();

  VisibilityLabelsRequest(const VisibilityLabelsRequest& from);

  inline VisibilityLabelsRequest& operator=(const VisibilityLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisibilityLabelsRequest& default_instance();

  void Swap(VisibilityLabelsRequest* other);

  // implements Message ----------------------------------------------

  VisibilityLabelsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisibilityLabelsRequest& from);
  void MergeFrom(const VisibilityLabelsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  inline int vislabel_size() const;
  inline void clear_vislabel();
  static const int kVisLabelFieldNumber = 1;
  inline const ::hbase::pb::VisibilityLabel& vislabel(int index) const;
  inline ::hbase::pb::VisibilityLabel* mutable_vislabel(int index);
  inline ::hbase::pb::VisibilityLabel* add_vislabel();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::VisibilityLabel >&
      vislabel() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::VisibilityLabel >*
      mutable_vislabel();

  // @@protoc_insertion_point(class_scope:hbase.pb.VisibilityLabelsRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::VisibilityLabel > vislabel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static VisibilityLabelsRequest* default_instance_;
};
// -------------------------------------------------------------------

class VisibilityLabel : public ::google::protobuf::Message {
 public:
  VisibilityLabel();
  virtual ~VisibilityLabel();

  VisibilityLabel(const VisibilityLabel& from);

  inline VisibilityLabel& operator=(const VisibilityLabel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisibilityLabel& default_instance();

  void Swap(VisibilityLabel* other);

  // implements Message ----------------------------------------------

  VisibilityLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisibilityLabel& from);
  void MergeFrom(const VisibilityLabel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const void* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional uint32 ordinal = 2;
  inline bool has_ordinal() const;
  inline void clear_ordinal();
  static const int kOrdinalFieldNumber = 2;
  inline ::google::protobuf::uint32 ordinal() const;
  inline void set_ordinal(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.VisibilityLabel)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_ordinal();
  inline void clear_has_ordinal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* label_;
  ::google::protobuf::uint32 ordinal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static VisibilityLabel* default_instance_;
};
// -------------------------------------------------------------------

class VisibilityLabelsResponse : public ::google::protobuf::Message {
 public:
  VisibilityLabelsResponse();
  virtual ~VisibilityLabelsResponse();

  VisibilityLabelsResponse(const VisibilityLabelsResponse& from);

  inline VisibilityLabelsResponse& operator=(const VisibilityLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisibilityLabelsResponse& default_instance();

  void Swap(VisibilityLabelsResponse* other);

  // implements Message ----------------------------------------------

  VisibilityLabelsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisibilityLabelsResponse& from);
  void MergeFrom(const VisibilityLabelsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.RegionActionResult result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::hbase::pb::RegionActionResult& result(int index) const;
  inline ::hbase::pb::RegionActionResult* mutable_result(int index);
  inline ::hbase::pb::RegionActionResult* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionActionResult >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionActionResult >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:hbase.pb.VisibilityLabelsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionActionResult > result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static VisibilityLabelsResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetAuthsRequest : public ::google::protobuf::Message {
 public:
  SetAuthsRequest();
  virtual ~SetAuthsRequest();

  SetAuthsRequest(const SetAuthsRequest& from);

  inline SetAuthsRequest& operator=(const SetAuthsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAuthsRequest& default_instance();

  void Swap(SetAuthsRequest* other);

  // implements Message ----------------------------------------------

  SetAuthsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetAuthsRequest& from);
  void MergeFrom(const SetAuthsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // repeated bytes auth = 2;
  inline int auth_size() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 2;
  inline const ::std::string& auth(int index) const;
  inline ::std::string* mutable_auth(int index);
  inline void set_auth(int index, const ::std::string& value);
  inline void set_auth(int index, const char* value);
  inline void set_auth(int index, const void* value, size_t size);
  inline ::std::string* add_auth();
  inline void add_auth(const ::std::string& value);
  inline void add_auth(const char* value);
  inline void add_auth(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& auth() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_auth();

  // @@protoc_insertion_point(class_scope:hbase.pb.SetAuthsRequest)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::RepeatedPtrField< ::std::string> auth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static SetAuthsRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserAuthorizations : public ::google::protobuf::Message {
 public:
  UserAuthorizations();
  virtual ~UserAuthorizations();

  UserAuthorizations(const UserAuthorizations& from);

  inline UserAuthorizations& operator=(const UserAuthorizations& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAuthorizations& default_instance();

  void Swap(UserAuthorizations* other);

  // implements Message ----------------------------------------------

  UserAuthorizations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAuthorizations& from);
  void MergeFrom(const UserAuthorizations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // repeated uint32 auth = 2;
  inline int auth_size() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 2;
  inline ::google::protobuf::uint32 auth(int index) const;
  inline void set_auth(int index, ::google::protobuf::uint32 value);
  inline void add_auth(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      auth() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_auth();

  // @@protoc_insertion_point(class_scope:hbase.pb.UserAuthorizations)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > auth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static UserAuthorizations* default_instance_;
};
// -------------------------------------------------------------------

class MultiUserAuthorizations : public ::google::protobuf::Message {
 public:
  MultiUserAuthorizations();
  virtual ~MultiUserAuthorizations();

  MultiUserAuthorizations(const MultiUserAuthorizations& from);

  inline MultiUserAuthorizations& operator=(const MultiUserAuthorizations& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiUserAuthorizations& default_instance();

  void Swap(MultiUserAuthorizations* other);

  // implements Message ----------------------------------------------

  MultiUserAuthorizations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiUserAuthorizations& from);
  void MergeFrom(const MultiUserAuthorizations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  inline int userauths_size() const;
  inline void clear_userauths();
  static const int kUserAuthsFieldNumber = 1;
  inline const ::hbase::pb::UserAuthorizations& userauths(int index) const;
  inline ::hbase::pb::UserAuthorizations* mutable_userauths(int index);
  inline ::hbase::pb::UserAuthorizations* add_userauths();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::UserAuthorizations >&
      userauths() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::UserAuthorizations >*
      mutable_userauths();

  // @@protoc_insertion_point(class_scope:hbase.pb.MultiUserAuthorizations)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::UserAuthorizations > userauths_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static MultiUserAuthorizations* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthsRequest : public ::google::protobuf::Message {
 public:
  GetAuthsRequest();
  virtual ~GetAuthsRequest();

  GetAuthsRequest(const GetAuthsRequest& from);

  inline GetAuthsRequest& operator=(const GetAuthsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAuthsRequest& default_instance();

  void Swap(GetAuthsRequest* other);

  // implements Message ----------------------------------------------

  GetAuthsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAuthsRequest& from);
  void MergeFrom(const GetAuthsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthsRequest)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static GetAuthsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthsResponse : public ::google::protobuf::Message {
 public:
  GetAuthsResponse();
  virtual ~GetAuthsResponse();

  GetAuthsResponse(const GetAuthsResponse& from);

  inline GetAuthsResponse& operator=(const GetAuthsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAuthsResponse& default_instance();

  void Swap(GetAuthsResponse* other);

  // implements Message ----------------------------------------------

  GetAuthsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAuthsResponse& from);
  void MergeFrom(const GetAuthsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // repeated bytes auth = 2;
  inline int auth_size() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 2;
  inline const ::std::string& auth(int index) const;
  inline ::std::string* mutable_auth(int index);
  inline void set_auth(int index, const ::std::string& value);
  inline void set_auth(int index, const char* value);
  inline void set_auth(int index, const void* value, size_t size);
  inline ::std::string* add_auth();
  inline void add_auth(const ::std::string& value);
  inline void add_auth(const char* value);
  inline void add_auth(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& auth() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_auth();

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthsResponse)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::RepeatedPtrField< ::std::string> auth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static GetAuthsResponse* default_instance_;
};
// -------------------------------------------------------------------

class ListLabelsRequest : public ::google::protobuf::Message {
 public:
  ListLabelsRequest();
  virtual ~ListLabelsRequest();

  ListLabelsRequest(const ListLabelsRequest& from);

  inline ListLabelsRequest& operator=(const ListLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLabelsRequest& default_instance();

  void Swap(ListLabelsRequest* other);

  // implements Message ----------------------------------------------

  ListLabelsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListLabelsRequest& from);
  void MergeFrom(const ListLabelsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regex = 1;
  inline bool has_regex() const;
  inline void clear_regex();
  static const int kRegexFieldNumber = 1;
  inline const ::std::string& regex() const;
  inline void set_regex(const ::std::string& value);
  inline void set_regex(const char* value);
  inline void set_regex(const char* value, size_t size);
  inline ::std::string* mutable_regex();
  inline ::std::string* release_regex();
  inline void set_allocated_regex(::std::string* regex);

  // @@protoc_insertion_point(class_scope:hbase.pb.ListLabelsRequest)
 private:
  inline void set_has_regex();
  inline void clear_has_regex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* regex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static ListLabelsRequest* default_instance_;
};
// -------------------------------------------------------------------

class ListLabelsResponse : public ::google::protobuf::Message {
 public:
  ListLabelsResponse();
  virtual ~ListLabelsResponse();

  ListLabelsResponse(const ListLabelsResponse& from);

  inline ListLabelsResponse& operator=(const ListLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLabelsResponse& default_instance();

  void Swap(ListLabelsResponse* other);

  // implements Message ----------------------------------------------

  ListLabelsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListLabelsResponse& from);
  void MergeFrom(const ListLabelsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes label = 1;
  inline int label_size() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label(int index) const;
  inline ::std::string* mutable_label(int index);
  inline void set_label(int index, const ::std::string& value);
  inline void set_label(int index, const char* value);
  inline void set_label(int index, const void* value, size_t size);
  inline ::std::string* add_label();
  inline void add_label(const ::std::string& value);
  inline void add_label(const char* value);
  inline void add_label(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& label() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_label();

  // @@protoc_insertion_point(class_scope:hbase.pb.ListLabelsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_VisibilityLabels_2eproto();
  friend void protobuf_AssignDesc_VisibilityLabels_2eproto();
  friend void protobuf_ShutdownFile_VisibilityLabels_2eproto();

  void InitAsDefaultInstance();
  static ListLabelsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// VisibilityLabelsRequest

// repeated .hbase.pb.VisibilityLabel visLabel = 1;
inline int VisibilityLabelsRequest::vislabel_size() const {
  return vislabel_.size();
}
inline void VisibilityLabelsRequest::clear_vislabel() {
  vislabel_.Clear();
}
inline const ::hbase::pb::VisibilityLabel& VisibilityLabelsRequest::vislabel(int index) const {
  return vislabel_.Get(index);
}
inline ::hbase::pb::VisibilityLabel* VisibilityLabelsRequest::mutable_vislabel(int index) {
  return vislabel_.Mutable(index);
}
inline ::hbase::pb::VisibilityLabel* VisibilityLabelsRequest::add_vislabel() {
  return vislabel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::VisibilityLabel >&
VisibilityLabelsRequest::vislabel() const {
  return vislabel_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::VisibilityLabel >*
VisibilityLabelsRequest::mutable_vislabel() {
  return &vislabel_;
}

// -------------------------------------------------------------------

// VisibilityLabel

// required bytes label = 1;
inline bool VisibilityLabel::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisibilityLabel::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisibilityLabel::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisibilityLabel::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& VisibilityLabel::label() const {
  return *label_;
}
inline void VisibilityLabel::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void VisibilityLabel::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void VisibilityLabel::set_label(const void* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VisibilityLabel::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* VisibilityLabel::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VisibilityLabel::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ordinal = 2;
inline bool VisibilityLabel::has_ordinal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisibilityLabel::set_has_ordinal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisibilityLabel::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisibilityLabel::clear_ordinal() {
  ordinal_ = 0u;
  clear_has_ordinal();
}
inline ::google::protobuf::uint32 VisibilityLabel::ordinal() const {
  return ordinal_;
}
inline void VisibilityLabel::set_ordinal(::google::protobuf::uint32 value) {
  set_has_ordinal();
  ordinal_ = value;
}

// -------------------------------------------------------------------

// VisibilityLabelsResponse

// repeated .hbase.pb.RegionActionResult result = 1;
inline int VisibilityLabelsResponse::result_size() const {
  return result_.size();
}
inline void VisibilityLabelsResponse::clear_result() {
  result_.Clear();
}
inline const ::hbase::pb::RegionActionResult& VisibilityLabelsResponse::result(int index) const {
  return result_.Get(index);
}
inline ::hbase::pb::RegionActionResult* VisibilityLabelsResponse::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::hbase::pb::RegionActionResult* VisibilityLabelsResponse::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionActionResult >&
VisibilityLabelsResponse::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionActionResult >*
VisibilityLabelsResponse::mutable_result() {
  return &result_;
}

// -------------------------------------------------------------------

// SetAuthsRequest

// required bytes user = 1;
inline bool SetAuthsRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetAuthsRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetAuthsRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetAuthsRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SetAuthsRequest::user() const {
  return *user_;
}
inline void SetAuthsRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetAuthsRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SetAuthsRequest::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetAuthsRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SetAuthsRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetAuthsRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes auth = 2;
inline int SetAuthsRequest::auth_size() const {
  return auth_.size();
}
inline void SetAuthsRequest::clear_auth() {
  auth_.Clear();
}
inline const ::std::string& SetAuthsRequest::auth(int index) const {
  return auth_.Get(index);
}
inline ::std::string* SetAuthsRequest::mutable_auth(int index) {
  return auth_.Mutable(index);
}
inline void SetAuthsRequest::set_auth(int index, const ::std::string& value) {
  auth_.Mutable(index)->assign(value);
}
inline void SetAuthsRequest::set_auth(int index, const char* value) {
  auth_.Mutable(index)->assign(value);
}
inline void SetAuthsRequest::set_auth(int index, const void* value, size_t size) {
  auth_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetAuthsRequest::add_auth() {
  return auth_.Add();
}
inline void SetAuthsRequest::add_auth(const ::std::string& value) {
  auth_.Add()->assign(value);
}
inline void SetAuthsRequest::add_auth(const char* value) {
  auth_.Add()->assign(value);
}
inline void SetAuthsRequest::add_auth(const void* value, size_t size) {
  auth_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SetAuthsRequest::auth() const {
  return auth_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SetAuthsRequest::mutable_auth() {
  return &auth_;
}

// -------------------------------------------------------------------

// UserAuthorizations

// required bytes user = 1;
inline bool UserAuthorizations::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAuthorizations::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAuthorizations::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAuthorizations::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UserAuthorizations::user() const {
  return *user_;
}
inline void UserAuthorizations::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void UserAuthorizations::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void UserAuthorizations::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserAuthorizations::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* UserAuthorizations::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserAuthorizations::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 auth = 2;
inline int UserAuthorizations::auth_size() const {
  return auth_.size();
}
inline void UserAuthorizations::clear_auth() {
  auth_.Clear();
}
inline ::google::protobuf::uint32 UserAuthorizations::auth(int index) const {
  return auth_.Get(index);
}
inline void UserAuthorizations::set_auth(int index, ::google::protobuf::uint32 value) {
  auth_.Set(index, value);
}
inline void UserAuthorizations::add_auth(::google::protobuf::uint32 value) {
  auth_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserAuthorizations::auth() const {
  return auth_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserAuthorizations::mutable_auth() {
  return &auth_;
}

// -------------------------------------------------------------------

// MultiUserAuthorizations

// repeated .hbase.pb.UserAuthorizations userAuths = 1;
inline int MultiUserAuthorizations::userauths_size() const {
  return userauths_.size();
}
inline void MultiUserAuthorizations::clear_userauths() {
  userauths_.Clear();
}
inline const ::hbase::pb::UserAuthorizations& MultiUserAuthorizations::userauths(int index) const {
  return userauths_.Get(index);
}
inline ::hbase::pb::UserAuthorizations* MultiUserAuthorizations::mutable_userauths(int index) {
  return userauths_.Mutable(index);
}
inline ::hbase::pb::UserAuthorizations* MultiUserAuthorizations::add_userauths() {
  return userauths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::UserAuthorizations >&
MultiUserAuthorizations::userauths() const {
  return userauths_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::UserAuthorizations >*
MultiUserAuthorizations::mutable_userauths() {
  return &userauths_;
}

// -------------------------------------------------------------------

// GetAuthsRequest

// required bytes user = 1;
inline bool GetAuthsRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthsRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAuthsRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAuthsRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GetAuthsRequest::user() const {
  return *user_;
}
inline void GetAuthsRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GetAuthsRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GetAuthsRequest::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAuthsRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GetAuthsRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAuthsRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetAuthsResponse

// required bytes user = 1;
inline bool GetAuthsResponse::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthsResponse::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAuthsResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAuthsResponse::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GetAuthsResponse::user() const {
  return *user_;
}
inline void GetAuthsResponse::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GetAuthsResponse::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GetAuthsResponse::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAuthsResponse::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GetAuthsResponse::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAuthsResponse::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes auth = 2;
inline int GetAuthsResponse::auth_size() const {
  return auth_.size();
}
inline void GetAuthsResponse::clear_auth() {
  auth_.Clear();
}
inline const ::std::string& GetAuthsResponse::auth(int index) const {
  return auth_.Get(index);
}
inline ::std::string* GetAuthsResponse::mutable_auth(int index) {
  return auth_.Mutable(index);
}
inline void GetAuthsResponse::set_auth(int index, const ::std::string& value) {
  auth_.Mutable(index)->assign(value);
}
inline void GetAuthsResponse::set_auth(int index, const char* value) {
  auth_.Mutable(index)->assign(value);
}
inline void GetAuthsResponse::set_auth(int index, const void* value, size_t size) {
  auth_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAuthsResponse::add_auth() {
  return auth_.Add();
}
inline void GetAuthsResponse::add_auth(const ::std::string& value) {
  auth_.Add()->assign(value);
}
inline void GetAuthsResponse::add_auth(const char* value) {
  auth_.Add()->assign(value);
}
inline void GetAuthsResponse::add_auth(const void* value, size_t size) {
  auth_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetAuthsResponse::auth() const {
  return auth_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetAuthsResponse::mutable_auth() {
  return &auth_;
}

// -------------------------------------------------------------------

// ListLabelsRequest

// optional string regex = 1;
inline bool ListLabelsRequest::has_regex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListLabelsRequest::set_has_regex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListLabelsRequest::clear_has_regex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListLabelsRequest::clear_regex() {
  if (regex_ != &::google::protobuf::internal::kEmptyString) {
    regex_->clear();
  }
  clear_has_regex();
}
inline const ::std::string& ListLabelsRequest::regex() const {
  return *regex_;
}
inline void ListLabelsRequest::set_regex(const ::std::string& value) {
  set_has_regex();
  if (regex_ == &::google::protobuf::internal::kEmptyString) {
    regex_ = new ::std::string;
  }
  regex_->assign(value);
}
inline void ListLabelsRequest::set_regex(const char* value) {
  set_has_regex();
  if (regex_ == &::google::protobuf::internal::kEmptyString) {
    regex_ = new ::std::string;
  }
  regex_->assign(value);
}
inline void ListLabelsRequest::set_regex(const char* value, size_t size) {
  set_has_regex();
  if (regex_ == &::google::protobuf::internal::kEmptyString) {
    regex_ = new ::std::string;
  }
  regex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListLabelsRequest::mutable_regex() {
  set_has_regex();
  if (regex_ == &::google::protobuf::internal::kEmptyString) {
    regex_ = new ::std::string;
  }
  return regex_;
}
inline ::std::string* ListLabelsRequest::release_regex() {
  clear_has_regex();
  if (regex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = regex_;
    regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListLabelsRequest::set_allocated_regex(::std::string* regex) {
  if (regex_ != &::google::protobuf::internal::kEmptyString) {
    delete regex_;
  }
  if (regex) {
    set_has_regex();
    regex_ = regex;
  } else {
    clear_has_regex();
    regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ListLabelsResponse

// repeated bytes label = 1;
inline int ListLabelsResponse::label_size() const {
  return label_.size();
}
inline void ListLabelsResponse::clear_label() {
  label_.Clear();
}
inline const ::std::string& ListLabelsResponse::label(int index) const {
  return label_.Get(index);
}
inline ::std::string* ListLabelsResponse::mutable_label(int index) {
  return label_.Mutable(index);
}
inline void ListLabelsResponse::set_label(int index, const ::std::string& value) {
  label_.Mutable(index)->assign(value);
}
inline void ListLabelsResponse::set_label(int index, const char* value) {
  label_.Mutable(index)->assign(value);
}
inline void ListLabelsResponse::set_label(int index, const void* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListLabelsResponse::add_label() {
  return label_.Add();
}
inline void ListLabelsResponse::add_label(const ::std::string& value) {
  label_.Add()->assign(value);
}
inline void ListLabelsResponse::add_label(const char* value) {
  label_.Add()->assign(value);
}
inline void ListLabelsResponse::add_label(const void* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListLabelsResponse::label() const {
  return label_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListLabelsResponse::mutable_label() {
  return &label_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VisibilityLabels_2eproto__INCLUDED
