// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RowProcessor.proto

#ifndef PROTOBUF_RowProcessor_2eproto__INCLUDED
#define PROTOBUF_RowProcessor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RowProcessor_2eproto();
void protobuf_AssignDesc_RowProcessor_2eproto();
void protobuf_ShutdownFile_RowProcessor_2eproto();

class ProcessRequest;
class ProcessResponse;

// ===================================================================

class ProcessRequest : public ::google::protobuf::Message {
 public:
  ProcessRequest();
  virtual ~ProcessRequest();

  ProcessRequest(const ProcessRequest& from);

  inline ProcessRequest& operator=(const ProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessRequest& default_instance();

  void Swap(ProcessRequest* other);

  // implements Message ----------------------------------------------

  ProcessRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessRequest& from);
  void MergeFrom(const ProcessRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string row_processor_class_name = 1;
  inline bool has_row_processor_class_name() const;
  inline void clear_row_processor_class_name();
  static const int kRowProcessorClassNameFieldNumber = 1;
  inline const ::std::string& row_processor_class_name() const;
  inline void set_row_processor_class_name(const ::std::string& value);
  inline void set_row_processor_class_name(const char* value);
  inline void set_row_processor_class_name(const char* value, size_t size);
  inline ::std::string* mutable_row_processor_class_name();
  inline ::std::string* release_row_processor_class_name();
  inline void set_allocated_row_processor_class_name(::std::string* row_processor_class_name);

  // optional string row_processor_initializer_message_name = 2;
  inline bool has_row_processor_initializer_message_name() const;
  inline void clear_row_processor_initializer_message_name();
  static const int kRowProcessorInitializerMessageNameFieldNumber = 2;
  inline const ::std::string& row_processor_initializer_message_name() const;
  inline void set_row_processor_initializer_message_name(const ::std::string& value);
  inline void set_row_processor_initializer_message_name(const char* value);
  inline void set_row_processor_initializer_message_name(const char* value, size_t size);
  inline ::std::string* mutable_row_processor_initializer_message_name();
  inline ::std::string* release_row_processor_initializer_message_name();
  inline void set_allocated_row_processor_initializer_message_name(::std::string* row_processor_initializer_message_name);

  // optional bytes row_processor_initializer_message = 3;
  inline bool has_row_processor_initializer_message() const;
  inline void clear_row_processor_initializer_message();
  static const int kRowProcessorInitializerMessageFieldNumber = 3;
  inline const ::std::string& row_processor_initializer_message() const;
  inline void set_row_processor_initializer_message(const ::std::string& value);
  inline void set_row_processor_initializer_message(const char* value);
  inline void set_row_processor_initializer_message(const void* value, size_t size);
  inline ::std::string* mutable_row_processor_initializer_message();
  inline ::std::string* release_row_processor_initializer_message();
  inline void set_allocated_row_processor_initializer_message(::std::string* row_processor_initializer_message);

  // optional uint64 nonce_group = 4;
  inline bool has_nonce_group() const;
  inline void clear_nonce_group();
  static const int kNonceGroupFieldNumber = 4;
  inline ::google::protobuf::uint64 nonce_group() const;
  inline void set_nonce_group(::google::protobuf::uint64 value);

  // optional uint64 nonce = 5;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 5;
  inline ::google::protobuf::uint64 nonce() const;
  inline void set_nonce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcessRequest)
 private:
  inline void set_has_row_processor_class_name();
  inline void clear_has_row_processor_class_name();
  inline void set_has_row_processor_initializer_message_name();
  inline void clear_has_row_processor_initializer_message_name();
  inline void set_has_row_processor_initializer_message();
  inline void clear_has_row_processor_initializer_message();
  inline void set_has_nonce_group();
  inline void clear_has_nonce_group();
  inline void set_has_nonce();
  inline void clear_has_nonce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* row_processor_class_name_;
  ::std::string* row_processor_initializer_message_name_;
  ::std::string* row_processor_initializer_message_;
  ::google::protobuf::uint64 nonce_group_;
  ::google::protobuf::uint64 nonce_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RowProcessor_2eproto();
  friend void protobuf_AssignDesc_RowProcessor_2eproto();
  friend void protobuf_ShutdownFile_RowProcessor_2eproto();

  void InitAsDefaultInstance();
  static ProcessRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProcessResponse : public ::google::protobuf::Message {
 public:
  ProcessResponse();
  virtual ~ProcessResponse();

  ProcessResponse(const ProcessResponse& from);

  inline ProcessResponse& operator=(const ProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessResponse& default_instance();

  void Swap(ProcessResponse* other);

  // implements Message ----------------------------------------------

  ProcessResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessResponse& from);
  void MergeFrom(const ProcessResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes row_processor_result = 1;
  inline bool has_row_processor_result() const;
  inline void clear_row_processor_result();
  static const int kRowProcessorResultFieldNumber = 1;
  inline const ::std::string& row_processor_result() const;
  inline void set_row_processor_result(const ::std::string& value);
  inline void set_row_processor_result(const char* value);
  inline void set_row_processor_result(const void* value, size_t size);
  inline ::std::string* mutable_row_processor_result();
  inline ::std::string* release_row_processor_result();
  inline void set_allocated_row_processor_result(::std::string* row_processor_result);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcessResponse)
 private:
  inline void set_has_row_processor_result();
  inline void clear_has_row_processor_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* row_processor_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RowProcessor_2eproto();
  friend void protobuf_AssignDesc_RowProcessor_2eproto();
  friend void protobuf_ShutdownFile_RowProcessor_2eproto();

  void InitAsDefaultInstance();
  static ProcessResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ProcessRequest

// required string row_processor_class_name = 1;
inline bool ProcessRequest::has_row_processor_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessRequest::set_has_row_processor_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessRequest::clear_has_row_processor_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessRequest::clear_row_processor_class_name() {
  if (row_processor_class_name_ != &::google::protobuf::internal::kEmptyString) {
    row_processor_class_name_->clear();
  }
  clear_has_row_processor_class_name();
}
inline const ::std::string& ProcessRequest::row_processor_class_name() const {
  return *row_processor_class_name_;
}
inline void ProcessRequest::set_row_processor_class_name(const ::std::string& value) {
  set_has_row_processor_class_name();
  if (row_processor_class_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_class_name_ = new ::std::string;
  }
  row_processor_class_name_->assign(value);
}
inline void ProcessRequest::set_row_processor_class_name(const char* value) {
  set_has_row_processor_class_name();
  if (row_processor_class_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_class_name_ = new ::std::string;
  }
  row_processor_class_name_->assign(value);
}
inline void ProcessRequest::set_row_processor_class_name(const char* value, size_t size) {
  set_has_row_processor_class_name();
  if (row_processor_class_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_class_name_ = new ::std::string;
  }
  row_processor_class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessRequest::mutable_row_processor_class_name() {
  set_has_row_processor_class_name();
  if (row_processor_class_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_class_name_ = new ::std::string;
  }
  return row_processor_class_name_;
}
inline ::std::string* ProcessRequest::release_row_processor_class_name() {
  clear_has_row_processor_class_name();
  if (row_processor_class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = row_processor_class_name_;
    row_processor_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessRequest::set_allocated_row_processor_class_name(::std::string* row_processor_class_name) {
  if (row_processor_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_class_name_;
  }
  if (row_processor_class_name) {
    set_has_row_processor_class_name();
    row_processor_class_name_ = row_processor_class_name;
  } else {
    clear_has_row_processor_class_name();
    row_processor_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string row_processor_initializer_message_name = 2;
inline bool ProcessRequest::has_row_processor_initializer_message_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessRequest::set_has_row_processor_initializer_message_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessRequest::clear_has_row_processor_initializer_message_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessRequest::clear_row_processor_initializer_message_name() {
  if (row_processor_initializer_message_name_ != &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_name_->clear();
  }
  clear_has_row_processor_initializer_message_name();
}
inline const ::std::string& ProcessRequest::row_processor_initializer_message_name() const {
  return *row_processor_initializer_message_name_;
}
inline void ProcessRequest::set_row_processor_initializer_message_name(const ::std::string& value) {
  set_has_row_processor_initializer_message_name();
  if (row_processor_initializer_message_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_name_ = new ::std::string;
  }
  row_processor_initializer_message_name_->assign(value);
}
inline void ProcessRequest::set_row_processor_initializer_message_name(const char* value) {
  set_has_row_processor_initializer_message_name();
  if (row_processor_initializer_message_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_name_ = new ::std::string;
  }
  row_processor_initializer_message_name_->assign(value);
}
inline void ProcessRequest::set_row_processor_initializer_message_name(const char* value, size_t size) {
  set_has_row_processor_initializer_message_name();
  if (row_processor_initializer_message_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_name_ = new ::std::string;
  }
  row_processor_initializer_message_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessRequest::mutable_row_processor_initializer_message_name() {
  set_has_row_processor_initializer_message_name();
  if (row_processor_initializer_message_name_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_name_ = new ::std::string;
  }
  return row_processor_initializer_message_name_;
}
inline ::std::string* ProcessRequest::release_row_processor_initializer_message_name() {
  clear_has_row_processor_initializer_message_name();
  if (row_processor_initializer_message_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = row_processor_initializer_message_name_;
    row_processor_initializer_message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessRequest::set_allocated_row_processor_initializer_message_name(::std::string* row_processor_initializer_message_name) {
  if (row_processor_initializer_message_name_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_initializer_message_name_;
  }
  if (row_processor_initializer_message_name) {
    set_has_row_processor_initializer_message_name();
    row_processor_initializer_message_name_ = row_processor_initializer_message_name;
  } else {
    clear_has_row_processor_initializer_message_name();
    row_processor_initializer_message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes row_processor_initializer_message = 3;
inline bool ProcessRequest::has_row_processor_initializer_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessRequest::set_has_row_processor_initializer_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessRequest::clear_has_row_processor_initializer_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessRequest::clear_row_processor_initializer_message() {
  if (row_processor_initializer_message_ != &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_->clear();
  }
  clear_has_row_processor_initializer_message();
}
inline const ::std::string& ProcessRequest::row_processor_initializer_message() const {
  return *row_processor_initializer_message_;
}
inline void ProcessRequest::set_row_processor_initializer_message(const ::std::string& value) {
  set_has_row_processor_initializer_message();
  if (row_processor_initializer_message_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_ = new ::std::string;
  }
  row_processor_initializer_message_->assign(value);
}
inline void ProcessRequest::set_row_processor_initializer_message(const char* value) {
  set_has_row_processor_initializer_message();
  if (row_processor_initializer_message_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_ = new ::std::string;
  }
  row_processor_initializer_message_->assign(value);
}
inline void ProcessRequest::set_row_processor_initializer_message(const void* value, size_t size) {
  set_has_row_processor_initializer_message();
  if (row_processor_initializer_message_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_ = new ::std::string;
  }
  row_processor_initializer_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessRequest::mutable_row_processor_initializer_message() {
  set_has_row_processor_initializer_message();
  if (row_processor_initializer_message_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_initializer_message_ = new ::std::string;
  }
  return row_processor_initializer_message_;
}
inline ::std::string* ProcessRequest::release_row_processor_initializer_message() {
  clear_has_row_processor_initializer_message();
  if (row_processor_initializer_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = row_processor_initializer_message_;
    row_processor_initializer_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessRequest::set_allocated_row_processor_initializer_message(::std::string* row_processor_initializer_message) {
  if (row_processor_initializer_message_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_initializer_message_;
  }
  if (row_processor_initializer_message) {
    set_has_row_processor_initializer_message();
    row_processor_initializer_message_ = row_processor_initializer_message;
  } else {
    clear_has_row_processor_initializer_message();
    row_processor_initializer_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 nonce_group = 4;
inline bool ProcessRequest::has_nonce_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessRequest::set_has_nonce_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessRequest::clear_has_nonce_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessRequest::clear_nonce_group() {
  nonce_group_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce_group();
}
inline ::google::protobuf::uint64 ProcessRequest::nonce_group() const {
  return nonce_group_;
}
inline void ProcessRequest::set_nonce_group(::google::protobuf::uint64 value) {
  set_has_nonce_group();
  nonce_group_ = value;
}

// optional uint64 nonce = 5;
inline bool ProcessRequest::has_nonce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessRequest::set_has_nonce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProcessRequest::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProcessRequest::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::uint64 ProcessRequest::nonce() const {
  return nonce_;
}
inline void ProcessRequest::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
}

// -------------------------------------------------------------------

// ProcessResponse

// required bytes row_processor_result = 1;
inline bool ProcessResponse::has_row_processor_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessResponse::set_has_row_processor_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessResponse::clear_has_row_processor_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessResponse::clear_row_processor_result() {
  if (row_processor_result_ != &::google::protobuf::internal::kEmptyString) {
    row_processor_result_->clear();
  }
  clear_has_row_processor_result();
}
inline const ::std::string& ProcessResponse::row_processor_result() const {
  return *row_processor_result_;
}
inline void ProcessResponse::set_row_processor_result(const ::std::string& value) {
  set_has_row_processor_result();
  if (row_processor_result_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_result_ = new ::std::string;
  }
  row_processor_result_->assign(value);
}
inline void ProcessResponse::set_row_processor_result(const char* value) {
  set_has_row_processor_result();
  if (row_processor_result_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_result_ = new ::std::string;
  }
  row_processor_result_->assign(value);
}
inline void ProcessResponse::set_row_processor_result(const void* value, size_t size) {
  set_has_row_processor_result();
  if (row_processor_result_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_result_ = new ::std::string;
  }
  row_processor_result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessResponse::mutable_row_processor_result() {
  set_has_row_processor_result();
  if (row_processor_result_ == &::google::protobuf::internal::kEmptyString) {
    row_processor_result_ = new ::std::string;
  }
  return row_processor_result_;
}
inline ::std::string* ProcessResponse::release_row_processor_result() {
  clear_has_row_processor_result();
  if (row_processor_result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = row_processor_result_;
    row_processor_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcessResponse::set_allocated_row_processor_result(::std::string* row_processor_result) {
  if (row_processor_result_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_result_;
  }
  if (row_processor_result) {
    set_has_row_processor_result();
    row_processor_result_ = row_processor_result;
  } else {
    clear_has_row_processor_result();
    row_processor_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RowProcessor_2eproto__INCLUDED
