// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterStatus.proto

#ifndef PROTOBUF_ClusterStatus_2eproto__INCLUDED
#define PROTOBUF_ClusterStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "HBase.pb.h"
#include "ClusterId.pb.h"
#include "FS.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClusterStatus_2eproto();
void protobuf_AssignDesc_ClusterStatus_2eproto();
void protobuf_ShutdownFile_ClusterStatus_2eproto();

class RegionState;
class RegionInTransition;
class StoreSequenceId;
class RegionStoreSequenceIds;
class RegionLoad;
class ReplicationLoadSink;
class ReplicationLoadSource;
class ServerLoad;
class LiveServerInfo;
class ClusterStatus;

enum RegionState_State {
  RegionState_State_OFFLINE = 0,
  RegionState_State_PENDING_OPEN = 1,
  RegionState_State_OPENING = 2,
  RegionState_State_OPEN = 3,
  RegionState_State_PENDING_CLOSE = 4,
  RegionState_State_CLOSING = 5,
  RegionState_State_CLOSED = 6,
  RegionState_State_SPLITTING = 7,
  RegionState_State_SPLIT = 8,
  RegionState_State_FAILED_OPEN = 9,
  RegionState_State_FAILED_CLOSE = 10,
  RegionState_State_MERGING = 11,
  RegionState_State_MERGED = 12,
  RegionState_State_SPLITTING_NEW = 13,
  RegionState_State_MERGING_NEW = 14
};
bool RegionState_State_IsValid(int value);
const RegionState_State RegionState_State_State_MIN = RegionState_State_OFFLINE;
const RegionState_State RegionState_State_State_MAX = RegionState_State_MERGING_NEW;
const int RegionState_State_State_ARRAYSIZE = RegionState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegionState_State_descriptor();
inline const ::std::string& RegionState_State_Name(RegionState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegionState_State_descriptor(), value);
}
inline bool RegionState_State_Parse(
    const ::std::string& name, RegionState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegionState_State>(
    RegionState_State_descriptor(), name, value);
}
// ===================================================================

class RegionState : public ::google::protobuf::Message {
 public:
  RegionState();
  virtual ~RegionState();

  RegionState(const RegionState& from);

  inline RegionState& operator=(const RegionState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionState& default_instance();

  void Swap(RegionState* other);

  // implements Message ----------------------------------------------

  RegionState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionState& from);
  void MergeFrom(const RegionState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RegionState_State State;
  static const State OFFLINE = RegionState_State_OFFLINE;
  static const State PENDING_OPEN = RegionState_State_PENDING_OPEN;
  static const State OPENING = RegionState_State_OPENING;
  static const State OPEN = RegionState_State_OPEN;
  static const State PENDING_CLOSE = RegionState_State_PENDING_CLOSE;
  static const State CLOSING = RegionState_State_CLOSING;
  static const State CLOSED = RegionState_State_CLOSED;
  static const State SPLITTING = RegionState_State_SPLITTING;
  static const State SPLIT = RegionState_State_SPLIT;
  static const State FAILED_OPEN = RegionState_State_FAILED_OPEN;
  static const State FAILED_CLOSE = RegionState_State_FAILED_CLOSE;
  static const State MERGING = RegionState_State_MERGING;
  static const State MERGED = RegionState_State_MERGED;
  static const State SPLITTING_NEW = RegionState_State_SPLITTING_NEW;
  static const State MERGING_NEW = RegionState_State_MERGING_NEW;
  static inline bool State_IsValid(int value) {
    return RegionState_State_IsValid(value);
  }
  static const State State_MIN =
    RegionState_State_State_MIN;
  static const State State_MAX =
    RegionState_State_State_MAX;
  static const int State_ARRAYSIZE =
    RegionState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return RegionState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return RegionState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return RegionState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionInfo region_info = 1;
  inline bool has_region_info() const;
  inline void clear_region_info();
  static const int kRegionInfoFieldNumber = 1;
  inline const ::hbase::pb::RegionInfo& region_info() const;
  inline ::hbase::pb::RegionInfo* mutable_region_info();
  inline ::hbase::pb::RegionInfo* release_region_info();
  inline void set_allocated_region_info(::hbase::pb::RegionInfo* region_info);

  // required .hbase.pb.RegionState.State state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::hbase::pb::RegionState_State state() const;
  inline void set_state(::hbase::pb::RegionState_State value);

  // optional uint64 stamp = 3;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 3;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionState)
 private:
  inline void set_has_region_info();
  inline void clear_has_region_info();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_stamp();
  inline void clear_has_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionInfo* region_info_;
  ::google::protobuf::uint64 stamp_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionState* default_instance_;
};
// -------------------------------------------------------------------

class RegionInTransition : public ::google::protobuf::Message {
 public:
  RegionInTransition();
  virtual ~RegionInTransition();

  RegionInTransition(const RegionInTransition& from);

  inline RegionInTransition& operator=(const RegionInTransition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionInTransition& default_instance();

  void Swap(RegionInTransition* other);

  // implements Message ----------------------------------------------

  RegionInTransition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionInTransition& from);
  void MergeFrom(const RegionInTransition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier spec = 1;
  inline bool has_spec() const;
  inline void clear_spec();
  static const int kSpecFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& spec() const;
  inline ::hbase::pb::RegionSpecifier* mutable_spec();
  inline ::hbase::pb::RegionSpecifier* release_spec();
  inline void set_allocated_spec(::hbase::pb::RegionSpecifier* spec);

  // required .hbase.pb.RegionState region_state = 2;
  inline bool has_region_state() const;
  inline void clear_region_state();
  static const int kRegionStateFieldNumber = 2;
  inline const ::hbase::pb::RegionState& region_state() const;
  inline ::hbase::pb::RegionState* mutable_region_state();
  inline ::hbase::pb::RegionState* release_region_state();
  inline void set_allocated_region_state(::hbase::pb::RegionState* region_state);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionInTransition)
 private:
  inline void set_has_spec();
  inline void clear_has_spec();
  inline void set_has_region_state();
  inline void clear_has_region_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* spec_;
  ::hbase::pb::RegionState* region_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionInTransition* default_instance_;
};
// -------------------------------------------------------------------

class StoreSequenceId : public ::google::protobuf::Message {
 public:
  StoreSequenceId();
  virtual ~StoreSequenceId();

  StoreSequenceId(const StoreSequenceId& from);

  inline StoreSequenceId& operator=(const StoreSequenceId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreSequenceId& default_instance();

  void Swap(StoreSequenceId* other);

  // implements Message ----------------------------------------------

  StoreSequenceId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreSequenceId& from);
  void MergeFrom(const StoreSequenceId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes family_name = 1;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 1;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const void* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // required uint64 sequence_id = 2;
  inline bool has_sequence_id() const;
  inline void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sequence_id() const;
  inline void set_sequence_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.StoreSequenceId)
 private:
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_sequence_id();
  inline void clear_has_sequence_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* family_name_;
  ::google::protobuf::uint64 sequence_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static StoreSequenceId* default_instance_;
};
// -------------------------------------------------------------------

class RegionStoreSequenceIds : public ::google::protobuf::Message {
 public:
  RegionStoreSequenceIds();
  virtual ~RegionStoreSequenceIds();

  RegionStoreSequenceIds(const RegionStoreSequenceIds& from);

  inline RegionStoreSequenceIds& operator=(const RegionStoreSequenceIds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionStoreSequenceIds& default_instance();

  void Swap(RegionStoreSequenceIds* other);

  // implements Message ----------------------------------------------

  RegionStoreSequenceIds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionStoreSequenceIds& from);
  void MergeFrom(const RegionStoreSequenceIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 last_flushed_sequence_id = 1;
  inline bool has_last_flushed_sequence_id() const;
  inline void clear_last_flushed_sequence_id();
  static const int kLastFlushedSequenceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 last_flushed_sequence_id() const;
  inline void set_last_flushed_sequence_id(::google::protobuf::uint64 value);

  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  inline int store_sequence_id_size() const;
  inline void clear_store_sequence_id();
  static const int kStoreSequenceIdFieldNumber = 2;
  inline const ::hbase::pb::StoreSequenceId& store_sequence_id(int index) const;
  inline ::hbase::pb::StoreSequenceId* mutable_store_sequence_id(int index);
  inline ::hbase::pb::StoreSequenceId* add_store_sequence_id();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >&
      store_sequence_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >*
      mutable_store_sequence_id();

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionStoreSequenceIds)
 private:
  inline void set_has_last_flushed_sequence_id();
  inline void clear_has_last_flushed_sequence_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_flushed_sequence_id_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId > store_sequence_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionStoreSequenceIds* default_instance_;
};
// -------------------------------------------------------------------

class RegionLoad : public ::google::protobuf::Message {
 public:
  RegionLoad();
  virtual ~RegionLoad();

  RegionLoad(const RegionLoad& from);

  inline RegionLoad& operator=(const RegionLoad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLoad& default_instance();

  void Swap(RegionLoad* other);

  // implements Message ----------------------------------------------

  RegionLoad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLoad& from);
  void MergeFrom(const RegionLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region_specifier = 1;
  inline bool has_region_specifier() const;
  inline void clear_region_specifier();
  static const int kRegionSpecifierFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region_specifier() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region_specifier();
  inline ::hbase::pb::RegionSpecifier* release_region_specifier();
  inline void set_allocated_region_specifier(::hbase::pb::RegionSpecifier* region_specifier);

  // optional uint32 stores = 2;
  inline bool has_stores() const;
  inline void clear_stores();
  static const int kStoresFieldNumber = 2;
  inline ::google::protobuf::uint32 stores() const;
  inline void set_stores(::google::protobuf::uint32 value);

  // optional uint32 storefiles = 3;
  inline bool has_storefiles() const;
  inline void clear_storefiles();
  static const int kStorefilesFieldNumber = 3;
  inline ::google::protobuf::uint32 storefiles() const;
  inline void set_storefiles(::google::protobuf::uint32 value);

  // optional uint32 store_uncompressed_size_MB = 4;
  inline bool has_store_uncompressed_size_mb() const;
  inline void clear_store_uncompressed_size_mb();
  static const int kStoreUncompressedSizeMBFieldNumber = 4;
  inline ::google::protobuf::uint32 store_uncompressed_size_mb() const;
  inline void set_store_uncompressed_size_mb(::google::protobuf::uint32 value);

  // optional uint32 storefile_size_MB = 5;
  inline bool has_storefile_size_mb() const;
  inline void clear_storefile_size_mb();
  static const int kStorefileSizeMBFieldNumber = 5;
  inline ::google::protobuf::uint32 storefile_size_mb() const;
  inline void set_storefile_size_mb(::google::protobuf::uint32 value);

  // optional uint32 memstore_size_MB = 6;
  inline bool has_memstore_size_mb() const;
  inline void clear_memstore_size_mb();
  static const int kMemstoreSizeMBFieldNumber = 6;
  inline ::google::protobuf::uint32 memstore_size_mb() const;
  inline void set_memstore_size_mb(::google::protobuf::uint32 value);

  // optional uint32 storefile_index_size_MB = 7;
  inline bool has_storefile_index_size_mb() const;
  inline void clear_storefile_index_size_mb();
  static const int kStorefileIndexSizeMBFieldNumber = 7;
  inline ::google::protobuf::uint32 storefile_index_size_mb() const;
  inline void set_storefile_index_size_mb(::google::protobuf::uint32 value);

  // optional uint64 read_requests_count = 8;
  inline bool has_read_requests_count() const;
  inline void clear_read_requests_count();
  static const int kReadRequestsCountFieldNumber = 8;
  inline ::google::protobuf::uint64 read_requests_count() const;
  inline void set_read_requests_count(::google::protobuf::uint64 value);

  // optional uint64 write_requests_count = 9;
  inline bool has_write_requests_count() const;
  inline void clear_write_requests_count();
  static const int kWriteRequestsCountFieldNumber = 9;
  inline ::google::protobuf::uint64 write_requests_count() const;
  inline void set_write_requests_count(::google::protobuf::uint64 value);

  // optional uint64 total_compacting_KVs = 10;
  inline bool has_total_compacting_kvs() const;
  inline void clear_total_compacting_kvs();
  static const int kTotalCompactingKVsFieldNumber = 10;
  inline ::google::protobuf::uint64 total_compacting_kvs() const;
  inline void set_total_compacting_kvs(::google::protobuf::uint64 value);

  // optional uint64 current_compacted_KVs = 11;
  inline bool has_current_compacted_kvs() const;
  inline void clear_current_compacted_kvs();
  static const int kCurrentCompactedKVsFieldNumber = 11;
  inline ::google::protobuf::uint64 current_compacted_kvs() const;
  inline void set_current_compacted_kvs(::google::protobuf::uint64 value);

  // optional uint32 root_index_size_KB = 12;
  inline bool has_root_index_size_kb() const;
  inline void clear_root_index_size_kb();
  static const int kRootIndexSizeKBFieldNumber = 12;
  inline ::google::protobuf::uint32 root_index_size_kb() const;
  inline void set_root_index_size_kb(::google::protobuf::uint32 value);

  // optional uint32 total_static_index_size_KB = 13;
  inline bool has_total_static_index_size_kb() const;
  inline void clear_total_static_index_size_kb();
  static const int kTotalStaticIndexSizeKBFieldNumber = 13;
  inline ::google::protobuf::uint32 total_static_index_size_kb() const;
  inline void set_total_static_index_size_kb(::google::protobuf::uint32 value);

  // optional uint32 total_static_bloom_size_KB = 14;
  inline bool has_total_static_bloom_size_kb() const;
  inline void clear_total_static_bloom_size_kb();
  static const int kTotalStaticBloomSizeKBFieldNumber = 14;
  inline ::google::protobuf::uint32 total_static_bloom_size_kb() const;
  inline void set_total_static_bloom_size_kb(::google::protobuf::uint32 value);

  // optional uint64 complete_sequence_id = 15;
  inline bool has_complete_sequence_id() const;
  inline void clear_complete_sequence_id();
  static const int kCompleteSequenceIdFieldNumber = 15;
  inline ::google::protobuf::uint64 complete_sequence_id() const;
  inline void set_complete_sequence_id(::google::protobuf::uint64 value);

  // optional float data_locality = 16;
  inline bool has_data_locality() const;
  inline void clear_data_locality();
  static const int kDataLocalityFieldNumber = 16;
  inline float data_locality() const;
  inline void set_data_locality(float value);

  // optional uint64 last_major_compaction_ts = 17 [default = 0];
  inline bool has_last_major_compaction_ts() const;
  inline void clear_last_major_compaction_ts();
  static const int kLastMajorCompactionTsFieldNumber = 17;
  inline ::google::protobuf::uint64 last_major_compaction_ts() const;
  inline void set_last_major_compaction_ts(::google::protobuf::uint64 value);

  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  inline int store_complete_sequence_id_size() const;
  inline void clear_store_complete_sequence_id();
  static const int kStoreCompleteSequenceIdFieldNumber = 18;
  inline const ::hbase::pb::StoreSequenceId& store_complete_sequence_id(int index) const;
  inline ::hbase::pb::StoreSequenceId* mutable_store_complete_sequence_id(int index);
  inline ::hbase::pb::StoreSequenceId* add_store_complete_sequence_id();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >&
      store_complete_sequence_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >*
      mutable_store_complete_sequence_id();

  // optional uint64 filtered_read_requests_count = 19;
  inline bool has_filtered_read_requests_count() const;
  inline void clear_filtered_read_requests_count();
  static const int kFilteredReadRequestsCountFieldNumber = 19;
  inline ::google::protobuf::uint64 filtered_read_requests_count() const;
  inline void set_filtered_read_requests_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegionLoad)
 private:
  inline void set_has_region_specifier();
  inline void clear_has_region_specifier();
  inline void set_has_stores();
  inline void clear_has_stores();
  inline void set_has_storefiles();
  inline void clear_has_storefiles();
  inline void set_has_store_uncompressed_size_mb();
  inline void clear_has_store_uncompressed_size_mb();
  inline void set_has_storefile_size_mb();
  inline void clear_has_storefile_size_mb();
  inline void set_has_memstore_size_mb();
  inline void clear_has_memstore_size_mb();
  inline void set_has_storefile_index_size_mb();
  inline void clear_has_storefile_index_size_mb();
  inline void set_has_read_requests_count();
  inline void clear_has_read_requests_count();
  inline void set_has_write_requests_count();
  inline void clear_has_write_requests_count();
  inline void set_has_total_compacting_kvs();
  inline void clear_has_total_compacting_kvs();
  inline void set_has_current_compacted_kvs();
  inline void clear_has_current_compacted_kvs();
  inline void set_has_root_index_size_kb();
  inline void clear_has_root_index_size_kb();
  inline void set_has_total_static_index_size_kb();
  inline void clear_has_total_static_index_size_kb();
  inline void set_has_total_static_bloom_size_kb();
  inline void clear_has_total_static_bloom_size_kb();
  inline void set_has_complete_sequence_id();
  inline void clear_has_complete_sequence_id();
  inline void set_has_data_locality();
  inline void clear_has_data_locality();
  inline void set_has_last_major_compaction_ts();
  inline void clear_has_last_major_compaction_ts();
  inline void set_has_filtered_read_requests_count();
  inline void clear_has_filtered_read_requests_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_specifier_;
  ::google::protobuf::uint32 stores_;
  ::google::protobuf::uint32 storefiles_;
  ::google::protobuf::uint32 store_uncompressed_size_mb_;
  ::google::protobuf::uint32 storefile_size_mb_;
  ::google::protobuf::uint32 memstore_size_mb_;
  ::google::protobuf::uint32 storefile_index_size_mb_;
  ::google::protobuf::uint64 read_requests_count_;
  ::google::protobuf::uint64 write_requests_count_;
  ::google::protobuf::uint64 total_compacting_kvs_;
  ::google::protobuf::uint64 current_compacted_kvs_;
  ::google::protobuf::uint32 root_index_size_kb_;
  ::google::protobuf::uint32 total_static_index_size_kb_;
  ::google::protobuf::uint64 complete_sequence_id_;
  ::google::protobuf::uint32 total_static_bloom_size_kb_;
  float data_locality_;
  ::google::protobuf::uint64 last_major_compaction_ts_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId > store_complete_sequence_id_;
  ::google::protobuf::uint64 filtered_read_requests_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static RegionLoad* default_instance_;
};
// -------------------------------------------------------------------

class ReplicationLoadSink : public ::google::protobuf::Message {
 public:
  ReplicationLoadSink();
  virtual ~ReplicationLoadSink();

  ReplicationLoadSink(const ReplicationLoadSink& from);

  inline ReplicationLoadSink& operator=(const ReplicationLoadSink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicationLoadSink& default_instance();

  void Swap(ReplicationLoadSink* other);

  // implements Message ----------------------------------------------

  ReplicationLoadSink* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicationLoadSink& from);
  void MergeFrom(const ReplicationLoadSink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ageOfLastAppliedOp = 1;
  inline bool has_ageoflastappliedop() const;
  inline void clear_ageoflastappliedop();
  static const int kAgeOfLastAppliedOpFieldNumber = 1;
  inline ::google::protobuf::uint64 ageoflastappliedop() const;
  inline void set_ageoflastappliedop(::google::protobuf::uint64 value);

  // required uint64 timeStampsOfLastAppliedOp = 2;
  inline bool has_timestampsoflastappliedop() const;
  inline void clear_timestampsoflastappliedop();
  static const int kTimeStampsOfLastAppliedOpFieldNumber = 2;
  inline ::google::protobuf::uint64 timestampsoflastappliedop() const;
  inline void set_timestampsoflastappliedop(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ReplicationLoadSink)
 private:
  inline void set_has_ageoflastappliedop();
  inline void clear_has_ageoflastappliedop();
  inline void set_has_timestampsoflastappliedop();
  inline void clear_has_timestampsoflastappliedop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ageoflastappliedop_;
  ::google::protobuf::uint64 timestampsoflastappliedop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static ReplicationLoadSink* default_instance_;
};
// -------------------------------------------------------------------

class ReplicationLoadSource : public ::google::protobuf::Message {
 public:
  ReplicationLoadSource();
  virtual ~ReplicationLoadSource();

  ReplicationLoadSource(const ReplicationLoadSource& from);

  inline ReplicationLoadSource& operator=(const ReplicationLoadSource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicationLoadSource& default_instance();

  void Swap(ReplicationLoadSource* other);

  // implements Message ----------------------------------------------

  ReplicationLoadSource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicationLoadSource& from);
  void MergeFrom(const ReplicationLoadSource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peerID = 1;
  inline bool has_peerid() const;
  inline void clear_peerid();
  static const int kPeerIDFieldNumber = 1;
  inline const ::std::string& peerid() const;
  inline void set_peerid(const ::std::string& value);
  inline void set_peerid(const char* value);
  inline void set_peerid(const char* value, size_t size);
  inline ::std::string* mutable_peerid();
  inline ::std::string* release_peerid();
  inline void set_allocated_peerid(::std::string* peerid);

  // required uint64 ageOfLastShippedOp = 2;
  inline bool has_ageoflastshippedop() const;
  inline void clear_ageoflastshippedop();
  static const int kAgeOfLastShippedOpFieldNumber = 2;
  inline ::google::protobuf::uint64 ageoflastshippedop() const;
  inline void set_ageoflastshippedop(::google::protobuf::uint64 value);

  // required uint32 sizeOfLogQueue = 3;
  inline bool has_sizeoflogqueue() const;
  inline void clear_sizeoflogqueue();
  static const int kSizeOfLogQueueFieldNumber = 3;
  inline ::google::protobuf::uint32 sizeoflogqueue() const;
  inline void set_sizeoflogqueue(::google::protobuf::uint32 value);

  // required uint64 timeStampOfLastShippedOp = 4;
  inline bool has_timestampoflastshippedop() const;
  inline void clear_timestampoflastshippedop();
  static const int kTimeStampOfLastShippedOpFieldNumber = 4;
  inline ::google::protobuf::uint64 timestampoflastshippedop() const;
  inline void set_timestampoflastshippedop(::google::protobuf::uint64 value);

  // required uint64 replicationLag = 5;
  inline bool has_replicationlag() const;
  inline void clear_replicationlag();
  static const int kReplicationLagFieldNumber = 5;
  inline ::google::protobuf::uint64 replicationlag() const;
  inline void set_replicationlag(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ReplicationLoadSource)
 private:
  inline void set_has_peerid();
  inline void clear_has_peerid();
  inline void set_has_ageoflastshippedop();
  inline void clear_has_ageoflastshippedop();
  inline void set_has_sizeoflogqueue();
  inline void clear_has_sizeoflogqueue();
  inline void set_has_timestampoflastshippedop();
  inline void clear_has_timestampoflastshippedop();
  inline void set_has_replicationlag();
  inline void clear_has_replicationlag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* peerid_;
  ::google::protobuf::uint64 ageoflastshippedop_;
  ::google::protobuf::uint64 timestampoflastshippedop_;
  ::google::protobuf::uint64 replicationlag_;
  ::google::protobuf::uint32 sizeoflogqueue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static ReplicationLoadSource* default_instance_;
};
// -------------------------------------------------------------------

class ServerLoad : public ::google::protobuf::Message {
 public:
  ServerLoad();
  virtual ~ServerLoad();

  ServerLoad(const ServerLoad& from);

  inline ServerLoad& operator=(const ServerLoad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerLoad& default_instance();

  void Swap(ServerLoad* other);

  // implements Message ----------------------------------------------

  ServerLoad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerLoad& from);
  void MergeFrom(const ServerLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 number_of_requests = 1;
  inline bool has_number_of_requests() const;
  inline void clear_number_of_requests();
  static const int kNumberOfRequestsFieldNumber = 1;
  inline ::google::protobuf::uint64 number_of_requests() const;
  inline void set_number_of_requests(::google::protobuf::uint64 value);

  // optional uint64 total_number_of_requests = 2;
  inline bool has_total_number_of_requests() const;
  inline void clear_total_number_of_requests();
  static const int kTotalNumberOfRequestsFieldNumber = 2;
  inline ::google::protobuf::uint64 total_number_of_requests() const;
  inline void set_total_number_of_requests(::google::protobuf::uint64 value);

  // optional uint32 used_heap_MB = 3;
  inline bool has_used_heap_mb() const;
  inline void clear_used_heap_mb();
  static const int kUsedHeapMBFieldNumber = 3;
  inline ::google::protobuf::uint32 used_heap_mb() const;
  inline void set_used_heap_mb(::google::protobuf::uint32 value);

  // optional uint32 max_heap_MB = 4;
  inline bool has_max_heap_mb() const;
  inline void clear_max_heap_mb();
  static const int kMaxHeapMBFieldNumber = 4;
  inline ::google::protobuf::uint32 max_heap_mb() const;
  inline void set_max_heap_mb(::google::protobuf::uint32 value);

  // repeated .hbase.pb.RegionLoad region_loads = 5;
  inline int region_loads_size() const;
  inline void clear_region_loads();
  static const int kRegionLoadsFieldNumber = 5;
  inline const ::hbase::pb::RegionLoad& region_loads(int index) const;
  inline ::hbase::pb::RegionLoad* mutable_region_loads(int index);
  inline ::hbase::pb::RegionLoad* add_region_loads();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionLoad >&
      region_loads() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionLoad >*
      mutable_region_loads();

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  inline int coprocessors_size() const;
  inline void clear_coprocessors();
  static const int kCoprocessorsFieldNumber = 6;
  inline const ::hbase::pb::Coprocessor& coprocessors(int index) const;
  inline ::hbase::pb::Coprocessor* mutable_coprocessors(int index);
  inline ::hbase::pb::Coprocessor* add_coprocessors();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >&
      coprocessors() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >*
      mutable_coprocessors();

  // optional uint64 report_start_time = 7;
  inline bool has_report_start_time() const;
  inline void clear_report_start_time();
  static const int kReportStartTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 report_start_time() const;
  inline void set_report_start_time(::google::protobuf::uint64 value);

  // optional uint64 report_end_time = 8;
  inline bool has_report_end_time() const;
  inline void clear_report_end_time();
  static const int kReportEndTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 report_end_time() const;
  inline void set_report_end_time(::google::protobuf::uint64 value);

  // optional uint32 info_server_port = 9;
  inline bool has_info_server_port() const;
  inline void clear_info_server_port();
  static const int kInfoServerPortFieldNumber = 9;
  inline ::google::protobuf::uint32 info_server_port() const;
  inline void set_info_server_port(::google::protobuf::uint32 value);

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  inline int replloadsource_size() const;
  inline void clear_replloadsource();
  static const int kReplLoadSourceFieldNumber = 10;
  inline const ::hbase::pb::ReplicationLoadSource& replloadsource(int index) const;
  inline ::hbase::pb::ReplicationLoadSource* mutable_replloadsource(int index);
  inline ::hbase::pb::ReplicationLoadSource* add_replloadsource();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ReplicationLoadSource >&
      replloadsource() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ReplicationLoadSource >*
      mutable_replloadsource();

  // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
  inline bool has_replloadsink() const;
  inline void clear_replloadsink();
  static const int kReplLoadSinkFieldNumber = 11;
  inline const ::hbase::pb::ReplicationLoadSink& replloadsink() const;
  inline ::hbase::pb::ReplicationLoadSink* mutable_replloadsink();
  inline ::hbase::pb::ReplicationLoadSink* release_replloadsink();
  inline void set_allocated_replloadsink(::hbase::pb::ReplicationLoadSink* replloadsink);

  // @@protoc_insertion_point(class_scope:hbase.pb.ServerLoad)
 private:
  inline void set_has_number_of_requests();
  inline void clear_has_number_of_requests();
  inline void set_has_total_number_of_requests();
  inline void clear_has_total_number_of_requests();
  inline void set_has_used_heap_mb();
  inline void clear_has_used_heap_mb();
  inline void set_has_max_heap_mb();
  inline void clear_has_max_heap_mb();
  inline void set_has_report_start_time();
  inline void clear_has_report_start_time();
  inline void set_has_report_end_time();
  inline void clear_has_report_end_time();
  inline void set_has_info_server_port();
  inline void clear_has_info_server_port();
  inline void set_has_replloadsink();
  inline void clear_has_replloadsink();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 number_of_requests_;
  ::google::protobuf::uint64 total_number_of_requests_;
  ::google::protobuf::uint32 used_heap_mb_;
  ::google::protobuf::uint32 max_heap_mb_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionLoad > region_loads_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor > coprocessors_;
  ::google::protobuf::uint64 report_start_time_;
  ::google::protobuf::uint64 report_end_time_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::ReplicationLoadSource > replloadsource_;
  ::hbase::pb::ReplicationLoadSink* replloadsink_;
  ::google::protobuf::uint32 info_server_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static ServerLoad* default_instance_;
};
// -------------------------------------------------------------------

class LiveServerInfo : public ::google::protobuf::Message {
 public:
  LiveServerInfo();
  virtual ~LiveServerInfo();

  LiveServerInfo(const LiveServerInfo& from);

  inline LiveServerInfo& operator=(const LiveServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveServerInfo& default_instance();

  void Swap(LiveServerInfo* other);

  // implements Message ----------------------------------------------

  LiveServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveServerInfo& from);
  void MergeFrom(const LiveServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ServerName server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline const ::hbase::pb::ServerName& server() const;
  inline ::hbase::pb::ServerName* mutable_server();
  inline ::hbase::pb::ServerName* release_server();
  inline void set_allocated_server(::hbase::pb::ServerName* server);

  // required .hbase.pb.ServerLoad server_load = 2;
  inline bool has_server_load() const;
  inline void clear_server_load();
  static const int kServerLoadFieldNumber = 2;
  inline const ::hbase::pb::ServerLoad& server_load() const;
  inline ::hbase::pb::ServerLoad* mutable_server_load();
  inline ::hbase::pb::ServerLoad* release_server_load();
  inline void set_allocated_server_load(::hbase::pb::ServerLoad* server_load);

  // @@protoc_insertion_point(class_scope:hbase.pb.LiveServerInfo)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_server_load();
  inline void clear_has_server_load();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ServerName* server_;
  ::hbase::pb::ServerLoad* server_load_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static LiveServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClusterStatus : public ::google::protobuf::Message {
 public:
  ClusterStatus();
  virtual ~ClusterStatus();

  ClusterStatus(const ClusterStatus& from);

  inline ClusterStatus& operator=(const ClusterStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterStatus& default_instance();

  void Swap(ClusterStatus* other);

  // implements Message ----------------------------------------------

  ClusterStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterStatus& from);
  void MergeFrom(const ClusterStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
  inline bool has_hbase_version() const;
  inline void clear_hbase_version();
  static const int kHbaseVersionFieldNumber = 1;
  inline const ::hbase::pb::HBaseVersionFileContent& hbase_version() const;
  inline ::hbase::pb::HBaseVersionFileContent* mutable_hbase_version();
  inline ::hbase::pb::HBaseVersionFileContent* release_hbase_version();
  inline void set_allocated_hbase_version(::hbase::pb::HBaseVersionFileContent* hbase_version);

  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  inline int live_servers_size() const;
  inline void clear_live_servers();
  static const int kLiveServersFieldNumber = 2;
  inline const ::hbase::pb::LiveServerInfo& live_servers(int index) const;
  inline ::hbase::pb::LiveServerInfo* mutable_live_servers(int index);
  inline ::hbase::pb::LiveServerInfo* add_live_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::LiveServerInfo >&
      live_servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::LiveServerInfo >*
      mutable_live_servers();

  // repeated .hbase.pb.ServerName dead_servers = 3;
  inline int dead_servers_size() const;
  inline void clear_dead_servers();
  static const int kDeadServersFieldNumber = 3;
  inline const ::hbase::pb::ServerName& dead_servers(int index) const;
  inline ::hbase::pb::ServerName* mutable_dead_servers(int index);
  inline ::hbase::pb::ServerName* add_dead_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
      dead_servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
      mutable_dead_servers();

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  inline int regions_in_transition_size() const;
  inline void clear_regions_in_transition();
  static const int kRegionsInTransitionFieldNumber = 4;
  inline const ::hbase::pb::RegionInTransition& regions_in_transition(int index) const;
  inline ::hbase::pb::RegionInTransition* mutable_regions_in_transition(int index);
  inline ::hbase::pb::RegionInTransition* add_regions_in_transition();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInTransition >&
      regions_in_transition() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInTransition >*
      mutable_regions_in_transition();

  // optional .hbase.pb.ClusterId cluster_id = 5;
  inline bool has_cluster_id() const;
  inline void clear_cluster_id();
  static const int kClusterIdFieldNumber = 5;
  inline const ::hbase::pb::ClusterId& cluster_id() const;
  inline ::hbase::pb::ClusterId* mutable_cluster_id();
  inline ::hbase::pb::ClusterId* release_cluster_id();
  inline void set_allocated_cluster_id(::hbase::pb::ClusterId* cluster_id);

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  inline int master_coprocessors_size() const;
  inline void clear_master_coprocessors();
  static const int kMasterCoprocessorsFieldNumber = 6;
  inline const ::hbase::pb::Coprocessor& master_coprocessors(int index) const;
  inline ::hbase::pb::Coprocessor* mutable_master_coprocessors(int index);
  inline ::hbase::pb::Coprocessor* add_master_coprocessors();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >&
      master_coprocessors() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >*
      mutable_master_coprocessors();

  // optional .hbase.pb.ServerName master = 7;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 7;
  inline const ::hbase::pb::ServerName& master() const;
  inline ::hbase::pb::ServerName* mutable_master();
  inline ::hbase::pb::ServerName* release_master();
  inline void set_allocated_master(::hbase::pb::ServerName* master);

  // repeated .hbase.pb.ServerName backup_masters = 8;
  inline int backup_masters_size() const;
  inline void clear_backup_masters();
  static const int kBackupMastersFieldNumber = 8;
  inline const ::hbase::pb::ServerName& backup_masters(int index) const;
  inline ::hbase::pb::ServerName* mutable_backup_masters(int index);
  inline ::hbase::pb::ServerName* add_backup_masters();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
      backup_masters() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
      mutable_backup_masters();

  // optional bool balancer_on = 9;
  inline bool has_balancer_on() const;
  inline void clear_balancer_on();
  static const int kBalancerOnFieldNumber = 9;
  inline bool balancer_on() const;
  inline void set_balancer_on(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ClusterStatus)
 private:
  inline void set_has_hbase_version();
  inline void clear_has_hbase_version();
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();
  inline void set_has_master();
  inline void clear_has_master();
  inline void set_has_balancer_on();
  inline void clear_has_balancer_on();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::HBaseVersionFileContent* hbase_version_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::LiveServerInfo > live_servers_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName > dead_servers_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInTransition > regions_in_transition_;
  ::hbase::pb::ClusterId* cluster_id_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor > master_coprocessors_;
  ::hbase::pb::ServerName* master_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName > backup_masters_;
  bool balancer_on_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ClusterStatus_2eproto();
  friend void protobuf_AssignDesc_ClusterStatus_2eproto();
  friend void protobuf_ShutdownFile_ClusterStatus_2eproto();

  void InitAsDefaultInstance();
  static ClusterStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// RegionState

// required .hbase.pb.RegionInfo region_info = 1;
inline bool RegionState::has_region_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionState::set_has_region_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionState::clear_has_region_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionState::clear_region_info() {
  if (region_info_ != NULL) region_info_->::hbase::pb::RegionInfo::Clear();
  clear_has_region_info();
}
inline const ::hbase::pb::RegionInfo& RegionState::region_info() const {
  return region_info_ != NULL ? *region_info_ : *default_instance_->region_info_;
}
inline ::hbase::pb::RegionInfo* RegionState::mutable_region_info() {
  set_has_region_info();
  if (region_info_ == NULL) region_info_ = new ::hbase::pb::RegionInfo;
  return region_info_;
}
inline ::hbase::pb::RegionInfo* RegionState::release_region_info() {
  clear_has_region_info();
  ::hbase::pb::RegionInfo* temp = region_info_;
  region_info_ = NULL;
  return temp;
}
inline void RegionState::set_allocated_region_info(::hbase::pb::RegionInfo* region_info) {
  delete region_info_;
  region_info_ = region_info;
  if (region_info) {
    set_has_region_info();
  } else {
    clear_has_region_info();
  }
}

// required .hbase.pb.RegionState.State state = 2;
inline bool RegionState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::hbase::pb::RegionState_State RegionState::state() const {
  return static_cast< ::hbase::pb::RegionState_State >(state_);
}
inline void RegionState::set_state(::hbase::pb::RegionState_State value) {
  assert(::hbase::pb::RegionState_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint64 stamp = 3;
inline bool RegionState::has_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionState::set_has_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionState::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionState::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::uint64 RegionState::stamp() const {
  return stamp_;
}
inline void RegionState::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
}

// -------------------------------------------------------------------

// RegionInTransition

// required .hbase.pb.RegionSpecifier spec = 1;
inline bool RegionInTransition::has_spec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionInTransition::set_has_spec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionInTransition::clear_has_spec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionInTransition::clear_spec() {
  if (spec_ != NULL) spec_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_spec();
}
inline const ::hbase::pb::RegionSpecifier& RegionInTransition::spec() const {
  return spec_ != NULL ? *spec_ : *default_instance_->spec_;
}
inline ::hbase::pb::RegionSpecifier* RegionInTransition::mutable_spec() {
  set_has_spec();
  if (spec_ == NULL) spec_ = new ::hbase::pb::RegionSpecifier;
  return spec_;
}
inline ::hbase::pb::RegionSpecifier* RegionInTransition::release_spec() {
  clear_has_spec();
  ::hbase::pb::RegionSpecifier* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline void RegionInTransition::set_allocated_spec(::hbase::pb::RegionSpecifier* spec) {
  delete spec_;
  spec_ = spec;
  if (spec) {
    set_has_spec();
  } else {
    clear_has_spec();
  }
}

// required .hbase.pb.RegionState region_state = 2;
inline bool RegionInTransition::has_region_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionInTransition::set_has_region_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionInTransition::clear_has_region_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionInTransition::clear_region_state() {
  if (region_state_ != NULL) region_state_->::hbase::pb::RegionState::Clear();
  clear_has_region_state();
}
inline const ::hbase::pb::RegionState& RegionInTransition::region_state() const {
  return region_state_ != NULL ? *region_state_ : *default_instance_->region_state_;
}
inline ::hbase::pb::RegionState* RegionInTransition::mutable_region_state() {
  set_has_region_state();
  if (region_state_ == NULL) region_state_ = new ::hbase::pb::RegionState;
  return region_state_;
}
inline ::hbase::pb::RegionState* RegionInTransition::release_region_state() {
  clear_has_region_state();
  ::hbase::pb::RegionState* temp = region_state_;
  region_state_ = NULL;
  return temp;
}
inline void RegionInTransition::set_allocated_region_state(::hbase::pb::RegionState* region_state) {
  delete region_state_;
  region_state_ = region_state;
  if (region_state) {
    set_has_region_state();
  } else {
    clear_has_region_state();
  }
}

// -------------------------------------------------------------------

// StoreSequenceId

// required bytes family_name = 1;
inline bool StoreSequenceId::has_family_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreSequenceId::set_has_family_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreSequenceId::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreSequenceId::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& StoreSequenceId::family_name() const {
  return *family_name_;
}
inline void StoreSequenceId::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void StoreSequenceId::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void StoreSequenceId::set_family_name(const void* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StoreSequenceId::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* StoreSequenceId::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StoreSequenceId::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 sequence_id = 2;
inline bool StoreSequenceId::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreSequenceId::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreSequenceId::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreSequenceId::clear_sequence_id() {
  sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence_id();
}
inline ::google::protobuf::uint64 StoreSequenceId::sequence_id() const {
  return sequence_id_;
}
inline void StoreSequenceId::set_sequence_id(::google::protobuf::uint64 value) {
  set_has_sequence_id();
  sequence_id_ = value;
}

// -------------------------------------------------------------------

// RegionStoreSequenceIds

// required uint64 last_flushed_sequence_id = 1;
inline bool RegionStoreSequenceIds::has_last_flushed_sequence_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionStoreSequenceIds::set_has_last_flushed_sequence_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionStoreSequenceIds::clear_has_last_flushed_sequence_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionStoreSequenceIds::clear_last_flushed_sequence_id() {
  last_flushed_sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_last_flushed_sequence_id();
}
inline ::google::protobuf::uint64 RegionStoreSequenceIds::last_flushed_sequence_id() const {
  return last_flushed_sequence_id_;
}
inline void RegionStoreSequenceIds::set_last_flushed_sequence_id(::google::protobuf::uint64 value) {
  set_has_last_flushed_sequence_id();
  last_flushed_sequence_id_ = value;
}

// repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
inline int RegionStoreSequenceIds::store_sequence_id_size() const {
  return store_sequence_id_.size();
}
inline void RegionStoreSequenceIds::clear_store_sequence_id() {
  store_sequence_id_.Clear();
}
inline const ::hbase::pb::StoreSequenceId& RegionStoreSequenceIds::store_sequence_id(int index) const {
  return store_sequence_id_.Get(index);
}
inline ::hbase::pb::StoreSequenceId* RegionStoreSequenceIds::mutable_store_sequence_id(int index) {
  return store_sequence_id_.Mutable(index);
}
inline ::hbase::pb::StoreSequenceId* RegionStoreSequenceIds::add_store_sequence_id() {
  return store_sequence_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >&
RegionStoreSequenceIds::store_sequence_id() const {
  return store_sequence_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >*
RegionStoreSequenceIds::mutable_store_sequence_id() {
  return &store_sequence_id_;
}

// -------------------------------------------------------------------

// RegionLoad

// required .hbase.pb.RegionSpecifier region_specifier = 1;
inline bool RegionLoad::has_region_specifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionLoad::set_has_region_specifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionLoad::clear_has_region_specifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionLoad::clear_region_specifier() {
  if (region_specifier_ != NULL) region_specifier_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region_specifier();
}
inline const ::hbase::pb::RegionSpecifier& RegionLoad::region_specifier() const {
  return region_specifier_ != NULL ? *region_specifier_ : *default_instance_->region_specifier_;
}
inline ::hbase::pb::RegionSpecifier* RegionLoad::mutable_region_specifier() {
  set_has_region_specifier();
  if (region_specifier_ == NULL) region_specifier_ = new ::hbase::pb::RegionSpecifier;
  return region_specifier_;
}
inline ::hbase::pb::RegionSpecifier* RegionLoad::release_region_specifier() {
  clear_has_region_specifier();
  ::hbase::pb::RegionSpecifier* temp = region_specifier_;
  region_specifier_ = NULL;
  return temp;
}
inline void RegionLoad::set_allocated_region_specifier(::hbase::pb::RegionSpecifier* region_specifier) {
  delete region_specifier_;
  region_specifier_ = region_specifier;
  if (region_specifier) {
    set_has_region_specifier();
  } else {
    clear_has_region_specifier();
  }
}

// optional uint32 stores = 2;
inline bool RegionLoad::has_stores() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionLoad::set_has_stores() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionLoad::clear_has_stores() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionLoad::clear_stores() {
  stores_ = 0u;
  clear_has_stores();
}
inline ::google::protobuf::uint32 RegionLoad::stores() const {
  return stores_;
}
inline void RegionLoad::set_stores(::google::protobuf::uint32 value) {
  set_has_stores();
  stores_ = value;
}

// optional uint32 storefiles = 3;
inline bool RegionLoad::has_storefiles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionLoad::set_has_storefiles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionLoad::clear_has_storefiles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionLoad::clear_storefiles() {
  storefiles_ = 0u;
  clear_has_storefiles();
}
inline ::google::protobuf::uint32 RegionLoad::storefiles() const {
  return storefiles_;
}
inline void RegionLoad::set_storefiles(::google::protobuf::uint32 value) {
  set_has_storefiles();
  storefiles_ = value;
}

// optional uint32 store_uncompressed_size_MB = 4;
inline bool RegionLoad::has_store_uncompressed_size_mb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionLoad::set_has_store_uncompressed_size_mb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionLoad::clear_has_store_uncompressed_size_mb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionLoad::clear_store_uncompressed_size_mb() {
  store_uncompressed_size_mb_ = 0u;
  clear_has_store_uncompressed_size_mb();
}
inline ::google::protobuf::uint32 RegionLoad::store_uncompressed_size_mb() const {
  return store_uncompressed_size_mb_;
}
inline void RegionLoad::set_store_uncompressed_size_mb(::google::protobuf::uint32 value) {
  set_has_store_uncompressed_size_mb();
  store_uncompressed_size_mb_ = value;
}

// optional uint32 storefile_size_MB = 5;
inline bool RegionLoad::has_storefile_size_mb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegionLoad::set_has_storefile_size_mb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegionLoad::clear_has_storefile_size_mb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegionLoad::clear_storefile_size_mb() {
  storefile_size_mb_ = 0u;
  clear_has_storefile_size_mb();
}
inline ::google::protobuf::uint32 RegionLoad::storefile_size_mb() const {
  return storefile_size_mb_;
}
inline void RegionLoad::set_storefile_size_mb(::google::protobuf::uint32 value) {
  set_has_storefile_size_mb();
  storefile_size_mb_ = value;
}

// optional uint32 memstore_size_MB = 6;
inline bool RegionLoad::has_memstore_size_mb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionLoad::set_has_memstore_size_mb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionLoad::clear_has_memstore_size_mb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionLoad::clear_memstore_size_mb() {
  memstore_size_mb_ = 0u;
  clear_has_memstore_size_mb();
}
inline ::google::protobuf::uint32 RegionLoad::memstore_size_mb() const {
  return memstore_size_mb_;
}
inline void RegionLoad::set_memstore_size_mb(::google::protobuf::uint32 value) {
  set_has_memstore_size_mb();
  memstore_size_mb_ = value;
}

// optional uint32 storefile_index_size_MB = 7;
inline bool RegionLoad::has_storefile_index_size_mb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionLoad::set_has_storefile_index_size_mb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionLoad::clear_has_storefile_index_size_mb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionLoad::clear_storefile_index_size_mb() {
  storefile_index_size_mb_ = 0u;
  clear_has_storefile_index_size_mb();
}
inline ::google::protobuf::uint32 RegionLoad::storefile_index_size_mb() const {
  return storefile_index_size_mb_;
}
inline void RegionLoad::set_storefile_index_size_mb(::google::protobuf::uint32 value) {
  set_has_storefile_index_size_mb();
  storefile_index_size_mb_ = value;
}

// optional uint64 read_requests_count = 8;
inline bool RegionLoad::has_read_requests_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionLoad::set_has_read_requests_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionLoad::clear_has_read_requests_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionLoad::clear_read_requests_count() {
  read_requests_count_ = GOOGLE_ULONGLONG(0);
  clear_has_read_requests_count();
}
inline ::google::protobuf::uint64 RegionLoad::read_requests_count() const {
  return read_requests_count_;
}
inline void RegionLoad::set_read_requests_count(::google::protobuf::uint64 value) {
  set_has_read_requests_count();
  read_requests_count_ = value;
}

// optional uint64 write_requests_count = 9;
inline bool RegionLoad::has_write_requests_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegionLoad::set_has_write_requests_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegionLoad::clear_has_write_requests_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegionLoad::clear_write_requests_count() {
  write_requests_count_ = GOOGLE_ULONGLONG(0);
  clear_has_write_requests_count();
}
inline ::google::protobuf::uint64 RegionLoad::write_requests_count() const {
  return write_requests_count_;
}
inline void RegionLoad::set_write_requests_count(::google::protobuf::uint64 value) {
  set_has_write_requests_count();
  write_requests_count_ = value;
}

// optional uint64 total_compacting_KVs = 10;
inline bool RegionLoad::has_total_compacting_kvs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegionLoad::set_has_total_compacting_kvs() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegionLoad::clear_has_total_compacting_kvs() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegionLoad::clear_total_compacting_kvs() {
  total_compacting_kvs_ = GOOGLE_ULONGLONG(0);
  clear_has_total_compacting_kvs();
}
inline ::google::protobuf::uint64 RegionLoad::total_compacting_kvs() const {
  return total_compacting_kvs_;
}
inline void RegionLoad::set_total_compacting_kvs(::google::protobuf::uint64 value) {
  set_has_total_compacting_kvs();
  total_compacting_kvs_ = value;
}

// optional uint64 current_compacted_KVs = 11;
inline bool RegionLoad::has_current_compacted_kvs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegionLoad::set_has_current_compacted_kvs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegionLoad::clear_has_current_compacted_kvs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegionLoad::clear_current_compacted_kvs() {
  current_compacted_kvs_ = GOOGLE_ULONGLONG(0);
  clear_has_current_compacted_kvs();
}
inline ::google::protobuf::uint64 RegionLoad::current_compacted_kvs() const {
  return current_compacted_kvs_;
}
inline void RegionLoad::set_current_compacted_kvs(::google::protobuf::uint64 value) {
  set_has_current_compacted_kvs();
  current_compacted_kvs_ = value;
}

// optional uint32 root_index_size_KB = 12;
inline bool RegionLoad::has_root_index_size_kb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegionLoad::set_has_root_index_size_kb() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RegionLoad::clear_has_root_index_size_kb() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RegionLoad::clear_root_index_size_kb() {
  root_index_size_kb_ = 0u;
  clear_has_root_index_size_kb();
}
inline ::google::protobuf::uint32 RegionLoad::root_index_size_kb() const {
  return root_index_size_kb_;
}
inline void RegionLoad::set_root_index_size_kb(::google::protobuf::uint32 value) {
  set_has_root_index_size_kb();
  root_index_size_kb_ = value;
}

// optional uint32 total_static_index_size_KB = 13;
inline bool RegionLoad::has_total_static_index_size_kb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RegionLoad::set_has_total_static_index_size_kb() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RegionLoad::clear_has_total_static_index_size_kb() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RegionLoad::clear_total_static_index_size_kb() {
  total_static_index_size_kb_ = 0u;
  clear_has_total_static_index_size_kb();
}
inline ::google::protobuf::uint32 RegionLoad::total_static_index_size_kb() const {
  return total_static_index_size_kb_;
}
inline void RegionLoad::set_total_static_index_size_kb(::google::protobuf::uint32 value) {
  set_has_total_static_index_size_kb();
  total_static_index_size_kb_ = value;
}

// optional uint32 total_static_bloom_size_KB = 14;
inline bool RegionLoad::has_total_static_bloom_size_kb() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RegionLoad::set_has_total_static_bloom_size_kb() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RegionLoad::clear_has_total_static_bloom_size_kb() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RegionLoad::clear_total_static_bloom_size_kb() {
  total_static_bloom_size_kb_ = 0u;
  clear_has_total_static_bloom_size_kb();
}
inline ::google::protobuf::uint32 RegionLoad::total_static_bloom_size_kb() const {
  return total_static_bloom_size_kb_;
}
inline void RegionLoad::set_total_static_bloom_size_kb(::google::protobuf::uint32 value) {
  set_has_total_static_bloom_size_kb();
  total_static_bloom_size_kb_ = value;
}

// optional uint64 complete_sequence_id = 15;
inline bool RegionLoad::has_complete_sequence_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RegionLoad::set_has_complete_sequence_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RegionLoad::clear_has_complete_sequence_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RegionLoad::clear_complete_sequence_id() {
  complete_sequence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_complete_sequence_id();
}
inline ::google::protobuf::uint64 RegionLoad::complete_sequence_id() const {
  return complete_sequence_id_;
}
inline void RegionLoad::set_complete_sequence_id(::google::protobuf::uint64 value) {
  set_has_complete_sequence_id();
  complete_sequence_id_ = value;
}

// optional float data_locality = 16;
inline bool RegionLoad::has_data_locality() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RegionLoad::set_has_data_locality() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RegionLoad::clear_has_data_locality() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RegionLoad::clear_data_locality() {
  data_locality_ = 0;
  clear_has_data_locality();
}
inline float RegionLoad::data_locality() const {
  return data_locality_;
}
inline void RegionLoad::set_data_locality(float value) {
  set_has_data_locality();
  data_locality_ = value;
}

// optional uint64 last_major_compaction_ts = 17 [default = 0];
inline bool RegionLoad::has_last_major_compaction_ts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RegionLoad::set_has_last_major_compaction_ts() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RegionLoad::clear_has_last_major_compaction_ts() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RegionLoad::clear_last_major_compaction_ts() {
  last_major_compaction_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_last_major_compaction_ts();
}
inline ::google::protobuf::uint64 RegionLoad::last_major_compaction_ts() const {
  return last_major_compaction_ts_;
}
inline void RegionLoad::set_last_major_compaction_ts(::google::protobuf::uint64 value) {
  set_has_last_major_compaction_ts();
  last_major_compaction_ts_ = value;
}

// repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
inline int RegionLoad::store_complete_sequence_id_size() const {
  return store_complete_sequence_id_.size();
}
inline void RegionLoad::clear_store_complete_sequence_id() {
  store_complete_sequence_id_.Clear();
}
inline const ::hbase::pb::StoreSequenceId& RegionLoad::store_complete_sequence_id(int index) const {
  return store_complete_sequence_id_.Get(index);
}
inline ::hbase::pb::StoreSequenceId* RegionLoad::mutable_store_complete_sequence_id(int index) {
  return store_complete_sequence_id_.Mutable(index);
}
inline ::hbase::pb::StoreSequenceId* RegionLoad::add_store_complete_sequence_id() {
  return store_complete_sequence_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >&
RegionLoad::store_complete_sequence_id() const {
  return store_complete_sequence_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::StoreSequenceId >*
RegionLoad::mutable_store_complete_sequence_id() {
  return &store_complete_sequence_id_;
}

// optional uint64 filtered_read_requests_count = 19;
inline bool RegionLoad::has_filtered_read_requests_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RegionLoad::set_has_filtered_read_requests_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RegionLoad::clear_has_filtered_read_requests_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RegionLoad::clear_filtered_read_requests_count() {
  filtered_read_requests_count_ = GOOGLE_ULONGLONG(0);
  clear_has_filtered_read_requests_count();
}
inline ::google::protobuf::uint64 RegionLoad::filtered_read_requests_count() const {
  return filtered_read_requests_count_;
}
inline void RegionLoad::set_filtered_read_requests_count(::google::protobuf::uint64 value) {
  set_has_filtered_read_requests_count();
  filtered_read_requests_count_ = value;
}

// -------------------------------------------------------------------

// ReplicationLoadSink

// required uint64 ageOfLastAppliedOp = 1;
inline bool ReplicationLoadSink::has_ageoflastappliedop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicationLoadSink::set_has_ageoflastappliedop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicationLoadSink::clear_has_ageoflastappliedop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicationLoadSink::clear_ageoflastappliedop() {
  ageoflastappliedop_ = GOOGLE_ULONGLONG(0);
  clear_has_ageoflastappliedop();
}
inline ::google::protobuf::uint64 ReplicationLoadSink::ageoflastappliedop() const {
  return ageoflastappliedop_;
}
inline void ReplicationLoadSink::set_ageoflastappliedop(::google::protobuf::uint64 value) {
  set_has_ageoflastappliedop();
  ageoflastappliedop_ = value;
}

// required uint64 timeStampsOfLastAppliedOp = 2;
inline bool ReplicationLoadSink::has_timestampsoflastappliedop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicationLoadSink::set_has_timestampsoflastappliedop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicationLoadSink::clear_has_timestampsoflastappliedop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicationLoadSink::clear_timestampsoflastappliedop() {
  timestampsoflastappliedop_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampsoflastappliedop();
}
inline ::google::protobuf::uint64 ReplicationLoadSink::timestampsoflastappliedop() const {
  return timestampsoflastappliedop_;
}
inline void ReplicationLoadSink::set_timestampsoflastappliedop(::google::protobuf::uint64 value) {
  set_has_timestampsoflastappliedop();
  timestampsoflastappliedop_ = value;
}

// -------------------------------------------------------------------

// ReplicationLoadSource

// required string peerID = 1;
inline bool ReplicationLoadSource::has_peerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicationLoadSource::set_has_peerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicationLoadSource::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicationLoadSource::clear_peerid() {
  if (peerid_ != &::google::protobuf::internal::kEmptyString) {
    peerid_->clear();
  }
  clear_has_peerid();
}
inline const ::std::string& ReplicationLoadSource::peerid() const {
  return *peerid_;
}
inline void ReplicationLoadSource::set_peerid(const ::std::string& value) {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::kEmptyString) {
    peerid_ = new ::std::string;
  }
  peerid_->assign(value);
}
inline void ReplicationLoadSource::set_peerid(const char* value) {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::kEmptyString) {
    peerid_ = new ::std::string;
  }
  peerid_->assign(value);
}
inline void ReplicationLoadSource::set_peerid(const char* value, size_t size) {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::kEmptyString) {
    peerid_ = new ::std::string;
  }
  peerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplicationLoadSource::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::kEmptyString) {
    peerid_ = new ::std::string;
  }
  return peerid_;
}
inline ::std::string* ReplicationLoadSource::release_peerid() {
  clear_has_peerid();
  if (peerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = peerid_;
    peerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReplicationLoadSource::set_allocated_peerid(::std::string* peerid) {
  if (peerid_ != &::google::protobuf::internal::kEmptyString) {
    delete peerid_;
  }
  if (peerid) {
    set_has_peerid();
    peerid_ = peerid;
  } else {
    clear_has_peerid();
    peerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 ageOfLastShippedOp = 2;
inline bool ReplicationLoadSource::has_ageoflastshippedop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicationLoadSource::set_has_ageoflastshippedop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicationLoadSource::clear_has_ageoflastshippedop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicationLoadSource::clear_ageoflastshippedop() {
  ageoflastshippedop_ = GOOGLE_ULONGLONG(0);
  clear_has_ageoflastshippedop();
}
inline ::google::protobuf::uint64 ReplicationLoadSource::ageoflastshippedop() const {
  return ageoflastshippedop_;
}
inline void ReplicationLoadSource::set_ageoflastshippedop(::google::protobuf::uint64 value) {
  set_has_ageoflastshippedop();
  ageoflastshippedop_ = value;
}

// required uint32 sizeOfLogQueue = 3;
inline bool ReplicationLoadSource::has_sizeoflogqueue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplicationLoadSource::set_has_sizeoflogqueue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplicationLoadSource::clear_has_sizeoflogqueue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplicationLoadSource::clear_sizeoflogqueue() {
  sizeoflogqueue_ = 0u;
  clear_has_sizeoflogqueue();
}
inline ::google::protobuf::uint32 ReplicationLoadSource::sizeoflogqueue() const {
  return sizeoflogqueue_;
}
inline void ReplicationLoadSource::set_sizeoflogqueue(::google::protobuf::uint32 value) {
  set_has_sizeoflogqueue();
  sizeoflogqueue_ = value;
}

// required uint64 timeStampOfLastShippedOp = 4;
inline bool ReplicationLoadSource::has_timestampoflastshippedop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplicationLoadSource::set_has_timestampoflastshippedop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplicationLoadSource::clear_has_timestampoflastshippedop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplicationLoadSource::clear_timestampoflastshippedop() {
  timestampoflastshippedop_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampoflastshippedop();
}
inline ::google::protobuf::uint64 ReplicationLoadSource::timestampoflastshippedop() const {
  return timestampoflastshippedop_;
}
inline void ReplicationLoadSource::set_timestampoflastshippedop(::google::protobuf::uint64 value) {
  set_has_timestampoflastshippedop();
  timestampoflastshippedop_ = value;
}

// required uint64 replicationLag = 5;
inline bool ReplicationLoadSource::has_replicationlag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplicationLoadSource::set_has_replicationlag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplicationLoadSource::clear_has_replicationlag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplicationLoadSource::clear_replicationlag() {
  replicationlag_ = GOOGLE_ULONGLONG(0);
  clear_has_replicationlag();
}
inline ::google::protobuf::uint64 ReplicationLoadSource::replicationlag() const {
  return replicationlag_;
}
inline void ReplicationLoadSource::set_replicationlag(::google::protobuf::uint64 value) {
  set_has_replicationlag();
  replicationlag_ = value;
}

// -------------------------------------------------------------------

// ServerLoad

// optional uint64 number_of_requests = 1;
inline bool ServerLoad::has_number_of_requests() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerLoad::set_has_number_of_requests() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerLoad::clear_has_number_of_requests() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerLoad::clear_number_of_requests() {
  number_of_requests_ = GOOGLE_ULONGLONG(0);
  clear_has_number_of_requests();
}
inline ::google::protobuf::uint64 ServerLoad::number_of_requests() const {
  return number_of_requests_;
}
inline void ServerLoad::set_number_of_requests(::google::protobuf::uint64 value) {
  set_has_number_of_requests();
  number_of_requests_ = value;
}

// optional uint64 total_number_of_requests = 2;
inline bool ServerLoad::has_total_number_of_requests() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerLoad::set_has_total_number_of_requests() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerLoad::clear_has_total_number_of_requests() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerLoad::clear_total_number_of_requests() {
  total_number_of_requests_ = GOOGLE_ULONGLONG(0);
  clear_has_total_number_of_requests();
}
inline ::google::protobuf::uint64 ServerLoad::total_number_of_requests() const {
  return total_number_of_requests_;
}
inline void ServerLoad::set_total_number_of_requests(::google::protobuf::uint64 value) {
  set_has_total_number_of_requests();
  total_number_of_requests_ = value;
}

// optional uint32 used_heap_MB = 3;
inline bool ServerLoad::has_used_heap_mb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerLoad::set_has_used_heap_mb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerLoad::clear_has_used_heap_mb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerLoad::clear_used_heap_mb() {
  used_heap_mb_ = 0u;
  clear_has_used_heap_mb();
}
inline ::google::protobuf::uint32 ServerLoad::used_heap_mb() const {
  return used_heap_mb_;
}
inline void ServerLoad::set_used_heap_mb(::google::protobuf::uint32 value) {
  set_has_used_heap_mb();
  used_heap_mb_ = value;
}

// optional uint32 max_heap_MB = 4;
inline bool ServerLoad::has_max_heap_mb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerLoad::set_has_max_heap_mb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerLoad::clear_has_max_heap_mb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerLoad::clear_max_heap_mb() {
  max_heap_mb_ = 0u;
  clear_has_max_heap_mb();
}
inline ::google::protobuf::uint32 ServerLoad::max_heap_mb() const {
  return max_heap_mb_;
}
inline void ServerLoad::set_max_heap_mb(::google::protobuf::uint32 value) {
  set_has_max_heap_mb();
  max_heap_mb_ = value;
}

// repeated .hbase.pb.RegionLoad region_loads = 5;
inline int ServerLoad::region_loads_size() const {
  return region_loads_.size();
}
inline void ServerLoad::clear_region_loads() {
  region_loads_.Clear();
}
inline const ::hbase::pb::RegionLoad& ServerLoad::region_loads(int index) const {
  return region_loads_.Get(index);
}
inline ::hbase::pb::RegionLoad* ServerLoad::mutable_region_loads(int index) {
  return region_loads_.Mutable(index);
}
inline ::hbase::pb::RegionLoad* ServerLoad::add_region_loads() {
  return region_loads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionLoad >&
ServerLoad::region_loads() const {
  return region_loads_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionLoad >*
ServerLoad::mutable_region_loads() {
  return &region_loads_;
}

// repeated .hbase.pb.Coprocessor coprocessors = 6;
inline int ServerLoad::coprocessors_size() const {
  return coprocessors_.size();
}
inline void ServerLoad::clear_coprocessors() {
  coprocessors_.Clear();
}
inline const ::hbase::pb::Coprocessor& ServerLoad::coprocessors(int index) const {
  return coprocessors_.Get(index);
}
inline ::hbase::pb::Coprocessor* ServerLoad::mutable_coprocessors(int index) {
  return coprocessors_.Mutable(index);
}
inline ::hbase::pb::Coprocessor* ServerLoad::add_coprocessors() {
  return coprocessors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >&
ServerLoad::coprocessors() const {
  return coprocessors_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >*
ServerLoad::mutable_coprocessors() {
  return &coprocessors_;
}

// optional uint64 report_start_time = 7;
inline bool ServerLoad::has_report_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerLoad::set_has_report_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerLoad::clear_has_report_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerLoad::clear_report_start_time() {
  report_start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_report_start_time();
}
inline ::google::protobuf::uint64 ServerLoad::report_start_time() const {
  return report_start_time_;
}
inline void ServerLoad::set_report_start_time(::google::protobuf::uint64 value) {
  set_has_report_start_time();
  report_start_time_ = value;
}

// optional uint64 report_end_time = 8;
inline bool ServerLoad::has_report_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerLoad::set_has_report_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerLoad::clear_has_report_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerLoad::clear_report_end_time() {
  report_end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_report_end_time();
}
inline ::google::protobuf::uint64 ServerLoad::report_end_time() const {
  return report_end_time_;
}
inline void ServerLoad::set_report_end_time(::google::protobuf::uint64 value) {
  set_has_report_end_time();
  report_end_time_ = value;
}

// optional uint32 info_server_port = 9;
inline bool ServerLoad::has_info_server_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerLoad::set_has_info_server_port() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerLoad::clear_has_info_server_port() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerLoad::clear_info_server_port() {
  info_server_port_ = 0u;
  clear_has_info_server_port();
}
inline ::google::protobuf::uint32 ServerLoad::info_server_port() const {
  return info_server_port_;
}
inline void ServerLoad::set_info_server_port(::google::protobuf::uint32 value) {
  set_has_info_server_port();
  info_server_port_ = value;
}

// repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
inline int ServerLoad::replloadsource_size() const {
  return replloadsource_.size();
}
inline void ServerLoad::clear_replloadsource() {
  replloadsource_.Clear();
}
inline const ::hbase::pb::ReplicationLoadSource& ServerLoad::replloadsource(int index) const {
  return replloadsource_.Get(index);
}
inline ::hbase::pb::ReplicationLoadSource* ServerLoad::mutable_replloadsource(int index) {
  return replloadsource_.Mutable(index);
}
inline ::hbase::pb::ReplicationLoadSource* ServerLoad::add_replloadsource() {
  return replloadsource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ReplicationLoadSource >&
ServerLoad::replloadsource() const {
  return replloadsource_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ReplicationLoadSource >*
ServerLoad::mutable_replloadsource() {
  return &replloadsource_;
}

// optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
inline bool ServerLoad::has_replloadsink() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerLoad::set_has_replloadsink() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerLoad::clear_has_replloadsink() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerLoad::clear_replloadsink() {
  if (replloadsink_ != NULL) replloadsink_->::hbase::pb::ReplicationLoadSink::Clear();
  clear_has_replloadsink();
}
inline const ::hbase::pb::ReplicationLoadSink& ServerLoad::replloadsink() const {
  return replloadsink_ != NULL ? *replloadsink_ : *default_instance_->replloadsink_;
}
inline ::hbase::pb::ReplicationLoadSink* ServerLoad::mutable_replloadsink() {
  set_has_replloadsink();
  if (replloadsink_ == NULL) replloadsink_ = new ::hbase::pb::ReplicationLoadSink;
  return replloadsink_;
}
inline ::hbase::pb::ReplicationLoadSink* ServerLoad::release_replloadsink() {
  clear_has_replloadsink();
  ::hbase::pb::ReplicationLoadSink* temp = replloadsink_;
  replloadsink_ = NULL;
  return temp;
}
inline void ServerLoad::set_allocated_replloadsink(::hbase::pb::ReplicationLoadSink* replloadsink) {
  delete replloadsink_;
  replloadsink_ = replloadsink;
  if (replloadsink) {
    set_has_replloadsink();
  } else {
    clear_has_replloadsink();
  }
}

// -------------------------------------------------------------------

// LiveServerInfo

// required .hbase.pb.ServerName server = 1;
inline bool LiveServerInfo::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveServerInfo::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveServerInfo::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveServerInfo::clear_server() {
  if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
  clear_has_server();
}
inline const ::hbase::pb::ServerName& LiveServerInfo::server() const {
  return server_ != NULL ? *server_ : *default_instance_->server_;
}
inline ::hbase::pb::ServerName* LiveServerInfo::mutable_server() {
  set_has_server();
  if (server_ == NULL) server_ = new ::hbase::pb::ServerName;
  return server_;
}
inline ::hbase::pb::ServerName* LiveServerInfo::release_server() {
  clear_has_server();
  ::hbase::pb::ServerName* temp = server_;
  server_ = NULL;
  return temp;
}
inline void LiveServerInfo::set_allocated_server(::hbase::pb::ServerName* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
}

// required .hbase.pb.ServerLoad server_load = 2;
inline bool LiveServerInfo::has_server_load() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveServerInfo::set_has_server_load() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveServerInfo::clear_has_server_load() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveServerInfo::clear_server_load() {
  if (server_load_ != NULL) server_load_->::hbase::pb::ServerLoad::Clear();
  clear_has_server_load();
}
inline const ::hbase::pb::ServerLoad& LiveServerInfo::server_load() const {
  return server_load_ != NULL ? *server_load_ : *default_instance_->server_load_;
}
inline ::hbase::pb::ServerLoad* LiveServerInfo::mutable_server_load() {
  set_has_server_load();
  if (server_load_ == NULL) server_load_ = new ::hbase::pb::ServerLoad;
  return server_load_;
}
inline ::hbase::pb::ServerLoad* LiveServerInfo::release_server_load() {
  clear_has_server_load();
  ::hbase::pb::ServerLoad* temp = server_load_;
  server_load_ = NULL;
  return temp;
}
inline void LiveServerInfo::set_allocated_server_load(::hbase::pb::ServerLoad* server_load) {
  delete server_load_;
  server_load_ = server_load;
  if (server_load) {
    set_has_server_load();
  } else {
    clear_has_server_load();
  }
}

// -------------------------------------------------------------------

// ClusterStatus

// optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
inline bool ClusterStatus::has_hbase_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterStatus::set_has_hbase_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterStatus::clear_has_hbase_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterStatus::clear_hbase_version() {
  if (hbase_version_ != NULL) hbase_version_->::hbase::pb::HBaseVersionFileContent::Clear();
  clear_has_hbase_version();
}
inline const ::hbase::pb::HBaseVersionFileContent& ClusterStatus::hbase_version() const {
  return hbase_version_ != NULL ? *hbase_version_ : *default_instance_->hbase_version_;
}
inline ::hbase::pb::HBaseVersionFileContent* ClusterStatus::mutable_hbase_version() {
  set_has_hbase_version();
  if (hbase_version_ == NULL) hbase_version_ = new ::hbase::pb::HBaseVersionFileContent;
  return hbase_version_;
}
inline ::hbase::pb::HBaseVersionFileContent* ClusterStatus::release_hbase_version() {
  clear_has_hbase_version();
  ::hbase::pb::HBaseVersionFileContent* temp = hbase_version_;
  hbase_version_ = NULL;
  return temp;
}
inline void ClusterStatus::set_allocated_hbase_version(::hbase::pb::HBaseVersionFileContent* hbase_version) {
  delete hbase_version_;
  hbase_version_ = hbase_version;
  if (hbase_version) {
    set_has_hbase_version();
  } else {
    clear_has_hbase_version();
  }
}

// repeated .hbase.pb.LiveServerInfo live_servers = 2;
inline int ClusterStatus::live_servers_size() const {
  return live_servers_.size();
}
inline void ClusterStatus::clear_live_servers() {
  live_servers_.Clear();
}
inline const ::hbase::pb::LiveServerInfo& ClusterStatus::live_servers(int index) const {
  return live_servers_.Get(index);
}
inline ::hbase::pb::LiveServerInfo* ClusterStatus::mutable_live_servers(int index) {
  return live_servers_.Mutable(index);
}
inline ::hbase::pb::LiveServerInfo* ClusterStatus::add_live_servers() {
  return live_servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::LiveServerInfo >&
ClusterStatus::live_servers() const {
  return live_servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::LiveServerInfo >*
ClusterStatus::mutable_live_servers() {
  return &live_servers_;
}

// repeated .hbase.pb.ServerName dead_servers = 3;
inline int ClusterStatus::dead_servers_size() const {
  return dead_servers_.size();
}
inline void ClusterStatus::clear_dead_servers() {
  dead_servers_.Clear();
}
inline const ::hbase::pb::ServerName& ClusterStatus::dead_servers(int index) const {
  return dead_servers_.Get(index);
}
inline ::hbase::pb::ServerName* ClusterStatus::mutable_dead_servers(int index) {
  return dead_servers_.Mutable(index);
}
inline ::hbase::pb::ServerName* ClusterStatus::add_dead_servers() {
  return dead_servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
ClusterStatus::dead_servers() const {
  return dead_servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
ClusterStatus::mutable_dead_servers() {
  return &dead_servers_;
}

// repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
inline int ClusterStatus::regions_in_transition_size() const {
  return regions_in_transition_.size();
}
inline void ClusterStatus::clear_regions_in_transition() {
  regions_in_transition_.Clear();
}
inline const ::hbase::pb::RegionInTransition& ClusterStatus::regions_in_transition(int index) const {
  return regions_in_transition_.Get(index);
}
inline ::hbase::pb::RegionInTransition* ClusterStatus::mutable_regions_in_transition(int index) {
  return regions_in_transition_.Mutable(index);
}
inline ::hbase::pb::RegionInTransition* ClusterStatus::add_regions_in_transition() {
  return regions_in_transition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInTransition >&
ClusterStatus::regions_in_transition() const {
  return regions_in_transition_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInTransition >*
ClusterStatus::mutable_regions_in_transition() {
  return &regions_in_transition_;
}

// optional .hbase.pb.ClusterId cluster_id = 5;
inline bool ClusterStatus::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClusterStatus::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClusterStatus::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClusterStatus::clear_cluster_id() {
  if (cluster_id_ != NULL) cluster_id_->::hbase::pb::ClusterId::Clear();
  clear_has_cluster_id();
}
inline const ::hbase::pb::ClusterId& ClusterStatus::cluster_id() const {
  return cluster_id_ != NULL ? *cluster_id_ : *default_instance_->cluster_id_;
}
inline ::hbase::pb::ClusterId* ClusterStatus::mutable_cluster_id() {
  set_has_cluster_id();
  if (cluster_id_ == NULL) cluster_id_ = new ::hbase::pb::ClusterId;
  return cluster_id_;
}
inline ::hbase::pb::ClusterId* ClusterStatus::release_cluster_id() {
  clear_has_cluster_id();
  ::hbase::pb::ClusterId* temp = cluster_id_;
  cluster_id_ = NULL;
  return temp;
}
inline void ClusterStatus::set_allocated_cluster_id(::hbase::pb::ClusterId* cluster_id) {
  delete cluster_id_;
  cluster_id_ = cluster_id;
  if (cluster_id) {
    set_has_cluster_id();
  } else {
    clear_has_cluster_id();
  }
}

// repeated .hbase.pb.Coprocessor master_coprocessors = 6;
inline int ClusterStatus::master_coprocessors_size() const {
  return master_coprocessors_.size();
}
inline void ClusterStatus::clear_master_coprocessors() {
  master_coprocessors_.Clear();
}
inline const ::hbase::pb::Coprocessor& ClusterStatus::master_coprocessors(int index) const {
  return master_coprocessors_.Get(index);
}
inline ::hbase::pb::Coprocessor* ClusterStatus::mutable_master_coprocessors(int index) {
  return master_coprocessors_.Mutable(index);
}
inline ::hbase::pb::Coprocessor* ClusterStatus::add_master_coprocessors() {
  return master_coprocessors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >&
ClusterStatus::master_coprocessors() const {
  return master_coprocessors_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::Coprocessor >*
ClusterStatus::mutable_master_coprocessors() {
  return &master_coprocessors_;
}

// optional .hbase.pb.ServerName master = 7;
inline bool ClusterStatus::has_master() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClusterStatus::set_has_master() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClusterStatus::clear_has_master() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClusterStatus::clear_master() {
  if (master_ != NULL) master_->::hbase::pb::ServerName::Clear();
  clear_has_master();
}
inline const ::hbase::pb::ServerName& ClusterStatus::master() const {
  return master_ != NULL ? *master_ : *default_instance_->master_;
}
inline ::hbase::pb::ServerName* ClusterStatus::mutable_master() {
  set_has_master();
  if (master_ == NULL) master_ = new ::hbase::pb::ServerName;
  return master_;
}
inline ::hbase::pb::ServerName* ClusterStatus::release_master() {
  clear_has_master();
  ::hbase::pb::ServerName* temp = master_;
  master_ = NULL;
  return temp;
}
inline void ClusterStatus::set_allocated_master(::hbase::pb::ServerName* master) {
  delete master_;
  master_ = master;
  if (master) {
    set_has_master();
  } else {
    clear_has_master();
  }
}

// repeated .hbase.pb.ServerName backup_masters = 8;
inline int ClusterStatus::backup_masters_size() const {
  return backup_masters_.size();
}
inline void ClusterStatus::clear_backup_masters() {
  backup_masters_.Clear();
}
inline const ::hbase::pb::ServerName& ClusterStatus::backup_masters(int index) const {
  return backup_masters_.Get(index);
}
inline ::hbase::pb::ServerName* ClusterStatus::mutable_backup_masters(int index) {
  return backup_masters_.Mutable(index);
}
inline ::hbase::pb::ServerName* ClusterStatus::add_backup_masters() {
  return backup_masters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
ClusterStatus::backup_masters() const {
  return backup_masters_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
ClusterStatus::mutable_backup_masters() {
  return &backup_masters_;
}

// optional bool balancer_on = 9;
inline bool ClusterStatus::has_balancer_on() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClusterStatus::set_has_balancer_on() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClusterStatus::clear_has_balancer_on() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClusterStatus::clear_balancer_on() {
  balancer_on_ = false;
  clear_has_balancer_on();
}
inline bool ClusterStatus::balancer_on() const {
  return balancer_on_;
}
inline void ClusterStatus::set_balancer_on(bool value) {
  set_has_balancer_on();
  balancer_on_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::RegionState_State>() {
  return ::hbase::pb::RegionState_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClusterStatus_2eproto__INCLUDED
