// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Master.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* AddColumnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddColumnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddColumnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddColumnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteColumnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteColumnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteColumnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteColumnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyColumnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyColumnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyColumnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyColumnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DispatchMergingRegionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DispatchMergingRegionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DispatchMergingRegionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DispatchMergingRegionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnassignRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnassignRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnassignRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnassignRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisableTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisableTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisableTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisableTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateNamespaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateNamespaceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateNamespaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateNamespaceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteNamespaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteNamespaceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteNamespaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteNamespaceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyNamespaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyNamespaceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyNamespaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyNamespaceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNamespaceDescriptorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNamespaceDescriptorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNamespaceDescriptorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNamespaceDescriptorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListNamespaceDescriptorsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListNamespaceDescriptorsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListNamespaceDescriptorsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListNamespaceDescriptorsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTableDescriptorsByNamespaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTableDescriptorsByNamespaceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTableDescriptorsByNamespaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTableDescriptorsByNamespaceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTableNamesByNamespaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTableNamesByNamespaceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTableNamesByNamespaceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTableNamesByNamespaceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopMasterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopMasterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopMasterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopMasterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBalancerRunningRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBalancerRunningRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBalancerRunningResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBalancerRunningResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsBalancerEnabledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsBalancerEnabledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsBalancerEnabledResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsBalancerEnabledResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSplitOrMergeEnabledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSplitOrMergeEnabledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSplitOrMergeEnabledResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSplitOrMergeEnabledResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsSplitOrMergeEnabledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsSplitOrMergeEnabledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsSplitOrMergeEnabledResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsSplitOrMergeEnabledResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetNormalizerRunningRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetNormalizerRunningRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetNormalizerRunningResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetNormalizerRunningResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsNormalizerEnabledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsNormalizerEnabledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsNormalizerEnabledResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsNormalizerEnabledResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunCatalogScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunCatalogScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunCatalogScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunCatalogScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableCatalogJanitorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableCatalogJanitorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableCatalogJanitorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableCatalogJanitorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsCatalogJanitorEnabledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsCatalogJanitorEnabledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsCatalogJanitorEnabledResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsCatalogJanitorEnabledResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCompletedSnapshotsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCompletedSnapshotsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCompletedSnapshotsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCompletedSnapshotsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSnapshotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSnapshotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSnapshotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSnapshotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreSnapshotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreSnapshotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreSnapshotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreSnapshotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsSnapshotDoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsSnapshotDoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsSnapshotDoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsSnapshotDoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsRestoreSnapshotDoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsRestoreSnapshotDoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsRestoreSnapshotDoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsRestoreSnapshotDoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSchemaAlterStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSchemaAlterStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSchemaAlterStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSchemaAlterStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableDescriptorsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableDescriptorsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableDescriptorsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableDescriptorsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableNamesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableNamesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableNamesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableNamesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsMasterRunningRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsMasterRunningRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsMasterRunningResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsMasterRunningResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecProcedureRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecProcedureRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecProcedureResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecProcedureResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsProcedureDoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsProcedureDoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsProcedureDoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsProcedureDoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProcedureResultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProcedureResultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProcedureResultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProcedureResultResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetProcedureResultResponse_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AbortProcedureRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbortProcedureRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbortProcedureResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbortProcedureResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListProceduresRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListProceduresRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListProceduresResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListProceduresResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetQuotaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetQuotaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetQuotaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetQuotaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MajorCompactionTimestampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MajorCompactionTimestampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MajorCompactionTimestampForRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MajorCompactionTimestampForRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MajorCompactionTimestampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MajorCompactionTimestampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityCapabilitiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityCapabilitiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityCapabilitiesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityCapabilitiesResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityCapabilitiesResponse_Capability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MasterSwitchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Master_2eproto() {
  protobuf_AddDesc_Master_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Master.proto");
  GOOGLE_CHECK(file != NULL);
  AddColumnRequest_descriptor_ = file->message_type(0);
  static const int AddColumnRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, column_families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, nonce_),
  };
  AddColumnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddColumnRequest_descriptor_,
      AddColumnRequest::default_instance_,
      AddColumnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddColumnRequest));
  AddColumnResponse_descriptor_ = file->message_type(1);
  static const int AddColumnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnResponse, proc_id_),
  };
  AddColumnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddColumnResponse_descriptor_,
      AddColumnResponse::default_instance_,
      AddColumnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddColumnResponse));
  DeleteColumnRequest_descriptor_ = file->message_type(2);
  static const int DeleteColumnRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnRequest, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnRequest, nonce_),
  };
  DeleteColumnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteColumnRequest_descriptor_,
      DeleteColumnRequest::default_instance_,
      DeleteColumnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteColumnRequest));
  DeleteColumnResponse_descriptor_ = file->message_type(3);
  static const int DeleteColumnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnResponse, proc_id_),
  };
  DeleteColumnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteColumnResponse_descriptor_,
      DeleteColumnResponse::default_instance_,
      DeleteColumnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteColumnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteColumnResponse));
  ModifyColumnRequest_descriptor_ = file->message_type(4);
  static const int ModifyColumnRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnRequest, column_families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnRequest, nonce_),
  };
  ModifyColumnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyColumnRequest_descriptor_,
      ModifyColumnRequest::default_instance_,
      ModifyColumnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyColumnRequest));
  ModifyColumnResponse_descriptor_ = file->message_type(5);
  static const int ModifyColumnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnResponse, proc_id_),
  };
  ModifyColumnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyColumnResponse_descriptor_,
      ModifyColumnResponse::default_instance_,
      ModifyColumnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyColumnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyColumnResponse));
  MoveRegionRequest_descriptor_ = file->message_type(6);
  static const int MoveRegionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRegionRequest, dest_server_name_),
  };
  MoveRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveRegionRequest_descriptor_,
      MoveRegionRequest::default_instance_,
      MoveRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveRegionRequest));
  MoveRegionResponse_descriptor_ = file->message_type(7);
  static const int MoveRegionResponse_offsets_[1] = {
  };
  MoveRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveRegionResponse_descriptor_,
      MoveRegionResponse::default_instance_,
      MoveRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveRegionResponse));
  DispatchMergingRegionsRequest_descriptor_ = file->message_type(8);
  static const int DispatchMergingRegionsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsRequest, region_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsRequest, region_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsRequest, forcible_),
  };
  DispatchMergingRegionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DispatchMergingRegionsRequest_descriptor_,
      DispatchMergingRegionsRequest::default_instance_,
      DispatchMergingRegionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DispatchMergingRegionsRequest));
  DispatchMergingRegionsResponse_descriptor_ = file->message_type(9);
  static const int DispatchMergingRegionsResponse_offsets_[1] = {
  };
  DispatchMergingRegionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DispatchMergingRegionsResponse_descriptor_,
      DispatchMergingRegionsResponse::default_instance_,
      DispatchMergingRegionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispatchMergingRegionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DispatchMergingRegionsResponse));
  AssignRegionRequest_descriptor_ = file->message_type(10);
  static const int AssignRegionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRegionRequest, region_),
  };
  AssignRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignRegionRequest_descriptor_,
      AssignRegionRequest::default_instance_,
      AssignRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignRegionRequest));
  AssignRegionResponse_descriptor_ = file->message_type(11);
  static const int AssignRegionResponse_offsets_[1] = {
  };
  AssignRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignRegionResponse_descriptor_,
      AssignRegionResponse::default_instance_,
      AssignRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignRegionResponse));
  UnassignRegionRequest_descriptor_ = file->message_type(12);
  static const int UnassignRegionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassignRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassignRegionRequest, force_),
  };
  UnassignRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnassignRegionRequest_descriptor_,
      UnassignRegionRequest::default_instance_,
      UnassignRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassignRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassignRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnassignRegionRequest));
  UnassignRegionResponse_descriptor_ = file->message_type(13);
  static const int UnassignRegionResponse_offsets_[1] = {
  };
  UnassignRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnassignRegionResponse_descriptor_,
      UnassignRegionResponse::default_instance_,
      UnassignRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassignRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassignRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnassignRegionResponse));
  OfflineRegionRequest_descriptor_ = file->message_type(14);
  static const int OfflineRegionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRegionRequest, region_),
  };
  OfflineRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineRegionRequest_descriptor_,
      OfflineRegionRequest::default_instance_,
      OfflineRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineRegionRequest));
  OfflineRegionResponse_descriptor_ = file->message_type(15);
  static const int OfflineRegionResponse_offsets_[1] = {
  };
  OfflineRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineRegionResponse_descriptor_,
      OfflineRegionResponse::default_instance_,
      OfflineRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineRegionResponse));
  CreateTableRequest_descriptor_ = file->message_type(16);
  static const int CreateTableRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, split_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, nonce_),
  };
  CreateTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTableRequest_descriptor_,
      CreateTableRequest::default_instance_,
      CreateTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTableRequest));
  CreateTableResponse_descriptor_ = file->message_type(17);
  static const int CreateTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, proc_id_),
  };
  CreateTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTableResponse_descriptor_,
      CreateTableResponse::default_instance_,
      CreateTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTableResponse));
  DeleteTableRequest_descriptor_ = file->message_type(18);
  static const int DeleteTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, nonce_),
  };
  DeleteTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTableRequest_descriptor_,
      DeleteTableRequest::default_instance_,
      DeleteTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTableRequest));
  DeleteTableResponse_descriptor_ = file->message_type(19);
  static const int DeleteTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableResponse, proc_id_),
  };
  DeleteTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTableResponse_descriptor_,
      DeleteTableResponse::default_instance_,
      DeleteTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTableResponse));
  TruncateTableRequest_descriptor_ = file->message_type(20);
  static const int TruncateTableRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, preservesplits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, nonce_),
  };
  TruncateTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateTableRequest_descriptor_,
      TruncateTableRequest::default_instance_,
      TruncateTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateTableRequest));
  TruncateTableResponse_descriptor_ = file->message_type(21);
  static const int TruncateTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableResponse, proc_id_),
  };
  TruncateTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateTableResponse_descriptor_,
      TruncateTableResponse::default_instance_,
      TruncateTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateTableResponse));
  EnableTableRequest_descriptor_ = file->message_type(22);
  static const int EnableTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableRequest, nonce_),
  };
  EnableTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableTableRequest_descriptor_,
      EnableTableRequest::default_instance_,
      EnableTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableTableRequest));
  EnableTableResponse_descriptor_ = file->message_type(23);
  static const int EnableTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableResponse, proc_id_),
  };
  EnableTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableTableResponse_descriptor_,
      EnableTableResponse::default_instance_,
      EnableTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableTableResponse));
  DisableTableRequest_descriptor_ = file->message_type(24);
  static const int DisableTableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableRequest, nonce_),
  };
  DisableTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisableTableRequest_descriptor_,
      DisableTableRequest::default_instance_,
      DisableTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisableTableRequest));
  DisableTableResponse_descriptor_ = file->message_type(25);
  static const int DisableTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableResponse, proc_id_),
  };
  DisableTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisableTableResponse_descriptor_,
      DisableTableResponse::default_instance_,
      DisableTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisableTableResponse));
  ModifyTableRequest_descriptor_ = file->message_type(26);
  static const int ModifyTableRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableRequest, table_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableRequest, nonce_),
  };
  ModifyTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyTableRequest_descriptor_,
      ModifyTableRequest::default_instance_,
      ModifyTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyTableRequest));
  ModifyTableResponse_descriptor_ = file->message_type(27);
  static const int ModifyTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableResponse, proc_id_),
  };
  ModifyTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyTableResponse_descriptor_,
      ModifyTableResponse::default_instance_,
      ModifyTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyTableResponse));
  CreateNamespaceRequest_descriptor_ = file->message_type(28);
  static const int CreateNamespaceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceRequest, namespacedescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceRequest, nonce_),
  };
  CreateNamespaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateNamespaceRequest_descriptor_,
      CreateNamespaceRequest::default_instance_,
      CreateNamespaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateNamespaceRequest));
  CreateNamespaceResponse_descriptor_ = file->message_type(29);
  static const int CreateNamespaceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceResponse, proc_id_),
  };
  CreateNamespaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateNamespaceResponse_descriptor_,
      CreateNamespaceResponse::default_instance_,
      CreateNamespaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNamespaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateNamespaceResponse));
  DeleteNamespaceRequest_descriptor_ = file->message_type(30);
  static const int DeleteNamespaceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceRequest, namespacename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceRequest, nonce_),
  };
  DeleteNamespaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteNamespaceRequest_descriptor_,
      DeleteNamespaceRequest::default_instance_,
      DeleteNamespaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteNamespaceRequest));
  DeleteNamespaceResponse_descriptor_ = file->message_type(31);
  static const int DeleteNamespaceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceResponse, proc_id_),
  };
  DeleteNamespaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteNamespaceResponse_descriptor_,
      DeleteNamespaceResponse::default_instance_,
      DeleteNamespaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNamespaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteNamespaceResponse));
  ModifyNamespaceRequest_descriptor_ = file->message_type(32);
  static const int ModifyNamespaceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceRequest, namespacedescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceRequest, nonce_),
  };
  ModifyNamespaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyNamespaceRequest_descriptor_,
      ModifyNamespaceRequest::default_instance_,
      ModifyNamespaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyNamespaceRequest));
  ModifyNamespaceResponse_descriptor_ = file->message_type(33);
  static const int ModifyNamespaceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceResponse, proc_id_),
  };
  ModifyNamespaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyNamespaceResponse_descriptor_,
      ModifyNamespaceResponse::default_instance_,
      ModifyNamespaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyNamespaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyNamespaceResponse));
  GetNamespaceDescriptorRequest_descriptor_ = file->message_type(34);
  static const int GetNamespaceDescriptorRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNamespaceDescriptorRequest, namespacename_),
  };
  GetNamespaceDescriptorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNamespaceDescriptorRequest_descriptor_,
      GetNamespaceDescriptorRequest::default_instance_,
      GetNamespaceDescriptorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNamespaceDescriptorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNamespaceDescriptorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNamespaceDescriptorRequest));
  GetNamespaceDescriptorResponse_descriptor_ = file->message_type(35);
  static const int GetNamespaceDescriptorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNamespaceDescriptorResponse, namespacedescriptor_),
  };
  GetNamespaceDescriptorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNamespaceDescriptorResponse_descriptor_,
      GetNamespaceDescriptorResponse::default_instance_,
      GetNamespaceDescriptorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNamespaceDescriptorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNamespaceDescriptorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNamespaceDescriptorResponse));
  ListNamespaceDescriptorsRequest_descriptor_ = file->message_type(36);
  static const int ListNamespaceDescriptorsRequest_offsets_[1] = {
  };
  ListNamespaceDescriptorsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListNamespaceDescriptorsRequest_descriptor_,
      ListNamespaceDescriptorsRequest::default_instance_,
      ListNamespaceDescriptorsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNamespaceDescriptorsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNamespaceDescriptorsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListNamespaceDescriptorsRequest));
  ListNamespaceDescriptorsResponse_descriptor_ = file->message_type(37);
  static const int ListNamespaceDescriptorsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNamespaceDescriptorsResponse, namespacedescriptor_),
  };
  ListNamespaceDescriptorsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListNamespaceDescriptorsResponse_descriptor_,
      ListNamespaceDescriptorsResponse::default_instance_,
      ListNamespaceDescriptorsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNamespaceDescriptorsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNamespaceDescriptorsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListNamespaceDescriptorsResponse));
  ListTableDescriptorsByNamespaceRequest_descriptor_ = file->message_type(38);
  static const int ListTableDescriptorsByNamespaceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableDescriptorsByNamespaceRequest, namespacename_),
  };
  ListTableDescriptorsByNamespaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTableDescriptorsByNamespaceRequest_descriptor_,
      ListTableDescriptorsByNamespaceRequest::default_instance_,
      ListTableDescriptorsByNamespaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableDescriptorsByNamespaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableDescriptorsByNamespaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTableDescriptorsByNamespaceRequest));
  ListTableDescriptorsByNamespaceResponse_descriptor_ = file->message_type(39);
  static const int ListTableDescriptorsByNamespaceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableDescriptorsByNamespaceResponse, tableschema_),
  };
  ListTableDescriptorsByNamespaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTableDescriptorsByNamespaceResponse_descriptor_,
      ListTableDescriptorsByNamespaceResponse::default_instance_,
      ListTableDescriptorsByNamespaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableDescriptorsByNamespaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableDescriptorsByNamespaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTableDescriptorsByNamespaceResponse));
  ListTableNamesByNamespaceRequest_descriptor_ = file->message_type(40);
  static const int ListTableNamesByNamespaceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableNamesByNamespaceRequest, namespacename_),
  };
  ListTableNamesByNamespaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTableNamesByNamespaceRequest_descriptor_,
      ListTableNamesByNamespaceRequest::default_instance_,
      ListTableNamesByNamespaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableNamesByNamespaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableNamesByNamespaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTableNamesByNamespaceRequest));
  ListTableNamesByNamespaceResponse_descriptor_ = file->message_type(41);
  static const int ListTableNamesByNamespaceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableNamesByNamespaceResponse, tablename_),
  };
  ListTableNamesByNamespaceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTableNamesByNamespaceResponse_descriptor_,
      ListTableNamesByNamespaceResponse::default_instance_,
      ListTableNamesByNamespaceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableNamesByNamespaceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTableNamesByNamespaceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTableNamesByNamespaceResponse));
  ShutdownRequest_descriptor_ = file->message_type(42);
  static const int ShutdownRequest_offsets_[1] = {
  };
  ShutdownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownRequest_descriptor_,
      ShutdownRequest::default_instance_,
      ShutdownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownRequest));
  ShutdownResponse_descriptor_ = file->message_type(43);
  static const int ShutdownResponse_offsets_[1] = {
  };
  ShutdownResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutdownResponse_descriptor_,
      ShutdownResponse::default_instance_,
      ShutdownResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutdownResponse));
  StopMasterRequest_descriptor_ = file->message_type(44);
  static const int StopMasterRequest_offsets_[1] = {
  };
  StopMasterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopMasterRequest_descriptor_,
      StopMasterRequest::default_instance_,
      StopMasterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMasterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMasterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopMasterRequest));
  StopMasterResponse_descriptor_ = file->message_type(45);
  static const int StopMasterResponse_offsets_[1] = {
  };
  StopMasterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopMasterResponse_descriptor_,
      StopMasterResponse::default_instance_,
      StopMasterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMasterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMasterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopMasterResponse));
  BalanceRequest_descriptor_ = file->message_type(46);
  static const int BalanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRequest, force_),
  };
  BalanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BalanceRequest_descriptor_,
      BalanceRequest::default_instance_,
      BalanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BalanceRequest));
  BalanceResponse_descriptor_ = file->message_type(47);
  static const int BalanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceResponse, balancer_ran_),
  };
  BalanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BalanceResponse_descriptor_,
      BalanceResponse::default_instance_,
      BalanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BalanceResponse));
  SetBalancerRunningRequest_descriptor_ = file->message_type(48);
  static const int SetBalancerRunningRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningRequest, on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningRequest, synchronous_),
  };
  SetBalancerRunningRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBalancerRunningRequest_descriptor_,
      SetBalancerRunningRequest::default_instance_,
      SetBalancerRunningRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBalancerRunningRequest));
  SetBalancerRunningResponse_descriptor_ = file->message_type(49);
  static const int SetBalancerRunningResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningResponse, prev_balance_value_),
  };
  SetBalancerRunningResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBalancerRunningResponse_descriptor_,
      SetBalancerRunningResponse::default_instance_,
      SetBalancerRunningResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerRunningResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBalancerRunningResponse));
  IsBalancerEnabledRequest_descriptor_ = file->message_type(50);
  static const int IsBalancerEnabledRequest_offsets_[1] = {
  };
  IsBalancerEnabledRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsBalancerEnabledRequest_descriptor_,
      IsBalancerEnabledRequest::default_instance_,
      IsBalancerEnabledRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBalancerEnabledRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBalancerEnabledRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsBalancerEnabledRequest));
  IsBalancerEnabledResponse_descriptor_ = file->message_type(51);
  static const int IsBalancerEnabledResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBalancerEnabledResponse, enabled_),
  };
  IsBalancerEnabledResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsBalancerEnabledResponse_descriptor_,
      IsBalancerEnabledResponse::default_instance_,
      IsBalancerEnabledResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBalancerEnabledResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBalancerEnabledResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsBalancerEnabledResponse));
  SetSplitOrMergeEnabledRequest_descriptor_ = file->message_type(52);
  static const int SetSplitOrMergeEnabledRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledRequest, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledRequest, synchronous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledRequest, switch_types_),
  };
  SetSplitOrMergeEnabledRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSplitOrMergeEnabledRequest_descriptor_,
      SetSplitOrMergeEnabledRequest::default_instance_,
      SetSplitOrMergeEnabledRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSplitOrMergeEnabledRequest));
  SetSplitOrMergeEnabledResponse_descriptor_ = file->message_type(53);
  static const int SetSplitOrMergeEnabledResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledResponse, prev_value_),
  };
  SetSplitOrMergeEnabledResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSplitOrMergeEnabledResponse_descriptor_,
      SetSplitOrMergeEnabledResponse::default_instance_,
      SetSplitOrMergeEnabledResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSplitOrMergeEnabledResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSplitOrMergeEnabledResponse));
  IsSplitOrMergeEnabledRequest_descriptor_ = file->message_type(54);
  static const int IsSplitOrMergeEnabledRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSplitOrMergeEnabledRequest, switch_type_),
  };
  IsSplitOrMergeEnabledRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsSplitOrMergeEnabledRequest_descriptor_,
      IsSplitOrMergeEnabledRequest::default_instance_,
      IsSplitOrMergeEnabledRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSplitOrMergeEnabledRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSplitOrMergeEnabledRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsSplitOrMergeEnabledRequest));
  IsSplitOrMergeEnabledResponse_descriptor_ = file->message_type(55);
  static const int IsSplitOrMergeEnabledResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSplitOrMergeEnabledResponse, enabled_),
  };
  IsSplitOrMergeEnabledResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsSplitOrMergeEnabledResponse_descriptor_,
      IsSplitOrMergeEnabledResponse::default_instance_,
      IsSplitOrMergeEnabledResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSplitOrMergeEnabledResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSplitOrMergeEnabledResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsSplitOrMergeEnabledResponse));
  NormalizeRequest_descriptor_ = file->message_type(56);
  static const int NormalizeRequest_offsets_[1] = {
  };
  NormalizeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalizeRequest_descriptor_,
      NormalizeRequest::default_instance_,
      NormalizeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalizeRequest));
  NormalizeResponse_descriptor_ = file->message_type(57);
  static const int NormalizeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeResponse, normalizer_ran_),
  };
  NormalizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalizeResponse_descriptor_,
      NormalizeResponse::default_instance_,
      NormalizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalizeResponse));
  SetNormalizerRunningRequest_descriptor_ = file->message_type(58);
  static const int SetNormalizerRunningRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalizerRunningRequest, on_),
  };
  SetNormalizerRunningRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetNormalizerRunningRequest_descriptor_,
      SetNormalizerRunningRequest::default_instance_,
      SetNormalizerRunningRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalizerRunningRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalizerRunningRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetNormalizerRunningRequest));
  SetNormalizerRunningResponse_descriptor_ = file->message_type(59);
  static const int SetNormalizerRunningResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalizerRunningResponse, prev_normalizer_value_),
  };
  SetNormalizerRunningResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetNormalizerRunningResponse_descriptor_,
      SetNormalizerRunningResponse::default_instance_,
      SetNormalizerRunningResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalizerRunningResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalizerRunningResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetNormalizerRunningResponse));
  IsNormalizerEnabledRequest_descriptor_ = file->message_type(60);
  static const int IsNormalizerEnabledRequest_offsets_[1] = {
  };
  IsNormalizerEnabledRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsNormalizerEnabledRequest_descriptor_,
      IsNormalizerEnabledRequest::default_instance_,
      IsNormalizerEnabledRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsNormalizerEnabledRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsNormalizerEnabledRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsNormalizerEnabledRequest));
  IsNormalizerEnabledResponse_descriptor_ = file->message_type(61);
  static const int IsNormalizerEnabledResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsNormalizerEnabledResponse, enabled_),
  };
  IsNormalizerEnabledResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsNormalizerEnabledResponse_descriptor_,
      IsNormalizerEnabledResponse::default_instance_,
      IsNormalizerEnabledResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsNormalizerEnabledResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsNormalizerEnabledResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsNormalizerEnabledResponse));
  RunCatalogScanRequest_descriptor_ = file->message_type(62);
  static const int RunCatalogScanRequest_offsets_[1] = {
  };
  RunCatalogScanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunCatalogScanRequest_descriptor_,
      RunCatalogScanRequest::default_instance_,
      RunCatalogScanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCatalogScanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCatalogScanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunCatalogScanRequest));
  RunCatalogScanResponse_descriptor_ = file->message_type(63);
  static const int RunCatalogScanResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCatalogScanResponse, scan_result_),
  };
  RunCatalogScanResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunCatalogScanResponse_descriptor_,
      RunCatalogScanResponse::default_instance_,
      RunCatalogScanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCatalogScanResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCatalogScanResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunCatalogScanResponse));
  EnableCatalogJanitorRequest_descriptor_ = file->message_type(64);
  static const int EnableCatalogJanitorRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableCatalogJanitorRequest, enable_),
  };
  EnableCatalogJanitorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableCatalogJanitorRequest_descriptor_,
      EnableCatalogJanitorRequest::default_instance_,
      EnableCatalogJanitorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableCatalogJanitorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableCatalogJanitorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableCatalogJanitorRequest));
  EnableCatalogJanitorResponse_descriptor_ = file->message_type(65);
  static const int EnableCatalogJanitorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableCatalogJanitorResponse, prev_value_),
  };
  EnableCatalogJanitorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnableCatalogJanitorResponse_descriptor_,
      EnableCatalogJanitorResponse::default_instance_,
      EnableCatalogJanitorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableCatalogJanitorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableCatalogJanitorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnableCatalogJanitorResponse));
  IsCatalogJanitorEnabledRequest_descriptor_ = file->message_type(66);
  static const int IsCatalogJanitorEnabledRequest_offsets_[1] = {
  };
  IsCatalogJanitorEnabledRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsCatalogJanitorEnabledRequest_descriptor_,
      IsCatalogJanitorEnabledRequest::default_instance_,
      IsCatalogJanitorEnabledRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCatalogJanitorEnabledRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCatalogJanitorEnabledRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsCatalogJanitorEnabledRequest));
  IsCatalogJanitorEnabledResponse_descriptor_ = file->message_type(67);
  static const int IsCatalogJanitorEnabledResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCatalogJanitorEnabledResponse, value_),
  };
  IsCatalogJanitorEnabledResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsCatalogJanitorEnabledResponse_descriptor_,
      IsCatalogJanitorEnabledResponse::default_instance_,
      IsCatalogJanitorEnabledResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCatalogJanitorEnabledResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCatalogJanitorEnabledResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsCatalogJanitorEnabledResponse));
  SnapshotRequest_descriptor_ = file->message_type(68);
  static const int SnapshotRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, snapshot_),
  };
  SnapshotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotRequest_descriptor_,
      SnapshotRequest::default_instance_,
      SnapshotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotRequest));
  SnapshotResponse_descriptor_ = file->message_type(69);
  static const int SnapshotResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, expected_timeout_),
  };
  SnapshotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotResponse_descriptor_,
      SnapshotResponse::default_instance_,
      SnapshotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotResponse));
  GetCompletedSnapshotsRequest_descriptor_ = file->message_type(70);
  static const int GetCompletedSnapshotsRequest_offsets_[1] = {
  };
  GetCompletedSnapshotsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCompletedSnapshotsRequest_descriptor_,
      GetCompletedSnapshotsRequest::default_instance_,
      GetCompletedSnapshotsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCompletedSnapshotsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCompletedSnapshotsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCompletedSnapshotsRequest));
  GetCompletedSnapshotsResponse_descriptor_ = file->message_type(71);
  static const int GetCompletedSnapshotsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCompletedSnapshotsResponse, snapshots_),
  };
  GetCompletedSnapshotsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCompletedSnapshotsResponse_descriptor_,
      GetCompletedSnapshotsResponse::default_instance_,
      GetCompletedSnapshotsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCompletedSnapshotsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCompletedSnapshotsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCompletedSnapshotsResponse));
  DeleteSnapshotRequest_descriptor_ = file->message_type(72);
  static const int DeleteSnapshotRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequest, snapshot_),
  };
  DeleteSnapshotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSnapshotRequest_descriptor_,
      DeleteSnapshotRequest::default_instance_,
      DeleteSnapshotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSnapshotRequest));
  DeleteSnapshotResponse_descriptor_ = file->message_type(73);
  static const int DeleteSnapshotResponse_offsets_[1] = {
  };
  DeleteSnapshotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSnapshotResponse_descriptor_,
      DeleteSnapshotResponse::default_instance_,
      DeleteSnapshotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSnapshotResponse));
  RestoreSnapshotRequest_descriptor_ = file->message_type(74);
  static const int RestoreSnapshotRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSnapshotRequest, snapshot_),
  };
  RestoreSnapshotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreSnapshotRequest_descriptor_,
      RestoreSnapshotRequest::default_instance_,
      RestoreSnapshotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSnapshotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSnapshotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreSnapshotRequest));
  RestoreSnapshotResponse_descriptor_ = file->message_type(75);
  static const int RestoreSnapshotResponse_offsets_[1] = {
  };
  RestoreSnapshotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreSnapshotResponse_descriptor_,
      RestoreSnapshotResponse::default_instance_,
      RestoreSnapshotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSnapshotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreSnapshotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreSnapshotResponse));
  IsSnapshotDoneRequest_descriptor_ = file->message_type(76);
  static const int IsSnapshotDoneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneRequest, snapshot_),
  };
  IsSnapshotDoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsSnapshotDoneRequest_descriptor_,
      IsSnapshotDoneRequest::default_instance_,
      IsSnapshotDoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsSnapshotDoneRequest));
  IsSnapshotDoneResponse_descriptor_ = file->message_type(77);
  static const int IsSnapshotDoneResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneResponse, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneResponse, snapshot_),
  };
  IsSnapshotDoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsSnapshotDoneResponse_descriptor_,
      IsSnapshotDoneResponse::default_instance_,
      IsSnapshotDoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsSnapshotDoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsSnapshotDoneResponse));
  IsRestoreSnapshotDoneRequest_descriptor_ = file->message_type(78);
  static const int IsRestoreSnapshotDoneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsRestoreSnapshotDoneRequest, snapshot_),
  };
  IsRestoreSnapshotDoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsRestoreSnapshotDoneRequest_descriptor_,
      IsRestoreSnapshotDoneRequest::default_instance_,
      IsRestoreSnapshotDoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsRestoreSnapshotDoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsRestoreSnapshotDoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsRestoreSnapshotDoneRequest));
  IsRestoreSnapshotDoneResponse_descriptor_ = file->message_type(79);
  static const int IsRestoreSnapshotDoneResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsRestoreSnapshotDoneResponse, done_),
  };
  IsRestoreSnapshotDoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsRestoreSnapshotDoneResponse_descriptor_,
      IsRestoreSnapshotDoneResponse::default_instance_,
      IsRestoreSnapshotDoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsRestoreSnapshotDoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsRestoreSnapshotDoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsRestoreSnapshotDoneResponse));
  GetSchemaAlterStatusRequest_descriptor_ = file->message_type(80);
  static const int GetSchemaAlterStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusRequest, table_name_),
  };
  GetSchemaAlterStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSchemaAlterStatusRequest_descriptor_,
      GetSchemaAlterStatusRequest::default_instance_,
      GetSchemaAlterStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSchemaAlterStatusRequest));
  GetSchemaAlterStatusResponse_descriptor_ = file->message_type(81);
  static const int GetSchemaAlterStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusResponse, yet_to_update_regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusResponse, total_regions_),
  };
  GetSchemaAlterStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSchemaAlterStatusResponse_descriptor_,
      GetSchemaAlterStatusResponse::default_instance_,
      GetSchemaAlterStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSchemaAlterStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSchemaAlterStatusResponse));
  GetTableDescriptorsRequest_descriptor_ = file->message_type(82);
  static const int GetTableDescriptorsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsRequest, table_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsRequest, regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsRequest, include_sys_tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsRequest, namespace__),
  };
  GetTableDescriptorsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableDescriptorsRequest_descriptor_,
      GetTableDescriptorsRequest::default_instance_,
      GetTableDescriptorsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableDescriptorsRequest));
  GetTableDescriptorsResponse_descriptor_ = file->message_type(83);
  static const int GetTableDescriptorsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsResponse, table_schema_),
  };
  GetTableDescriptorsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableDescriptorsResponse_descriptor_,
      GetTableDescriptorsResponse::default_instance_,
      GetTableDescriptorsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableDescriptorsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableDescriptorsResponse));
  GetTableNamesRequest_descriptor_ = file->message_type(84);
  static const int GetTableNamesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesRequest, regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesRequest, include_sys_tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesRequest, namespace__),
  };
  GetTableNamesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableNamesRequest_descriptor_,
      GetTableNamesRequest::default_instance_,
      GetTableNamesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableNamesRequest));
  GetTableNamesResponse_descriptor_ = file->message_type(85);
  static const int GetTableNamesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesResponse, table_names_),
  };
  GetTableNamesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableNamesResponse_descriptor_,
      GetTableNamesResponse::default_instance_,
      GetTableNamesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableNamesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableNamesResponse));
  GetTableStateRequest_descriptor_ = file->message_type(86);
  static const int GetTableStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableStateRequest, table_name_),
  };
  GetTableStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableStateRequest_descriptor_,
      GetTableStateRequest::default_instance_,
      GetTableStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableStateRequest));
  GetTableStateResponse_descriptor_ = file->message_type(87);
  static const int GetTableStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableStateResponse, table_state_),
  };
  GetTableStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTableStateResponse_descriptor_,
      GetTableStateResponse::default_instance_,
      GetTableStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTableStateResponse));
  GetClusterStatusRequest_descriptor_ = file->message_type(88);
  static const int GetClusterStatusRequest_offsets_[1] = {
  };
  GetClusterStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterStatusRequest_descriptor_,
      GetClusterStatusRequest::default_instance_,
      GetClusterStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterStatusRequest));
  GetClusterStatusResponse_descriptor_ = file->message_type(89);
  static const int GetClusterStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusResponse, cluster_status_),
  };
  GetClusterStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetClusterStatusResponse_descriptor_,
      GetClusterStatusResponse::default_instance_,
      GetClusterStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetClusterStatusResponse));
  IsMasterRunningRequest_descriptor_ = file->message_type(90);
  static const int IsMasterRunningRequest_offsets_[1] = {
  };
  IsMasterRunningRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsMasterRunningRequest_descriptor_,
      IsMasterRunningRequest::default_instance_,
      IsMasterRunningRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMasterRunningRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMasterRunningRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsMasterRunningRequest));
  IsMasterRunningResponse_descriptor_ = file->message_type(91);
  static const int IsMasterRunningResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMasterRunningResponse, is_master_running_),
  };
  IsMasterRunningResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsMasterRunningResponse_descriptor_,
      IsMasterRunningResponse::default_instance_,
      IsMasterRunningResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMasterRunningResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsMasterRunningResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsMasterRunningResponse));
  ExecProcedureRequest_descriptor_ = file->message_type(92);
  static const int ExecProcedureRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureRequest, procedure_),
  };
  ExecProcedureRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecProcedureRequest_descriptor_,
      ExecProcedureRequest::default_instance_,
      ExecProcedureRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecProcedureRequest));
  ExecProcedureResponse_descriptor_ = file->message_type(93);
  static const int ExecProcedureResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureResponse, expected_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureResponse, return_data_),
  };
  ExecProcedureResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecProcedureResponse_descriptor_,
      ExecProcedureResponse::default_instance_,
      ExecProcedureResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProcedureResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecProcedureResponse));
  IsProcedureDoneRequest_descriptor_ = file->message_type(94);
  static const int IsProcedureDoneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneRequest, procedure_),
  };
  IsProcedureDoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsProcedureDoneRequest_descriptor_,
      IsProcedureDoneRequest::default_instance_,
      IsProcedureDoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsProcedureDoneRequest));
  IsProcedureDoneResponse_descriptor_ = file->message_type(95);
  static const int IsProcedureDoneResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneResponse, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneResponse, snapshot_),
  };
  IsProcedureDoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsProcedureDoneResponse_descriptor_,
      IsProcedureDoneResponse::default_instance_,
      IsProcedureDoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsProcedureDoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsProcedureDoneResponse));
  GetProcedureResultRequest_descriptor_ = file->message_type(96);
  static const int GetProcedureResultRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultRequest, proc_id_),
  };
  GetProcedureResultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProcedureResultRequest_descriptor_,
      GetProcedureResultRequest::default_instance_,
      GetProcedureResultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProcedureResultRequest));
  GetProcedureResultResponse_descriptor_ = file->message_type(97);
  static const int GetProcedureResultResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, last_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, exception_),
  };
  GetProcedureResultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProcedureResultResponse_descriptor_,
      GetProcedureResultResponse::default_instance_,
      GetProcedureResultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProcedureResultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProcedureResultResponse));
  GetProcedureResultResponse_State_descriptor_ = GetProcedureResultResponse_descriptor_->enum_type(0);
  AbortProcedureRequest_descriptor_ = file->message_type(98);
  static const int AbortProcedureRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureRequest, proc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureRequest, mayinterruptifrunning_),
  };
  AbortProcedureRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbortProcedureRequest_descriptor_,
      AbortProcedureRequest::default_instance_,
      AbortProcedureRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbortProcedureRequest));
  AbortProcedureResponse_descriptor_ = file->message_type(99);
  static const int AbortProcedureResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureResponse, is_procedure_aborted_),
  };
  AbortProcedureResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbortProcedureResponse_descriptor_,
      AbortProcedureResponse::default_instance_,
      AbortProcedureResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortProcedureResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbortProcedureResponse));
  ListProceduresRequest_descriptor_ = file->message_type(100);
  static const int ListProceduresRequest_offsets_[1] = {
  };
  ListProceduresRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListProceduresRequest_descriptor_,
      ListProceduresRequest::default_instance_,
      ListProceduresRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProceduresRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProceduresRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListProceduresRequest));
  ListProceduresResponse_descriptor_ = file->message_type(101);
  static const int ListProceduresResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProceduresResponse, procedure_),
  };
  ListProceduresResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListProceduresResponse_descriptor_,
      ListProceduresResponse::default_instance_,
      ListProceduresResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProceduresResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProceduresResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListProceduresResponse));
  SetQuotaRequest_descriptor_ = file->message_type(102);
  static const int SetQuotaRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, user_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, remove_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, bypass_globals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, throttle_),
  };
  SetQuotaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetQuotaRequest_descriptor_,
      SetQuotaRequest::default_instance_,
      SetQuotaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetQuotaRequest));
  SetQuotaResponse_descriptor_ = file->message_type(103);
  static const int SetQuotaResponse_offsets_[1] = {
  };
  SetQuotaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetQuotaResponse_descriptor_,
      SetQuotaResponse::default_instance_,
      SetQuotaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetQuotaResponse));
  MajorCompactionTimestampRequest_descriptor_ = file->message_type(104);
  static const int MajorCompactionTimestampRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampRequest, table_name_),
  };
  MajorCompactionTimestampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MajorCompactionTimestampRequest_descriptor_,
      MajorCompactionTimestampRequest::default_instance_,
      MajorCompactionTimestampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MajorCompactionTimestampRequest));
  MajorCompactionTimestampForRegionRequest_descriptor_ = file->message_type(105);
  static const int MajorCompactionTimestampForRegionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampForRegionRequest, region_),
  };
  MajorCompactionTimestampForRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MajorCompactionTimestampForRegionRequest_descriptor_,
      MajorCompactionTimestampForRegionRequest::default_instance_,
      MajorCompactionTimestampForRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampForRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampForRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MajorCompactionTimestampForRegionRequest));
  MajorCompactionTimestampResponse_descriptor_ = file->message_type(106);
  static const int MajorCompactionTimestampResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampResponse, compaction_timestamp_),
  };
  MajorCompactionTimestampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MajorCompactionTimestampResponse_descriptor_,
      MajorCompactionTimestampResponse::default_instance_,
      MajorCompactionTimestampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MajorCompactionTimestampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MajorCompactionTimestampResponse));
  SecurityCapabilitiesRequest_descriptor_ = file->message_type(107);
  static const int SecurityCapabilitiesRequest_offsets_[1] = {
  };
  SecurityCapabilitiesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityCapabilitiesRequest_descriptor_,
      SecurityCapabilitiesRequest::default_instance_,
      SecurityCapabilitiesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCapabilitiesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCapabilitiesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityCapabilitiesRequest));
  SecurityCapabilitiesResponse_descriptor_ = file->message_type(108);
  static const int SecurityCapabilitiesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCapabilitiesResponse, capabilities_),
  };
  SecurityCapabilitiesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityCapabilitiesResponse_descriptor_,
      SecurityCapabilitiesResponse::default_instance_,
      SecurityCapabilitiesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCapabilitiesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCapabilitiesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityCapabilitiesResponse));
  SecurityCapabilitiesResponse_Capability_descriptor_ = SecurityCapabilitiesResponse_descriptor_->enum_type(0);
  MasterSwitchType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Master_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddColumnRequest_descriptor_, &AddColumnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddColumnResponse_descriptor_, &AddColumnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteColumnRequest_descriptor_, &DeleteColumnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteColumnResponse_descriptor_, &DeleteColumnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyColumnRequest_descriptor_, &ModifyColumnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyColumnResponse_descriptor_, &ModifyColumnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveRegionRequest_descriptor_, &MoveRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveRegionResponse_descriptor_, &MoveRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DispatchMergingRegionsRequest_descriptor_, &DispatchMergingRegionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DispatchMergingRegionsResponse_descriptor_, &DispatchMergingRegionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignRegionRequest_descriptor_, &AssignRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignRegionResponse_descriptor_, &AssignRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnassignRegionRequest_descriptor_, &UnassignRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnassignRegionResponse_descriptor_, &UnassignRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineRegionRequest_descriptor_, &OfflineRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineRegionResponse_descriptor_, &OfflineRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTableRequest_descriptor_, &CreateTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTableResponse_descriptor_, &CreateTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTableRequest_descriptor_, &DeleteTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTableResponse_descriptor_, &DeleteTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateTableRequest_descriptor_, &TruncateTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateTableResponse_descriptor_, &TruncateTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableTableRequest_descriptor_, &EnableTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableTableResponse_descriptor_, &EnableTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisableTableRequest_descriptor_, &DisableTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisableTableResponse_descriptor_, &DisableTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyTableRequest_descriptor_, &ModifyTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyTableResponse_descriptor_, &ModifyTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateNamespaceRequest_descriptor_, &CreateNamespaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateNamespaceResponse_descriptor_, &CreateNamespaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteNamespaceRequest_descriptor_, &DeleteNamespaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteNamespaceResponse_descriptor_, &DeleteNamespaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyNamespaceRequest_descriptor_, &ModifyNamespaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyNamespaceResponse_descriptor_, &ModifyNamespaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNamespaceDescriptorRequest_descriptor_, &GetNamespaceDescriptorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNamespaceDescriptorResponse_descriptor_, &GetNamespaceDescriptorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListNamespaceDescriptorsRequest_descriptor_, &ListNamespaceDescriptorsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListNamespaceDescriptorsResponse_descriptor_, &ListNamespaceDescriptorsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTableDescriptorsByNamespaceRequest_descriptor_, &ListTableDescriptorsByNamespaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTableDescriptorsByNamespaceResponse_descriptor_, &ListTableDescriptorsByNamespaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTableNamesByNamespaceRequest_descriptor_, &ListTableNamesByNamespaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTableNamesByNamespaceResponse_descriptor_, &ListTableNamesByNamespaceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownRequest_descriptor_, &ShutdownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutdownResponse_descriptor_, &ShutdownResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopMasterRequest_descriptor_, &StopMasterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopMasterResponse_descriptor_, &StopMasterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BalanceRequest_descriptor_, &BalanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BalanceResponse_descriptor_, &BalanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBalancerRunningRequest_descriptor_, &SetBalancerRunningRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBalancerRunningResponse_descriptor_, &SetBalancerRunningResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsBalancerEnabledRequest_descriptor_, &IsBalancerEnabledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsBalancerEnabledResponse_descriptor_, &IsBalancerEnabledResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSplitOrMergeEnabledRequest_descriptor_, &SetSplitOrMergeEnabledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSplitOrMergeEnabledResponse_descriptor_, &SetSplitOrMergeEnabledResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsSplitOrMergeEnabledRequest_descriptor_, &IsSplitOrMergeEnabledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsSplitOrMergeEnabledResponse_descriptor_, &IsSplitOrMergeEnabledResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalizeRequest_descriptor_, &NormalizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalizeResponse_descriptor_, &NormalizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetNormalizerRunningRequest_descriptor_, &SetNormalizerRunningRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetNormalizerRunningResponse_descriptor_, &SetNormalizerRunningResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsNormalizerEnabledRequest_descriptor_, &IsNormalizerEnabledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsNormalizerEnabledResponse_descriptor_, &IsNormalizerEnabledResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunCatalogScanRequest_descriptor_, &RunCatalogScanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunCatalogScanResponse_descriptor_, &RunCatalogScanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableCatalogJanitorRequest_descriptor_, &EnableCatalogJanitorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnableCatalogJanitorResponse_descriptor_, &EnableCatalogJanitorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsCatalogJanitorEnabledRequest_descriptor_, &IsCatalogJanitorEnabledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsCatalogJanitorEnabledResponse_descriptor_, &IsCatalogJanitorEnabledResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotRequest_descriptor_, &SnapshotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotResponse_descriptor_, &SnapshotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCompletedSnapshotsRequest_descriptor_, &GetCompletedSnapshotsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCompletedSnapshotsResponse_descriptor_, &GetCompletedSnapshotsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSnapshotRequest_descriptor_, &DeleteSnapshotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSnapshotResponse_descriptor_, &DeleteSnapshotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreSnapshotRequest_descriptor_, &RestoreSnapshotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreSnapshotResponse_descriptor_, &RestoreSnapshotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsSnapshotDoneRequest_descriptor_, &IsSnapshotDoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsSnapshotDoneResponse_descriptor_, &IsSnapshotDoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsRestoreSnapshotDoneRequest_descriptor_, &IsRestoreSnapshotDoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsRestoreSnapshotDoneResponse_descriptor_, &IsRestoreSnapshotDoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSchemaAlterStatusRequest_descriptor_, &GetSchemaAlterStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSchemaAlterStatusResponse_descriptor_, &GetSchemaAlterStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableDescriptorsRequest_descriptor_, &GetTableDescriptorsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableDescriptorsResponse_descriptor_, &GetTableDescriptorsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableNamesRequest_descriptor_, &GetTableNamesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableNamesResponse_descriptor_, &GetTableNamesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableStateRequest_descriptor_, &GetTableStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTableStateResponse_descriptor_, &GetTableStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterStatusRequest_descriptor_, &GetClusterStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetClusterStatusResponse_descriptor_, &GetClusterStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsMasterRunningRequest_descriptor_, &IsMasterRunningRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsMasterRunningResponse_descriptor_, &IsMasterRunningResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecProcedureRequest_descriptor_, &ExecProcedureRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecProcedureResponse_descriptor_, &ExecProcedureResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsProcedureDoneRequest_descriptor_, &IsProcedureDoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsProcedureDoneResponse_descriptor_, &IsProcedureDoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProcedureResultRequest_descriptor_, &GetProcedureResultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProcedureResultResponse_descriptor_, &GetProcedureResultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbortProcedureRequest_descriptor_, &AbortProcedureRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbortProcedureResponse_descriptor_, &AbortProcedureResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListProceduresRequest_descriptor_, &ListProceduresRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListProceduresResponse_descriptor_, &ListProceduresResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetQuotaRequest_descriptor_, &SetQuotaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetQuotaResponse_descriptor_, &SetQuotaResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MajorCompactionTimestampRequest_descriptor_, &MajorCompactionTimestampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MajorCompactionTimestampForRegionRequest_descriptor_, &MajorCompactionTimestampForRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MajorCompactionTimestampResponse_descriptor_, &MajorCompactionTimestampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityCapabilitiesRequest_descriptor_, &SecurityCapabilitiesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityCapabilitiesResponse_descriptor_, &SecurityCapabilitiesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Master_2eproto() {
  delete AddColumnRequest::default_instance_;
  delete AddColumnRequest_reflection_;
  delete AddColumnResponse::default_instance_;
  delete AddColumnResponse_reflection_;
  delete DeleteColumnRequest::default_instance_;
  delete DeleteColumnRequest_reflection_;
  delete DeleteColumnResponse::default_instance_;
  delete DeleteColumnResponse_reflection_;
  delete ModifyColumnRequest::default_instance_;
  delete ModifyColumnRequest_reflection_;
  delete ModifyColumnResponse::default_instance_;
  delete ModifyColumnResponse_reflection_;
  delete MoveRegionRequest::default_instance_;
  delete MoveRegionRequest_reflection_;
  delete MoveRegionResponse::default_instance_;
  delete MoveRegionResponse_reflection_;
  delete DispatchMergingRegionsRequest::default_instance_;
  delete DispatchMergingRegionsRequest_reflection_;
  delete DispatchMergingRegionsResponse::default_instance_;
  delete DispatchMergingRegionsResponse_reflection_;
  delete AssignRegionRequest::default_instance_;
  delete AssignRegionRequest_reflection_;
  delete AssignRegionResponse::default_instance_;
  delete AssignRegionResponse_reflection_;
  delete UnassignRegionRequest::default_instance_;
  delete UnassignRegionRequest_reflection_;
  delete UnassignRegionResponse::default_instance_;
  delete UnassignRegionResponse_reflection_;
  delete OfflineRegionRequest::default_instance_;
  delete OfflineRegionRequest_reflection_;
  delete OfflineRegionResponse::default_instance_;
  delete OfflineRegionResponse_reflection_;
  delete CreateTableRequest::default_instance_;
  delete CreateTableRequest_reflection_;
  delete CreateTableResponse::default_instance_;
  delete CreateTableResponse_reflection_;
  delete DeleteTableRequest::default_instance_;
  delete DeleteTableRequest_reflection_;
  delete DeleteTableResponse::default_instance_;
  delete DeleteTableResponse_reflection_;
  delete TruncateTableRequest::default_instance_;
  delete TruncateTableRequest_reflection_;
  delete TruncateTableResponse::default_instance_;
  delete TruncateTableResponse_reflection_;
  delete EnableTableRequest::default_instance_;
  delete EnableTableRequest_reflection_;
  delete EnableTableResponse::default_instance_;
  delete EnableTableResponse_reflection_;
  delete DisableTableRequest::default_instance_;
  delete DisableTableRequest_reflection_;
  delete DisableTableResponse::default_instance_;
  delete DisableTableResponse_reflection_;
  delete ModifyTableRequest::default_instance_;
  delete ModifyTableRequest_reflection_;
  delete ModifyTableResponse::default_instance_;
  delete ModifyTableResponse_reflection_;
  delete CreateNamespaceRequest::default_instance_;
  delete CreateNamespaceRequest_reflection_;
  delete CreateNamespaceResponse::default_instance_;
  delete CreateNamespaceResponse_reflection_;
  delete DeleteNamespaceRequest::default_instance_;
  delete DeleteNamespaceRequest_reflection_;
  delete DeleteNamespaceResponse::default_instance_;
  delete DeleteNamespaceResponse_reflection_;
  delete ModifyNamespaceRequest::default_instance_;
  delete ModifyNamespaceRequest_reflection_;
  delete ModifyNamespaceResponse::default_instance_;
  delete ModifyNamespaceResponse_reflection_;
  delete GetNamespaceDescriptorRequest::default_instance_;
  delete GetNamespaceDescriptorRequest_reflection_;
  delete GetNamespaceDescriptorResponse::default_instance_;
  delete GetNamespaceDescriptorResponse_reflection_;
  delete ListNamespaceDescriptorsRequest::default_instance_;
  delete ListNamespaceDescriptorsRequest_reflection_;
  delete ListNamespaceDescriptorsResponse::default_instance_;
  delete ListNamespaceDescriptorsResponse_reflection_;
  delete ListTableDescriptorsByNamespaceRequest::default_instance_;
  delete ListTableDescriptorsByNamespaceRequest_reflection_;
  delete ListTableDescriptorsByNamespaceResponse::default_instance_;
  delete ListTableDescriptorsByNamespaceResponse_reflection_;
  delete ListTableNamesByNamespaceRequest::default_instance_;
  delete ListTableNamesByNamespaceRequest_reflection_;
  delete ListTableNamesByNamespaceResponse::default_instance_;
  delete ListTableNamesByNamespaceResponse_reflection_;
  delete ShutdownRequest::default_instance_;
  delete ShutdownRequest_reflection_;
  delete ShutdownResponse::default_instance_;
  delete ShutdownResponse_reflection_;
  delete StopMasterRequest::default_instance_;
  delete StopMasterRequest_reflection_;
  delete StopMasterResponse::default_instance_;
  delete StopMasterResponse_reflection_;
  delete BalanceRequest::default_instance_;
  delete BalanceRequest_reflection_;
  delete BalanceResponse::default_instance_;
  delete BalanceResponse_reflection_;
  delete SetBalancerRunningRequest::default_instance_;
  delete SetBalancerRunningRequest_reflection_;
  delete SetBalancerRunningResponse::default_instance_;
  delete SetBalancerRunningResponse_reflection_;
  delete IsBalancerEnabledRequest::default_instance_;
  delete IsBalancerEnabledRequest_reflection_;
  delete IsBalancerEnabledResponse::default_instance_;
  delete IsBalancerEnabledResponse_reflection_;
  delete SetSplitOrMergeEnabledRequest::default_instance_;
  delete SetSplitOrMergeEnabledRequest_reflection_;
  delete SetSplitOrMergeEnabledResponse::default_instance_;
  delete SetSplitOrMergeEnabledResponse_reflection_;
  delete IsSplitOrMergeEnabledRequest::default_instance_;
  delete IsSplitOrMergeEnabledRequest_reflection_;
  delete IsSplitOrMergeEnabledResponse::default_instance_;
  delete IsSplitOrMergeEnabledResponse_reflection_;
  delete NormalizeRequest::default_instance_;
  delete NormalizeRequest_reflection_;
  delete NormalizeResponse::default_instance_;
  delete NormalizeResponse_reflection_;
  delete SetNormalizerRunningRequest::default_instance_;
  delete SetNormalizerRunningRequest_reflection_;
  delete SetNormalizerRunningResponse::default_instance_;
  delete SetNormalizerRunningResponse_reflection_;
  delete IsNormalizerEnabledRequest::default_instance_;
  delete IsNormalizerEnabledRequest_reflection_;
  delete IsNormalizerEnabledResponse::default_instance_;
  delete IsNormalizerEnabledResponse_reflection_;
  delete RunCatalogScanRequest::default_instance_;
  delete RunCatalogScanRequest_reflection_;
  delete RunCatalogScanResponse::default_instance_;
  delete RunCatalogScanResponse_reflection_;
  delete EnableCatalogJanitorRequest::default_instance_;
  delete EnableCatalogJanitorRequest_reflection_;
  delete EnableCatalogJanitorResponse::default_instance_;
  delete EnableCatalogJanitorResponse_reflection_;
  delete IsCatalogJanitorEnabledRequest::default_instance_;
  delete IsCatalogJanitorEnabledRequest_reflection_;
  delete IsCatalogJanitorEnabledResponse::default_instance_;
  delete IsCatalogJanitorEnabledResponse_reflection_;
  delete SnapshotRequest::default_instance_;
  delete SnapshotRequest_reflection_;
  delete SnapshotResponse::default_instance_;
  delete SnapshotResponse_reflection_;
  delete GetCompletedSnapshotsRequest::default_instance_;
  delete GetCompletedSnapshotsRequest_reflection_;
  delete GetCompletedSnapshotsResponse::default_instance_;
  delete GetCompletedSnapshotsResponse_reflection_;
  delete DeleteSnapshotRequest::default_instance_;
  delete DeleteSnapshotRequest_reflection_;
  delete DeleteSnapshotResponse::default_instance_;
  delete DeleteSnapshotResponse_reflection_;
  delete RestoreSnapshotRequest::default_instance_;
  delete RestoreSnapshotRequest_reflection_;
  delete RestoreSnapshotResponse::default_instance_;
  delete RestoreSnapshotResponse_reflection_;
  delete IsSnapshotDoneRequest::default_instance_;
  delete IsSnapshotDoneRequest_reflection_;
  delete IsSnapshotDoneResponse::default_instance_;
  delete IsSnapshotDoneResponse_reflection_;
  delete IsRestoreSnapshotDoneRequest::default_instance_;
  delete IsRestoreSnapshotDoneRequest_reflection_;
  delete IsRestoreSnapshotDoneResponse::default_instance_;
  delete IsRestoreSnapshotDoneResponse_reflection_;
  delete GetSchemaAlterStatusRequest::default_instance_;
  delete GetSchemaAlterStatusRequest_reflection_;
  delete GetSchemaAlterStatusResponse::default_instance_;
  delete GetSchemaAlterStatusResponse_reflection_;
  delete GetTableDescriptorsRequest::default_instance_;
  delete GetTableDescriptorsRequest_reflection_;
  delete GetTableDescriptorsResponse::default_instance_;
  delete GetTableDescriptorsResponse_reflection_;
  delete GetTableNamesRequest::default_instance_;
  delete GetTableNamesRequest_reflection_;
  delete GetTableNamesResponse::default_instance_;
  delete GetTableNamesResponse_reflection_;
  delete GetTableStateRequest::default_instance_;
  delete GetTableStateRequest_reflection_;
  delete GetTableStateResponse::default_instance_;
  delete GetTableStateResponse_reflection_;
  delete GetClusterStatusRequest::default_instance_;
  delete GetClusterStatusRequest_reflection_;
  delete GetClusterStatusResponse::default_instance_;
  delete GetClusterStatusResponse_reflection_;
  delete IsMasterRunningRequest::default_instance_;
  delete IsMasterRunningRequest_reflection_;
  delete IsMasterRunningResponse::default_instance_;
  delete IsMasterRunningResponse_reflection_;
  delete ExecProcedureRequest::default_instance_;
  delete ExecProcedureRequest_reflection_;
  delete ExecProcedureResponse::default_instance_;
  delete ExecProcedureResponse_reflection_;
  delete IsProcedureDoneRequest::default_instance_;
  delete IsProcedureDoneRequest_reflection_;
  delete IsProcedureDoneResponse::default_instance_;
  delete IsProcedureDoneResponse_reflection_;
  delete GetProcedureResultRequest::default_instance_;
  delete GetProcedureResultRequest_reflection_;
  delete GetProcedureResultResponse::default_instance_;
  delete GetProcedureResultResponse_reflection_;
  delete AbortProcedureRequest::default_instance_;
  delete AbortProcedureRequest_reflection_;
  delete AbortProcedureResponse::default_instance_;
  delete AbortProcedureResponse_reflection_;
  delete ListProceduresRequest::default_instance_;
  delete ListProceduresRequest_reflection_;
  delete ListProceduresResponse::default_instance_;
  delete ListProceduresResponse_reflection_;
  delete SetQuotaRequest::default_instance_;
  delete SetQuotaRequest_reflection_;
  delete SetQuotaResponse::default_instance_;
  delete SetQuotaResponse_reflection_;
  delete MajorCompactionTimestampRequest::default_instance_;
  delete MajorCompactionTimestampRequest_reflection_;
  delete MajorCompactionTimestampForRegionRequest::default_instance_;
  delete MajorCompactionTimestampForRegionRequest_reflection_;
  delete MajorCompactionTimestampResponse::default_instance_;
  delete MajorCompactionTimestampResponse_reflection_;
  delete SecurityCapabilitiesRequest::default_instance_;
  delete SecurityCapabilitiesRequest_reflection_;
  delete SecurityCapabilitiesResponse::default_instance_;
  delete SecurityCapabilitiesResponse_reflection_;
}

void protobuf_AddDesc_Master_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::hbase::pb::protobuf_AddDesc_ClusterStatus_2eproto();
  ::hbase::pb::protobuf_AddDesc_ErrorHandling_2eproto();
  ::hbase::pb::protobuf_AddDesc_Procedure_2eproto();
  ::hbase::pb::protobuf_AddDesc_Quota_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Master.proto\022\010hbase.pb\032\013HBase.proto\032\014C"
    "lient.proto\032\023ClusterStatus.proto\032\023ErrorH"
    "andling.proto\032\017Procedure.proto\032\013Quota.pr"
    "oto\"\234\001\n\020AddColumnRequest\022\'\n\ntable_name\030\001"
    " \002(\0132\023.hbase.pb.TableName\0225\n\017column_fami"
    "lies\030\002 \002(\0132\034.hbase.pb.ColumnFamilySchema"
    "\022\026\n\013nonce_group\030\003 \001(\004:\0010\022\020\n\005nonce\030\004 \001(\004:"
    "\0010\"$\n\021AddColumnResponse\022\017\n\007proc_id\030\001 \001(\004"
    "\"}\n\023DeleteColumnRequest\022\'\n\ntable_name\030\001 "
    "\002(\0132\023.hbase.pb.TableName\022\023\n\013column_name\030"
    "\002 \002(\014\022\026\n\013nonce_group\030\003 \001(\004:\0010\022\020\n\005nonce\030\004"
    " \001(\004:\0010\"\'\n\024DeleteColumnResponse\022\017\n\007proc_"
    "id\030\001 \001(\004\"\237\001\n\023ModifyColumnRequest\022\'\n\ntabl"
    "e_name\030\001 \002(\0132\023.hbase.pb.TableName\0225\n\017col"
    "umn_families\030\002 \002(\0132\034.hbase.pb.ColumnFami"
    "lySchema\022\026\n\013nonce_group\030\003 \001(\004:\0010\022\020\n\005nonc"
    "e\030\004 \001(\004:\0010\"\'\n\024ModifyColumnResponse\022\017\n\007pr"
    "oc_id\030\001 \001(\004\"n\n\021MoveRegionRequest\022)\n\006regi"
    "on\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\022.\n\020d"
    "est_server_name\030\002 \001(\0132\024.hbase.pb.ServerN"
    "ame\"\024\n\022MoveRegionResponse\"\222\001\n\035DispatchMe"
    "rgingRegionsRequest\022+\n\010region_a\030\001 \002(\0132\031."
    "hbase.pb.RegionSpecifier\022+\n\010region_b\030\002 \002"
    "(\0132\031.hbase.pb.RegionSpecifier\022\027\n\010forcibl"
    "e\030\003 \001(\010:\005false\" \n\036DispatchMergingRegions"
    "Response\"@\n\023AssignRegionRequest\022)\n\006regio"
    "n\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\"\026\n\024As"
    "signRegionResponse\"X\n\025UnassignRegionRequ"
    "est\022)\n\006region\030\001 \002(\0132\031.hbase.pb.RegionSpe"
    "cifier\022\024\n\005force\030\002 \001(\010:\005false\"\030\n\026Unassign"
    "RegionResponse\"A\n\024OfflineRegionRequest\022)"
    "\n\006region\030\001 \002(\0132\031.hbase.pb.RegionSpecifie"
    "r\"\027\n\025OfflineRegionResponse\"\177\n\022CreateTabl"
    "eRequest\022+\n\014table_schema\030\001 \002(\0132\025.hbase.p"
    "b.TableSchema\022\022\n\nsplit_keys\030\002 \003(\014\022\026\n\013non"
    "ce_group\030\003 \001(\004:\0010\022\020\n\005nonce\030\004 \001(\004:\0010\"&\n\023C"
    "reateTableResponse\022\017\n\007proc_id\030\001 \001(\004\"g\n\022D"
    "eleteTableRequest\022\'\n\ntable_name\030\001 \002(\0132\023."
    "hbase.pb.TableName\022\026\n\013nonce_group\030\002 \001(\004:"
    "\0010\022\020\n\005nonce\030\003 \001(\004:\0010\"&\n\023DeleteTableRespo"
    "nse\022\017\n\007proc_id\030\001 \001(\004\"\207\001\n\024TruncateTableRe"
    "quest\022&\n\ttableName\030\001 \002(\0132\023.hbase.pb.Tabl"
    "eName\022\035\n\016preserveSplits\030\002 \001(\010:\005false\022\026\n\013"
    "nonce_group\030\003 \001(\004:\0010\022\020\n\005nonce\030\004 \001(\004:\0010\"("
    "\n\025TruncateTableResponse\022\017\n\007proc_id\030\001 \001(\004"
    "\"g\n\022EnableTableRequest\022\'\n\ntable_name\030\001 \002"
    "(\0132\023.hbase.pb.TableName\022\026\n\013nonce_group\030\002"
    " \001(\004:\0010\022\020\n\005nonce\030\003 \001(\004:\0010\"&\n\023EnableTable"
    "Response\022\017\n\007proc_id\030\001 \001(\004\"h\n\023DisableTabl"
    "eRequest\022\'\n\ntable_name\030\001 \002(\0132\023.hbase.pb."
    "TableName\022\026\n\013nonce_group\030\002 \001(\004:\0010\022\020\n\005non"
    "ce\030\003 \001(\004:\0010\"\'\n\024DisableTableResponse\022\017\n\007p"
    "roc_id\030\001 \001(\004\"\224\001\n\022ModifyTableRequest\022\'\n\nt"
    "able_name\030\001 \002(\0132\023.hbase.pb.TableName\022+\n\014"
    "table_schema\030\002 \002(\0132\025.hbase.pb.TableSchem"
    "a\022\026\n\013nonce_group\030\003 \001(\004:\0010\022\020\n\005nonce\030\004 \001(\004"
    ":\0010\"&\n\023ModifyTableResponse\022\017\n\007proc_id\030\001 "
    "\001(\004\"~\n\026CreateNamespaceRequest\022:\n\023namespa"
    "ceDescriptor\030\001 \002(\0132\035.hbase.pb.NamespaceD"
    "escriptor\022\026\n\013nonce_group\030\002 \001(\004:\0010\022\020\n\005non"
    "ce\030\003 \001(\004:\0010\"*\n\027CreateNamespaceResponse\022\017"
    "\n\007proc_id\030\001 \001(\004\"Y\n\026DeleteNamespaceReques"
    "t\022\025\n\rnamespaceName\030\001 \002(\t\022\026\n\013nonce_group\030"
    "\002 \001(\004:\0010\022\020\n\005nonce\030\003 \001(\004:\0010\"*\n\027DeleteName"
    "spaceResponse\022\017\n\007proc_id\030\001 \001(\004\"~\n\026Modify"
    "NamespaceRequest\022:\n\023namespaceDescriptor\030"
    "\001 \002(\0132\035.hbase.pb.NamespaceDescriptor\022\026\n\013"
    "nonce_group\030\002 \001(\004:\0010\022\020\n\005nonce\030\003 \001(\004:\0010\"*"
    "\n\027ModifyNamespaceResponse\022\017\n\007proc_id\030\001 \001"
    "(\004\"6\n\035GetNamespaceDescriptorRequest\022\025\n\rn"
    "amespaceName\030\001 \002(\t\"\\\n\036GetNamespaceDescri"
    "ptorResponse\022:\n\023namespaceDescriptor\030\001 \002("
    "\0132\035.hbase.pb.NamespaceDescriptor\"!\n\037List"
    "NamespaceDescriptorsRequest\"^\n ListNames"
    "paceDescriptorsResponse\022:\n\023namespaceDesc"
    "riptor\030\001 \003(\0132\035.hbase.pb.NamespaceDescrip"
    "tor\"\?\n&ListTableDescriptorsByNamespaceRe"
    "quest\022\025\n\rnamespaceName\030\001 \002(\t\"U\n\'ListTabl"
    "eDescriptorsByNamespaceResponse\022*\n\013table"
    "Schema\030\001 \003(\0132\025.hbase.pb.TableSchema\"9\n L"
    "istTableNamesByNamespaceRequest\022\025\n\rnames"
    "paceName\030\001 \002(\t\"K\n!ListTableNamesByNamesp"
    "aceResponse\022&\n\ttableName\030\001 \003(\0132\023.hbase.p"
    "b.TableName\"\021\n\017ShutdownRequest\"\022\n\020Shutdo"
    "wnResponse\"\023\n\021StopMasterRequest\"\024\n\022StopM"
    "asterResponse\"\037\n\016BalanceRequest\022\r\n\005force"
    "\030\001 \001(\010\"\'\n\017BalanceResponse\022\024\n\014balancer_ra"
    "n\030\001 \002(\010\"<\n\031SetBalancerRunningRequest\022\n\n\002"
    "on\030\001 \002(\010\022\023\n\013synchronous\030\002 \001(\010\"8\n\032SetBala"
    "ncerRunningResponse\022\032\n\022prev_balance_valu"
    "e\030\001 \001(\010\"\032\n\030IsBalancerEnabledRequest\",\n\031I"
    "sBalancerEnabledResponse\022\017\n\007enabled\030\001 \002("
    "\010\"w\n\035SetSplitOrMergeEnabledRequest\022\017\n\007en"
    "abled\030\001 \002(\010\022\023\n\013synchronous\030\002 \001(\010\0220\n\014swit"
    "ch_types\030\003 \003(\0162\032.hbase.pb.MasterSwitchTy"
    "pe\"4\n\036SetSplitOrMergeEnabledResponse\022\022\n\n"
    "prev_value\030\001 \003(\010\"O\n\034IsSplitOrMergeEnable"
    "dRequest\022/\n\013switch_type\030\001 \002(\0162\032.hbase.pb"
    ".MasterSwitchType\"0\n\035IsSplitOrMergeEnabl"
    "edResponse\022\017\n\007enabled\030\001 \002(\010\"\022\n\020Normalize"
    "Request\"+\n\021NormalizeResponse\022\026\n\016normaliz"
    "er_ran\030\001 \002(\010\")\n\033SetNormalizerRunningRequ"
    "est\022\n\n\002on\030\001 \002(\010\"=\n\034SetNormalizerRunningR"
    "esponse\022\035\n\025prev_normalizer_value\030\001 \001(\010\"\034"
    "\n\032IsNormalizerEnabledRequest\".\n\033IsNormal"
    "izerEnabledResponse\022\017\n\007enabled\030\001 \002(\010\"\027\n\025"
    "RunCatalogScanRequest\"-\n\026RunCatalogScanR"
    "esponse\022\023\n\013scan_result\030\001 \001(\005\"-\n\033EnableCa"
    "talogJanitorRequest\022\016\n\006enable\030\001 \002(\010\"2\n\034E"
    "nableCatalogJanitorResponse\022\022\n\nprev_valu"
    "e\030\001 \001(\010\" \n\036IsCatalogJanitorEnabledReques"
    "t\"0\n\037IsCatalogJanitorEnabledResponse\022\r\n\005"
    "value\030\001 \002(\010\"B\n\017SnapshotRequest\022/\n\010snapsh"
    "ot\030\001 \002(\0132\035.hbase.pb.SnapshotDescription\""
    ",\n\020SnapshotResponse\022\030\n\020expected_timeout\030"
    "\001 \002(\003\"\036\n\034GetCompletedSnapshotsRequest\"Q\n"
    "\035GetCompletedSnapshotsResponse\0220\n\tsnapsh"
    "ots\030\001 \003(\0132\035.hbase.pb.SnapshotDescription"
    "\"H\n\025DeleteSnapshotRequest\022/\n\010snapshot\030\001 "
    "\002(\0132\035.hbase.pb.SnapshotDescription\"\030\n\026De"
    "leteSnapshotResponse\"I\n\026RestoreSnapshotR"
    "equest\022/\n\010snapshot\030\001 \002(\0132\035.hbase.pb.Snap"
    "shotDescription\"\031\n\027RestoreSnapshotRespon"
    "se\"H\n\025IsSnapshotDoneRequest\022/\n\010snapshot\030"
    "\001 \001(\0132\035.hbase.pb.SnapshotDescription\"^\n\026"
    "IsSnapshotDoneResponse\022\023\n\004done\030\001 \001(\010:\005fa"
    "lse\022/\n\010snapshot\030\002 \001(\0132\035.hbase.pb.Snapsho"
    "tDescription\"O\n\034IsRestoreSnapshotDoneReq"
    "uest\022/\n\010snapshot\030\001 \001(\0132\035.hbase.pb.Snapsh"
    "otDescription\"4\n\035IsRestoreSnapshotDoneRe"
    "sponse\022\023\n\004done\030\001 \001(\010:\005false\"F\n\033GetSchema"
    "AlterStatusRequest\022\'\n\ntable_name\030\001 \002(\0132\023"
    ".hbase.pb.TableName\"T\n\034GetSchemaAlterSta"
    "tusResponse\022\035\n\025yet_to_update_regions\030\001 \001"
    "(\r\022\025\n\rtotal_regions\030\002 \001(\r\"\213\001\n\032GetTableDe"
    "scriptorsRequest\022(\n\013table_names\030\001 \003(\0132\023."
    "hbase.pb.TableName\022\r\n\005regex\030\002 \001(\t\022!\n\022inc"
    "lude_sys_tables\030\003 \001(\010:\005false\022\021\n\tnamespac"
    "e\030\004 \001(\t\"J\n\033GetTableDescriptorsResponse\022+"
    "\n\014table_schema\030\001 \003(\0132\025.hbase.pb.TableSch"
    "ema\"[\n\024GetTableNamesRequest\022\r\n\005regex\030\001 \001"
    "(\t\022!\n\022include_sys_tables\030\002 \001(\010:\005false\022\021\n"
    "\tnamespace\030\003 \001(\t\"A\n\025GetTableNamesRespons"
    "e\022(\n\013table_names\030\001 \003(\0132\023.hbase.pb.TableN"
    "ame\"\?\n\024GetTableStateRequest\022\'\n\ntable_nam"
    "e\030\001 \002(\0132\023.hbase.pb.TableName\"B\n\025GetTable"
    "StateResponse\022)\n\013table_state\030\001 \002(\0132\024.hba"
    "se.pb.TableState\"\031\n\027GetClusterStatusRequ"
    "est\"K\n\030GetClusterStatusResponse\022/\n\016clust"
    "er_status\030\001 \002(\0132\027.hbase.pb.ClusterStatus"
    "\"\030\n\026IsMasterRunningRequest\"4\n\027IsMasterRu"
    "nningResponse\022\031\n\021is_master_running\030\001 \002(\010"
    "\"I\n\024ExecProcedureRequest\0221\n\tprocedure\030\001 "
    "\002(\0132\036.hbase.pb.ProcedureDescription\"F\n\025E"
    "xecProcedureResponse\022\030\n\020expected_timeout"
    "\030\001 \001(\003\022\023\n\013return_data\030\002 \001(\014\"K\n\026IsProcedu"
    "reDoneRequest\0221\n\tprocedure\030\001 \001(\0132\036.hbase"
    ".pb.ProcedureDescription\"`\n\027IsProcedureD"
    "oneResponse\022\023\n\004done\030\001 \001(\010:\005false\0220\n\010snap"
    "shot\030\002 \001(\0132\036.hbase.pb.ProcedureDescripti"
    "on\",\n\031GetProcedureResultRequest\022\017\n\007proc_"
    "id\030\001 \002(\004\"\371\001\n\032GetProcedureResultResponse\022"
    "9\n\005state\030\001 \002(\0162*.hbase.pb.GetProcedureRe"
    "sultResponse.State\022\022\n\nstart_time\030\002 \001(\004\022\023"
    "\n\013last_update\030\003 \001(\004\022\016\n\006result\030\004 \001(\014\0224\n\te"
    "xception\030\005 \001(\0132!.hbase.pb.ForeignExcepti"
    "onMessage\"1\n\005State\022\r\n\tNOT_FOUND\020\000\022\013\n\007RUN"
    "NING\020\001\022\014\n\010FINISHED\020\002\"M\n\025AbortProcedureRe"
    "quest\022\017\n\007proc_id\030\001 \002(\004\022#\n\025mayInterruptIf"
    "Running\030\002 \001(\010:\004true\"6\n\026AbortProcedureRes"
    "ponse\022\034\n\024is_procedure_aborted\030\001 \002(\010\"\027\n\025L"
    "istProceduresRequest\"@\n\026ListProceduresRe"
    "sponse\022&\n\tprocedure\030\001 \003(\0132\023.hbase.pb.Pro"
    "cedure\"\315\001\n\017SetQuotaRequest\022\021\n\tuser_name\030"
    "\001 \001(\t\022\022\n\nuser_group\030\002 \001(\t\022\021\n\tnamespace\030\003"
    " \001(\t\022\'\n\ntable_name\030\004 \001(\0132\023.hbase.pb.Tabl"
    "eName\022\022\n\nremove_all\030\005 \001(\010\022\026\n\016bypass_glob"
    "als\030\006 \001(\010\022+\n\010throttle\030\007 \001(\0132\031.hbase.pb.T"
    "hrottleRequest\"\022\n\020SetQuotaResponse\"J\n\037Ma"
    "jorCompactionTimestampRequest\022\'\n\ntable_n"
    "ame\030\001 \002(\0132\023.hbase.pb.TableName\"U\n(MajorC"
    "ompactionTimestampForRegionRequest\022)\n\006re"
    "gion\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\"@\n"
    " MajorCompactionTimestampResponse\022\034\n\024com"
    "paction_timestamp\030\001 \002(\003\"\035\n\033SecurityCapab"
    "ilitiesRequest\"\354\001\n\034SecurityCapabilitiesR"
    "esponse\022G\n\014capabilities\030\001 \003(\01621.hbase.pb"
    ".SecurityCapabilitiesResponse.Capability"
    "\"\202\001\n\nCapability\022\031\n\025SIMPLE_AUTHENTICATION"
    "\020\000\022\031\n\025SECURE_AUTHENTICATION\020\001\022\021\n\rAUTHORI"
    "ZATION\020\002\022\026\n\022CELL_AUTHORIZATION\020\003\022\023\n\017CELL"
    "_VISIBILITY\020\004*(\n\020MasterSwitchType\022\t\n\005SPL"
    "IT\020\000\022\t\n\005MERGE\020\0012\323(\n\rMasterService\022e\n\024Get"
    "SchemaAlterStatus\022%.hbase.pb.GetSchemaAl"
    "terStatusRequest\032&.hbase.pb.GetSchemaAlt"
    "erStatusResponse\022b\n\023GetTableDescriptors\022"
    "$.hbase.pb.GetTableDescriptorsRequest\032%."
    "hbase.pb.GetTableDescriptorsResponse\022P\n\r"
    "GetTableNames\022\036.hbase.pb.GetTableNamesRe"
    "quest\032\037.hbase.pb.GetTableNamesResponse\022Y"
    "\n\020GetClusterStatus\022!.hbase.pb.GetCluster"
    "StatusRequest\032\".hbase.pb.GetClusterStatu"
    "sResponse\022V\n\017IsMasterRunning\022 .hbase.pb."
    "IsMasterRunningRequest\032!.hbase.pb.IsMast"
    "erRunningResponse\022D\n\tAddColumn\022\032.hbase.p"
    "b.AddColumnRequest\032\033.hbase.pb.AddColumnR"
    "esponse\022M\n\014DeleteColumn\022\035.hbase.pb.Delet"
    "eColumnRequest\032\036.hbase.pb.DeleteColumnRe"
    "sponse\022M\n\014ModifyColumn\022\035.hbase.pb.Modify"
    "ColumnRequest\032\036.hbase.pb.ModifyColumnRes"
    "ponse\022G\n\nMoveRegion\022\033.hbase.pb.MoveRegio"
    "nRequest\032\034.hbase.pb.MoveRegionResponse\022k"
    "\n\026DispatchMergingRegions\022\'.hbase.pb.Disp"
    "atchMergingRegionsRequest\032(.hbase.pb.Dis"
    "patchMergingRegionsResponse\022M\n\014AssignReg"
    "ion\022\035.hbase.pb.AssignRegionRequest\032\036.hba"
    "se.pb.AssignRegionResponse\022S\n\016UnassignRe"
    "gion\022\037.hbase.pb.UnassignRegionRequest\032 ."
    "hbase.pb.UnassignRegionResponse\022P\n\rOffli"
    "neRegion\022\036.hbase.pb.OfflineRegionRequest"
    "\032\037.hbase.pb.OfflineRegionResponse\022J\n\013Del"
    "eteTable\022\034.hbase.pb.DeleteTableRequest\032\035"
    ".hbase.pb.DeleteTableResponse\022P\n\rtruncat"
    "eTable\022\036.hbase.pb.TruncateTableRequest\032\037"
    ".hbase.pb.TruncateTableResponse\022J\n\013Enabl"
    "eTable\022\034.hbase.pb.EnableTableRequest\032\035.h"
    "base.pb.EnableTableResponse\022M\n\014DisableTa"
    "ble\022\035.hbase.pb.DisableTableRequest\032\036.hba"
    "se.pb.DisableTableResponse\022J\n\013ModifyTabl"
    "e\022\034.hbase.pb.ModifyTableRequest\032\035.hbase."
    "pb.ModifyTableResponse\022J\n\013CreateTable\022\034."
    "hbase.pb.CreateTableRequest\032\035.hbase.pb.C"
    "reateTableResponse\022A\n\010Shutdown\022\031.hbase.p"
    "b.ShutdownRequest\032\032.hbase.pb.ShutdownRes"
    "ponse\022G\n\nStopMaster\022\033.hbase.pb.StopMaste"
    "rRequest\032\034.hbase.pb.StopMasterResponse\022>"
    "\n\007Balance\022\030.hbase.pb.BalanceRequest\032\031.hb"
    "ase.pb.BalanceResponse\022_\n\022SetBalancerRun"
    "ning\022#.hbase.pb.SetBalancerRunningReques"
    "t\032$.hbase.pb.SetBalancerRunningResponse\022"
    "\\\n\021IsBalancerEnabled\022\".hbase.pb.IsBalanc"
    "erEnabledRequest\032#.hbase.pb.IsBalancerEn"
    "abledResponse\022k\n\026SetSplitOrMergeEnabled\022"
    "\'.hbase.pb.SetSplitOrMergeEnabledRequest"
    "\032(.hbase.pb.SetSplitOrMergeEnabledRespon"
    "se\022h\n\025IsSplitOrMergeEnabled\022&.hbase.pb.I"
    "sSplitOrMergeEnabledRequest\032\'.hbase.pb.I"
    "sSplitOrMergeEnabledResponse\022D\n\tNormaliz"
    "e\022\032.hbase.pb.NormalizeRequest\032\033.hbase.pb"
    ".NormalizeResponse\022e\n\024SetNormalizerRunni"
    "ng\022%.hbase.pb.SetNormalizerRunningReques"
    "t\032&.hbase.pb.SetNormalizerRunningRespons"
    "e\022b\n\023IsNormalizerEnabled\022$.hbase.pb.IsNo"
    "rmalizerEnabledRequest\032%.hbase.pb.IsNorm"
    "alizerEnabledResponse\022S\n\016RunCatalogScan\022"
    "\037.hbase.pb.RunCatalogScanRequest\032 .hbase"
    ".pb.RunCatalogScanResponse\022e\n\024EnableCata"
    "logJanitor\022%.hbase.pb.EnableCatalogJanit"
    "orRequest\032&.hbase.pb.EnableCatalogJanito"
    "rResponse\022n\n\027IsCatalogJanitorEnabled\022(.h"
    "base.pb.IsCatalogJanitorEnabledRequest\032)"
    ".hbase.pb.IsCatalogJanitorEnabledRespons"
    "e\022^\n\021ExecMasterService\022#.hbase.pb.Coproc"
    "essorServiceRequest\032$.hbase.pb.Coprocess"
    "orServiceResponse\022A\n\010Snapshot\022\031.hbase.pb"
    ".SnapshotRequest\032\032.hbase.pb.SnapshotResp"
    "onse\022h\n\025GetCompletedSnapshots\022&.hbase.pb"
    ".GetCompletedSnapshotsRequest\032\'.hbase.pb"
    ".GetCompletedSnapshotsResponse\022S\n\016Delete"
    "Snapshot\022\037.hbase.pb.DeleteSnapshotReques"
    "t\032 .hbase.pb.DeleteSnapshotResponse\022S\n\016I"
    "sSnapshotDone\022\037.hbase.pb.IsSnapshotDoneR"
    "equest\032 .hbase.pb.IsSnapshotDoneResponse"
    "\022V\n\017RestoreSnapshot\022 .hbase.pb.RestoreSn"
    "apshotRequest\032!.hbase.pb.RestoreSnapshot"
    "Response\022h\n\025IsRestoreSnapshotDone\022&.hbas"
    "e.pb.IsRestoreSnapshotDoneRequest\032\'.hbas"
    "e.pb.IsRestoreSnapshotDoneResponse\022P\n\rEx"
    "ecProcedure\022\036.hbase.pb.ExecProcedureRequ"
    "est\032\037.hbase.pb.ExecProcedureResponse\022W\n\024"
    "ExecProcedureWithRet\022\036.hbase.pb.ExecProc"
    "edureRequest\032\037.hbase.pb.ExecProcedureRes"
    "ponse\022V\n\017IsProcedureDone\022 .hbase.pb.IsPr"
    "ocedureDoneRequest\032!.hbase.pb.IsProcedur"
    "eDoneResponse\022V\n\017ModifyNamespace\022 .hbase"
    ".pb.ModifyNamespaceRequest\032!.hbase.pb.Mo"
    "difyNamespaceResponse\022V\n\017CreateNamespace"
    "\022 .hbase.pb.CreateNamespaceRequest\032!.hba"
    "se.pb.CreateNamespaceResponse\022V\n\017DeleteN"
    "amespace\022 .hbase.pb.DeleteNamespaceReque"
    "st\032!.hbase.pb.DeleteNamespaceResponse\022k\n"
    "\026GetNamespaceDescriptor\022\'.hbase.pb.GetNa"
    "mespaceDescriptorRequest\032(.hbase.pb.GetN"
    "amespaceDescriptorResponse\022q\n\030ListNamesp"
    "aceDescriptors\022).hbase.pb.ListNamespaceD"
    "escriptorsRequest\032*.hbase.pb.ListNamespa"
    "ceDescriptorsResponse\022\206\001\n\037ListTableDescr"
    "iptorsByNamespace\0220.hbase.pb.ListTableDe"
    "scriptorsByNamespaceRequest\0321.hbase.pb.L"
    "istTableDescriptorsByNamespaceResponse\022t"
    "\n\031ListTableNamesByNamespace\022*.hbase.pb.L"
    "istTableNamesByNamespaceRequest\032+.hbase."
    "pb.ListTableNamesByNamespaceResponse\022P\n\r"
    "GetTableState\022\036.hbase.pb.GetTableStateRe"
    "quest\032\037.hbase.pb.GetTableStateResponse\022A"
    "\n\010SetQuota\022\031.hbase.pb.SetQuotaRequest\032\032."
    "hbase.pb.SetQuotaResponse\022x\n\037getLastMajo"
    "rCompactionTimestamp\022).hbase.pb.MajorCom"
    "pactionTimestampRequest\032*.hbase.pb.Major"
    "CompactionTimestampResponse\022\212\001\n(getLastM"
    "ajorCompactionTimestampForRegion\0222.hbase"
    ".pb.MajorCompactionTimestampForRegionReq"
    "uest\032*.hbase.pb.MajorCompactionTimestamp"
    "Response\022_\n\022getProcedureResult\022#.hbase.p"
    "b.GetProcedureResultRequest\032$.hbase.pb.G"
    "etProcedureResultResponse\022h\n\027getSecurity"
    "Capabilities\022%.hbase.pb.SecurityCapabili"
    "tiesRequest\032&.hbase.pb.SecurityCapabilit"
    "iesResponse\022S\n\016AbortProcedure\022\037.hbase.pb"
    ".AbortProcedureRequest\032 .hbase.pb.AbortP"
    "rocedureResponse\022S\n\016ListProcedures\022\037.hba"
    "se.pb.ListProceduresRequest\032 .hbase.pb.L"
    "istProceduresResponseBB\n*org.apache.hado"
    "op.hbase.protobuf.generatedB\014MasterProto"
    "sH\001\210\001\001\240\001\001", 12969);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Master.proto", &protobuf_RegisterTypes);
  AddColumnRequest::default_instance_ = new AddColumnRequest();
  AddColumnResponse::default_instance_ = new AddColumnResponse();
  DeleteColumnRequest::default_instance_ = new DeleteColumnRequest();
  DeleteColumnResponse::default_instance_ = new DeleteColumnResponse();
  ModifyColumnRequest::default_instance_ = new ModifyColumnRequest();
  ModifyColumnResponse::default_instance_ = new ModifyColumnResponse();
  MoveRegionRequest::default_instance_ = new MoveRegionRequest();
  MoveRegionResponse::default_instance_ = new MoveRegionResponse();
  DispatchMergingRegionsRequest::default_instance_ = new DispatchMergingRegionsRequest();
  DispatchMergingRegionsResponse::default_instance_ = new DispatchMergingRegionsResponse();
  AssignRegionRequest::default_instance_ = new AssignRegionRequest();
  AssignRegionResponse::default_instance_ = new AssignRegionResponse();
  UnassignRegionRequest::default_instance_ = new UnassignRegionRequest();
  UnassignRegionResponse::default_instance_ = new UnassignRegionResponse();
  OfflineRegionRequest::default_instance_ = new OfflineRegionRequest();
  OfflineRegionResponse::default_instance_ = new OfflineRegionResponse();
  CreateTableRequest::default_instance_ = new CreateTableRequest();
  CreateTableResponse::default_instance_ = new CreateTableResponse();
  DeleteTableRequest::default_instance_ = new DeleteTableRequest();
  DeleteTableResponse::default_instance_ = new DeleteTableResponse();
  TruncateTableRequest::default_instance_ = new TruncateTableRequest();
  TruncateTableResponse::default_instance_ = new TruncateTableResponse();
  EnableTableRequest::default_instance_ = new EnableTableRequest();
  EnableTableResponse::default_instance_ = new EnableTableResponse();
  DisableTableRequest::default_instance_ = new DisableTableRequest();
  DisableTableResponse::default_instance_ = new DisableTableResponse();
  ModifyTableRequest::default_instance_ = new ModifyTableRequest();
  ModifyTableResponse::default_instance_ = new ModifyTableResponse();
  CreateNamespaceRequest::default_instance_ = new CreateNamespaceRequest();
  CreateNamespaceResponse::default_instance_ = new CreateNamespaceResponse();
  DeleteNamespaceRequest::default_instance_ = new DeleteNamespaceRequest();
  DeleteNamespaceResponse::default_instance_ = new DeleteNamespaceResponse();
  ModifyNamespaceRequest::default_instance_ = new ModifyNamespaceRequest();
  ModifyNamespaceResponse::default_instance_ = new ModifyNamespaceResponse();
  GetNamespaceDescriptorRequest::default_instance_ = new GetNamespaceDescriptorRequest();
  GetNamespaceDescriptorResponse::default_instance_ = new GetNamespaceDescriptorResponse();
  ListNamespaceDescriptorsRequest::default_instance_ = new ListNamespaceDescriptorsRequest();
  ListNamespaceDescriptorsResponse::default_instance_ = new ListNamespaceDescriptorsResponse();
  ListTableDescriptorsByNamespaceRequest::default_instance_ = new ListTableDescriptorsByNamespaceRequest();
  ListTableDescriptorsByNamespaceResponse::default_instance_ = new ListTableDescriptorsByNamespaceResponse();
  ListTableNamesByNamespaceRequest::default_instance_ = new ListTableNamesByNamespaceRequest();
  ListTableNamesByNamespaceResponse::default_instance_ = new ListTableNamesByNamespaceResponse();
  ShutdownRequest::default_instance_ = new ShutdownRequest();
  ShutdownResponse::default_instance_ = new ShutdownResponse();
  StopMasterRequest::default_instance_ = new StopMasterRequest();
  StopMasterResponse::default_instance_ = new StopMasterResponse();
  BalanceRequest::default_instance_ = new BalanceRequest();
  BalanceResponse::default_instance_ = new BalanceResponse();
  SetBalancerRunningRequest::default_instance_ = new SetBalancerRunningRequest();
  SetBalancerRunningResponse::default_instance_ = new SetBalancerRunningResponse();
  IsBalancerEnabledRequest::default_instance_ = new IsBalancerEnabledRequest();
  IsBalancerEnabledResponse::default_instance_ = new IsBalancerEnabledResponse();
  SetSplitOrMergeEnabledRequest::default_instance_ = new SetSplitOrMergeEnabledRequest();
  SetSplitOrMergeEnabledResponse::default_instance_ = new SetSplitOrMergeEnabledResponse();
  IsSplitOrMergeEnabledRequest::default_instance_ = new IsSplitOrMergeEnabledRequest();
  IsSplitOrMergeEnabledResponse::default_instance_ = new IsSplitOrMergeEnabledResponse();
  NormalizeRequest::default_instance_ = new NormalizeRequest();
  NormalizeResponse::default_instance_ = new NormalizeResponse();
  SetNormalizerRunningRequest::default_instance_ = new SetNormalizerRunningRequest();
  SetNormalizerRunningResponse::default_instance_ = new SetNormalizerRunningResponse();
  IsNormalizerEnabledRequest::default_instance_ = new IsNormalizerEnabledRequest();
  IsNormalizerEnabledResponse::default_instance_ = new IsNormalizerEnabledResponse();
  RunCatalogScanRequest::default_instance_ = new RunCatalogScanRequest();
  RunCatalogScanResponse::default_instance_ = new RunCatalogScanResponse();
  EnableCatalogJanitorRequest::default_instance_ = new EnableCatalogJanitorRequest();
  EnableCatalogJanitorResponse::default_instance_ = new EnableCatalogJanitorResponse();
  IsCatalogJanitorEnabledRequest::default_instance_ = new IsCatalogJanitorEnabledRequest();
  IsCatalogJanitorEnabledResponse::default_instance_ = new IsCatalogJanitorEnabledResponse();
  SnapshotRequest::default_instance_ = new SnapshotRequest();
  SnapshotResponse::default_instance_ = new SnapshotResponse();
  GetCompletedSnapshotsRequest::default_instance_ = new GetCompletedSnapshotsRequest();
  GetCompletedSnapshotsResponse::default_instance_ = new GetCompletedSnapshotsResponse();
  DeleteSnapshotRequest::default_instance_ = new DeleteSnapshotRequest();
  DeleteSnapshotResponse::default_instance_ = new DeleteSnapshotResponse();
  RestoreSnapshotRequest::default_instance_ = new RestoreSnapshotRequest();
  RestoreSnapshotResponse::default_instance_ = new RestoreSnapshotResponse();
  IsSnapshotDoneRequest::default_instance_ = new IsSnapshotDoneRequest();
  IsSnapshotDoneResponse::default_instance_ = new IsSnapshotDoneResponse();
  IsRestoreSnapshotDoneRequest::default_instance_ = new IsRestoreSnapshotDoneRequest();
  IsRestoreSnapshotDoneResponse::default_instance_ = new IsRestoreSnapshotDoneResponse();
  GetSchemaAlterStatusRequest::default_instance_ = new GetSchemaAlterStatusRequest();
  GetSchemaAlterStatusResponse::default_instance_ = new GetSchemaAlterStatusResponse();
  GetTableDescriptorsRequest::default_instance_ = new GetTableDescriptorsRequest();
  GetTableDescriptorsResponse::default_instance_ = new GetTableDescriptorsResponse();
  GetTableNamesRequest::default_instance_ = new GetTableNamesRequest();
  GetTableNamesResponse::default_instance_ = new GetTableNamesResponse();
  GetTableStateRequest::default_instance_ = new GetTableStateRequest();
  GetTableStateResponse::default_instance_ = new GetTableStateResponse();
  GetClusterStatusRequest::default_instance_ = new GetClusterStatusRequest();
  GetClusterStatusResponse::default_instance_ = new GetClusterStatusResponse();
  IsMasterRunningRequest::default_instance_ = new IsMasterRunningRequest();
  IsMasterRunningResponse::default_instance_ = new IsMasterRunningResponse();
  ExecProcedureRequest::default_instance_ = new ExecProcedureRequest();
  ExecProcedureResponse::default_instance_ = new ExecProcedureResponse();
  IsProcedureDoneRequest::default_instance_ = new IsProcedureDoneRequest();
  IsProcedureDoneResponse::default_instance_ = new IsProcedureDoneResponse();
  GetProcedureResultRequest::default_instance_ = new GetProcedureResultRequest();
  GetProcedureResultResponse::default_instance_ = new GetProcedureResultResponse();
  AbortProcedureRequest::default_instance_ = new AbortProcedureRequest();
  AbortProcedureResponse::default_instance_ = new AbortProcedureResponse();
  ListProceduresRequest::default_instance_ = new ListProceduresRequest();
  ListProceduresResponse::default_instance_ = new ListProceduresResponse();
  SetQuotaRequest::default_instance_ = new SetQuotaRequest();
  SetQuotaResponse::default_instance_ = new SetQuotaResponse();
  MajorCompactionTimestampRequest::default_instance_ = new MajorCompactionTimestampRequest();
  MajorCompactionTimestampForRegionRequest::default_instance_ = new MajorCompactionTimestampForRegionRequest();
  MajorCompactionTimestampResponse::default_instance_ = new MajorCompactionTimestampResponse();
  SecurityCapabilitiesRequest::default_instance_ = new SecurityCapabilitiesRequest();
  SecurityCapabilitiesResponse::default_instance_ = new SecurityCapabilitiesResponse();
  AddColumnRequest::default_instance_->InitAsDefaultInstance();
  AddColumnResponse::default_instance_->InitAsDefaultInstance();
  DeleteColumnRequest::default_instance_->InitAsDefaultInstance();
  DeleteColumnResponse::default_instance_->InitAsDefaultInstance();
  ModifyColumnRequest::default_instance_->InitAsDefaultInstance();
  ModifyColumnResponse::default_instance_->InitAsDefaultInstance();
  MoveRegionRequest::default_instance_->InitAsDefaultInstance();
  MoveRegionResponse::default_instance_->InitAsDefaultInstance();
  DispatchMergingRegionsRequest::default_instance_->InitAsDefaultInstance();
  DispatchMergingRegionsResponse::default_instance_->InitAsDefaultInstance();
  AssignRegionRequest::default_instance_->InitAsDefaultInstance();
  AssignRegionResponse::default_instance_->InitAsDefaultInstance();
  UnassignRegionRequest::default_instance_->InitAsDefaultInstance();
  UnassignRegionResponse::default_instance_->InitAsDefaultInstance();
  OfflineRegionRequest::default_instance_->InitAsDefaultInstance();
  OfflineRegionResponse::default_instance_->InitAsDefaultInstance();
  CreateTableRequest::default_instance_->InitAsDefaultInstance();
  CreateTableResponse::default_instance_->InitAsDefaultInstance();
  DeleteTableRequest::default_instance_->InitAsDefaultInstance();
  DeleteTableResponse::default_instance_->InitAsDefaultInstance();
  TruncateTableRequest::default_instance_->InitAsDefaultInstance();
  TruncateTableResponse::default_instance_->InitAsDefaultInstance();
  EnableTableRequest::default_instance_->InitAsDefaultInstance();
  EnableTableResponse::default_instance_->InitAsDefaultInstance();
  DisableTableRequest::default_instance_->InitAsDefaultInstance();
  DisableTableResponse::default_instance_->InitAsDefaultInstance();
  ModifyTableRequest::default_instance_->InitAsDefaultInstance();
  ModifyTableResponse::default_instance_->InitAsDefaultInstance();
  CreateNamespaceRequest::default_instance_->InitAsDefaultInstance();
  CreateNamespaceResponse::default_instance_->InitAsDefaultInstance();
  DeleteNamespaceRequest::default_instance_->InitAsDefaultInstance();
  DeleteNamespaceResponse::default_instance_->InitAsDefaultInstance();
  ModifyNamespaceRequest::default_instance_->InitAsDefaultInstance();
  ModifyNamespaceResponse::default_instance_->InitAsDefaultInstance();
  GetNamespaceDescriptorRequest::default_instance_->InitAsDefaultInstance();
  GetNamespaceDescriptorResponse::default_instance_->InitAsDefaultInstance();
  ListNamespaceDescriptorsRequest::default_instance_->InitAsDefaultInstance();
  ListNamespaceDescriptorsResponse::default_instance_->InitAsDefaultInstance();
  ListTableDescriptorsByNamespaceRequest::default_instance_->InitAsDefaultInstance();
  ListTableDescriptorsByNamespaceResponse::default_instance_->InitAsDefaultInstance();
  ListTableNamesByNamespaceRequest::default_instance_->InitAsDefaultInstance();
  ListTableNamesByNamespaceResponse::default_instance_->InitAsDefaultInstance();
  ShutdownRequest::default_instance_->InitAsDefaultInstance();
  ShutdownResponse::default_instance_->InitAsDefaultInstance();
  StopMasterRequest::default_instance_->InitAsDefaultInstance();
  StopMasterResponse::default_instance_->InitAsDefaultInstance();
  BalanceRequest::default_instance_->InitAsDefaultInstance();
  BalanceResponse::default_instance_->InitAsDefaultInstance();
  SetBalancerRunningRequest::default_instance_->InitAsDefaultInstance();
  SetBalancerRunningResponse::default_instance_->InitAsDefaultInstance();
  IsBalancerEnabledRequest::default_instance_->InitAsDefaultInstance();
  IsBalancerEnabledResponse::default_instance_->InitAsDefaultInstance();
  SetSplitOrMergeEnabledRequest::default_instance_->InitAsDefaultInstance();
  SetSplitOrMergeEnabledResponse::default_instance_->InitAsDefaultInstance();
  IsSplitOrMergeEnabledRequest::default_instance_->InitAsDefaultInstance();
  IsSplitOrMergeEnabledResponse::default_instance_->InitAsDefaultInstance();
  NormalizeRequest::default_instance_->InitAsDefaultInstance();
  NormalizeResponse::default_instance_->InitAsDefaultInstance();
  SetNormalizerRunningRequest::default_instance_->InitAsDefaultInstance();
  SetNormalizerRunningResponse::default_instance_->InitAsDefaultInstance();
  IsNormalizerEnabledRequest::default_instance_->InitAsDefaultInstance();
  IsNormalizerEnabledResponse::default_instance_->InitAsDefaultInstance();
  RunCatalogScanRequest::default_instance_->InitAsDefaultInstance();
  RunCatalogScanResponse::default_instance_->InitAsDefaultInstance();
  EnableCatalogJanitorRequest::default_instance_->InitAsDefaultInstance();
  EnableCatalogJanitorResponse::default_instance_->InitAsDefaultInstance();
  IsCatalogJanitorEnabledRequest::default_instance_->InitAsDefaultInstance();
  IsCatalogJanitorEnabledResponse::default_instance_->InitAsDefaultInstance();
  SnapshotRequest::default_instance_->InitAsDefaultInstance();
  SnapshotResponse::default_instance_->InitAsDefaultInstance();
  GetCompletedSnapshotsRequest::default_instance_->InitAsDefaultInstance();
  GetCompletedSnapshotsResponse::default_instance_->InitAsDefaultInstance();
  DeleteSnapshotRequest::default_instance_->InitAsDefaultInstance();
  DeleteSnapshotResponse::default_instance_->InitAsDefaultInstance();
  RestoreSnapshotRequest::default_instance_->InitAsDefaultInstance();
  RestoreSnapshotResponse::default_instance_->InitAsDefaultInstance();
  IsSnapshotDoneRequest::default_instance_->InitAsDefaultInstance();
  IsSnapshotDoneResponse::default_instance_->InitAsDefaultInstance();
  IsRestoreSnapshotDoneRequest::default_instance_->InitAsDefaultInstance();
  IsRestoreSnapshotDoneResponse::default_instance_->InitAsDefaultInstance();
  GetSchemaAlterStatusRequest::default_instance_->InitAsDefaultInstance();
  GetSchemaAlterStatusResponse::default_instance_->InitAsDefaultInstance();
  GetTableDescriptorsRequest::default_instance_->InitAsDefaultInstance();
  GetTableDescriptorsResponse::default_instance_->InitAsDefaultInstance();
  GetTableNamesRequest::default_instance_->InitAsDefaultInstance();
  GetTableNamesResponse::default_instance_->InitAsDefaultInstance();
  GetTableStateRequest::default_instance_->InitAsDefaultInstance();
  GetTableStateResponse::default_instance_->InitAsDefaultInstance();
  GetClusterStatusRequest::default_instance_->InitAsDefaultInstance();
  GetClusterStatusResponse::default_instance_->InitAsDefaultInstance();
  IsMasterRunningRequest::default_instance_->InitAsDefaultInstance();
  IsMasterRunningResponse::default_instance_->InitAsDefaultInstance();
  ExecProcedureRequest::default_instance_->InitAsDefaultInstance();
  ExecProcedureResponse::default_instance_->InitAsDefaultInstance();
  IsProcedureDoneRequest::default_instance_->InitAsDefaultInstance();
  IsProcedureDoneResponse::default_instance_->InitAsDefaultInstance();
  GetProcedureResultRequest::default_instance_->InitAsDefaultInstance();
  GetProcedureResultResponse::default_instance_->InitAsDefaultInstance();
  AbortProcedureRequest::default_instance_->InitAsDefaultInstance();
  AbortProcedureResponse::default_instance_->InitAsDefaultInstance();
  ListProceduresRequest::default_instance_->InitAsDefaultInstance();
  ListProceduresResponse::default_instance_->InitAsDefaultInstance();
  SetQuotaRequest::default_instance_->InitAsDefaultInstance();
  SetQuotaResponse::default_instance_->InitAsDefaultInstance();
  MajorCompactionTimestampRequest::default_instance_->InitAsDefaultInstance();
  MajorCompactionTimestampForRegionRequest::default_instance_->InitAsDefaultInstance();
  MajorCompactionTimestampResponse::default_instance_->InitAsDefaultInstance();
  SecurityCapabilitiesRequest::default_instance_->InitAsDefaultInstance();
  SecurityCapabilitiesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Master_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Master_2eproto {
  StaticDescriptorInitializer_Master_2eproto() {
    protobuf_AddDesc_Master_2eproto();
  }
} static_descriptor_initializer_Master_2eproto_;
const ::google::protobuf::EnumDescriptor* MasterSwitchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterSwitchType_descriptor_;
}
bool MasterSwitchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AddColumnRequest::kTableNameFieldNumber;
const int AddColumnRequest::kColumnFamiliesFieldNumber;
const int AddColumnRequest::kNonceGroupFieldNumber;
const int AddColumnRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

AddColumnRequest::AddColumnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddColumnRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  column_families_ = const_cast< ::hbase::pb::ColumnFamilySchema*>(&::hbase::pb::ColumnFamilySchema::default_instance());
}

AddColumnRequest::AddColumnRequest(const AddColumnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddColumnRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  column_families_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddColumnRequest::~AddColumnRequest() {
  SharedDtor();
}

void AddColumnRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete column_families_;
  }
}

void AddColumnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddColumnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddColumnRequest_descriptor_;
}

const AddColumnRequest& AddColumnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

AddColumnRequest* AddColumnRequest::default_instance_ = NULL;

AddColumnRequest* AddColumnRequest::New() const {
  return new AddColumnRequest;
}

void AddColumnRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_column_families()) {
      if (column_families_ != NULL) column_families_->::hbase::pb::ColumnFamilySchema::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_families;
        break;
      }

      // required .hbase.pb.ColumnFamilySchema column_families = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_families:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_families()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // required .hbase.pb.ColumnFamilySchema column_families = 2;
  if (has_column_families()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column_families(), output);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce_group(), output);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddColumnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // required .hbase.pb.ColumnFamilySchema column_families = 2;
  if (has_column_families()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column_families(), target);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce_group(), target);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddColumnRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required .hbase.pb.ColumnFamilySchema column_families = 2;
    if (has_column_families()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_families());
    }

    // optional uint64 nonce_group = 3 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 4 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddColumnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddColumnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddColumnRequest::MergeFrom(const AddColumnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_column_families()) {
      mutable_column_families()->::hbase::pb::ColumnFamilySchema::MergeFrom(from.column_families());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddColumnRequest::CopyFrom(const AddColumnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddColumnRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_column_families()) {
    if (!this->column_families().IsInitialized()) return false;
  }
  return true;
}

void AddColumnRequest::Swap(AddColumnRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(column_families_, other->column_families_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddColumnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddColumnRequest_descriptor_;
  metadata.reflection = AddColumnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddColumnResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

AddColumnResponse::AddColumnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddColumnResponse::InitAsDefaultInstance() {
}

AddColumnResponse::AddColumnResponse(const AddColumnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddColumnResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddColumnResponse::~AddColumnResponse() {
  SharedDtor();
}

void AddColumnResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddColumnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddColumnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddColumnResponse_descriptor_;
}

const AddColumnResponse& AddColumnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

AddColumnResponse* AddColumnResponse::default_instance_ = NULL;

AddColumnResponse* AddColumnResponse::New() const {
  return new AddColumnResponse;
}

void AddColumnResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddColumnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddColumnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddColumnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddColumnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddColumnResponse::MergeFrom(const AddColumnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddColumnResponse::CopyFrom(const AddColumnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddColumnResponse::IsInitialized() const {

  return true;
}

void AddColumnResponse::Swap(AddColumnResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddColumnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddColumnResponse_descriptor_;
  metadata.reflection = AddColumnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteColumnRequest::kTableNameFieldNumber;
const int DeleteColumnRequest::kColumnNameFieldNumber;
const int DeleteColumnRequest::kNonceGroupFieldNumber;
const int DeleteColumnRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

DeleteColumnRequest::DeleteColumnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteColumnRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

DeleteColumnRequest::DeleteColumnRequest(const DeleteColumnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteColumnRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  column_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteColumnRequest::~DeleteColumnRequest() {
  SharedDtor();
}

void DeleteColumnRequest::SharedDtor() {
  if (column_name_ != &::google::protobuf::internal::kEmptyString) {
    delete column_name_;
  }
  if (this != default_instance_) {
    delete table_name_;
  }
}

void DeleteColumnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteColumnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteColumnRequest_descriptor_;
}

const DeleteColumnRequest& DeleteColumnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteColumnRequest* DeleteColumnRequest::default_instance_ = NULL;

DeleteColumnRequest* DeleteColumnRequest::New() const {
  return new DeleteColumnRequest;
}

void DeleteColumnRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_column_name()) {
      if (column_name_ != &::google::protobuf::internal::kEmptyString) {
        column_name_->clear();
      }
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_name;
        break;
      }

      // required bytes column_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // required bytes column_name = 2;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->column_name(), output);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce_group(), output);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteColumnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // required bytes column_name = 2;
  if (has_column_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->column_name(), target);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce_group(), target);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteColumnRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required bytes column_name = 2;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->column_name());
    }

    // optional uint64 nonce_group = 3 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 4 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteColumnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteColumnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteColumnRequest::MergeFrom(const DeleteColumnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_column_name()) {
      set_column_name(from.column_name());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteColumnRequest::CopyFrom(const DeleteColumnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteColumnRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void DeleteColumnRequest::Swap(DeleteColumnRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(column_name_, other->column_name_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteColumnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteColumnRequest_descriptor_;
  metadata.reflection = DeleteColumnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteColumnResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

DeleteColumnResponse::DeleteColumnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteColumnResponse::InitAsDefaultInstance() {
}

DeleteColumnResponse::DeleteColumnResponse(const DeleteColumnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteColumnResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteColumnResponse::~DeleteColumnResponse() {
  SharedDtor();
}

void DeleteColumnResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteColumnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteColumnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteColumnResponse_descriptor_;
}

const DeleteColumnResponse& DeleteColumnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteColumnResponse* DeleteColumnResponse::default_instance_ = NULL;

DeleteColumnResponse* DeleteColumnResponse::New() const {
  return new DeleteColumnResponse;
}

void DeleteColumnResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteColumnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteColumnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteColumnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteColumnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteColumnResponse::MergeFrom(const DeleteColumnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteColumnResponse::CopyFrom(const DeleteColumnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteColumnResponse::IsInitialized() const {

  return true;
}

void DeleteColumnResponse::Swap(DeleteColumnResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteColumnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteColumnResponse_descriptor_;
  metadata.reflection = DeleteColumnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyColumnRequest::kTableNameFieldNumber;
const int ModifyColumnRequest::kColumnFamiliesFieldNumber;
const int ModifyColumnRequest::kNonceGroupFieldNumber;
const int ModifyColumnRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

ModifyColumnRequest::ModifyColumnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyColumnRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  column_families_ = const_cast< ::hbase::pb::ColumnFamilySchema*>(&::hbase::pb::ColumnFamilySchema::default_instance());
}

ModifyColumnRequest::ModifyColumnRequest(const ModifyColumnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyColumnRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  column_families_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyColumnRequest::~ModifyColumnRequest() {
  SharedDtor();
}

void ModifyColumnRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete column_families_;
  }
}

void ModifyColumnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyColumnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyColumnRequest_descriptor_;
}

const ModifyColumnRequest& ModifyColumnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ModifyColumnRequest* ModifyColumnRequest::default_instance_ = NULL;

ModifyColumnRequest* ModifyColumnRequest::New() const {
  return new ModifyColumnRequest;
}

void ModifyColumnRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_column_families()) {
      if (column_families_ != NULL) column_families_->::hbase::pb::ColumnFamilySchema::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_families;
        break;
      }

      // required .hbase.pb.ColumnFamilySchema column_families = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_families:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_families()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // required .hbase.pb.ColumnFamilySchema column_families = 2;
  if (has_column_families()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column_families(), output);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce_group(), output);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyColumnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // required .hbase.pb.ColumnFamilySchema column_families = 2;
  if (has_column_families()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column_families(), target);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce_group(), target);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyColumnRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required .hbase.pb.ColumnFamilySchema column_families = 2;
    if (has_column_families()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_families());
    }

    // optional uint64 nonce_group = 3 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 4 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyColumnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyColumnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyColumnRequest::MergeFrom(const ModifyColumnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_column_families()) {
      mutable_column_families()->::hbase::pb::ColumnFamilySchema::MergeFrom(from.column_families());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyColumnRequest::CopyFrom(const ModifyColumnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyColumnRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_column_families()) {
    if (!this->column_families().IsInitialized()) return false;
  }
  return true;
}

void ModifyColumnRequest::Swap(ModifyColumnRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(column_families_, other->column_families_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyColumnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyColumnRequest_descriptor_;
  metadata.reflection = ModifyColumnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyColumnResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

ModifyColumnResponse::ModifyColumnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyColumnResponse::InitAsDefaultInstance() {
}

ModifyColumnResponse::ModifyColumnResponse(const ModifyColumnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyColumnResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyColumnResponse::~ModifyColumnResponse() {
  SharedDtor();
}

void ModifyColumnResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyColumnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyColumnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyColumnResponse_descriptor_;
}

const ModifyColumnResponse& ModifyColumnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ModifyColumnResponse* ModifyColumnResponse::default_instance_ = NULL;

ModifyColumnResponse* ModifyColumnResponse::New() const {
  return new ModifyColumnResponse;
}

void ModifyColumnResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyColumnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyColumnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyColumnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyColumnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyColumnResponse::MergeFrom(const ModifyColumnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyColumnResponse::CopyFrom(const ModifyColumnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyColumnResponse::IsInitialized() const {

  return true;
}

void ModifyColumnResponse::Swap(ModifyColumnResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyColumnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyColumnResponse_descriptor_;
  metadata.reflection = ModifyColumnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveRegionRequest::kRegionFieldNumber;
const int MoveRegionRequest::kDestServerNameFieldNumber;
#endif  // !_MSC_VER

MoveRegionRequest::MoveRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  dest_server_name_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

MoveRegionRequest::MoveRegionRequest(const MoveRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  dest_server_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRegionRequest::~MoveRegionRequest() {
  SharedDtor();
}

void MoveRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete dest_server_name_;
  }
}

void MoveRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveRegionRequest_descriptor_;
}

const MoveRegionRequest& MoveRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

MoveRegionRequest* MoveRegionRequest::default_instance_ = NULL;

MoveRegionRequest* MoveRegionRequest::New() const {
  return new MoveRegionRequest;
}

void MoveRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_dest_server_name()) {
      if (dest_server_name_ != NULL) dest_server_name_->::hbase::pb::ServerName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest_server_name;
        break;
      }

      // optional .hbase.pb.ServerName dest_server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional .hbase.pb.ServerName dest_server_name = 2;
  if (has_dest_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest_server_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional .hbase.pb.ServerName dest_server_name = 2;
  if (has_dest_server_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest_server_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .hbase.pb.ServerName dest_server_name = 2;
    if (has_dest_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_server_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveRegionRequest::MergeFrom(const MoveRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_dest_server_name()) {
      mutable_dest_server_name()->::hbase::pb::ServerName::MergeFrom(from.dest_server_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRegionRequest::CopyFrom(const MoveRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_dest_server_name()) {
    if (!this->dest_server_name().IsInitialized()) return false;
  }
  return true;
}

void MoveRegionRequest::Swap(MoveRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(dest_server_name_, other->dest_server_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveRegionRequest_descriptor_;
  metadata.reflection = MoveRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoveRegionResponse::MoveRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveRegionResponse::InitAsDefaultInstance() {
}

MoveRegionResponse::MoveRegionResponse(const MoveRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRegionResponse::~MoveRegionResponse() {
  SharedDtor();
}

void MoveRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveRegionResponse_descriptor_;
}

const MoveRegionResponse& MoveRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

MoveRegionResponse* MoveRegionResponse::default_instance_ = NULL;

MoveRegionResponse* MoveRegionResponse::New() const {
  return new MoveRegionResponse;
}

void MoveRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MoveRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveRegionResponse::MergeFrom(const MoveRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRegionResponse::CopyFrom(const MoveRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRegionResponse::IsInitialized() const {

  return true;
}

void MoveRegionResponse::Swap(MoveRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveRegionResponse_descriptor_;
  metadata.reflection = MoveRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DispatchMergingRegionsRequest::kRegionAFieldNumber;
const int DispatchMergingRegionsRequest::kRegionBFieldNumber;
const int DispatchMergingRegionsRequest::kForcibleFieldNumber;
#endif  // !_MSC_VER

DispatchMergingRegionsRequest::DispatchMergingRegionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DispatchMergingRegionsRequest::InitAsDefaultInstance() {
  region_a_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  region_b_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

DispatchMergingRegionsRequest::DispatchMergingRegionsRequest(const DispatchMergingRegionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DispatchMergingRegionsRequest::SharedCtor() {
  _cached_size_ = 0;
  region_a_ = NULL;
  region_b_ = NULL;
  forcible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchMergingRegionsRequest::~DispatchMergingRegionsRequest() {
  SharedDtor();
}

void DispatchMergingRegionsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_a_;
    delete region_b_;
  }
}

void DispatchMergingRegionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispatchMergingRegionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DispatchMergingRegionsRequest_descriptor_;
}

const DispatchMergingRegionsRequest& DispatchMergingRegionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DispatchMergingRegionsRequest* DispatchMergingRegionsRequest::default_instance_ = NULL;

DispatchMergingRegionsRequest* DispatchMergingRegionsRequest::New() const {
  return new DispatchMergingRegionsRequest;
}

void DispatchMergingRegionsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region_a()) {
      if (region_a_ != NULL) region_a_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_region_b()) {
      if (region_b_ != NULL) region_b_->::hbase::pb::RegionSpecifier::Clear();
    }
    forcible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DispatchMergingRegionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region_a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_b;
        break;
      }

      // required .hbase.pb.RegionSpecifier region_b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forcible;
        break;
      }

      // optional bool forcible = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forcible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forcible_)));
          set_has_forcible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DispatchMergingRegionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region_a = 1;
  if (has_region_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_a(), output);
  }

  // required .hbase.pb.RegionSpecifier region_b = 2;
  if (has_region_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_b(), output);
  }

  // optional bool forcible = 3 [default = false];
  if (has_forcible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forcible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DispatchMergingRegionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region_a = 1;
  if (has_region_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region_a(), target);
  }

  // required .hbase.pb.RegionSpecifier region_b = 2;
  if (has_region_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_b(), target);
  }

  // optional bool forcible = 3 [default = false];
  if (has_forcible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forcible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DispatchMergingRegionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region_a = 1;
    if (has_region_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_a());
    }

    // required .hbase.pb.RegionSpecifier region_b = 2;
    if (has_region_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_b());
    }

    // optional bool forcible = 3 [default = false];
    if (has_forcible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchMergingRegionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DispatchMergingRegionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DispatchMergingRegionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DispatchMergingRegionsRequest::MergeFrom(const DispatchMergingRegionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_a()) {
      mutable_region_a()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_a());
    }
    if (from.has_region_b()) {
      mutable_region_b()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_b());
    }
    if (from.has_forcible()) {
      set_forcible(from.forcible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DispatchMergingRegionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchMergingRegionsRequest::CopyFrom(const DispatchMergingRegionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchMergingRegionsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region_a()) {
    if (!this->region_a().IsInitialized()) return false;
  }
  if (has_region_b()) {
    if (!this->region_b().IsInitialized()) return false;
  }
  return true;
}

void DispatchMergingRegionsRequest::Swap(DispatchMergingRegionsRequest* other) {
  if (other != this) {
    std::swap(region_a_, other->region_a_);
    std::swap(region_b_, other->region_b_);
    std::swap(forcible_, other->forcible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DispatchMergingRegionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DispatchMergingRegionsRequest_descriptor_;
  metadata.reflection = DispatchMergingRegionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DispatchMergingRegionsResponse::DispatchMergingRegionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DispatchMergingRegionsResponse::InitAsDefaultInstance() {
}

DispatchMergingRegionsResponse::DispatchMergingRegionsResponse(const DispatchMergingRegionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DispatchMergingRegionsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DispatchMergingRegionsResponse::~DispatchMergingRegionsResponse() {
  SharedDtor();
}

void DispatchMergingRegionsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DispatchMergingRegionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispatchMergingRegionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DispatchMergingRegionsResponse_descriptor_;
}

const DispatchMergingRegionsResponse& DispatchMergingRegionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DispatchMergingRegionsResponse* DispatchMergingRegionsResponse::default_instance_ = NULL;

DispatchMergingRegionsResponse* DispatchMergingRegionsResponse::New() const {
  return new DispatchMergingRegionsResponse;
}

void DispatchMergingRegionsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DispatchMergingRegionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DispatchMergingRegionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DispatchMergingRegionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DispatchMergingRegionsResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispatchMergingRegionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DispatchMergingRegionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DispatchMergingRegionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DispatchMergingRegionsResponse::MergeFrom(const DispatchMergingRegionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DispatchMergingRegionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchMergingRegionsResponse::CopyFrom(const DispatchMergingRegionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchMergingRegionsResponse::IsInitialized() const {

  return true;
}

void DispatchMergingRegionsResponse::Swap(DispatchMergingRegionsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DispatchMergingRegionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DispatchMergingRegionsResponse_descriptor_;
  metadata.reflection = DispatchMergingRegionsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignRegionRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

AssignRegionRequest::AssignRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssignRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

AssignRegionRequest::AssignRegionRequest(const AssignRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssignRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignRegionRequest::~AssignRegionRequest() {
  SharedDtor();
}

void AssignRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void AssignRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignRegionRequest_descriptor_;
}

const AssignRegionRequest& AssignRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

AssignRegionRequest* AssignRegionRequest::default_instance_ = NULL;

AssignRegionRequest* AssignRegionRequest::New() const {
  return new AssignRegionRequest;
}

void AssignRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssignRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssignRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssignRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignRegionRequest::MergeFrom(const AssignRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignRegionRequest::CopyFrom(const AssignRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void AssignRegionRequest::Swap(AssignRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignRegionRequest_descriptor_;
  metadata.reflection = AssignRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AssignRegionResponse::AssignRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssignRegionResponse::InitAsDefaultInstance() {
}

AssignRegionResponse::AssignRegionResponse(const AssignRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssignRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignRegionResponse::~AssignRegionResponse() {
  SharedDtor();
}

void AssignRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssignRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignRegionResponse_descriptor_;
}

const AssignRegionResponse& AssignRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

AssignRegionResponse* AssignRegionResponse::default_instance_ = NULL;

AssignRegionResponse* AssignRegionResponse::New() const {
  return new AssignRegionResponse;
}

void AssignRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AssignRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssignRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssignRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignRegionResponse::MergeFrom(const AssignRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignRegionResponse::CopyFrom(const AssignRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignRegionResponse::IsInitialized() const {

  return true;
}

void AssignRegionResponse::Swap(AssignRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignRegionResponse_descriptor_;
  metadata.reflection = AssignRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnassignRegionRequest::kRegionFieldNumber;
const int UnassignRegionRequest::kForceFieldNumber;
#endif  // !_MSC_VER

UnassignRegionRequest::UnassignRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnassignRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

UnassignRegionRequest::UnassignRegionRequest(const UnassignRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnassignRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  force_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnassignRegionRequest::~UnassignRegionRequest() {
  SharedDtor();
}

void UnassignRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void UnassignRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnassignRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnassignRegionRequest_descriptor_;
}

const UnassignRegionRequest& UnassignRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

UnassignRegionRequest* UnassignRegionRequest::default_instance_ = NULL;

UnassignRegionRequest* UnassignRegionRequest::New() const {
  return new UnassignRegionRequest;
}

void UnassignRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    force_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnassignRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force;
        break;
      }

      // optional bool force = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnassignRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional bool force = 2 [default = false];
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnassignRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional bool force = 2 [default = false];
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnassignRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional bool force = 2 [default = false];
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnassignRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnassignRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnassignRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnassignRegionRequest::MergeFrom(const UnassignRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnassignRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnassignRegionRequest::CopyFrom(const UnassignRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnassignRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void UnassignRegionRequest::Swap(UnassignRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnassignRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnassignRegionRequest_descriptor_;
  metadata.reflection = UnassignRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnassignRegionResponse::UnassignRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnassignRegionResponse::InitAsDefaultInstance() {
}

UnassignRegionResponse::UnassignRegionResponse(const UnassignRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnassignRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnassignRegionResponse::~UnassignRegionResponse() {
  SharedDtor();
}

void UnassignRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnassignRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnassignRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnassignRegionResponse_descriptor_;
}

const UnassignRegionResponse& UnassignRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

UnassignRegionResponse* UnassignRegionResponse::default_instance_ = NULL;

UnassignRegionResponse* UnassignRegionResponse::New() const {
  return new UnassignRegionResponse;
}

void UnassignRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnassignRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UnassignRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnassignRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnassignRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnassignRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnassignRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnassignRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnassignRegionResponse::MergeFrom(const UnassignRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnassignRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnassignRegionResponse::CopyFrom(const UnassignRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnassignRegionResponse::IsInitialized() const {

  return true;
}

void UnassignRegionResponse::Swap(UnassignRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnassignRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnassignRegionResponse_descriptor_;
  metadata.reflection = UnassignRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineRegionRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

OfflineRegionRequest::OfflineRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

OfflineRegionRequest::OfflineRegionRequest(const OfflineRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineRegionRequest::~OfflineRegionRequest() {
  SharedDtor();
}

void OfflineRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void OfflineRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineRegionRequest_descriptor_;
}

const OfflineRegionRequest& OfflineRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

OfflineRegionRequest* OfflineRegionRequest::default_instance_ = NULL;

OfflineRegionRequest* OfflineRegionRequest::New() const {
  return new OfflineRegionRequest;
}

void OfflineRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineRegionRequest::MergeFrom(const OfflineRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineRegionRequest::CopyFrom(const OfflineRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void OfflineRegionRequest::Swap(OfflineRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineRegionRequest_descriptor_;
  metadata.reflection = OfflineRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OfflineRegionResponse::OfflineRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineRegionResponse::InitAsDefaultInstance() {
}

OfflineRegionResponse::OfflineRegionResponse(const OfflineRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineRegionResponse::~OfflineRegionResponse() {
  SharedDtor();
}

void OfflineRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineRegionResponse_descriptor_;
}

const OfflineRegionResponse& OfflineRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

OfflineRegionResponse* OfflineRegionResponse::default_instance_ = NULL;

OfflineRegionResponse* OfflineRegionResponse::New() const {
  return new OfflineRegionResponse;
}

void OfflineRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OfflineRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineRegionResponse::MergeFrom(const OfflineRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineRegionResponse::CopyFrom(const OfflineRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineRegionResponse::IsInitialized() const {

  return true;
}

void OfflineRegionResponse::Swap(OfflineRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineRegionResponse_descriptor_;
  metadata.reflection = OfflineRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTableRequest::kTableSchemaFieldNumber;
const int CreateTableRequest::kSplitKeysFieldNumber;
const int CreateTableRequest::kNonceGroupFieldNumber;
const int CreateTableRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

CreateTableRequest::CreateTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTableRequest::InitAsDefaultInstance() {
  table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTableRequest::SharedCtor() {
  _cached_size_ = 0;
  table_schema_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTableRequest::~CreateTableRequest() {
  SharedDtor();
}

void CreateTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_schema_;
  }
}

void CreateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableRequest_descriptor_;
}

const CreateTableRequest& CreateTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

CreateTableRequest* CreateTableRequest::default_instance_ = NULL;

CreateTableRequest* CreateTableRequest::New() const {
  return new CreateTableRequest;
}

void CreateTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_schema()) {
      if (table_schema_ != NULL) table_schema_->::hbase::pb::TableSchema::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  split_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableSchema table_schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_split_keys;
        break;
      }

      // repeated bytes split_keys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_split_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_split_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_split_keys;
        if (input->ExpectTag(24)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableSchema table_schema = 1;
  if (has_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_schema(), output);
  }

  // repeated bytes split_keys = 2;
  for (int i = 0; i < this->split_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->split_keys(i), output);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce_group(), output);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableSchema table_schema = 1;
  if (has_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_schema(), target);
  }

  // repeated bytes split_keys = 2;
  for (int i = 0; i < this->split_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->split_keys(i), target);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce_group(), target);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableSchema table_schema = 1;
    if (has_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_schema());
    }

    // optional uint64 nonce_group = 3 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 4 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  // repeated bytes split_keys = 2;
  total_size += 1 * this->split_keys_size();
  for (int i = 0; i < this->split_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->split_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTableRequest::MergeFrom(const CreateTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  split_keys_.MergeFrom(from.split_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_schema()) {
      mutable_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.table_schema());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_schema()) {
    if (!this->table_schema().IsInitialized()) return false;
  }
  return true;
}

void CreateTableRequest::Swap(CreateTableRequest* other) {
  if (other != this) {
    std::swap(table_schema_, other->table_schema_);
    split_keys_.Swap(&other->split_keys_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTableRequest_descriptor_;
  metadata.reflection = CreateTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTableResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

CreateTableResponse::CreateTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTableResponse::InitAsDefaultInstance() {
}

CreateTableResponse::CreateTableResponse(const CreateTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTableResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTableResponse::~CreateTableResponse() {
  SharedDtor();
}

void CreateTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTableResponse_descriptor_;
}

const CreateTableResponse& CreateTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

CreateTableResponse* CreateTableResponse::default_instance_ = NULL;

CreateTableResponse* CreateTableResponse::New() const {
  return new CreateTableResponse;
}

void CreateTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTableResponse::MergeFrom(const CreateTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableResponse::CopyFrom(const CreateTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableResponse::IsInitialized() const {

  return true;
}

void CreateTableResponse::Swap(CreateTableResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTableResponse_descriptor_;
  metadata.reflection = CreateTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTableRequest::kTableNameFieldNumber;
const int DeleteTableRequest::kNonceGroupFieldNumber;
const int DeleteTableRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

DeleteTableRequest::DeleteTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTableRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

DeleteTableRequest::DeleteTableRequest(const DeleteTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTableRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTableRequest::~DeleteTableRequest() {
  SharedDtor();
}

void DeleteTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void DeleteTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableRequest_descriptor_;
}

const DeleteTableRequest& DeleteTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteTableRequest* DeleteTableRequest::default_instance_ = NULL;

DeleteTableRequest* DeleteTableRequest::New() const {
  return new DeleteTableRequest;
}

void DeleteTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // optional uint64 nonce_group = 2 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTableRequest::MergeFrom(const DeleteTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTableRequest::CopyFrom(const DeleteTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void DeleteTableRequest::Swap(DeleteTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTableRequest_descriptor_;
  metadata.reflection = DeleteTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTableResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

DeleteTableResponse::DeleteTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTableResponse::InitAsDefaultInstance() {
}

DeleteTableResponse::DeleteTableResponse(const DeleteTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTableResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTableResponse::~DeleteTableResponse() {
  SharedDtor();
}

void DeleteTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTableResponse_descriptor_;
}

const DeleteTableResponse& DeleteTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteTableResponse* DeleteTableResponse::default_instance_ = NULL;

DeleteTableResponse* DeleteTableResponse::New() const {
  return new DeleteTableResponse;
}

void DeleteTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTableResponse::MergeFrom(const DeleteTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTableResponse::CopyFrom(const DeleteTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTableResponse::IsInitialized() const {

  return true;
}

void DeleteTableResponse::Swap(DeleteTableResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTableResponse_descriptor_;
  metadata.reflection = DeleteTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateTableRequest::kTableNameFieldNumber;
const int TruncateTableRequest::kPreserveSplitsFieldNumber;
const int TruncateTableRequest::kNonceGroupFieldNumber;
const int TruncateTableRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

TruncateTableRequest::TruncateTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateTableRequest::InitAsDefaultInstance() {
  tablename_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

TruncateTableRequest::TruncateTableRequest(const TruncateTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateTableRequest::SharedCtor() {
  _cached_size_ = 0;
  tablename_ = NULL;
  preservesplits_ = false;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateTableRequest::~TruncateTableRequest() {
  SharedDtor();
}

void TruncateTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete tablename_;
  }
}

void TruncateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateTableRequest_descriptor_;
}

const TruncateTableRequest& TruncateTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

TruncateTableRequest* TruncateTableRequest::default_instance_ = NULL;

TruncateTableRequest* TruncateTableRequest::New() const {
  return new TruncateTableRequest;
}

void TruncateTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tablename()) {
      if (tablename_ != NULL) tablename_->::hbase::pb::TableName::Clear();
    }
    preservesplits_ = false;
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName tableName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preserveSplits;
        break;
      }

      // optional bool preserveSplits = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserveSplits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preservesplits_)));
          set_has_preservesplits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName tableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tablename(), output);
  }

  // optional bool preserveSplits = 2 [default = false];
  if (has_preservesplits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->preservesplits(), output);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce_group(), output);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName tableName = 1;
  if (has_tablename()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tablename(), target);
  }

  // optional bool preserveSplits = 2 [default = false];
  if (has_preservesplits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->preservesplits(), target);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce_group(), target);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName tableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tablename());
    }

    // optional bool preserveSplits = 2 [default = false];
    if (has_preservesplits()) {
      total_size += 1 + 1;
    }

    // optional uint64 nonce_group = 3 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 4 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateTableRequest::MergeFrom(const TruncateTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      mutable_tablename()->::hbase::pb::TableName::MergeFrom(from.tablename());
    }
    if (from.has_preservesplits()) {
      set_preservesplits(from.preservesplits());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateTableRequest::CopyFrom(const TruncateTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tablename()) {
    if (!this->tablename().IsInitialized()) return false;
  }
  return true;
}

void TruncateTableRequest::Swap(TruncateTableRequest* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    std::swap(preservesplits_, other->preservesplits_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateTableRequest_descriptor_;
  metadata.reflection = TruncateTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateTableResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

TruncateTableResponse::TruncateTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateTableResponse::InitAsDefaultInstance() {
}

TruncateTableResponse::TruncateTableResponse(const TruncateTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateTableResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateTableResponse::~TruncateTableResponse() {
  SharedDtor();
}

void TruncateTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TruncateTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateTableResponse_descriptor_;
}

const TruncateTableResponse& TruncateTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

TruncateTableResponse* TruncateTableResponse::default_instance_ = NULL;

TruncateTableResponse* TruncateTableResponse::New() const {
  return new TruncateTableResponse;
}

void TruncateTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateTableResponse::MergeFrom(const TruncateTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateTableResponse::CopyFrom(const TruncateTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateTableResponse::IsInitialized() const {

  return true;
}

void TruncateTableResponse::Swap(TruncateTableResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateTableResponse_descriptor_;
  metadata.reflection = TruncateTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnableTableRequest::kTableNameFieldNumber;
const int EnableTableRequest::kNonceGroupFieldNumber;
const int EnableTableRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

EnableTableRequest::EnableTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableTableRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

EnableTableRequest::EnableTableRequest(const EnableTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableTableRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableTableRequest::~EnableTableRequest() {
  SharedDtor();
}

void EnableTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void EnableTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableTableRequest_descriptor_;
}

const EnableTableRequest& EnableTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

EnableTableRequest* EnableTableRequest::default_instance_ = NULL;

EnableTableRequest* EnableTableRequest::New() const {
  return new EnableTableRequest;
}

void EnableTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // optional uint64 nonce_group = 2 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableTableRequest::MergeFrom(const EnableTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableTableRequest::CopyFrom(const EnableTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void EnableTableRequest::Swap(EnableTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableTableRequest_descriptor_;
  metadata.reflection = EnableTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnableTableResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

EnableTableResponse::EnableTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableTableResponse::InitAsDefaultInstance() {
}

EnableTableResponse::EnableTableResponse(const EnableTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableTableResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableTableResponse::~EnableTableResponse() {
  SharedDtor();
}

void EnableTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableTableResponse_descriptor_;
}

const EnableTableResponse& EnableTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

EnableTableResponse* EnableTableResponse::default_instance_ = NULL;

EnableTableResponse* EnableTableResponse::New() const {
  return new EnableTableResponse;
}

void EnableTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableTableResponse::MergeFrom(const EnableTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableTableResponse::CopyFrom(const EnableTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableTableResponse::IsInitialized() const {

  return true;
}

void EnableTableResponse::Swap(EnableTableResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableTableResponse_descriptor_;
  metadata.reflection = EnableTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisableTableRequest::kTableNameFieldNumber;
const int DisableTableRequest::kNonceGroupFieldNumber;
const int DisableTableRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

DisableTableRequest::DisableTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisableTableRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

DisableTableRequest::DisableTableRequest(const DisableTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisableTableRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisableTableRequest::~DisableTableRequest() {
  SharedDtor();
}

void DisableTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void DisableTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableTableRequest_descriptor_;
}

const DisableTableRequest& DisableTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DisableTableRequest* DisableTableRequest::default_instance_ = NULL;

DisableTableRequest* DisableTableRequest::New() const {
  return new DisableTableRequest;
}

void DisableTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisableTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisableTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisableTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisableTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // optional uint64 nonce_group = 2 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisableTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisableTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisableTableRequest::MergeFrom(const DisableTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisableTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableTableRequest::CopyFrom(const DisableTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void DisableTableRequest::Swap(DisableTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisableTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisableTableRequest_descriptor_;
  metadata.reflection = DisableTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisableTableResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

DisableTableResponse::DisableTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisableTableResponse::InitAsDefaultInstance() {
}

DisableTableResponse::DisableTableResponse(const DisableTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisableTableResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisableTableResponse::~DisableTableResponse() {
  SharedDtor();
}

void DisableTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisableTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableTableResponse_descriptor_;
}

const DisableTableResponse& DisableTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DisableTableResponse* DisableTableResponse::default_instance_ = NULL;

DisableTableResponse* DisableTableResponse::New() const {
  return new DisableTableResponse;
}

void DisableTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisableTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisableTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisableTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisableTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisableTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisableTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisableTableResponse::MergeFrom(const DisableTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisableTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableTableResponse::CopyFrom(const DisableTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTableResponse::IsInitialized() const {

  return true;
}

void DisableTableResponse::Swap(DisableTableResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisableTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisableTableResponse_descriptor_;
  metadata.reflection = DisableTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyTableRequest::kTableNameFieldNumber;
const int ModifyTableRequest::kTableSchemaFieldNumber;
const int ModifyTableRequest::kNonceGroupFieldNumber;
const int ModifyTableRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

ModifyTableRequest::ModifyTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyTableRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  table_schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

ModifyTableRequest::ModifyTableRequest(const ModifyTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyTableRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  table_schema_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyTableRequest::~ModifyTableRequest() {
  SharedDtor();
}

void ModifyTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete table_schema_;
  }
}

void ModifyTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTableRequest_descriptor_;
}

const ModifyTableRequest& ModifyTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ModifyTableRequest* ModifyTableRequest::default_instance_ = NULL;

ModifyTableRequest* ModifyTableRequest::New() const {
  return new ModifyTableRequest;
}

void ModifyTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_table_schema()) {
      if (table_schema_ != NULL) table_schema_->::hbase::pb::TableSchema::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_schema;
        break;
      }

      // required .hbase.pb.TableSchema table_schema = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // required .hbase.pb.TableSchema table_schema = 2;
  if (has_table_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_schema(), output);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce_group(), output);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // required .hbase.pb.TableSchema table_schema = 2;
  if (has_table_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_schema(), target);
  }

  // optional uint64 nonce_group = 3 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce_group(), target);
  }

  // optional uint64 nonce = 4 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required .hbase.pb.TableSchema table_schema = 2;
    if (has_table_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_schema());
    }

    // optional uint64 nonce_group = 3 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 4 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyTableRequest::MergeFrom(const ModifyTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_table_schema()) {
      mutable_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.table_schema());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTableRequest::CopyFrom(const ModifyTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_table_schema()) {
    if (!this->table_schema().IsInitialized()) return false;
  }
  return true;
}

void ModifyTableRequest::Swap(ModifyTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(table_schema_, other->table_schema_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyTableRequest_descriptor_;
  metadata.reflection = ModifyTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyTableResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

ModifyTableResponse::ModifyTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyTableResponse::InitAsDefaultInstance() {
}

ModifyTableResponse::ModifyTableResponse(const ModifyTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyTableResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyTableResponse::~ModifyTableResponse() {
  SharedDtor();
}

void ModifyTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyTableResponse_descriptor_;
}

const ModifyTableResponse& ModifyTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ModifyTableResponse* ModifyTableResponse::default_instance_ = NULL;

ModifyTableResponse* ModifyTableResponse::New() const {
  return new ModifyTableResponse;
}

void ModifyTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyTableResponse::MergeFrom(const ModifyTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTableResponse::CopyFrom(const ModifyTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTableResponse::IsInitialized() const {

  return true;
}

void ModifyTableResponse::Swap(ModifyTableResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyTableResponse_descriptor_;
  metadata.reflection = ModifyTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateNamespaceRequest::kNamespaceDescriptorFieldNumber;
const int CreateNamespaceRequest::kNonceGroupFieldNumber;
const int CreateNamespaceRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

CreateNamespaceRequest::CreateNamespaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateNamespaceRequest::InitAsDefaultInstance() {
  namespacedescriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
}

CreateNamespaceRequest::CreateNamespaceRequest(const CreateNamespaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateNamespaceRequest::SharedCtor() {
  _cached_size_ = 0;
  namespacedescriptor_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateNamespaceRequest::~CreateNamespaceRequest() {
  SharedDtor();
}

void CreateNamespaceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete namespacedescriptor_;
  }
}

void CreateNamespaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateNamespaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateNamespaceRequest_descriptor_;
}

const CreateNamespaceRequest& CreateNamespaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

CreateNamespaceRequest* CreateNamespaceRequest::default_instance_ = NULL;

CreateNamespaceRequest* CreateNamespaceRequest::New() const {
  return new CreateNamespaceRequest;
}

void CreateNamespaceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacedescriptor()) {
      if (namespacedescriptor_ != NULL) namespacedescriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateNamespaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namespacedescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateNamespaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  if (has_namespacedescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespacedescriptor(), output);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateNamespaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  if (has_namespacedescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespacedescriptor(), target);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateNamespaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
    if (has_namespacedescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespacedescriptor());
    }

    // optional uint64 nonce_group = 2 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateNamespaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateNamespaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateNamespaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateNamespaceRequest::MergeFrom(const CreateNamespaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacedescriptor()) {
      mutable_namespacedescriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.namespacedescriptor());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateNamespaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNamespaceRequest::CopyFrom(const CreateNamespaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNamespaceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_namespacedescriptor()) {
    if (!this->namespacedescriptor().IsInitialized()) return false;
  }
  return true;
}

void CreateNamespaceRequest::Swap(CreateNamespaceRequest* other) {
  if (other != this) {
    std::swap(namespacedescriptor_, other->namespacedescriptor_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateNamespaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateNamespaceRequest_descriptor_;
  metadata.reflection = CreateNamespaceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateNamespaceResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

CreateNamespaceResponse::CreateNamespaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateNamespaceResponse::InitAsDefaultInstance() {
}

CreateNamespaceResponse::CreateNamespaceResponse(const CreateNamespaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateNamespaceResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateNamespaceResponse::~CreateNamespaceResponse() {
  SharedDtor();
}

void CreateNamespaceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateNamespaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateNamespaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateNamespaceResponse_descriptor_;
}

const CreateNamespaceResponse& CreateNamespaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

CreateNamespaceResponse* CreateNamespaceResponse::default_instance_ = NULL;

CreateNamespaceResponse* CreateNamespaceResponse::New() const {
  return new CreateNamespaceResponse;
}

void CreateNamespaceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateNamespaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateNamespaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateNamespaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateNamespaceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateNamespaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateNamespaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateNamespaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateNamespaceResponse::MergeFrom(const CreateNamespaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateNamespaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNamespaceResponse::CopyFrom(const CreateNamespaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNamespaceResponse::IsInitialized() const {

  return true;
}

void CreateNamespaceResponse::Swap(CreateNamespaceResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateNamespaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateNamespaceResponse_descriptor_;
  metadata.reflection = CreateNamespaceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteNamespaceRequest::kNamespaceNameFieldNumber;
const int DeleteNamespaceRequest::kNonceGroupFieldNumber;
const int DeleteNamespaceRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

DeleteNamespaceRequest::DeleteNamespaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteNamespaceRequest::InitAsDefaultInstance() {
}

DeleteNamespaceRequest::DeleteNamespaceRequest(const DeleteNamespaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteNamespaceRequest::SharedCtor() {
  _cached_size_ = 0;
  namespacename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteNamespaceRequest::~DeleteNamespaceRequest() {
  SharedDtor();
}

void DeleteNamespaceRequest::SharedDtor() {
  if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
    delete namespacename_;
  }
  if (this != default_instance_) {
  }
}

void DeleteNamespaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNamespaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteNamespaceRequest_descriptor_;
}

const DeleteNamespaceRequest& DeleteNamespaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteNamespaceRequest* DeleteNamespaceRequest::default_instance_ = NULL;

DeleteNamespaceRequest* DeleteNamespaceRequest::New() const {
  return new DeleteNamespaceRequest;
}

void DeleteNamespaceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacename()) {
      if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
        namespacename_->clear();
      }
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteNamespaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string namespaceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespacename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespacename().data(), this->namespacename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteNamespaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namespacename(), output);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteNamespaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespacename(), target);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteNamespaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string namespaceName = 1;
    if (has_namespacename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespacename());
    }

    // optional uint64 nonce_group = 2 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNamespaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteNamespaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteNamespaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteNamespaceRequest::MergeFrom(const DeleteNamespaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacename()) {
      set_namespacename(from.namespacename());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteNamespaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNamespaceRequest::CopyFrom(const DeleteNamespaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNamespaceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteNamespaceRequest::Swap(DeleteNamespaceRequest* other) {
  if (other != this) {
    std::swap(namespacename_, other->namespacename_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteNamespaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteNamespaceRequest_descriptor_;
  metadata.reflection = DeleteNamespaceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteNamespaceResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

DeleteNamespaceResponse::DeleteNamespaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteNamespaceResponse::InitAsDefaultInstance() {
}

DeleteNamespaceResponse::DeleteNamespaceResponse(const DeleteNamespaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteNamespaceResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteNamespaceResponse::~DeleteNamespaceResponse() {
  SharedDtor();
}

void DeleteNamespaceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteNamespaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNamespaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteNamespaceResponse_descriptor_;
}

const DeleteNamespaceResponse& DeleteNamespaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteNamespaceResponse* DeleteNamespaceResponse::default_instance_ = NULL;

DeleteNamespaceResponse* DeleteNamespaceResponse::New() const {
  return new DeleteNamespaceResponse;
}

void DeleteNamespaceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteNamespaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteNamespaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteNamespaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteNamespaceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNamespaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteNamespaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteNamespaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteNamespaceResponse::MergeFrom(const DeleteNamespaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteNamespaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNamespaceResponse::CopyFrom(const DeleteNamespaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNamespaceResponse::IsInitialized() const {

  return true;
}

void DeleteNamespaceResponse::Swap(DeleteNamespaceResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteNamespaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteNamespaceResponse_descriptor_;
  metadata.reflection = DeleteNamespaceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyNamespaceRequest::kNamespaceDescriptorFieldNumber;
const int ModifyNamespaceRequest::kNonceGroupFieldNumber;
const int ModifyNamespaceRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

ModifyNamespaceRequest::ModifyNamespaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyNamespaceRequest::InitAsDefaultInstance() {
  namespacedescriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
}

ModifyNamespaceRequest::ModifyNamespaceRequest(const ModifyNamespaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyNamespaceRequest::SharedCtor() {
  _cached_size_ = 0;
  namespacedescriptor_ = NULL;
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyNamespaceRequest::~ModifyNamespaceRequest() {
  SharedDtor();
}

void ModifyNamespaceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete namespacedescriptor_;
  }
}

void ModifyNamespaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyNamespaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyNamespaceRequest_descriptor_;
}

const ModifyNamespaceRequest& ModifyNamespaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ModifyNamespaceRequest* ModifyNamespaceRequest::default_instance_ = NULL;

ModifyNamespaceRequest* ModifyNamespaceRequest::New() const {
  return new ModifyNamespaceRequest;
}

void ModifyNamespaceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacedescriptor()) {
      if (namespacedescriptor_ != NULL) namespacedescriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyNamespaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namespacedescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyNamespaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  if (has_namespacedescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespacedescriptor(), output);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyNamespaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  if (has_namespacedescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespacedescriptor(), target);
  }

  // optional uint64 nonce_group = 2 [default = 0];
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3 [default = 0];
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyNamespaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
    if (has_namespacedescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespacedescriptor());
    }

    // optional uint64 nonce_group = 2 [default = 0];
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3 [default = 0];
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyNamespaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyNamespaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyNamespaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyNamespaceRequest::MergeFrom(const ModifyNamespaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacedescriptor()) {
      mutable_namespacedescriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.namespacedescriptor());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyNamespaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyNamespaceRequest::CopyFrom(const ModifyNamespaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyNamespaceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_namespacedescriptor()) {
    if (!this->namespacedescriptor().IsInitialized()) return false;
  }
  return true;
}

void ModifyNamespaceRequest::Swap(ModifyNamespaceRequest* other) {
  if (other != this) {
    std::swap(namespacedescriptor_, other->namespacedescriptor_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyNamespaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyNamespaceRequest_descriptor_;
  metadata.reflection = ModifyNamespaceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyNamespaceResponse::kProcIdFieldNumber;
#endif  // !_MSC_VER

ModifyNamespaceResponse::ModifyNamespaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyNamespaceResponse::InitAsDefaultInstance() {
}

ModifyNamespaceResponse::ModifyNamespaceResponse(const ModifyNamespaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyNamespaceResponse::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyNamespaceResponse::~ModifyNamespaceResponse() {
  SharedDtor();
}

void ModifyNamespaceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyNamespaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyNamespaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyNamespaceResponse_descriptor_;
}

const ModifyNamespaceResponse& ModifyNamespaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ModifyNamespaceResponse* ModifyNamespaceResponse::default_instance_ = NULL;

ModifyNamespaceResponse* ModifyNamespaceResponse::New() const {
  return new ModifyNamespaceResponse;
}

void ModifyNamespaceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyNamespaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyNamespaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyNamespaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyNamespaceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyNamespaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyNamespaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyNamespaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyNamespaceResponse::MergeFrom(const ModifyNamespaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyNamespaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyNamespaceResponse::CopyFrom(const ModifyNamespaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyNamespaceResponse::IsInitialized() const {

  return true;
}

void ModifyNamespaceResponse::Swap(ModifyNamespaceResponse* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyNamespaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyNamespaceResponse_descriptor_;
  metadata.reflection = ModifyNamespaceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNamespaceDescriptorRequest::kNamespaceNameFieldNumber;
#endif  // !_MSC_VER

GetNamespaceDescriptorRequest::GetNamespaceDescriptorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNamespaceDescriptorRequest::InitAsDefaultInstance() {
}

GetNamespaceDescriptorRequest::GetNamespaceDescriptorRequest(const GetNamespaceDescriptorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNamespaceDescriptorRequest::SharedCtor() {
  _cached_size_ = 0;
  namespacename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNamespaceDescriptorRequest::~GetNamespaceDescriptorRequest() {
  SharedDtor();
}

void GetNamespaceDescriptorRequest::SharedDtor() {
  if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
    delete namespacename_;
  }
  if (this != default_instance_) {
  }
}

void GetNamespaceDescriptorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNamespaceDescriptorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNamespaceDescriptorRequest_descriptor_;
}

const GetNamespaceDescriptorRequest& GetNamespaceDescriptorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetNamespaceDescriptorRequest* GetNamespaceDescriptorRequest::default_instance_ = NULL;

GetNamespaceDescriptorRequest* GetNamespaceDescriptorRequest::New() const {
  return new GetNamespaceDescriptorRequest;
}

void GetNamespaceDescriptorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacename()) {
      if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
        namespacename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNamespaceDescriptorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string namespaceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespacename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespacename().data(), this->namespacename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNamespaceDescriptorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namespacename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNamespaceDescriptorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespacename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNamespaceDescriptorRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string namespaceName = 1;
    if (has_namespacename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespacename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNamespaceDescriptorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNamespaceDescriptorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNamespaceDescriptorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNamespaceDescriptorRequest::MergeFrom(const GetNamespaceDescriptorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacename()) {
      set_namespacename(from.namespacename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNamespaceDescriptorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNamespaceDescriptorRequest::CopyFrom(const GetNamespaceDescriptorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNamespaceDescriptorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetNamespaceDescriptorRequest::Swap(GetNamespaceDescriptorRequest* other) {
  if (other != this) {
    std::swap(namespacename_, other->namespacename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNamespaceDescriptorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNamespaceDescriptorRequest_descriptor_;
  metadata.reflection = GetNamespaceDescriptorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNamespaceDescriptorResponse::kNamespaceDescriptorFieldNumber;
#endif  // !_MSC_VER

GetNamespaceDescriptorResponse::GetNamespaceDescriptorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNamespaceDescriptorResponse::InitAsDefaultInstance() {
  namespacedescriptor_ = const_cast< ::hbase::pb::NamespaceDescriptor*>(&::hbase::pb::NamespaceDescriptor::default_instance());
}

GetNamespaceDescriptorResponse::GetNamespaceDescriptorResponse(const GetNamespaceDescriptorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNamespaceDescriptorResponse::SharedCtor() {
  _cached_size_ = 0;
  namespacedescriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNamespaceDescriptorResponse::~GetNamespaceDescriptorResponse() {
  SharedDtor();
}

void GetNamespaceDescriptorResponse::SharedDtor() {
  if (this != default_instance_) {
    delete namespacedescriptor_;
  }
}

void GetNamespaceDescriptorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNamespaceDescriptorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNamespaceDescriptorResponse_descriptor_;
}

const GetNamespaceDescriptorResponse& GetNamespaceDescriptorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetNamespaceDescriptorResponse* GetNamespaceDescriptorResponse::default_instance_ = NULL;

GetNamespaceDescriptorResponse* GetNamespaceDescriptorResponse::New() const {
  return new GetNamespaceDescriptorResponse;
}

void GetNamespaceDescriptorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacedescriptor()) {
      if (namespacedescriptor_ != NULL) namespacedescriptor_->::hbase::pb::NamespaceDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNamespaceDescriptorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_namespacedescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNamespaceDescriptorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  if (has_namespacedescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespacedescriptor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNamespaceDescriptorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  if (has_namespacedescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespacedescriptor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNamespaceDescriptorResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
    if (has_namespacedescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->namespacedescriptor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNamespaceDescriptorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNamespaceDescriptorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNamespaceDescriptorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNamespaceDescriptorResponse::MergeFrom(const GetNamespaceDescriptorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacedescriptor()) {
      mutable_namespacedescriptor()->::hbase::pb::NamespaceDescriptor::MergeFrom(from.namespacedescriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNamespaceDescriptorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNamespaceDescriptorResponse::CopyFrom(const GetNamespaceDescriptorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNamespaceDescriptorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_namespacedescriptor()) {
    if (!this->namespacedescriptor().IsInitialized()) return false;
  }
  return true;
}

void GetNamespaceDescriptorResponse::Swap(GetNamespaceDescriptorResponse* other) {
  if (other != this) {
    std::swap(namespacedescriptor_, other->namespacedescriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNamespaceDescriptorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNamespaceDescriptorResponse_descriptor_;
  metadata.reflection = GetNamespaceDescriptorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListNamespaceDescriptorsRequest::ListNamespaceDescriptorsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListNamespaceDescriptorsRequest::InitAsDefaultInstance() {
}

ListNamespaceDescriptorsRequest::ListNamespaceDescriptorsRequest(const ListNamespaceDescriptorsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListNamespaceDescriptorsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListNamespaceDescriptorsRequest::~ListNamespaceDescriptorsRequest() {
  SharedDtor();
}

void ListNamespaceDescriptorsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListNamespaceDescriptorsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListNamespaceDescriptorsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListNamespaceDescriptorsRequest_descriptor_;
}

const ListNamespaceDescriptorsRequest& ListNamespaceDescriptorsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListNamespaceDescriptorsRequest* ListNamespaceDescriptorsRequest::default_instance_ = NULL;

ListNamespaceDescriptorsRequest* ListNamespaceDescriptorsRequest::New() const {
  return new ListNamespaceDescriptorsRequest;
}

void ListNamespaceDescriptorsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListNamespaceDescriptorsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ListNamespaceDescriptorsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListNamespaceDescriptorsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListNamespaceDescriptorsRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListNamespaceDescriptorsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListNamespaceDescriptorsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListNamespaceDescriptorsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListNamespaceDescriptorsRequest::MergeFrom(const ListNamespaceDescriptorsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListNamespaceDescriptorsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNamespaceDescriptorsRequest::CopyFrom(const ListNamespaceDescriptorsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNamespaceDescriptorsRequest::IsInitialized() const {

  return true;
}

void ListNamespaceDescriptorsRequest::Swap(ListNamespaceDescriptorsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListNamespaceDescriptorsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListNamespaceDescriptorsRequest_descriptor_;
  metadata.reflection = ListNamespaceDescriptorsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListNamespaceDescriptorsResponse::kNamespaceDescriptorFieldNumber;
#endif  // !_MSC_VER

ListNamespaceDescriptorsResponse::ListNamespaceDescriptorsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListNamespaceDescriptorsResponse::InitAsDefaultInstance() {
}

ListNamespaceDescriptorsResponse::ListNamespaceDescriptorsResponse(const ListNamespaceDescriptorsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListNamespaceDescriptorsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListNamespaceDescriptorsResponse::~ListNamespaceDescriptorsResponse() {
  SharedDtor();
}

void ListNamespaceDescriptorsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListNamespaceDescriptorsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListNamespaceDescriptorsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListNamespaceDescriptorsResponse_descriptor_;
}

const ListNamespaceDescriptorsResponse& ListNamespaceDescriptorsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListNamespaceDescriptorsResponse* ListNamespaceDescriptorsResponse::default_instance_ = NULL;

ListNamespaceDescriptorsResponse* ListNamespaceDescriptorsResponse::New() const {
  return new ListNamespaceDescriptorsResponse;
}

void ListNamespaceDescriptorsResponse::Clear() {
  namespacedescriptor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListNamespaceDescriptorsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespaceDescriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namespacedescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_namespaceDescriptor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListNamespaceDescriptorsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  for (int i = 0; i < this->namespacedescriptor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namespacedescriptor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListNamespaceDescriptorsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  for (int i = 0; i < this->namespacedescriptor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namespacedescriptor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListNamespaceDescriptorsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.NamespaceDescriptor namespaceDescriptor = 1;
  total_size += 1 * this->namespacedescriptor_size();
  for (int i = 0; i < this->namespacedescriptor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namespacedescriptor(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListNamespaceDescriptorsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListNamespaceDescriptorsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListNamespaceDescriptorsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListNamespaceDescriptorsResponse::MergeFrom(const ListNamespaceDescriptorsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  namespacedescriptor_.MergeFrom(from.namespacedescriptor_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListNamespaceDescriptorsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNamespaceDescriptorsResponse::CopyFrom(const ListNamespaceDescriptorsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNamespaceDescriptorsResponse::IsInitialized() const {

  for (int i = 0; i < namespacedescriptor_size(); i++) {
    if (!this->namespacedescriptor(i).IsInitialized()) return false;
  }
  return true;
}

void ListNamespaceDescriptorsResponse::Swap(ListNamespaceDescriptorsResponse* other) {
  if (other != this) {
    namespacedescriptor_.Swap(&other->namespacedescriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListNamespaceDescriptorsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListNamespaceDescriptorsResponse_descriptor_;
  metadata.reflection = ListNamespaceDescriptorsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListTableDescriptorsByNamespaceRequest::kNamespaceNameFieldNumber;
#endif  // !_MSC_VER

ListTableDescriptorsByNamespaceRequest::ListTableDescriptorsByNamespaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListTableDescriptorsByNamespaceRequest::InitAsDefaultInstance() {
}

ListTableDescriptorsByNamespaceRequest::ListTableDescriptorsByNamespaceRequest(const ListTableDescriptorsByNamespaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListTableDescriptorsByNamespaceRequest::SharedCtor() {
  _cached_size_ = 0;
  namespacename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTableDescriptorsByNamespaceRequest::~ListTableDescriptorsByNamespaceRequest() {
  SharedDtor();
}

void ListTableDescriptorsByNamespaceRequest::SharedDtor() {
  if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
    delete namespacename_;
  }
  if (this != default_instance_) {
  }
}

void ListTableDescriptorsByNamespaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTableDescriptorsByNamespaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTableDescriptorsByNamespaceRequest_descriptor_;
}

const ListTableDescriptorsByNamespaceRequest& ListTableDescriptorsByNamespaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListTableDescriptorsByNamespaceRequest* ListTableDescriptorsByNamespaceRequest::default_instance_ = NULL;

ListTableDescriptorsByNamespaceRequest* ListTableDescriptorsByNamespaceRequest::New() const {
  return new ListTableDescriptorsByNamespaceRequest;
}

void ListTableDescriptorsByNamespaceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacename()) {
      if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
        namespacename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTableDescriptorsByNamespaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string namespaceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespacename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespacename().data(), this->namespacename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListTableDescriptorsByNamespaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namespacename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListTableDescriptorsByNamespaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespacename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListTableDescriptorsByNamespaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string namespaceName = 1;
    if (has_namespacename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespacename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTableDescriptorsByNamespaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTableDescriptorsByNamespaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTableDescriptorsByNamespaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTableDescriptorsByNamespaceRequest::MergeFrom(const ListTableDescriptorsByNamespaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacename()) {
      set_namespacename(from.namespacename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTableDescriptorsByNamespaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTableDescriptorsByNamespaceRequest::CopyFrom(const ListTableDescriptorsByNamespaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTableDescriptorsByNamespaceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListTableDescriptorsByNamespaceRequest::Swap(ListTableDescriptorsByNamespaceRequest* other) {
  if (other != this) {
    std::swap(namespacename_, other->namespacename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTableDescriptorsByNamespaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTableDescriptorsByNamespaceRequest_descriptor_;
  metadata.reflection = ListTableDescriptorsByNamespaceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListTableDescriptorsByNamespaceResponse::kTableSchemaFieldNumber;
#endif  // !_MSC_VER

ListTableDescriptorsByNamespaceResponse::ListTableDescriptorsByNamespaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListTableDescriptorsByNamespaceResponse::InitAsDefaultInstance() {
}

ListTableDescriptorsByNamespaceResponse::ListTableDescriptorsByNamespaceResponse(const ListTableDescriptorsByNamespaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListTableDescriptorsByNamespaceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTableDescriptorsByNamespaceResponse::~ListTableDescriptorsByNamespaceResponse() {
  SharedDtor();
}

void ListTableDescriptorsByNamespaceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListTableDescriptorsByNamespaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTableDescriptorsByNamespaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTableDescriptorsByNamespaceResponse_descriptor_;
}

const ListTableDescriptorsByNamespaceResponse& ListTableDescriptorsByNamespaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListTableDescriptorsByNamespaceResponse* ListTableDescriptorsByNamespaceResponse::default_instance_ = NULL;

ListTableDescriptorsByNamespaceResponse* ListTableDescriptorsByNamespaceResponse::New() const {
  return new ListTableDescriptorsByNamespaceResponse;
}

void ListTableDescriptorsByNamespaceResponse::Clear() {
  tableschema_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTableDescriptorsByNamespaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.TableSchema tableSchema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableSchema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tableschema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tableSchema;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListTableDescriptorsByNamespaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.TableSchema tableSchema = 1;
  for (int i = 0; i < this->tableschema_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tableschema(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListTableDescriptorsByNamespaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.TableSchema tableSchema = 1;
  for (int i = 0; i < this->tableschema_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tableschema(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListTableDescriptorsByNamespaceResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.TableSchema tableSchema = 1;
  total_size += 1 * this->tableschema_size();
  for (int i = 0; i < this->tableschema_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableschema(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTableDescriptorsByNamespaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTableDescriptorsByNamespaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTableDescriptorsByNamespaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTableDescriptorsByNamespaceResponse::MergeFrom(const ListTableDescriptorsByNamespaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tableschema_.MergeFrom(from.tableschema_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTableDescriptorsByNamespaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTableDescriptorsByNamespaceResponse::CopyFrom(const ListTableDescriptorsByNamespaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTableDescriptorsByNamespaceResponse::IsInitialized() const {

  for (int i = 0; i < tableschema_size(); i++) {
    if (!this->tableschema(i).IsInitialized()) return false;
  }
  return true;
}

void ListTableDescriptorsByNamespaceResponse::Swap(ListTableDescriptorsByNamespaceResponse* other) {
  if (other != this) {
    tableschema_.Swap(&other->tableschema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTableDescriptorsByNamespaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTableDescriptorsByNamespaceResponse_descriptor_;
  metadata.reflection = ListTableDescriptorsByNamespaceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListTableNamesByNamespaceRequest::kNamespaceNameFieldNumber;
#endif  // !_MSC_VER

ListTableNamesByNamespaceRequest::ListTableNamesByNamespaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListTableNamesByNamespaceRequest::InitAsDefaultInstance() {
}

ListTableNamesByNamespaceRequest::ListTableNamesByNamespaceRequest(const ListTableNamesByNamespaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListTableNamesByNamespaceRequest::SharedCtor() {
  _cached_size_ = 0;
  namespacename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTableNamesByNamespaceRequest::~ListTableNamesByNamespaceRequest() {
  SharedDtor();
}

void ListTableNamesByNamespaceRequest::SharedDtor() {
  if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
    delete namespacename_;
  }
  if (this != default_instance_) {
  }
}

void ListTableNamesByNamespaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTableNamesByNamespaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTableNamesByNamespaceRequest_descriptor_;
}

const ListTableNamesByNamespaceRequest& ListTableNamesByNamespaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListTableNamesByNamespaceRequest* ListTableNamesByNamespaceRequest::default_instance_ = NULL;

ListTableNamesByNamespaceRequest* ListTableNamesByNamespaceRequest::New() const {
  return new ListTableNamesByNamespaceRequest;
}

void ListTableNamesByNamespaceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespacename()) {
      if (namespacename_ != &::google::protobuf::internal::kEmptyString) {
        namespacename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTableNamesByNamespaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string namespaceName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespacename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespacename().data(), this->namespacename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListTableNamesByNamespaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namespacename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListTableNamesByNamespaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string namespaceName = 1;
  if (has_namespacename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespacename().data(), this->namespacename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespacename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListTableNamesByNamespaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string namespaceName = 1;
    if (has_namespacename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespacename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTableNamesByNamespaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTableNamesByNamespaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTableNamesByNamespaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTableNamesByNamespaceRequest::MergeFrom(const ListTableNamesByNamespaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespacename()) {
      set_namespacename(from.namespacename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTableNamesByNamespaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTableNamesByNamespaceRequest::CopyFrom(const ListTableNamesByNamespaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTableNamesByNamespaceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListTableNamesByNamespaceRequest::Swap(ListTableNamesByNamespaceRequest* other) {
  if (other != this) {
    std::swap(namespacename_, other->namespacename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTableNamesByNamespaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTableNamesByNamespaceRequest_descriptor_;
  metadata.reflection = ListTableNamesByNamespaceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListTableNamesByNamespaceResponse::kTableNameFieldNumber;
#endif  // !_MSC_VER

ListTableNamesByNamespaceResponse::ListTableNamesByNamespaceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListTableNamesByNamespaceResponse::InitAsDefaultInstance() {
}

ListTableNamesByNamespaceResponse::ListTableNamesByNamespaceResponse(const ListTableNamesByNamespaceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListTableNamesByNamespaceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTableNamesByNamespaceResponse::~ListTableNamesByNamespaceResponse() {
  SharedDtor();
}

void ListTableNamesByNamespaceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListTableNamesByNamespaceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTableNamesByNamespaceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTableNamesByNamespaceResponse_descriptor_;
}

const ListTableNamesByNamespaceResponse& ListTableNamesByNamespaceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListTableNamesByNamespaceResponse* ListTableNamesByNamespaceResponse::default_instance_ = NULL;

ListTableNamesByNamespaceResponse* ListTableNamesByNamespaceResponse::New() const {
  return new ListTableNamesByNamespaceResponse;
}

void ListTableNamesByNamespaceResponse::Clear() {
  tablename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTableNamesByNamespaceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.TableName tableName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tableName;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListTableNamesByNamespaceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.TableName tableName = 1;
  for (int i = 0; i < this->tablename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tablename(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListTableNamesByNamespaceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.TableName tableName = 1;
  for (int i = 0; i < this->tablename_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tablename(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListTableNamesByNamespaceResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.TableName tableName = 1;
  total_size += 1 * this->tablename_size();
  for (int i = 0; i < this->tablename_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tablename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTableNamesByNamespaceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTableNamesByNamespaceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTableNamesByNamespaceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTableNamesByNamespaceResponse::MergeFrom(const ListTableNamesByNamespaceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tablename_.MergeFrom(from.tablename_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTableNamesByNamespaceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTableNamesByNamespaceResponse::CopyFrom(const ListTableNamesByNamespaceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTableNamesByNamespaceResponse::IsInitialized() const {

  for (int i = 0; i < tablename_size(); i++) {
    if (!this->tablename(i).IsInitialized()) return false;
  }
  return true;
}

void ListTableNamesByNamespaceResponse::Swap(ListTableNamesByNamespaceResponse* other) {
  if (other != this) {
    tablename_.Swap(&other->tablename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTableNamesByNamespaceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTableNamesByNamespaceResponse_descriptor_;
  metadata.reflection = ListTableNamesByNamespaceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownRequest::InitAsDefaultInstance() {
}

ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownRequest::~ShutdownRequest() {
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownRequest_descriptor_;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ShutdownRequest* ShutdownRequest::default_instance_ = NULL;

ShutdownRequest* ShutdownRequest::New() const {
  return new ShutdownRequest;
}

void ShutdownRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {

  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownRequest_descriptor_;
  metadata.reflection = ShutdownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShutdownResponse::ShutdownResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutdownResponse::InitAsDefaultInstance() {
}

ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutdownResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownResponse::~ShutdownResponse() {
  SharedDtor();
}

void ShutdownResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownResponse_descriptor_;
}

const ShutdownResponse& ShutdownResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ShutdownResponse* ShutdownResponse::default_instance_ = NULL;

ShutdownResponse* ShutdownResponse::New() const {
  return new ShutdownResponse;
}

void ShutdownResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutdownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ShutdownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutdownResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutdownResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutdownResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutdownResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutdownResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {

  return true;
}

void ShutdownResponse::Swap(ShutdownResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutdownResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownResponse_descriptor_;
  metadata.reflection = ShutdownResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopMasterRequest::StopMasterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopMasterRequest::InitAsDefaultInstance() {
}

StopMasterRequest::StopMasterRequest(const StopMasterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopMasterRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopMasterRequest::~StopMasterRequest() {
  SharedDtor();
}

void StopMasterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopMasterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopMasterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopMasterRequest_descriptor_;
}

const StopMasterRequest& StopMasterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

StopMasterRequest* StopMasterRequest::default_instance_ = NULL;

StopMasterRequest* StopMasterRequest::New() const {
  return new StopMasterRequest;
}

void StopMasterRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopMasterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StopMasterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopMasterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopMasterRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopMasterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopMasterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopMasterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopMasterRequest::MergeFrom(const StopMasterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopMasterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMasterRequest::CopyFrom(const StopMasterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMasterRequest::IsInitialized() const {

  return true;
}

void StopMasterRequest::Swap(StopMasterRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopMasterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopMasterRequest_descriptor_;
  metadata.reflection = StopMasterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopMasterResponse::StopMasterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopMasterResponse::InitAsDefaultInstance() {
}

StopMasterResponse::StopMasterResponse(const StopMasterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopMasterResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopMasterResponse::~StopMasterResponse() {
  SharedDtor();
}

void StopMasterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopMasterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopMasterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopMasterResponse_descriptor_;
}

const StopMasterResponse& StopMasterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

StopMasterResponse* StopMasterResponse::default_instance_ = NULL;

StopMasterResponse* StopMasterResponse::New() const {
  return new StopMasterResponse;
}

void StopMasterResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopMasterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StopMasterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopMasterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopMasterResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopMasterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopMasterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopMasterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopMasterResponse::MergeFrom(const StopMasterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopMasterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMasterResponse::CopyFrom(const StopMasterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMasterResponse::IsInitialized() const {

  return true;
}

void StopMasterResponse::Swap(StopMasterResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopMasterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopMasterResponse_descriptor_;
  metadata.reflection = StopMasterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BalanceRequest::kForceFieldNumber;
#endif  // !_MSC_VER

BalanceRequest::BalanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BalanceRequest::InitAsDefaultInstance() {
}

BalanceRequest::BalanceRequest(const BalanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BalanceRequest::SharedCtor() {
  _cached_size_ = 0;
  force_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BalanceRequest::~BalanceRequest() {
  SharedDtor();
}

void BalanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BalanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalanceRequest_descriptor_;
}

const BalanceRequest& BalanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

BalanceRequest* BalanceRequest::default_instance_ = NULL;

BalanceRequest* BalanceRequest::New() const {
  return new BalanceRequest;
}

void BalanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    force_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool force = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool force = 1;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BalanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool force = 1;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BalanceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool force = 1;
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BalanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BalanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BalanceRequest::MergeFrom(const BalanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceRequest::CopyFrom(const BalanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceRequest::IsInitialized() const {

  return true;
}

void BalanceRequest::Swap(BalanceRequest* other) {
  if (other != this) {
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BalanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalanceRequest_descriptor_;
  metadata.reflection = BalanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BalanceResponse::kBalancerRanFieldNumber;
#endif  // !_MSC_VER

BalanceResponse::BalanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BalanceResponse::InitAsDefaultInstance() {
}

BalanceResponse::BalanceResponse(const BalanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BalanceResponse::SharedCtor() {
  _cached_size_ = 0;
  balancer_ran_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BalanceResponse::~BalanceResponse() {
  SharedDtor();
}

void BalanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BalanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalanceResponse_descriptor_;
}

const BalanceResponse& BalanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

BalanceResponse* BalanceResponse::default_instance_ = NULL;

BalanceResponse* BalanceResponse::New() const {
  return new BalanceResponse;
}

void BalanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    balancer_ran_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BalanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool balancer_ran = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &balancer_ran_)));
          set_has_balancer_ran();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BalanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool balancer_ran = 1;
  if (has_balancer_ran()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->balancer_ran(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BalanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool balancer_ran = 1;
  if (has_balancer_ran()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->balancer_ran(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BalanceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool balancer_ran = 1;
    if (has_balancer_ran()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BalanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BalanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BalanceResponse::MergeFrom(const BalanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balancer_ran()) {
      set_balancer_ran(from.balancer_ran());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BalanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceResponse::CopyFrom(const BalanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BalanceResponse::Swap(BalanceResponse* other) {
  if (other != this) {
    std::swap(balancer_ran_, other->balancer_ran_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BalanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalanceResponse_descriptor_;
  metadata.reflection = BalanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetBalancerRunningRequest::kOnFieldNumber;
const int SetBalancerRunningRequest::kSynchronousFieldNumber;
#endif  // !_MSC_VER

SetBalancerRunningRequest::SetBalancerRunningRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetBalancerRunningRequest::InitAsDefaultInstance() {
}

SetBalancerRunningRequest::SetBalancerRunningRequest(const SetBalancerRunningRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetBalancerRunningRequest::SharedCtor() {
  _cached_size_ = 0;
  on_ = false;
  synchronous_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBalancerRunningRequest::~SetBalancerRunningRequest() {
  SharedDtor();
}

void SetBalancerRunningRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetBalancerRunningRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBalancerRunningRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBalancerRunningRequest_descriptor_;
}

const SetBalancerRunningRequest& SetBalancerRunningRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetBalancerRunningRequest* SetBalancerRunningRequest::default_instance_ = NULL;

SetBalancerRunningRequest* SetBalancerRunningRequest::New() const {
  return new SetBalancerRunningRequest;
}

void SetBalancerRunningRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    on_ = false;
    synchronous_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBalancerRunningRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool on = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
          set_has_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_synchronous;
        break;
      }

      // optional bool synchronous = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
          set_has_synchronous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetBalancerRunningRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool on = 1;
  if (has_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->on(), output);
  }

  // optional bool synchronous = 2;
  if (has_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->synchronous(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetBalancerRunningRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool on = 1;
  if (has_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->on(), target);
  }

  // optional bool synchronous = 2;
  if (has_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->synchronous(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetBalancerRunningRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool on = 1;
    if (has_on()) {
      total_size += 1 + 1;
    }

    // optional bool synchronous = 2;
    if (has_synchronous()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBalancerRunningRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBalancerRunningRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBalancerRunningRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBalancerRunningRequest::MergeFrom(const SetBalancerRunningRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on()) {
      set_on(from.on());
    }
    if (from.has_synchronous()) {
      set_synchronous(from.synchronous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBalancerRunningRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBalancerRunningRequest::CopyFrom(const SetBalancerRunningRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBalancerRunningRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetBalancerRunningRequest::Swap(SetBalancerRunningRequest* other) {
  if (other != this) {
    std::swap(on_, other->on_);
    std::swap(synchronous_, other->synchronous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBalancerRunningRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBalancerRunningRequest_descriptor_;
  metadata.reflection = SetBalancerRunningRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetBalancerRunningResponse::kPrevBalanceValueFieldNumber;
#endif  // !_MSC_VER

SetBalancerRunningResponse::SetBalancerRunningResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetBalancerRunningResponse::InitAsDefaultInstance() {
}

SetBalancerRunningResponse::SetBalancerRunningResponse(const SetBalancerRunningResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetBalancerRunningResponse::SharedCtor() {
  _cached_size_ = 0;
  prev_balance_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBalancerRunningResponse::~SetBalancerRunningResponse() {
  SharedDtor();
}

void SetBalancerRunningResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetBalancerRunningResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBalancerRunningResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBalancerRunningResponse_descriptor_;
}

const SetBalancerRunningResponse& SetBalancerRunningResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetBalancerRunningResponse* SetBalancerRunningResponse::default_instance_ = NULL;

SetBalancerRunningResponse* SetBalancerRunningResponse::New() const {
  return new SetBalancerRunningResponse;
}

void SetBalancerRunningResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prev_balance_value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBalancerRunningResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool prev_balance_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_balance_value_)));
          set_has_prev_balance_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetBalancerRunningResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool prev_balance_value = 1;
  if (has_prev_balance_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->prev_balance_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetBalancerRunningResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool prev_balance_value = 1;
  if (has_prev_balance_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->prev_balance_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetBalancerRunningResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool prev_balance_value = 1;
    if (has_prev_balance_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBalancerRunningResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBalancerRunningResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBalancerRunningResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBalancerRunningResponse::MergeFrom(const SetBalancerRunningResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prev_balance_value()) {
      set_prev_balance_value(from.prev_balance_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBalancerRunningResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBalancerRunningResponse::CopyFrom(const SetBalancerRunningResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBalancerRunningResponse::IsInitialized() const {

  return true;
}

void SetBalancerRunningResponse::Swap(SetBalancerRunningResponse* other) {
  if (other != this) {
    std::swap(prev_balance_value_, other->prev_balance_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBalancerRunningResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBalancerRunningResponse_descriptor_;
  metadata.reflection = SetBalancerRunningResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsBalancerEnabledRequest::IsBalancerEnabledRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsBalancerEnabledRequest::InitAsDefaultInstance() {
}

IsBalancerEnabledRequest::IsBalancerEnabledRequest(const IsBalancerEnabledRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsBalancerEnabledRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsBalancerEnabledRequest::~IsBalancerEnabledRequest() {
  SharedDtor();
}

void IsBalancerEnabledRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsBalancerEnabledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsBalancerEnabledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsBalancerEnabledRequest_descriptor_;
}

const IsBalancerEnabledRequest& IsBalancerEnabledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsBalancerEnabledRequest* IsBalancerEnabledRequest::default_instance_ = NULL;

IsBalancerEnabledRequest* IsBalancerEnabledRequest::New() const {
  return new IsBalancerEnabledRequest;
}

void IsBalancerEnabledRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsBalancerEnabledRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IsBalancerEnabledRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsBalancerEnabledRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsBalancerEnabledRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsBalancerEnabledRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsBalancerEnabledRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsBalancerEnabledRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsBalancerEnabledRequest::MergeFrom(const IsBalancerEnabledRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsBalancerEnabledRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBalancerEnabledRequest::CopyFrom(const IsBalancerEnabledRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBalancerEnabledRequest::IsInitialized() const {

  return true;
}

void IsBalancerEnabledRequest::Swap(IsBalancerEnabledRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsBalancerEnabledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsBalancerEnabledRequest_descriptor_;
  metadata.reflection = IsBalancerEnabledRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsBalancerEnabledResponse::kEnabledFieldNumber;
#endif  // !_MSC_VER

IsBalancerEnabledResponse::IsBalancerEnabledResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsBalancerEnabledResponse::InitAsDefaultInstance() {
}

IsBalancerEnabledResponse::IsBalancerEnabledResponse(const IsBalancerEnabledResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsBalancerEnabledResponse::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsBalancerEnabledResponse::~IsBalancerEnabledResponse() {
  SharedDtor();
}

void IsBalancerEnabledResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsBalancerEnabledResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsBalancerEnabledResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsBalancerEnabledResponse_descriptor_;
}

const IsBalancerEnabledResponse& IsBalancerEnabledResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsBalancerEnabledResponse* IsBalancerEnabledResponse::default_instance_ = NULL;

IsBalancerEnabledResponse* IsBalancerEnabledResponse::New() const {
  return new IsBalancerEnabledResponse;
}

void IsBalancerEnabledResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsBalancerEnabledResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsBalancerEnabledResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsBalancerEnabledResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsBalancerEnabledResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsBalancerEnabledResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsBalancerEnabledResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsBalancerEnabledResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsBalancerEnabledResponse::MergeFrom(const IsBalancerEnabledResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsBalancerEnabledResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBalancerEnabledResponse::CopyFrom(const IsBalancerEnabledResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBalancerEnabledResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsBalancerEnabledResponse::Swap(IsBalancerEnabledResponse* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsBalancerEnabledResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsBalancerEnabledResponse_descriptor_;
  metadata.reflection = IsBalancerEnabledResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSplitOrMergeEnabledRequest::kEnabledFieldNumber;
const int SetSplitOrMergeEnabledRequest::kSynchronousFieldNumber;
const int SetSplitOrMergeEnabledRequest::kSwitchTypesFieldNumber;
#endif  // !_MSC_VER

SetSplitOrMergeEnabledRequest::SetSplitOrMergeEnabledRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSplitOrMergeEnabledRequest::InitAsDefaultInstance() {
}

SetSplitOrMergeEnabledRequest::SetSplitOrMergeEnabledRequest(const SetSplitOrMergeEnabledRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSplitOrMergeEnabledRequest::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  synchronous_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSplitOrMergeEnabledRequest::~SetSplitOrMergeEnabledRequest() {
  SharedDtor();
}

void SetSplitOrMergeEnabledRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetSplitOrMergeEnabledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSplitOrMergeEnabledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSplitOrMergeEnabledRequest_descriptor_;
}

const SetSplitOrMergeEnabledRequest& SetSplitOrMergeEnabledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetSplitOrMergeEnabledRequest* SetSplitOrMergeEnabledRequest::default_instance_ = NULL;

SetSplitOrMergeEnabledRequest* SetSplitOrMergeEnabledRequest::New() const {
  return new SetSplitOrMergeEnabledRequest;
}

void SetSplitOrMergeEnabledRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
    synchronous_ = false;
  }
  switch_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSplitOrMergeEnabledRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_synchronous;
        break;
      }

      // optional bool synchronous = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synchronous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
          set_has_synchronous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_switch_types;
        break;
      }

      // repeated .hbase.pb.MasterSwitchType switch_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switch_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MasterSwitchType_IsValid(value)) {
            add_switch_types(static_cast< ::hbase::pb::MasterSwitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::hbase::pb::MasterSwitchType_IsValid,
                 this->mutable_switch_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_switch_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSplitOrMergeEnabledRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional bool synchronous = 2;
  if (has_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->synchronous(), output);
  }

  // repeated .hbase.pb.MasterSwitchType switch_types = 3;
  for (int i = 0; i < this->switch_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->switch_types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSplitOrMergeEnabledRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional bool synchronous = 2;
  if (has_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->synchronous(), target);
  }

  // repeated .hbase.pb.MasterSwitchType switch_types = 3;
  for (int i = 0; i < this->switch_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->switch_types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSplitOrMergeEnabledRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool synchronous = 2;
    if (has_synchronous()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.MasterSwitchType switch_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->switch_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->switch_types(i));
    }
    total_size += 1 * this->switch_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSplitOrMergeEnabledRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSplitOrMergeEnabledRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSplitOrMergeEnabledRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSplitOrMergeEnabledRequest::MergeFrom(const SetSplitOrMergeEnabledRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch_types_.MergeFrom(from.switch_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_synchronous()) {
      set_synchronous(from.synchronous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSplitOrMergeEnabledRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSplitOrMergeEnabledRequest::CopyFrom(const SetSplitOrMergeEnabledRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSplitOrMergeEnabledRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetSplitOrMergeEnabledRequest::Swap(SetSplitOrMergeEnabledRequest* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(synchronous_, other->synchronous_);
    switch_types_.Swap(&other->switch_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSplitOrMergeEnabledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSplitOrMergeEnabledRequest_descriptor_;
  metadata.reflection = SetSplitOrMergeEnabledRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSplitOrMergeEnabledResponse::kPrevValueFieldNumber;
#endif  // !_MSC_VER

SetSplitOrMergeEnabledResponse::SetSplitOrMergeEnabledResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSplitOrMergeEnabledResponse::InitAsDefaultInstance() {
}

SetSplitOrMergeEnabledResponse::SetSplitOrMergeEnabledResponse(const SetSplitOrMergeEnabledResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSplitOrMergeEnabledResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSplitOrMergeEnabledResponse::~SetSplitOrMergeEnabledResponse() {
  SharedDtor();
}

void SetSplitOrMergeEnabledResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetSplitOrMergeEnabledResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSplitOrMergeEnabledResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSplitOrMergeEnabledResponse_descriptor_;
}

const SetSplitOrMergeEnabledResponse& SetSplitOrMergeEnabledResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetSplitOrMergeEnabledResponse* SetSplitOrMergeEnabledResponse::default_instance_ = NULL;

SetSplitOrMergeEnabledResponse* SetSplitOrMergeEnabledResponse::New() const {
  return new SetSplitOrMergeEnabledResponse;
}

void SetSplitOrMergeEnabledResponse::Clear() {
  prev_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSplitOrMergeEnabledResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool prev_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_prev_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_prev_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_prev_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSplitOrMergeEnabledResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool prev_value = 1;
  for (int i = 0; i < this->prev_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->prev_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSplitOrMergeEnabledResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool prev_value = 1;
  for (int i = 0; i < this->prev_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->prev_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSplitOrMergeEnabledResponse::ByteSize() const {
  int total_size = 0;

  // repeated bool prev_value = 1;
  {
    int data_size = 0;
    data_size = 1 * this->prev_value_size();
    total_size += 1 * this->prev_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSplitOrMergeEnabledResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSplitOrMergeEnabledResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSplitOrMergeEnabledResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSplitOrMergeEnabledResponse::MergeFrom(const SetSplitOrMergeEnabledResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  prev_value_.MergeFrom(from.prev_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSplitOrMergeEnabledResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSplitOrMergeEnabledResponse::CopyFrom(const SetSplitOrMergeEnabledResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSplitOrMergeEnabledResponse::IsInitialized() const {

  return true;
}

void SetSplitOrMergeEnabledResponse::Swap(SetSplitOrMergeEnabledResponse* other) {
  if (other != this) {
    prev_value_.Swap(&other->prev_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSplitOrMergeEnabledResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSplitOrMergeEnabledResponse_descriptor_;
  metadata.reflection = SetSplitOrMergeEnabledResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsSplitOrMergeEnabledRequest::kSwitchTypeFieldNumber;
#endif  // !_MSC_VER

IsSplitOrMergeEnabledRequest::IsSplitOrMergeEnabledRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsSplitOrMergeEnabledRequest::InitAsDefaultInstance() {
}

IsSplitOrMergeEnabledRequest::IsSplitOrMergeEnabledRequest(const IsSplitOrMergeEnabledRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsSplitOrMergeEnabledRequest::SharedCtor() {
  _cached_size_ = 0;
  switch_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsSplitOrMergeEnabledRequest::~IsSplitOrMergeEnabledRequest() {
  SharedDtor();
}

void IsSplitOrMergeEnabledRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsSplitOrMergeEnabledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsSplitOrMergeEnabledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsSplitOrMergeEnabledRequest_descriptor_;
}

const IsSplitOrMergeEnabledRequest& IsSplitOrMergeEnabledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsSplitOrMergeEnabledRequest* IsSplitOrMergeEnabledRequest::default_instance_ = NULL;

IsSplitOrMergeEnabledRequest* IsSplitOrMergeEnabledRequest::New() const {
  return new IsSplitOrMergeEnabledRequest;
}

void IsSplitOrMergeEnabledRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    switch_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsSplitOrMergeEnabledRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.MasterSwitchType switch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MasterSwitchType_IsValid(value)) {
            set_switch_type(static_cast< ::hbase::pb::MasterSwitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsSplitOrMergeEnabledRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.MasterSwitchType switch_type = 1;
  if (has_switch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->switch_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsSplitOrMergeEnabledRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.MasterSwitchType switch_type = 1;
  if (has_switch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->switch_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsSplitOrMergeEnabledRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.MasterSwitchType switch_type = 1;
    if (has_switch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->switch_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsSplitOrMergeEnabledRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsSplitOrMergeEnabledRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsSplitOrMergeEnabledRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsSplitOrMergeEnabledRequest::MergeFrom(const IsSplitOrMergeEnabledRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switch_type()) {
      set_switch_type(from.switch_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsSplitOrMergeEnabledRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsSplitOrMergeEnabledRequest::CopyFrom(const IsSplitOrMergeEnabledRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSplitOrMergeEnabledRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsSplitOrMergeEnabledRequest::Swap(IsSplitOrMergeEnabledRequest* other) {
  if (other != this) {
    std::swap(switch_type_, other->switch_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsSplitOrMergeEnabledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsSplitOrMergeEnabledRequest_descriptor_;
  metadata.reflection = IsSplitOrMergeEnabledRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsSplitOrMergeEnabledResponse::kEnabledFieldNumber;
#endif  // !_MSC_VER

IsSplitOrMergeEnabledResponse::IsSplitOrMergeEnabledResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsSplitOrMergeEnabledResponse::InitAsDefaultInstance() {
}

IsSplitOrMergeEnabledResponse::IsSplitOrMergeEnabledResponse(const IsSplitOrMergeEnabledResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsSplitOrMergeEnabledResponse::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsSplitOrMergeEnabledResponse::~IsSplitOrMergeEnabledResponse() {
  SharedDtor();
}

void IsSplitOrMergeEnabledResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsSplitOrMergeEnabledResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsSplitOrMergeEnabledResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsSplitOrMergeEnabledResponse_descriptor_;
}

const IsSplitOrMergeEnabledResponse& IsSplitOrMergeEnabledResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsSplitOrMergeEnabledResponse* IsSplitOrMergeEnabledResponse::default_instance_ = NULL;

IsSplitOrMergeEnabledResponse* IsSplitOrMergeEnabledResponse::New() const {
  return new IsSplitOrMergeEnabledResponse;
}

void IsSplitOrMergeEnabledResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsSplitOrMergeEnabledResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsSplitOrMergeEnabledResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsSplitOrMergeEnabledResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsSplitOrMergeEnabledResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsSplitOrMergeEnabledResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsSplitOrMergeEnabledResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsSplitOrMergeEnabledResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsSplitOrMergeEnabledResponse::MergeFrom(const IsSplitOrMergeEnabledResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsSplitOrMergeEnabledResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsSplitOrMergeEnabledResponse::CopyFrom(const IsSplitOrMergeEnabledResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSplitOrMergeEnabledResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsSplitOrMergeEnabledResponse::Swap(IsSplitOrMergeEnabledResponse* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsSplitOrMergeEnabledResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsSplitOrMergeEnabledResponse_descriptor_;
  metadata.reflection = IsSplitOrMergeEnabledResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NormalizeRequest::NormalizeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalizeRequest::InitAsDefaultInstance() {
}

NormalizeRequest::NormalizeRequest(const NormalizeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalizeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalizeRequest::~NormalizeRequest() {
  SharedDtor();
}

void NormalizeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalizeRequest_descriptor_;
}

const NormalizeRequest& NormalizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

NormalizeRequest* NormalizeRequest::default_instance_ = NULL;

NormalizeRequest* NormalizeRequest::New() const {
  return new NormalizeRequest;
}

void NormalizeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NormalizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalizeRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalizeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalizeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalizeRequest::MergeFrom(const NormalizeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeRequest::CopyFrom(const NormalizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeRequest::IsInitialized() const {

  return true;
}

void NormalizeRequest::Swap(NormalizeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalizeRequest_descriptor_;
  metadata.reflection = NormalizeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalizeResponse::kNormalizerRanFieldNumber;
#endif  // !_MSC_VER

NormalizeResponse::NormalizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalizeResponse::InitAsDefaultInstance() {
}

NormalizeResponse::NormalizeResponse(const NormalizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalizeResponse::SharedCtor() {
  _cached_size_ = 0;
  normalizer_ran_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalizeResponse::~NormalizeResponse() {
  SharedDtor();
}

void NormalizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalizeResponse_descriptor_;
}

const NormalizeResponse& NormalizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

NormalizeResponse* NormalizeResponse::default_instance_ = NULL;

NormalizeResponse* NormalizeResponse::New() const {
  return new NormalizeResponse;
}

void NormalizeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normalizer_ran_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool normalizer_ran = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalizer_ran_)));
          set_has_normalizer_ran();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NormalizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool normalizer_ran = 1;
  if (has_normalizer_ran()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalizer_ran(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool normalizer_ran = 1;
  if (has_normalizer_ran()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalizer_ran(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalizeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool normalizer_ran = 1;
    if (has_normalizer_ran()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalizeResponse::MergeFrom(const NormalizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalizer_ran()) {
      set_normalizer_ran(from.normalizer_ran());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeResponse::CopyFrom(const NormalizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NormalizeResponse::Swap(NormalizeResponse* other) {
  if (other != this) {
    std::swap(normalizer_ran_, other->normalizer_ran_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalizeResponse_descriptor_;
  metadata.reflection = NormalizeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetNormalizerRunningRequest::kOnFieldNumber;
#endif  // !_MSC_VER

SetNormalizerRunningRequest::SetNormalizerRunningRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetNormalizerRunningRequest::InitAsDefaultInstance() {
}

SetNormalizerRunningRequest::SetNormalizerRunningRequest(const SetNormalizerRunningRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetNormalizerRunningRequest::SharedCtor() {
  _cached_size_ = 0;
  on_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetNormalizerRunningRequest::~SetNormalizerRunningRequest() {
  SharedDtor();
}

void SetNormalizerRunningRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetNormalizerRunningRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNormalizerRunningRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetNormalizerRunningRequest_descriptor_;
}

const SetNormalizerRunningRequest& SetNormalizerRunningRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetNormalizerRunningRequest* SetNormalizerRunningRequest::default_instance_ = NULL;

SetNormalizerRunningRequest* SetNormalizerRunningRequest::New() const {
  return new SetNormalizerRunningRequest;
}

void SetNormalizerRunningRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    on_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetNormalizerRunningRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool on = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
          set_has_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetNormalizerRunningRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool on = 1;
  if (has_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->on(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetNormalizerRunningRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool on = 1;
  if (has_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->on(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetNormalizerRunningRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool on = 1;
    if (has_on()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNormalizerRunningRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetNormalizerRunningRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetNormalizerRunningRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetNormalizerRunningRequest::MergeFrom(const SetNormalizerRunningRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on()) {
      set_on(from.on());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetNormalizerRunningRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNormalizerRunningRequest::CopyFrom(const SetNormalizerRunningRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNormalizerRunningRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetNormalizerRunningRequest::Swap(SetNormalizerRunningRequest* other) {
  if (other != this) {
    std::swap(on_, other->on_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetNormalizerRunningRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetNormalizerRunningRequest_descriptor_;
  metadata.reflection = SetNormalizerRunningRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetNormalizerRunningResponse::kPrevNormalizerValueFieldNumber;
#endif  // !_MSC_VER

SetNormalizerRunningResponse::SetNormalizerRunningResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetNormalizerRunningResponse::InitAsDefaultInstance() {
}

SetNormalizerRunningResponse::SetNormalizerRunningResponse(const SetNormalizerRunningResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetNormalizerRunningResponse::SharedCtor() {
  _cached_size_ = 0;
  prev_normalizer_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetNormalizerRunningResponse::~SetNormalizerRunningResponse() {
  SharedDtor();
}

void SetNormalizerRunningResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetNormalizerRunningResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNormalizerRunningResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetNormalizerRunningResponse_descriptor_;
}

const SetNormalizerRunningResponse& SetNormalizerRunningResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetNormalizerRunningResponse* SetNormalizerRunningResponse::default_instance_ = NULL;

SetNormalizerRunningResponse* SetNormalizerRunningResponse::New() const {
  return new SetNormalizerRunningResponse;
}

void SetNormalizerRunningResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prev_normalizer_value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetNormalizerRunningResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool prev_normalizer_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_normalizer_value_)));
          set_has_prev_normalizer_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetNormalizerRunningResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool prev_normalizer_value = 1;
  if (has_prev_normalizer_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->prev_normalizer_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetNormalizerRunningResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool prev_normalizer_value = 1;
  if (has_prev_normalizer_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->prev_normalizer_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetNormalizerRunningResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool prev_normalizer_value = 1;
    if (has_prev_normalizer_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNormalizerRunningResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetNormalizerRunningResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetNormalizerRunningResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetNormalizerRunningResponse::MergeFrom(const SetNormalizerRunningResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prev_normalizer_value()) {
      set_prev_normalizer_value(from.prev_normalizer_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetNormalizerRunningResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNormalizerRunningResponse::CopyFrom(const SetNormalizerRunningResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNormalizerRunningResponse::IsInitialized() const {

  return true;
}

void SetNormalizerRunningResponse::Swap(SetNormalizerRunningResponse* other) {
  if (other != this) {
    std::swap(prev_normalizer_value_, other->prev_normalizer_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetNormalizerRunningResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetNormalizerRunningResponse_descriptor_;
  metadata.reflection = SetNormalizerRunningResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsNormalizerEnabledRequest::IsNormalizerEnabledRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsNormalizerEnabledRequest::InitAsDefaultInstance() {
}

IsNormalizerEnabledRequest::IsNormalizerEnabledRequest(const IsNormalizerEnabledRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsNormalizerEnabledRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsNormalizerEnabledRequest::~IsNormalizerEnabledRequest() {
  SharedDtor();
}

void IsNormalizerEnabledRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsNormalizerEnabledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsNormalizerEnabledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsNormalizerEnabledRequest_descriptor_;
}

const IsNormalizerEnabledRequest& IsNormalizerEnabledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsNormalizerEnabledRequest* IsNormalizerEnabledRequest::default_instance_ = NULL;

IsNormalizerEnabledRequest* IsNormalizerEnabledRequest::New() const {
  return new IsNormalizerEnabledRequest;
}

void IsNormalizerEnabledRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsNormalizerEnabledRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IsNormalizerEnabledRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsNormalizerEnabledRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsNormalizerEnabledRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsNormalizerEnabledRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsNormalizerEnabledRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsNormalizerEnabledRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsNormalizerEnabledRequest::MergeFrom(const IsNormalizerEnabledRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsNormalizerEnabledRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsNormalizerEnabledRequest::CopyFrom(const IsNormalizerEnabledRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsNormalizerEnabledRequest::IsInitialized() const {

  return true;
}

void IsNormalizerEnabledRequest::Swap(IsNormalizerEnabledRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsNormalizerEnabledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsNormalizerEnabledRequest_descriptor_;
  metadata.reflection = IsNormalizerEnabledRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsNormalizerEnabledResponse::kEnabledFieldNumber;
#endif  // !_MSC_VER

IsNormalizerEnabledResponse::IsNormalizerEnabledResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsNormalizerEnabledResponse::InitAsDefaultInstance() {
}

IsNormalizerEnabledResponse::IsNormalizerEnabledResponse(const IsNormalizerEnabledResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsNormalizerEnabledResponse::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsNormalizerEnabledResponse::~IsNormalizerEnabledResponse() {
  SharedDtor();
}

void IsNormalizerEnabledResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsNormalizerEnabledResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsNormalizerEnabledResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsNormalizerEnabledResponse_descriptor_;
}

const IsNormalizerEnabledResponse& IsNormalizerEnabledResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsNormalizerEnabledResponse* IsNormalizerEnabledResponse::default_instance_ = NULL;

IsNormalizerEnabledResponse* IsNormalizerEnabledResponse::New() const {
  return new IsNormalizerEnabledResponse;
}

void IsNormalizerEnabledResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsNormalizerEnabledResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsNormalizerEnabledResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsNormalizerEnabledResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enabled = 1;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsNormalizerEnabledResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsNormalizerEnabledResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsNormalizerEnabledResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsNormalizerEnabledResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsNormalizerEnabledResponse::MergeFrom(const IsNormalizerEnabledResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsNormalizerEnabledResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsNormalizerEnabledResponse::CopyFrom(const IsNormalizerEnabledResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsNormalizerEnabledResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsNormalizerEnabledResponse::Swap(IsNormalizerEnabledResponse* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsNormalizerEnabledResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsNormalizerEnabledResponse_descriptor_;
  metadata.reflection = IsNormalizerEnabledResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RunCatalogScanRequest::RunCatalogScanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunCatalogScanRequest::InitAsDefaultInstance() {
}

RunCatalogScanRequest::RunCatalogScanRequest(const RunCatalogScanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunCatalogScanRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunCatalogScanRequest::~RunCatalogScanRequest() {
  SharedDtor();
}

void RunCatalogScanRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunCatalogScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunCatalogScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunCatalogScanRequest_descriptor_;
}

const RunCatalogScanRequest& RunCatalogScanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

RunCatalogScanRequest* RunCatalogScanRequest::default_instance_ = NULL;

RunCatalogScanRequest* RunCatalogScanRequest::New() const {
  return new RunCatalogScanRequest;
}

void RunCatalogScanRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunCatalogScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RunCatalogScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunCatalogScanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunCatalogScanRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunCatalogScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunCatalogScanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunCatalogScanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunCatalogScanRequest::MergeFrom(const RunCatalogScanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunCatalogScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunCatalogScanRequest::CopyFrom(const RunCatalogScanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCatalogScanRequest::IsInitialized() const {

  return true;
}

void RunCatalogScanRequest::Swap(RunCatalogScanRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunCatalogScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunCatalogScanRequest_descriptor_;
  metadata.reflection = RunCatalogScanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunCatalogScanResponse::kScanResultFieldNumber;
#endif  // !_MSC_VER

RunCatalogScanResponse::RunCatalogScanResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunCatalogScanResponse::InitAsDefaultInstance() {
}

RunCatalogScanResponse::RunCatalogScanResponse(const RunCatalogScanResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunCatalogScanResponse::SharedCtor() {
  _cached_size_ = 0;
  scan_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunCatalogScanResponse::~RunCatalogScanResponse() {
  SharedDtor();
}

void RunCatalogScanResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunCatalogScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunCatalogScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunCatalogScanResponse_descriptor_;
}

const RunCatalogScanResponse& RunCatalogScanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

RunCatalogScanResponse* RunCatalogScanResponse::default_instance_ = NULL;

RunCatalogScanResponse* RunCatalogScanResponse::New() const {
  return new RunCatalogScanResponse;
}

void RunCatalogScanResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scan_result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunCatalogScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scan_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_result_)));
          set_has_scan_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunCatalogScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scan_result = 1;
  if (has_scan_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scan_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunCatalogScanResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 scan_result = 1;
  if (has_scan_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scan_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunCatalogScanResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scan_result = 1;
    if (has_scan_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scan_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunCatalogScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunCatalogScanResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunCatalogScanResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunCatalogScanResponse::MergeFrom(const RunCatalogScanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scan_result()) {
      set_scan_result(from.scan_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunCatalogScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunCatalogScanResponse::CopyFrom(const RunCatalogScanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCatalogScanResponse::IsInitialized() const {

  return true;
}

void RunCatalogScanResponse::Swap(RunCatalogScanResponse* other) {
  if (other != this) {
    std::swap(scan_result_, other->scan_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunCatalogScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunCatalogScanResponse_descriptor_;
  metadata.reflection = RunCatalogScanResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnableCatalogJanitorRequest::kEnableFieldNumber;
#endif  // !_MSC_VER

EnableCatalogJanitorRequest::EnableCatalogJanitorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableCatalogJanitorRequest::InitAsDefaultInstance() {
}

EnableCatalogJanitorRequest::EnableCatalogJanitorRequest(const EnableCatalogJanitorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableCatalogJanitorRequest::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableCatalogJanitorRequest::~EnableCatalogJanitorRequest() {
  SharedDtor();
}

void EnableCatalogJanitorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableCatalogJanitorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableCatalogJanitorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableCatalogJanitorRequest_descriptor_;
}

const EnableCatalogJanitorRequest& EnableCatalogJanitorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

EnableCatalogJanitorRequest* EnableCatalogJanitorRequest::default_instance_ = NULL;

EnableCatalogJanitorRequest* EnableCatalogJanitorRequest::New() const {
  return new EnableCatalogJanitorRequest;
}

void EnableCatalogJanitorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableCatalogJanitorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableCatalogJanitorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableCatalogJanitorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableCatalogJanitorRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableCatalogJanitorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableCatalogJanitorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableCatalogJanitorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableCatalogJanitorRequest::MergeFrom(const EnableCatalogJanitorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableCatalogJanitorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableCatalogJanitorRequest::CopyFrom(const EnableCatalogJanitorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableCatalogJanitorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnableCatalogJanitorRequest::Swap(EnableCatalogJanitorRequest* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableCatalogJanitorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableCatalogJanitorRequest_descriptor_;
  metadata.reflection = EnableCatalogJanitorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnableCatalogJanitorResponse::kPrevValueFieldNumber;
#endif  // !_MSC_VER

EnableCatalogJanitorResponse::EnableCatalogJanitorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnableCatalogJanitorResponse::InitAsDefaultInstance() {
}

EnableCatalogJanitorResponse::EnableCatalogJanitorResponse(const EnableCatalogJanitorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnableCatalogJanitorResponse::SharedCtor() {
  _cached_size_ = 0;
  prev_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableCatalogJanitorResponse::~EnableCatalogJanitorResponse() {
  SharedDtor();
}

void EnableCatalogJanitorResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableCatalogJanitorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableCatalogJanitorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableCatalogJanitorResponse_descriptor_;
}

const EnableCatalogJanitorResponse& EnableCatalogJanitorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

EnableCatalogJanitorResponse* EnableCatalogJanitorResponse::default_instance_ = NULL;

EnableCatalogJanitorResponse* EnableCatalogJanitorResponse::New() const {
  return new EnableCatalogJanitorResponse;
}

void EnableCatalogJanitorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prev_value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnableCatalogJanitorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool prev_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_value_)));
          set_has_prev_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnableCatalogJanitorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool prev_value = 1;
  if (has_prev_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->prev_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnableCatalogJanitorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool prev_value = 1;
  if (has_prev_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->prev_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnableCatalogJanitorResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool prev_value = 1;
    if (has_prev_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableCatalogJanitorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnableCatalogJanitorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnableCatalogJanitorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnableCatalogJanitorResponse::MergeFrom(const EnableCatalogJanitorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prev_value()) {
      set_prev_value(from.prev_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnableCatalogJanitorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableCatalogJanitorResponse::CopyFrom(const EnableCatalogJanitorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableCatalogJanitorResponse::IsInitialized() const {

  return true;
}

void EnableCatalogJanitorResponse::Swap(EnableCatalogJanitorResponse* other) {
  if (other != this) {
    std::swap(prev_value_, other->prev_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnableCatalogJanitorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableCatalogJanitorResponse_descriptor_;
  metadata.reflection = EnableCatalogJanitorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsCatalogJanitorEnabledRequest::IsCatalogJanitorEnabledRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsCatalogJanitorEnabledRequest::InitAsDefaultInstance() {
}

IsCatalogJanitorEnabledRequest::IsCatalogJanitorEnabledRequest(const IsCatalogJanitorEnabledRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsCatalogJanitorEnabledRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsCatalogJanitorEnabledRequest::~IsCatalogJanitorEnabledRequest() {
  SharedDtor();
}

void IsCatalogJanitorEnabledRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsCatalogJanitorEnabledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsCatalogJanitorEnabledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsCatalogJanitorEnabledRequest_descriptor_;
}

const IsCatalogJanitorEnabledRequest& IsCatalogJanitorEnabledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsCatalogJanitorEnabledRequest* IsCatalogJanitorEnabledRequest::default_instance_ = NULL;

IsCatalogJanitorEnabledRequest* IsCatalogJanitorEnabledRequest::New() const {
  return new IsCatalogJanitorEnabledRequest;
}

void IsCatalogJanitorEnabledRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsCatalogJanitorEnabledRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IsCatalogJanitorEnabledRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsCatalogJanitorEnabledRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsCatalogJanitorEnabledRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsCatalogJanitorEnabledRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsCatalogJanitorEnabledRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsCatalogJanitorEnabledRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsCatalogJanitorEnabledRequest::MergeFrom(const IsCatalogJanitorEnabledRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsCatalogJanitorEnabledRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCatalogJanitorEnabledRequest::CopyFrom(const IsCatalogJanitorEnabledRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCatalogJanitorEnabledRequest::IsInitialized() const {

  return true;
}

void IsCatalogJanitorEnabledRequest::Swap(IsCatalogJanitorEnabledRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsCatalogJanitorEnabledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsCatalogJanitorEnabledRequest_descriptor_;
  metadata.reflection = IsCatalogJanitorEnabledRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsCatalogJanitorEnabledResponse::kValueFieldNumber;
#endif  // !_MSC_VER

IsCatalogJanitorEnabledResponse::IsCatalogJanitorEnabledResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsCatalogJanitorEnabledResponse::InitAsDefaultInstance() {
}

IsCatalogJanitorEnabledResponse::IsCatalogJanitorEnabledResponse(const IsCatalogJanitorEnabledResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsCatalogJanitorEnabledResponse::SharedCtor() {
  _cached_size_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsCatalogJanitorEnabledResponse::~IsCatalogJanitorEnabledResponse() {
  SharedDtor();
}

void IsCatalogJanitorEnabledResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsCatalogJanitorEnabledResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsCatalogJanitorEnabledResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsCatalogJanitorEnabledResponse_descriptor_;
}

const IsCatalogJanitorEnabledResponse& IsCatalogJanitorEnabledResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsCatalogJanitorEnabledResponse* IsCatalogJanitorEnabledResponse::default_instance_ = NULL;

IsCatalogJanitorEnabledResponse* IsCatalogJanitorEnabledResponse::New() const {
  return new IsCatalogJanitorEnabledResponse;
}

void IsCatalogJanitorEnabledResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsCatalogJanitorEnabledResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsCatalogJanitorEnabledResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsCatalogJanitorEnabledResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsCatalogJanitorEnabledResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool value = 1;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsCatalogJanitorEnabledResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsCatalogJanitorEnabledResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsCatalogJanitorEnabledResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsCatalogJanitorEnabledResponse::MergeFrom(const IsCatalogJanitorEnabledResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsCatalogJanitorEnabledResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCatalogJanitorEnabledResponse::CopyFrom(const IsCatalogJanitorEnabledResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCatalogJanitorEnabledResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsCatalogJanitorEnabledResponse::Swap(IsCatalogJanitorEnabledResponse* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsCatalogJanitorEnabledResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsCatalogJanitorEnabledResponse_descriptor_;
  metadata.reflection = IsCatalogJanitorEnabledResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotRequest::kSnapshotFieldNumber;
#endif  // !_MSC_VER

SnapshotRequest::SnapshotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotRequest::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::SnapshotDescription*>(&::hbase::pb::SnapshotDescription::default_instance());
}

SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotRequest::~SnapshotRequest() {
  SharedDtor();
}

void SnapshotRequest::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void SnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRequest_descriptor_;
}

const SnapshotRequest& SnapshotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SnapshotRequest* SnapshotRequest::default_instance_ = NULL;

SnapshotRequest* SnapshotRequest::New() const {
  return new SnapshotRequest;
}

void SnapshotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::SnapshotDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SnapshotDescription snapshot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.SnapshotDescription snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotRequest::MergeFrom(const SnapshotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::SnapshotDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void SnapshotRequest::Swap(SnapshotRequest* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotRequest_descriptor_;
  metadata.reflection = SnapshotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotResponse::kExpectedTimeoutFieldNumber;
#endif  // !_MSC_VER

SnapshotResponse::SnapshotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotResponse::InitAsDefaultInstance() {
}

SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotResponse::SharedCtor() {
  _cached_size_ = 0;
  expected_timeout_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotResponse::~SnapshotResponse() {
  SharedDtor();
}

void SnapshotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotResponse_descriptor_;
}

const SnapshotResponse& SnapshotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SnapshotResponse* SnapshotResponse::default_instance_ = NULL;

SnapshotResponse* SnapshotResponse::New() const {
  return new SnapshotResponse;
}

void SnapshotResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expected_timeout_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 expected_timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_timeout_)));
          set_has_expected_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 expected_timeout = 1;
  if (has_expected_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expected_timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 expected_timeout = 1;
  if (has_expected_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expected_timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 expected_timeout = 1;
    if (has_expected_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expected_timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotResponse::MergeFrom(const SnapshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expected_timeout()) {
      set_expected_timeout(from.expected_timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SnapshotResponse::Swap(SnapshotResponse* other) {
  if (other != this) {
    std::swap(expected_timeout_, other->expected_timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotResponse_descriptor_;
  metadata.reflection = SnapshotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetCompletedSnapshotsRequest::GetCompletedSnapshotsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCompletedSnapshotsRequest::InitAsDefaultInstance() {
}

GetCompletedSnapshotsRequest::GetCompletedSnapshotsRequest(const GetCompletedSnapshotsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCompletedSnapshotsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCompletedSnapshotsRequest::~GetCompletedSnapshotsRequest() {
  SharedDtor();
}

void GetCompletedSnapshotsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCompletedSnapshotsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCompletedSnapshotsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCompletedSnapshotsRequest_descriptor_;
}

const GetCompletedSnapshotsRequest& GetCompletedSnapshotsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetCompletedSnapshotsRequest* GetCompletedSnapshotsRequest::default_instance_ = NULL;

GetCompletedSnapshotsRequest* GetCompletedSnapshotsRequest::New() const {
  return new GetCompletedSnapshotsRequest;
}

void GetCompletedSnapshotsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCompletedSnapshotsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetCompletedSnapshotsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCompletedSnapshotsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCompletedSnapshotsRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCompletedSnapshotsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCompletedSnapshotsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCompletedSnapshotsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCompletedSnapshotsRequest::MergeFrom(const GetCompletedSnapshotsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCompletedSnapshotsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompletedSnapshotsRequest::CopyFrom(const GetCompletedSnapshotsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletedSnapshotsRequest::IsInitialized() const {

  return true;
}

void GetCompletedSnapshotsRequest::Swap(GetCompletedSnapshotsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCompletedSnapshotsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCompletedSnapshotsRequest_descriptor_;
  metadata.reflection = GetCompletedSnapshotsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCompletedSnapshotsResponse::kSnapshotsFieldNumber;
#endif  // !_MSC_VER

GetCompletedSnapshotsResponse::GetCompletedSnapshotsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCompletedSnapshotsResponse::InitAsDefaultInstance() {
}

GetCompletedSnapshotsResponse::GetCompletedSnapshotsResponse(const GetCompletedSnapshotsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCompletedSnapshotsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCompletedSnapshotsResponse::~GetCompletedSnapshotsResponse() {
  SharedDtor();
}

void GetCompletedSnapshotsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCompletedSnapshotsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCompletedSnapshotsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCompletedSnapshotsResponse_descriptor_;
}

const GetCompletedSnapshotsResponse& GetCompletedSnapshotsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetCompletedSnapshotsResponse* GetCompletedSnapshotsResponse::default_instance_ = NULL;

GetCompletedSnapshotsResponse* GetCompletedSnapshotsResponse::New() const {
  return new GetCompletedSnapshotsResponse;
}

void GetCompletedSnapshotsResponse::Clear() {
  snapshots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCompletedSnapshotsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.SnapshotDescription snapshots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snapshots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_snapshots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCompletedSnapshotsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.SnapshotDescription snapshots = 1;
  for (int i = 0; i < this->snapshots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCompletedSnapshotsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.SnapshotDescription snapshots = 1;
  for (int i = 0; i < this->snapshots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCompletedSnapshotsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.SnapshotDescription snapshots = 1;
  total_size += 1 * this->snapshots_size();
  for (int i = 0; i < this->snapshots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snapshots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCompletedSnapshotsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCompletedSnapshotsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCompletedSnapshotsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCompletedSnapshotsResponse::MergeFrom(const GetCompletedSnapshotsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  snapshots_.MergeFrom(from.snapshots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCompletedSnapshotsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCompletedSnapshotsResponse::CopyFrom(const GetCompletedSnapshotsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCompletedSnapshotsResponse::IsInitialized() const {

  for (int i = 0; i < snapshots_size(); i++) {
    if (!this->snapshots(i).IsInitialized()) return false;
  }
  return true;
}

void GetCompletedSnapshotsResponse::Swap(GetCompletedSnapshotsResponse* other) {
  if (other != this) {
    snapshots_.Swap(&other->snapshots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCompletedSnapshotsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCompletedSnapshotsResponse_descriptor_;
  metadata.reflection = GetCompletedSnapshotsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSnapshotRequest::kSnapshotFieldNumber;
#endif  // !_MSC_VER

DeleteSnapshotRequest::DeleteSnapshotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSnapshotRequest::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::SnapshotDescription*>(&::hbase::pb::SnapshotDescription::default_instance());
}

DeleteSnapshotRequest::DeleteSnapshotRequest(const DeleteSnapshotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSnapshotRequest::~DeleteSnapshotRequest() {
  SharedDtor();
}

void DeleteSnapshotRequest::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void DeleteSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSnapshotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSnapshotRequest_descriptor_;
}

const DeleteSnapshotRequest& DeleteSnapshotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteSnapshotRequest* DeleteSnapshotRequest::default_instance_ = NULL;

DeleteSnapshotRequest* DeleteSnapshotRequest::New() const {
  return new DeleteSnapshotRequest;
}

void DeleteSnapshotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::SnapshotDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SnapshotDescription snapshot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSnapshotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSnapshotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.SnapshotDescription snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSnapshotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSnapshotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequest::MergeFrom(const DeleteSnapshotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::SnapshotDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequest::CopyFrom(const DeleteSnapshotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void DeleteSnapshotRequest::Swap(DeleteSnapshotRequest* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSnapshotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSnapshotRequest_descriptor_;
  metadata.reflection = DeleteSnapshotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteSnapshotResponse::DeleteSnapshotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSnapshotResponse::InitAsDefaultInstance() {
}

DeleteSnapshotResponse::DeleteSnapshotResponse(const DeleteSnapshotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSnapshotResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSnapshotResponse::~DeleteSnapshotResponse() {
  SharedDtor();
}

void DeleteSnapshotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteSnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSnapshotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSnapshotResponse_descriptor_;
}

const DeleteSnapshotResponse& DeleteSnapshotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

DeleteSnapshotResponse* DeleteSnapshotResponse::default_instance_ = NULL;

DeleteSnapshotResponse* DeleteSnapshotResponse::New() const {
  return new DeleteSnapshotResponse;
}

void DeleteSnapshotResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeleteSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSnapshotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSnapshotResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSnapshotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSnapshotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSnapshotResponse::MergeFrom(const DeleteSnapshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotResponse::CopyFrom(const DeleteSnapshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotResponse::IsInitialized() const {

  return true;
}

void DeleteSnapshotResponse::Swap(DeleteSnapshotResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSnapshotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSnapshotResponse_descriptor_;
  metadata.reflection = DeleteSnapshotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestoreSnapshotRequest::kSnapshotFieldNumber;
#endif  // !_MSC_VER

RestoreSnapshotRequest::RestoreSnapshotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestoreSnapshotRequest::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::SnapshotDescription*>(&::hbase::pb::SnapshotDescription::default_instance());
}

RestoreSnapshotRequest::RestoreSnapshotRequest(const RestoreSnapshotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestoreSnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreSnapshotRequest::~RestoreSnapshotRequest() {
  SharedDtor();
}

void RestoreSnapshotRequest::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void RestoreSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreSnapshotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreSnapshotRequest_descriptor_;
}

const RestoreSnapshotRequest& RestoreSnapshotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

RestoreSnapshotRequest* RestoreSnapshotRequest::default_instance_ = NULL;

RestoreSnapshotRequest* RestoreSnapshotRequest::New() const {
  return new RestoreSnapshotRequest;
}

void RestoreSnapshotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::SnapshotDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SnapshotDescription snapshot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestoreSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestoreSnapshotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestoreSnapshotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.SnapshotDescription snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreSnapshotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreSnapshotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreSnapshotRequest::MergeFrom(const RestoreSnapshotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::SnapshotDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreSnapshotRequest::CopyFrom(const RestoreSnapshotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreSnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void RestoreSnapshotRequest::Swap(RestoreSnapshotRequest* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreSnapshotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreSnapshotRequest_descriptor_;
  metadata.reflection = RestoreSnapshotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RestoreSnapshotResponse::RestoreSnapshotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestoreSnapshotResponse::InitAsDefaultInstance() {
}

RestoreSnapshotResponse::RestoreSnapshotResponse(const RestoreSnapshotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestoreSnapshotResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreSnapshotResponse::~RestoreSnapshotResponse() {
  SharedDtor();
}

void RestoreSnapshotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RestoreSnapshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreSnapshotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreSnapshotResponse_descriptor_;
}

const RestoreSnapshotResponse& RestoreSnapshotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

RestoreSnapshotResponse* RestoreSnapshotResponse::default_instance_ = NULL;

RestoreSnapshotResponse* RestoreSnapshotResponse::New() const {
  return new RestoreSnapshotResponse;
}

void RestoreSnapshotResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RestoreSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestoreSnapshotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestoreSnapshotResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreSnapshotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreSnapshotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreSnapshotResponse::MergeFrom(const RestoreSnapshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreSnapshotResponse::CopyFrom(const RestoreSnapshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreSnapshotResponse::IsInitialized() const {

  return true;
}

void RestoreSnapshotResponse::Swap(RestoreSnapshotResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreSnapshotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreSnapshotResponse_descriptor_;
  metadata.reflection = RestoreSnapshotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsSnapshotDoneRequest::kSnapshotFieldNumber;
#endif  // !_MSC_VER

IsSnapshotDoneRequest::IsSnapshotDoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsSnapshotDoneRequest::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::SnapshotDescription*>(&::hbase::pb::SnapshotDescription::default_instance());
}

IsSnapshotDoneRequest::IsSnapshotDoneRequest(const IsSnapshotDoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsSnapshotDoneRequest::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsSnapshotDoneRequest::~IsSnapshotDoneRequest() {
  SharedDtor();
}

void IsSnapshotDoneRequest::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void IsSnapshotDoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsSnapshotDoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsSnapshotDoneRequest_descriptor_;
}

const IsSnapshotDoneRequest& IsSnapshotDoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsSnapshotDoneRequest* IsSnapshotDoneRequest::default_instance_ = NULL;

IsSnapshotDoneRequest* IsSnapshotDoneRequest::New() const {
  return new IsSnapshotDoneRequest;
}

void IsSnapshotDoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::SnapshotDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsSnapshotDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.SnapshotDescription snapshot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsSnapshotDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsSnapshotDoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsSnapshotDoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.SnapshotDescription snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsSnapshotDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsSnapshotDoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsSnapshotDoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsSnapshotDoneRequest::MergeFrom(const IsSnapshotDoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::SnapshotDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsSnapshotDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsSnapshotDoneRequest::CopyFrom(const IsSnapshotDoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSnapshotDoneRequest::IsInitialized() const {

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void IsSnapshotDoneRequest::Swap(IsSnapshotDoneRequest* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsSnapshotDoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsSnapshotDoneRequest_descriptor_;
  metadata.reflection = IsSnapshotDoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsSnapshotDoneResponse::kDoneFieldNumber;
const int IsSnapshotDoneResponse::kSnapshotFieldNumber;
#endif  // !_MSC_VER

IsSnapshotDoneResponse::IsSnapshotDoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsSnapshotDoneResponse::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::SnapshotDescription*>(&::hbase::pb::SnapshotDescription::default_instance());
}

IsSnapshotDoneResponse::IsSnapshotDoneResponse(const IsSnapshotDoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsSnapshotDoneResponse::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsSnapshotDoneResponse::~IsSnapshotDoneResponse() {
  SharedDtor();
}

void IsSnapshotDoneResponse::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void IsSnapshotDoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsSnapshotDoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsSnapshotDoneResponse_descriptor_;
}

const IsSnapshotDoneResponse& IsSnapshotDoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsSnapshotDoneResponse* IsSnapshotDoneResponse::default_instance_ = NULL;

IsSnapshotDoneResponse* IsSnapshotDoneResponse::New() const {
  return new IsSnapshotDoneResponse;
}

void IsSnapshotDoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    done_ = false;
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::SnapshotDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsSnapshotDoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool done = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshot;
        break;
      }

      // optional .hbase.pb.SnapshotDescription snapshot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsSnapshotDoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool done = 1 [default = false];
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->done(), output);
  }

  // optional .hbase.pb.SnapshotDescription snapshot = 2;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsSnapshotDoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool done = 1 [default = false];
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->done(), target);
  }

  // optional .hbase.pb.SnapshotDescription snapshot = 2;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsSnapshotDoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool done = 1 [default = false];
    if (has_done()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.SnapshotDescription snapshot = 2;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsSnapshotDoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsSnapshotDoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsSnapshotDoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsSnapshotDoneResponse::MergeFrom(const IsSnapshotDoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::SnapshotDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsSnapshotDoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsSnapshotDoneResponse::CopyFrom(const IsSnapshotDoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsSnapshotDoneResponse::IsInitialized() const {

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void IsSnapshotDoneResponse::Swap(IsSnapshotDoneResponse* other) {
  if (other != this) {
    std::swap(done_, other->done_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsSnapshotDoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsSnapshotDoneResponse_descriptor_;
  metadata.reflection = IsSnapshotDoneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsRestoreSnapshotDoneRequest::kSnapshotFieldNumber;
#endif  // !_MSC_VER

IsRestoreSnapshotDoneRequest::IsRestoreSnapshotDoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsRestoreSnapshotDoneRequest::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::SnapshotDescription*>(&::hbase::pb::SnapshotDescription::default_instance());
}

IsRestoreSnapshotDoneRequest::IsRestoreSnapshotDoneRequest(const IsRestoreSnapshotDoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsRestoreSnapshotDoneRequest::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsRestoreSnapshotDoneRequest::~IsRestoreSnapshotDoneRequest() {
  SharedDtor();
}

void IsRestoreSnapshotDoneRequest::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void IsRestoreSnapshotDoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsRestoreSnapshotDoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsRestoreSnapshotDoneRequest_descriptor_;
}

const IsRestoreSnapshotDoneRequest& IsRestoreSnapshotDoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsRestoreSnapshotDoneRequest* IsRestoreSnapshotDoneRequest::default_instance_ = NULL;

IsRestoreSnapshotDoneRequest* IsRestoreSnapshotDoneRequest::New() const {
  return new IsRestoreSnapshotDoneRequest;
}

void IsRestoreSnapshotDoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::SnapshotDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsRestoreSnapshotDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.SnapshotDescription snapshot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsRestoreSnapshotDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsRestoreSnapshotDoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.SnapshotDescription snapshot = 1;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsRestoreSnapshotDoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.SnapshotDescription snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsRestoreSnapshotDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsRestoreSnapshotDoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsRestoreSnapshotDoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsRestoreSnapshotDoneRequest::MergeFrom(const IsRestoreSnapshotDoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::SnapshotDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsRestoreSnapshotDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsRestoreSnapshotDoneRequest::CopyFrom(const IsRestoreSnapshotDoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsRestoreSnapshotDoneRequest::IsInitialized() const {

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void IsRestoreSnapshotDoneRequest::Swap(IsRestoreSnapshotDoneRequest* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsRestoreSnapshotDoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsRestoreSnapshotDoneRequest_descriptor_;
  metadata.reflection = IsRestoreSnapshotDoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsRestoreSnapshotDoneResponse::kDoneFieldNumber;
#endif  // !_MSC_VER

IsRestoreSnapshotDoneResponse::IsRestoreSnapshotDoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsRestoreSnapshotDoneResponse::InitAsDefaultInstance() {
}

IsRestoreSnapshotDoneResponse::IsRestoreSnapshotDoneResponse(const IsRestoreSnapshotDoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsRestoreSnapshotDoneResponse::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsRestoreSnapshotDoneResponse::~IsRestoreSnapshotDoneResponse() {
  SharedDtor();
}

void IsRestoreSnapshotDoneResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsRestoreSnapshotDoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsRestoreSnapshotDoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsRestoreSnapshotDoneResponse_descriptor_;
}

const IsRestoreSnapshotDoneResponse& IsRestoreSnapshotDoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsRestoreSnapshotDoneResponse* IsRestoreSnapshotDoneResponse::default_instance_ = NULL;

IsRestoreSnapshotDoneResponse* IsRestoreSnapshotDoneResponse::New() const {
  return new IsRestoreSnapshotDoneResponse;
}

void IsRestoreSnapshotDoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    done_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsRestoreSnapshotDoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool done = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsRestoreSnapshotDoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool done = 1 [default = false];
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsRestoreSnapshotDoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool done = 1 [default = false];
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsRestoreSnapshotDoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool done = 1 [default = false];
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsRestoreSnapshotDoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsRestoreSnapshotDoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsRestoreSnapshotDoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsRestoreSnapshotDoneResponse::MergeFrom(const IsRestoreSnapshotDoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsRestoreSnapshotDoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsRestoreSnapshotDoneResponse::CopyFrom(const IsRestoreSnapshotDoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsRestoreSnapshotDoneResponse::IsInitialized() const {

  return true;
}

void IsRestoreSnapshotDoneResponse::Swap(IsRestoreSnapshotDoneResponse* other) {
  if (other != this) {
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsRestoreSnapshotDoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsRestoreSnapshotDoneResponse_descriptor_;
  metadata.reflection = IsRestoreSnapshotDoneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSchemaAlterStatusRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

GetSchemaAlterStatusRequest::GetSchemaAlterStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSchemaAlterStatusRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

GetSchemaAlterStatusRequest::GetSchemaAlterStatusRequest(const GetSchemaAlterStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSchemaAlterStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSchemaAlterStatusRequest::~GetSchemaAlterStatusRequest() {
  SharedDtor();
}

void GetSchemaAlterStatusRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void GetSchemaAlterStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSchemaAlterStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSchemaAlterStatusRequest_descriptor_;
}

const GetSchemaAlterStatusRequest& GetSchemaAlterStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetSchemaAlterStatusRequest* GetSchemaAlterStatusRequest::default_instance_ = NULL;

GetSchemaAlterStatusRequest* GetSchemaAlterStatusRequest::New() const {
  return new GetSchemaAlterStatusRequest;
}

void GetSchemaAlterStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSchemaAlterStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSchemaAlterStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSchemaAlterStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSchemaAlterStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSchemaAlterStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSchemaAlterStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSchemaAlterStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSchemaAlterStatusRequest::MergeFrom(const GetSchemaAlterStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSchemaAlterStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSchemaAlterStatusRequest::CopyFrom(const GetSchemaAlterStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemaAlterStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void GetSchemaAlterStatusRequest::Swap(GetSchemaAlterStatusRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSchemaAlterStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSchemaAlterStatusRequest_descriptor_;
  metadata.reflection = GetSchemaAlterStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSchemaAlterStatusResponse::kYetToUpdateRegionsFieldNumber;
const int GetSchemaAlterStatusResponse::kTotalRegionsFieldNumber;
#endif  // !_MSC_VER

GetSchemaAlterStatusResponse::GetSchemaAlterStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSchemaAlterStatusResponse::InitAsDefaultInstance() {
}

GetSchemaAlterStatusResponse::GetSchemaAlterStatusResponse(const GetSchemaAlterStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSchemaAlterStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  yet_to_update_regions_ = 0u;
  total_regions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSchemaAlterStatusResponse::~GetSchemaAlterStatusResponse() {
  SharedDtor();
}

void GetSchemaAlterStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSchemaAlterStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSchemaAlterStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSchemaAlterStatusResponse_descriptor_;
}

const GetSchemaAlterStatusResponse& GetSchemaAlterStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetSchemaAlterStatusResponse* GetSchemaAlterStatusResponse::default_instance_ = NULL;

GetSchemaAlterStatusResponse* GetSchemaAlterStatusResponse::New() const {
  return new GetSchemaAlterStatusResponse;
}

void GetSchemaAlterStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yet_to_update_regions_ = 0u;
    total_regions_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSchemaAlterStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 yet_to_update_regions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yet_to_update_regions_)));
          set_has_yet_to_update_regions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_regions;
        break;
      }

      // optional uint32 total_regions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_regions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_regions_)));
          set_has_total_regions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSchemaAlterStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 yet_to_update_regions = 1;
  if (has_yet_to_update_regions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->yet_to_update_regions(), output);
  }

  // optional uint32 total_regions = 2;
  if (has_total_regions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_regions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSchemaAlterStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 yet_to_update_regions = 1;
  if (has_yet_to_update_regions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->yet_to_update_regions(), target);
  }

  // optional uint32 total_regions = 2;
  if (has_total_regions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_regions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSchemaAlterStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 yet_to_update_regions = 1;
    if (has_yet_to_update_regions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yet_to_update_regions());
    }

    // optional uint32 total_regions = 2;
    if (has_total_regions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_regions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSchemaAlterStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSchemaAlterStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSchemaAlterStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSchemaAlterStatusResponse::MergeFrom(const GetSchemaAlterStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yet_to_update_regions()) {
      set_yet_to_update_regions(from.yet_to_update_regions());
    }
    if (from.has_total_regions()) {
      set_total_regions(from.total_regions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSchemaAlterStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSchemaAlterStatusResponse::CopyFrom(const GetSchemaAlterStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemaAlterStatusResponse::IsInitialized() const {

  return true;
}

void GetSchemaAlterStatusResponse::Swap(GetSchemaAlterStatusResponse* other) {
  if (other != this) {
    std::swap(yet_to_update_regions_, other->yet_to_update_regions_);
    std::swap(total_regions_, other->total_regions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSchemaAlterStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSchemaAlterStatusResponse_descriptor_;
  metadata.reflection = GetSchemaAlterStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableDescriptorsRequest::kTableNamesFieldNumber;
const int GetTableDescriptorsRequest::kRegexFieldNumber;
const int GetTableDescriptorsRequest::kIncludeSysTablesFieldNumber;
const int GetTableDescriptorsRequest::kNamespaceFieldNumber;
#endif  // !_MSC_VER

GetTableDescriptorsRequest::GetTableDescriptorsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableDescriptorsRequest::InitAsDefaultInstance() {
}

GetTableDescriptorsRequest::GetTableDescriptorsRequest(const GetTableDescriptorsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableDescriptorsRequest::SharedCtor() {
  _cached_size_ = 0;
  regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  include_sys_tables_ = false;
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableDescriptorsRequest::~GetTableDescriptorsRequest() {
  SharedDtor();
}

void GetTableDescriptorsRequest::SharedDtor() {
  if (regex_ != &::google::protobuf::internal::kEmptyString) {
    delete regex_;
  }
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (this != default_instance_) {
  }
}

void GetTableDescriptorsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableDescriptorsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableDescriptorsRequest_descriptor_;
}

const GetTableDescriptorsRequest& GetTableDescriptorsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetTableDescriptorsRequest* GetTableDescriptorsRequest::default_instance_ = NULL;

GetTableDescriptorsRequest* GetTableDescriptorsRequest::New() const {
  return new GetTableDescriptorsRequest;
}

void GetTableDescriptorsRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_regex()) {
      if (regex_ != &::google::protobuf::internal::kEmptyString) {
        regex_->clear();
      }
    }
    include_sys_tables_ = false;
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
  }
  table_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableDescriptorsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.TableName table_names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table_names;
        if (input->ExpectTag(18)) goto parse_regex;
        break;
      }

      // optional string regex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_include_sys_tables;
        break;
      }

      // optional bool include_sys_tables = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_sys_tables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_sys_tables_)));
          set_has_include_sys_tables();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_namespace;
        break;
      }

      // optional string namespace = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableDescriptorsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.TableName table_names = 1;
  for (int i = 0; i < this->table_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_names(i), output);
  }

  // optional string regex = 2;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->regex(), output);
  }

  // optional bool include_sys_tables = 3 [default = false];
  if (has_include_sys_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_sys_tables(), output);
  }

  // optional string namespace = 4;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->namespace_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableDescriptorsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.TableName table_names = 1;
  for (int i = 0; i < this->table_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_names(i), target);
  }

  // optional string regex = 2;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->regex(), target);
  }

  // optional bool include_sys_tables = 3 [default = false];
  if (has_include_sys_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_sys_tables(), target);
  }

  // optional string namespace = 4;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->namespace_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableDescriptorsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string regex = 2;
    if (has_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
    }

    // optional bool include_sys_tables = 3 [default = false];
    if (has_include_sys_tables()) {
      total_size += 1 + 1;
    }

    // optional string namespace = 4;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

  }
  // repeated .hbase.pb.TableName table_names = 1;
  total_size += 1 * this->table_names_size();
  for (int i = 0; i < this->table_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableDescriptorsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableDescriptorsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableDescriptorsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableDescriptorsRequest::MergeFrom(const GetTableDescriptorsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_names_.MergeFrom(from.table_names_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_regex()) {
      set_regex(from.regex());
    }
    if (from.has_include_sys_tables()) {
      set_include_sys_tables(from.include_sys_tables());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableDescriptorsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableDescriptorsRequest::CopyFrom(const GetTableDescriptorsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableDescriptorsRequest::IsInitialized() const {

  for (int i = 0; i < table_names_size(); i++) {
    if (!this->table_names(i).IsInitialized()) return false;
  }
  return true;
}

void GetTableDescriptorsRequest::Swap(GetTableDescriptorsRequest* other) {
  if (other != this) {
    table_names_.Swap(&other->table_names_);
    std::swap(regex_, other->regex_);
    std::swap(include_sys_tables_, other->include_sys_tables_);
    std::swap(namespace__, other->namespace__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableDescriptorsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableDescriptorsRequest_descriptor_;
  metadata.reflection = GetTableDescriptorsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableDescriptorsResponse::kTableSchemaFieldNumber;
#endif  // !_MSC_VER

GetTableDescriptorsResponse::GetTableDescriptorsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableDescriptorsResponse::InitAsDefaultInstance() {
}

GetTableDescriptorsResponse::GetTableDescriptorsResponse(const GetTableDescriptorsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableDescriptorsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableDescriptorsResponse::~GetTableDescriptorsResponse() {
  SharedDtor();
}

void GetTableDescriptorsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTableDescriptorsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableDescriptorsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableDescriptorsResponse_descriptor_;
}

const GetTableDescriptorsResponse& GetTableDescriptorsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetTableDescriptorsResponse* GetTableDescriptorsResponse::default_instance_ = NULL;

GetTableDescriptorsResponse* GetTableDescriptorsResponse::New() const {
  return new GetTableDescriptorsResponse;
}

void GetTableDescriptorsResponse::Clear() {
  table_schema_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableDescriptorsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.TableSchema table_schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table_schema;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableDescriptorsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.TableSchema table_schema = 1;
  for (int i = 0; i < this->table_schema_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_schema(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableDescriptorsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.TableSchema table_schema = 1;
  for (int i = 0; i < this->table_schema_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_schema(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableDescriptorsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.TableSchema table_schema = 1;
  total_size += 1 * this->table_schema_size();
  for (int i = 0; i < this->table_schema_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_schema(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableDescriptorsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableDescriptorsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableDescriptorsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableDescriptorsResponse::MergeFrom(const GetTableDescriptorsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_schema_.MergeFrom(from.table_schema_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableDescriptorsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableDescriptorsResponse::CopyFrom(const GetTableDescriptorsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableDescriptorsResponse::IsInitialized() const {

  for (int i = 0; i < table_schema_size(); i++) {
    if (!this->table_schema(i).IsInitialized()) return false;
  }
  return true;
}

void GetTableDescriptorsResponse::Swap(GetTableDescriptorsResponse* other) {
  if (other != this) {
    table_schema_.Swap(&other->table_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableDescriptorsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableDescriptorsResponse_descriptor_;
  metadata.reflection = GetTableDescriptorsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableNamesRequest::kRegexFieldNumber;
const int GetTableNamesRequest::kIncludeSysTablesFieldNumber;
const int GetTableNamesRequest::kNamespaceFieldNumber;
#endif  // !_MSC_VER

GetTableNamesRequest::GetTableNamesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableNamesRequest::InitAsDefaultInstance() {
}

GetTableNamesRequest::GetTableNamesRequest(const GetTableNamesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableNamesRequest::SharedCtor() {
  _cached_size_ = 0;
  regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  include_sys_tables_ = false;
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableNamesRequest::~GetTableNamesRequest() {
  SharedDtor();
}

void GetTableNamesRequest::SharedDtor() {
  if (regex_ != &::google::protobuf::internal::kEmptyString) {
    delete regex_;
  }
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (this != default_instance_) {
  }
}

void GetTableNamesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableNamesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableNamesRequest_descriptor_;
}

const GetTableNamesRequest& GetTableNamesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetTableNamesRequest* GetTableNamesRequest::default_instance_ = NULL;

GetTableNamesRequest* GetTableNamesRequest::New() const {
  return new GetTableNamesRequest;
}

void GetTableNamesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regex()) {
      if (regex_ != &::google::protobuf::internal::kEmptyString) {
        regex_->clear();
      }
    }
    include_sys_tables_ = false;
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableNamesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_include_sys_tables;
        break;
      }

      // optional bool include_sys_tables = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_sys_tables:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_sys_tables_)));
          set_has_include_sys_tables();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_namespace;
        break;
      }

      // optional string namespace = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableNamesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string regex = 1;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->regex(), output);
  }

  // optional bool include_sys_tables = 2 [default = false];
  if (has_include_sys_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_sys_tables(), output);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->namespace_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableNamesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string regex = 1;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->regex(), target);
  }

  // optional bool include_sys_tables = 2 [default = false];
  if (has_include_sys_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_sys_tables(), target);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableNamesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string regex = 1;
    if (has_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
    }

    // optional bool include_sys_tables = 2 [default = false];
    if (has_include_sys_tables()) {
      total_size += 1 + 1;
    }

    // optional string namespace = 3;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableNamesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableNamesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableNamesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableNamesRequest::MergeFrom(const GetTableNamesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regex()) {
      set_regex(from.regex());
    }
    if (from.has_include_sys_tables()) {
      set_include_sys_tables(from.include_sys_tables());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableNamesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableNamesRequest::CopyFrom(const GetTableNamesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableNamesRequest::IsInitialized() const {

  return true;
}

void GetTableNamesRequest::Swap(GetTableNamesRequest* other) {
  if (other != this) {
    std::swap(regex_, other->regex_);
    std::swap(include_sys_tables_, other->include_sys_tables_);
    std::swap(namespace__, other->namespace__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableNamesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableNamesRequest_descriptor_;
  metadata.reflection = GetTableNamesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableNamesResponse::kTableNamesFieldNumber;
#endif  // !_MSC_VER

GetTableNamesResponse::GetTableNamesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableNamesResponse::InitAsDefaultInstance() {
}

GetTableNamesResponse::GetTableNamesResponse(const GetTableNamesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableNamesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableNamesResponse::~GetTableNamesResponse() {
  SharedDtor();
}

void GetTableNamesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTableNamesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableNamesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableNamesResponse_descriptor_;
}

const GetTableNamesResponse& GetTableNamesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetTableNamesResponse* GetTableNamesResponse::default_instance_ = NULL;

GetTableNamesResponse* GetTableNamesResponse::New() const {
  return new GetTableNamesResponse;
}

void GetTableNamesResponse::Clear() {
  table_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableNamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.TableName table_names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableNamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.TableName table_names = 1;
  for (int i = 0; i < this->table_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableNamesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.TableName table_names = 1;
  for (int i = 0; i < this->table_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableNamesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.TableName table_names = 1;
  total_size += 1 * this->table_names_size();
  for (int i = 0; i < this->table_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableNamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableNamesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableNamesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableNamesResponse::MergeFrom(const GetTableNamesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_names_.MergeFrom(from.table_names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableNamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableNamesResponse::CopyFrom(const GetTableNamesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableNamesResponse::IsInitialized() const {

  for (int i = 0; i < table_names_size(); i++) {
    if (!this->table_names(i).IsInitialized()) return false;
  }
  return true;
}

void GetTableNamesResponse::Swap(GetTableNamesResponse* other) {
  if (other != this) {
    table_names_.Swap(&other->table_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableNamesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableNamesResponse_descriptor_;
  metadata.reflection = GetTableNamesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableStateRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

GetTableStateRequest::GetTableStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableStateRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

GetTableStateRequest::GetTableStateRequest(const GetTableStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableStateRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableStateRequest::~GetTableStateRequest() {
  SharedDtor();
}

void GetTableStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void GetTableStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableStateRequest_descriptor_;
}

const GetTableStateRequest& GetTableStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetTableStateRequest* GetTableStateRequest::default_instance_ = NULL;

GetTableStateRequest* GetTableStateRequest::New() const {
  return new GetTableStateRequest;
}

void GetTableStateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableStateRequest::MergeFrom(const GetTableStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableStateRequest::CopyFrom(const GetTableStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void GetTableStateRequest::Swap(GetTableStateRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableStateRequest_descriptor_;
  metadata.reflection = GetTableStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTableStateResponse::kTableStateFieldNumber;
#endif  // !_MSC_VER

GetTableStateResponse::GetTableStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTableStateResponse::InitAsDefaultInstance() {
  table_state_ = const_cast< ::hbase::pb::TableState*>(&::hbase::pb::TableState::default_instance());
}

GetTableStateResponse::GetTableStateResponse(const GetTableStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTableStateResponse::SharedCtor() {
  _cached_size_ = 0;
  table_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTableStateResponse::~GetTableStateResponse() {
  SharedDtor();
}

void GetTableStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete table_state_;
  }
}

void GetTableStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableStateResponse_descriptor_;
}

const GetTableStateResponse& GetTableStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetTableStateResponse* GetTableStateResponse::default_instance_ = NULL;

GetTableStateResponse* GetTableStateResponse::New() const {
  return new GetTableStateResponse;
}

void GetTableStateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_state()) {
      if (table_state_ != NULL) table_state_->::hbase::pb::TableState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTableStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableState table_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTableStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableState table_state = 1;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTableStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableState table_state = 1;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTableStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableState table_state = 1;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTableStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTableStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTableStateResponse::MergeFrom(const GetTableStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_state()) {
      mutable_table_state()->::hbase::pb::TableState::MergeFrom(from.table_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTableStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableStateResponse::CopyFrom(const GetTableStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_state()) {
    if (!this->table_state().IsInitialized()) return false;
  }
  return true;
}

void GetTableStateResponse::Swap(GetTableStateResponse* other) {
  if (other != this) {
    std::swap(table_state_, other->table_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTableStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableStateResponse_descriptor_;
  metadata.reflection = GetTableStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetClusterStatusRequest::GetClusterStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterStatusRequest::InitAsDefaultInstance() {
}

GetClusterStatusRequest::GetClusterStatusRequest(const GetClusterStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterStatusRequest::~GetClusterStatusRequest() {
  SharedDtor();
}

void GetClusterStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetClusterStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterStatusRequest_descriptor_;
}

const GetClusterStatusRequest& GetClusterStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetClusterStatusRequest* GetClusterStatusRequest::default_instance_ = NULL;

GetClusterStatusRequest* GetClusterStatusRequest::New() const {
  return new GetClusterStatusRequest;
}

void GetClusterStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetClusterStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterStatusRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterStatusRequest::MergeFrom(const GetClusterStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterStatusRequest::CopyFrom(const GetClusterStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterStatusRequest::IsInitialized() const {

  return true;
}

void GetClusterStatusRequest::Swap(GetClusterStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterStatusRequest_descriptor_;
  metadata.reflection = GetClusterStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetClusterStatusResponse::kClusterStatusFieldNumber;
#endif  // !_MSC_VER

GetClusterStatusResponse::GetClusterStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetClusterStatusResponse::InitAsDefaultInstance() {
  cluster_status_ = const_cast< ::hbase::pb::ClusterStatus*>(&::hbase::pb::ClusterStatus::default_instance());
}

GetClusterStatusResponse::GetClusterStatusResponse(const GetClusterStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetClusterStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  cluster_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetClusterStatusResponse::~GetClusterStatusResponse() {
  SharedDtor();
}

void GetClusterStatusResponse::SharedDtor() {
  if (this != default_instance_) {
    delete cluster_status_;
  }
}

void GetClusterStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterStatusResponse_descriptor_;
}

const GetClusterStatusResponse& GetClusterStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetClusterStatusResponse* GetClusterStatusResponse::default_instance_ = NULL;

GetClusterStatusResponse* GetClusterStatusResponse::New() const {
  return new GetClusterStatusResponse;
}

void GetClusterStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster_status()) {
      if (cluster_status_ != NULL) cluster_status_->::hbase::pb::ClusterStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetClusterStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ClusterStatus cluster_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetClusterStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ClusterStatus cluster_status = 1;
  if (has_cluster_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetClusterStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ClusterStatus cluster_status = 1;
  if (has_cluster_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetClusterStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ClusterStatus cluster_status = 1;
    if (has_cluster_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetClusterStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetClusterStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetClusterStatusResponse::MergeFrom(const GetClusterStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_status()) {
      mutable_cluster_status()->::hbase::pb::ClusterStatus::MergeFrom(from.cluster_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetClusterStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterStatusResponse::CopyFrom(const GetClusterStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cluster_status()) {
    if (!this->cluster_status().IsInitialized()) return false;
  }
  return true;
}

void GetClusterStatusResponse::Swap(GetClusterStatusResponse* other) {
  if (other != this) {
    std::swap(cluster_status_, other->cluster_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetClusterStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterStatusResponse_descriptor_;
  metadata.reflection = GetClusterStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsMasterRunningRequest::IsMasterRunningRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsMasterRunningRequest::InitAsDefaultInstance() {
}

IsMasterRunningRequest::IsMasterRunningRequest(const IsMasterRunningRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsMasterRunningRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsMasterRunningRequest::~IsMasterRunningRequest() {
  SharedDtor();
}

void IsMasterRunningRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsMasterRunningRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsMasterRunningRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsMasterRunningRequest_descriptor_;
}

const IsMasterRunningRequest& IsMasterRunningRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsMasterRunningRequest* IsMasterRunningRequest::default_instance_ = NULL;

IsMasterRunningRequest* IsMasterRunningRequest::New() const {
  return new IsMasterRunningRequest;
}

void IsMasterRunningRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsMasterRunningRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IsMasterRunningRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsMasterRunningRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsMasterRunningRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsMasterRunningRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsMasterRunningRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsMasterRunningRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsMasterRunningRequest::MergeFrom(const IsMasterRunningRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsMasterRunningRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsMasterRunningRequest::CopyFrom(const IsMasterRunningRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMasterRunningRequest::IsInitialized() const {

  return true;
}

void IsMasterRunningRequest::Swap(IsMasterRunningRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsMasterRunningRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsMasterRunningRequest_descriptor_;
  metadata.reflection = IsMasterRunningRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsMasterRunningResponse::kIsMasterRunningFieldNumber;
#endif  // !_MSC_VER

IsMasterRunningResponse::IsMasterRunningResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsMasterRunningResponse::InitAsDefaultInstance() {
}

IsMasterRunningResponse::IsMasterRunningResponse(const IsMasterRunningResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsMasterRunningResponse::SharedCtor() {
  _cached_size_ = 0;
  is_master_running_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsMasterRunningResponse::~IsMasterRunningResponse() {
  SharedDtor();
}

void IsMasterRunningResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsMasterRunningResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsMasterRunningResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsMasterRunningResponse_descriptor_;
}

const IsMasterRunningResponse& IsMasterRunningResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsMasterRunningResponse* IsMasterRunningResponse::default_instance_ = NULL;

IsMasterRunningResponse* IsMasterRunningResponse::New() const {
  return new IsMasterRunningResponse;
}

void IsMasterRunningResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_master_running_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsMasterRunningResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_master_running = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_master_running_)));
          set_has_is_master_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsMasterRunningResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_master_running = 1;
  if (has_is_master_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_master_running(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsMasterRunningResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_master_running = 1;
  if (has_is_master_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_master_running(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsMasterRunningResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_master_running = 1;
    if (has_is_master_running()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsMasterRunningResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsMasterRunningResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsMasterRunningResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsMasterRunningResponse::MergeFrom(const IsMasterRunningResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_master_running()) {
      set_is_master_running(from.is_master_running());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsMasterRunningResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsMasterRunningResponse::CopyFrom(const IsMasterRunningResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMasterRunningResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsMasterRunningResponse::Swap(IsMasterRunningResponse* other) {
  if (other != this) {
    std::swap(is_master_running_, other->is_master_running_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsMasterRunningResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsMasterRunningResponse_descriptor_;
  metadata.reflection = IsMasterRunningResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecProcedureRequest::kProcedureFieldNumber;
#endif  // !_MSC_VER

ExecProcedureRequest::ExecProcedureRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecProcedureRequest::InitAsDefaultInstance() {
  procedure_ = const_cast< ::hbase::pb::ProcedureDescription*>(&::hbase::pb::ProcedureDescription::default_instance());
}

ExecProcedureRequest::ExecProcedureRequest(const ExecProcedureRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecProcedureRequest::SharedCtor() {
  _cached_size_ = 0;
  procedure_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecProcedureRequest::~ExecProcedureRequest() {
  SharedDtor();
}

void ExecProcedureRequest::SharedDtor() {
  if (this != default_instance_) {
    delete procedure_;
  }
}

void ExecProcedureRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecProcedureRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecProcedureRequest_descriptor_;
}

const ExecProcedureRequest& ExecProcedureRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ExecProcedureRequest* ExecProcedureRequest::default_instance_ = NULL;

ExecProcedureRequest* ExecProcedureRequest::New() const {
  return new ExecProcedureRequest;
}

void ExecProcedureRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_procedure()) {
      if (procedure_ != NULL) procedure_->::hbase::pb::ProcedureDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecProcedureRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ProcedureDescription procedure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_procedure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecProcedureRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ProcedureDescription procedure = 1;
  if (has_procedure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->procedure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecProcedureRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ProcedureDescription procedure = 1;
  if (has_procedure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->procedure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecProcedureRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ProcedureDescription procedure = 1;
    if (has_procedure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->procedure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecProcedureRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecProcedureRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecProcedureRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecProcedureRequest::MergeFrom(const ExecProcedureRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_procedure()) {
      mutable_procedure()->::hbase::pb::ProcedureDescription::MergeFrom(from.procedure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecProcedureRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecProcedureRequest::CopyFrom(const ExecProcedureRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecProcedureRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_procedure()) {
    if (!this->procedure().IsInitialized()) return false;
  }
  return true;
}

void ExecProcedureRequest::Swap(ExecProcedureRequest* other) {
  if (other != this) {
    std::swap(procedure_, other->procedure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecProcedureRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecProcedureRequest_descriptor_;
  metadata.reflection = ExecProcedureRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecProcedureResponse::kExpectedTimeoutFieldNumber;
const int ExecProcedureResponse::kReturnDataFieldNumber;
#endif  // !_MSC_VER

ExecProcedureResponse::ExecProcedureResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecProcedureResponse::InitAsDefaultInstance() {
}

ExecProcedureResponse::ExecProcedureResponse(const ExecProcedureResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecProcedureResponse::SharedCtor() {
  _cached_size_ = 0;
  expected_timeout_ = GOOGLE_LONGLONG(0);
  return_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecProcedureResponse::~ExecProcedureResponse() {
  SharedDtor();
}

void ExecProcedureResponse::SharedDtor() {
  if (return_data_ != &::google::protobuf::internal::kEmptyString) {
    delete return_data_;
  }
  if (this != default_instance_) {
  }
}

void ExecProcedureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecProcedureResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecProcedureResponse_descriptor_;
}

const ExecProcedureResponse& ExecProcedureResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ExecProcedureResponse* ExecProcedureResponse::default_instance_ = NULL;

ExecProcedureResponse* ExecProcedureResponse::New() const {
  return new ExecProcedureResponse;
}

void ExecProcedureResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expected_timeout_ = GOOGLE_LONGLONG(0);
    if (has_return_data()) {
      if (return_data_ != &::google::protobuf::internal::kEmptyString) {
        return_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecProcedureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expected_timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_timeout_)));
          set_has_expected_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_return_data;
        break;
      }

      // optional bytes return_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_return_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecProcedureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 expected_timeout = 1;
  if (has_expected_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expected_timeout(), output);
  }

  // optional bytes return_data = 2;
  if (has_return_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->return_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecProcedureResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 expected_timeout = 1;
  if (has_expected_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expected_timeout(), target);
  }

  // optional bytes return_data = 2;
  if (has_return_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->return_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecProcedureResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 expected_timeout = 1;
    if (has_expected_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expected_timeout());
    }

    // optional bytes return_data = 2;
    if (has_return_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->return_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecProcedureResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecProcedureResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecProcedureResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecProcedureResponse::MergeFrom(const ExecProcedureResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expected_timeout()) {
      set_expected_timeout(from.expected_timeout());
    }
    if (from.has_return_data()) {
      set_return_data(from.return_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecProcedureResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecProcedureResponse::CopyFrom(const ExecProcedureResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecProcedureResponse::IsInitialized() const {

  return true;
}

void ExecProcedureResponse::Swap(ExecProcedureResponse* other) {
  if (other != this) {
    std::swap(expected_timeout_, other->expected_timeout_);
    std::swap(return_data_, other->return_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecProcedureResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecProcedureResponse_descriptor_;
  metadata.reflection = ExecProcedureResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsProcedureDoneRequest::kProcedureFieldNumber;
#endif  // !_MSC_VER

IsProcedureDoneRequest::IsProcedureDoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsProcedureDoneRequest::InitAsDefaultInstance() {
  procedure_ = const_cast< ::hbase::pb::ProcedureDescription*>(&::hbase::pb::ProcedureDescription::default_instance());
}

IsProcedureDoneRequest::IsProcedureDoneRequest(const IsProcedureDoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsProcedureDoneRequest::SharedCtor() {
  _cached_size_ = 0;
  procedure_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsProcedureDoneRequest::~IsProcedureDoneRequest() {
  SharedDtor();
}

void IsProcedureDoneRequest::SharedDtor() {
  if (this != default_instance_) {
    delete procedure_;
  }
}

void IsProcedureDoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsProcedureDoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsProcedureDoneRequest_descriptor_;
}

const IsProcedureDoneRequest& IsProcedureDoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsProcedureDoneRequest* IsProcedureDoneRequest::default_instance_ = NULL;

IsProcedureDoneRequest* IsProcedureDoneRequest::New() const {
  return new IsProcedureDoneRequest;
}

void IsProcedureDoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_procedure()) {
      if (procedure_ != NULL) procedure_->::hbase::pb::ProcedureDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsProcedureDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.ProcedureDescription procedure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_procedure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsProcedureDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.ProcedureDescription procedure = 1;
  if (has_procedure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->procedure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsProcedureDoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.ProcedureDescription procedure = 1;
  if (has_procedure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->procedure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsProcedureDoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.ProcedureDescription procedure = 1;
    if (has_procedure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->procedure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsProcedureDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsProcedureDoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsProcedureDoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsProcedureDoneRequest::MergeFrom(const IsProcedureDoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_procedure()) {
      mutable_procedure()->::hbase::pb::ProcedureDescription::MergeFrom(from.procedure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsProcedureDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsProcedureDoneRequest::CopyFrom(const IsProcedureDoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsProcedureDoneRequest::IsInitialized() const {

  if (has_procedure()) {
    if (!this->procedure().IsInitialized()) return false;
  }
  return true;
}

void IsProcedureDoneRequest::Swap(IsProcedureDoneRequest* other) {
  if (other != this) {
    std::swap(procedure_, other->procedure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsProcedureDoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsProcedureDoneRequest_descriptor_;
  metadata.reflection = IsProcedureDoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsProcedureDoneResponse::kDoneFieldNumber;
const int IsProcedureDoneResponse::kSnapshotFieldNumber;
#endif  // !_MSC_VER

IsProcedureDoneResponse::IsProcedureDoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsProcedureDoneResponse::InitAsDefaultInstance() {
  snapshot_ = const_cast< ::hbase::pb::ProcedureDescription*>(&::hbase::pb::ProcedureDescription::default_instance());
}

IsProcedureDoneResponse::IsProcedureDoneResponse(const IsProcedureDoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsProcedureDoneResponse::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  snapshot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsProcedureDoneResponse::~IsProcedureDoneResponse() {
  SharedDtor();
}

void IsProcedureDoneResponse::SharedDtor() {
  if (this != default_instance_) {
    delete snapshot_;
  }
}

void IsProcedureDoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsProcedureDoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsProcedureDoneResponse_descriptor_;
}

const IsProcedureDoneResponse& IsProcedureDoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

IsProcedureDoneResponse* IsProcedureDoneResponse::default_instance_ = NULL;

IsProcedureDoneResponse* IsProcedureDoneResponse::New() const {
  return new IsProcedureDoneResponse;
}

void IsProcedureDoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    done_ = false;
    if (has_snapshot()) {
      if (snapshot_ != NULL) snapshot_->::hbase::pb::ProcedureDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsProcedureDoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool done = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshot;
        break;
      }

      // optional .hbase.pb.ProcedureDescription snapshot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsProcedureDoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool done = 1 [default = false];
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->done(), output);
  }

  // optional .hbase.pb.ProcedureDescription snapshot = 2;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsProcedureDoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool done = 1 [default = false];
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->done(), target);
  }

  // optional .hbase.pb.ProcedureDescription snapshot = 2;
  if (has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsProcedureDoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool done = 1 [default = false];
    if (has_done()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.ProcedureDescription snapshot = 2;
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsProcedureDoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsProcedureDoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsProcedureDoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsProcedureDoneResponse::MergeFrom(const IsProcedureDoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_snapshot()) {
      mutable_snapshot()->::hbase::pb::ProcedureDescription::MergeFrom(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsProcedureDoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsProcedureDoneResponse::CopyFrom(const IsProcedureDoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsProcedureDoneResponse::IsInitialized() const {

  if (has_snapshot()) {
    if (!this->snapshot().IsInitialized()) return false;
  }
  return true;
}

void IsProcedureDoneResponse::Swap(IsProcedureDoneResponse* other) {
  if (other != this) {
    std::swap(done_, other->done_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsProcedureDoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsProcedureDoneResponse_descriptor_;
  metadata.reflection = IsProcedureDoneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProcedureResultRequest::kProcIdFieldNumber;
#endif  // !_MSC_VER

GetProcedureResultRequest::GetProcedureResultRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProcedureResultRequest::InitAsDefaultInstance() {
}

GetProcedureResultRequest::GetProcedureResultRequest(const GetProcedureResultRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProcedureResultRequest::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProcedureResultRequest::~GetProcedureResultRequest() {
  SharedDtor();
}

void GetProcedureResultRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetProcedureResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProcedureResultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProcedureResultRequest_descriptor_;
}

const GetProcedureResultRequest& GetProcedureResultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetProcedureResultRequest* GetProcedureResultRequest::default_instance_ = NULL;

GetProcedureResultRequest* GetProcedureResultRequest::New() const {
  return new GetProcedureResultRequest;
}

void GetProcedureResultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProcedureResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProcedureResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProcedureResultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProcedureResultRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProcedureResultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProcedureResultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProcedureResultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProcedureResultRequest::MergeFrom(const GetProcedureResultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProcedureResultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProcedureResultRequest::CopyFrom(const GetProcedureResultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProcedureResultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetProcedureResultRequest::Swap(GetProcedureResultRequest* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProcedureResultRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProcedureResultRequest_descriptor_;
  metadata.reflection = GetProcedureResultRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetProcedureResultResponse_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProcedureResultResponse_State_descriptor_;
}
bool GetProcedureResultResponse_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetProcedureResultResponse_State GetProcedureResultResponse::NOT_FOUND;
const GetProcedureResultResponse_State GetProcedureResultResponse::RUNNING;
const GetProcedureResultResponse_State GetProcedureResultResponse::FINISHED;
const GetProcedureResultResponse_State GetProcedureResultResponse::State_MIN;
const GetProcedureResultResponse_State GetProcedureResultResponse::State_MAX;
const int GetProcedureResultResponse::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetProcedureResultResponse::kStateFieldNumber;
const int GetProcedureResultResponse::kStartTimeFieldNumber;
const int GetProcedureResultResponse::kLastUpdateFieldNumber;
const int GetProcedureResultResponse::kResultFieldNumber;
const int GetProcedureResultResponse::kExceptionFieldNumber;
#endif  // !_MSC_VER

GetProcedureResultResponse::GetProcedureResultResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProcedureResultResponse::InitAsDefaultInstance() {
  exception_ = const_cast< ::hbase::pb::ForeignExceptionMessage*>(&::hbase::pb::ForeignExceptionMessage::default_instance());
}

GetProcedureResultResponse::GetProcedureResultResponse(const GetProcedureResultResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProcedureResultResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  start_time_ = GOOGLE_ULONGLONG(0);
  last_update_ = GOOGLE_ULONGLONG(0);
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exception_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProcedureResultResponse::~GetProcedureResultResponse() {
  SharedDtor();
}

void GetProcedureResultResponse::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
    delete exception_;
  }
}

void GetProcedureResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProcedureResultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProcedureResultResponse_descriptor_;
}

const GetProcedureResultResponse& GetProcedureResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

GetProcedureResultResponse* GetProcedureResultResponse::default_instance_ = NULL;

GetProcedureResultResponse* GetProcedureResultResponse::New() const {
  return new GetProcedureResultResponse;
}

void GetProcedureResultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    start_time_ = GOOGLE_ULONGLONG(0);
    last_update_ = GOOGLE_ULONGLONG(0);
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    if (has_exception()) {
      if (exception_ != NULL) exception_->::hbase::pb::ForeignExceptionMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProcedureResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.GetProcedureResultResponse.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::GetProcedureResultResponse_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::GetProcedureResultResponse_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_update;
        break;
      }

      // optional uint64 last_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_update_)));
          set_has_last_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // optional bytes result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exception;
        break;
      }

      // optional .hbase.pb.ForeignExceptionMessage exception = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProcedureResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.GetProcedureResultResponse.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_time(), output);
  }

  // optional uint64 last_update = 3;
  if (has_last_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_update(), output);
  }

  // optional bytes result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->result(), output);
  }

  // optional .hbase.pb.ForeignExceptionMessage exception = 5;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exception(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProcedureResultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.GetProcedureResultResponse.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_time(), target);
  }

  // optional uint64 last_update = 3;
  if (has_last_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_update(), target);
  }

  // optional bytes result = 4;
  if (has_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result(), target);
  }

  // optional .hbase.pb.ForeignExceptionMessage exception = 5;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->exception(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProcedureResultResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.GetProcedureResultResponse.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 last_update = 3;
    if (has_last_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_update());
    }

    // optional bytes result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result());
    }

    // optional .hbase.pb.ForeignExceptionMessage exception = 5;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProcedureResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProcedureResultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProcedureResultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProcedureResultResponse::MergeFrom(const GetProcedureResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_last_update()) {
      set_last_update(from.last_update());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_exception()) {
      mutable_exception()->::hbase::pb::ForeignExceptionMessage::MergeFrom(from.exception());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProcedureResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProcedureResultResponse::CopyFrom(const GetProcedureResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProcedureResultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetProcedureResultResponse::Swap(GetProcedureResultResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(start_time_, other->start_time_);
    std::swap(last_update_, other->last_update_);
    std::swap(result_, other->result_);
    std::swap(exception_, other->exception_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProcedureResultResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProcedureResultResponse_descriptor_;
  metadata.reflection = GetProcedureResultResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbortProcedureRequest::kProcIdFieldNumber;
const int AbortProcedureRequest::kMayInterruptIfRunningFieldNumber;
#endif  // !_MSC_VER

AbortProcedureRequest::AbortProcedureRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbortProcedureRequest::InitAsDefaultInstance() {
}

AbortProcedureRequest::AbortProcedureRequest(const AbortProcedureRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbortProcedureRequest::SharedCtor() {
  _cached_size_ = 0;
  proc_id_ = GOOGLE_ULONGLONG(0);
  mayinterruptifrunning_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbortProcedureRequest::~AbortProcedureRequest() {
  SharedDtor();
}

void AbortProcedureRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AbortProcedureRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbortProcedureRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbortProcedureRequest_descriptor_;
}

const AbortProcedureRequest& AbortProcedureRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

AbortProcedureRequest* AbortProcedureRequest::default_instance_ = NULL;

AbortProcedureRequest* AbortProcedureRequest::New() const {
  return new AbortProcedureRequest;
}

void AbortProcedureRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proc_id_ = GOOGLE_ULONGLONG(0);
    mayinterruptifrunning_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbortProcedureRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 proc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_id_)));
          set_has_proc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mayInterruptIfRunning;
        break;
      }

      // optional bool mayInterruptIfRunning = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mayInterruptIfRunning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mayinterruptifrunning_)));
          set_has_mayinterruptifrunning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbortProcedureRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 proc_id = 1;
  if (has_proc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proc_id(), output);
  }

  // optional bool mayInterruptIfRunning = 2 [default = true];
  if (has_mayinterruptifrunning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mayinterruptifrunning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbortProcedureRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 proc_id = 1;
  if (has_proc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proc_id(), target);
  }

  // optional bool mayInterruptIfRunning = 2 [default = true];
  if (has_mayinterruptifrunning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mayinterruptifrunning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbortProcedureRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 proc_id = 1;
    if (has_proc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_id());
    }

    // optional bool mayInterruptIfRunning = 2 [default = true];
    if (has_mayinterruptifrunning()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbortProcedureRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbortProcedureRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbortProcedureRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbortProcedureRequest::MergeFrom(const AbortProcedureRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc_id()) {
      set_proc_id(from.proc_id());
    }
    if (from.has_mayinterruptifrunning()) {
      set_mayinterruptifrunning(from.mayinterruptifrunning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbortProcedureRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortProcedureRequest::CopyFrom(const AbortProcedureRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortProcedureRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AbortProcedureRequest::Swap(AbortProcedureRequest* other) {
  if (other != this) {
    std::swap(proc_id_, other->proc_id_);
    std::swap(mayinterruptifrunning_, other->mayinterruptifrunning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbortProcedureRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbortProcedureRequest_descriptor_;
  metadata.reflection = AbortProcedureRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbortProcedureResponse::kIsProcedureAbortedFieldNumber;
#endif  // !_MSC_VER

AbortProcedureResponse::AbortProcedureResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbortProcedureResponse::InitAsDefaultInstance() {
}

AbortProcedureResponse::AbortProcedureResponse(const AbortProcedureResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbortProcedureResponse::SharedCtor() {
  _cached_size_ = 0;
  is_procedure_aborted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbortProcedureResponse::~AbortProcedureResponse() {
  SharedDtor();
}

void AbortProcedureResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AbortProcedureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbortProcedureResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbortProcedureResponse_descriptor_;
}

const AbortProcedureResponse& AbortProcedureResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

AbortProcedureResponse* AbortProcedureResponse::default_instance_ = NULL;

AbortProcedureResponse* AbortProcedureResponse::New() const {
  return new AbortProcedureResponse;
}

void AbortProcedureResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_procedure_aborted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbortProcedureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_procedure_aborted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_procedure_aborted_)));
          set_has_is_procedure_aborted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbortProcedureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_procedure_aborted = 1;
  if (has_is_procedure_aborted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_procedure_aborted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbortProcedureResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_procedure_aborted = 1;
  if (has_is_procedure_aborted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_procedure_aborted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbortProcedureResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_procedure_aborted = 1;
    if (has_is_procedure_aborted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbortProcedureResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbortProcedureResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbortProcedureResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbortProcedureResponse::MergeFrom(const AbortProcedureResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_procedure_aborted()) {
      set_is_procedure_aborted(from.is_procedure_aborted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbortProcedureResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortProcedureResponse::CopyFrom(const AbortProcedureResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortProcedureResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AbortProcedureResponse::Swap(AbortProcedureResponse* other) {
  if (other != this) {
    std::swap(is_procedure_aborted_, other->is_procedure_aborted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbortProcedureResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbortProcedureResponse_descriptor_;
  metadata.reflection = AbortProcedureResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListProceduresRequest::ListProceduresRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListProceduresRequest::InitAsDefaultInstance() {
}

ListProceduresRequest::ListProceduresRequest(const ListProceduresRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListProceduresRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListProceduresRequest::~ListProceduresRequest() {
  SharedDtor();
}

void ListProceduresRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListProceduresRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListProceduresRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListProceduresRequest_descriptor_;
}

const ListProceduresRequest& ListProceduresRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListProceduresRequest* ListProceduresRequest::default_instance_ = NULL;

ListProceduresRequest* ListProceduresRequest::New() const {
  return new ListProceduresRequest;
}

void ListProceduresRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListProceduresRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ListProceduresRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListProceduresRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListProceduresRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListProceduresRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListProceduresRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListProceduresRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListProceduresRequest::MergeFrom(const ListProceduresRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListProceduresRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProceduresRequest::CopyFrom(const ListProceduresRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProceduresRequest::IsInitialized() const {

  return true;
}

void ListProceduresRequest::Swap(ListProceduresRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListProceduresRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListProceduresRequest_descriptor_;
  metadata.reflection = ListProceduresRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListProceduresResponse::kProcedureFieldNumber;
#endif  // !_MSC_VER

ListProceduresResponse::ListProceduresResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListProceduresResponse::InitAsDefaultInstance() {
}

ListProceduresResponse::ListProceduresResponse(const ListProceduresResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListProceduresResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListProceduresResponse::~ListProceduresResponse() {
  SharedDtor();
}

void ListProceduresResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListProceduresResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListProceduresResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListProceduresResponse_descriptor_;
}

const ListProceduresResponse& ListProceduresResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

ListProceduresResponse* ListProceduresResponse::default_instance_ = NULL;

ListProceduresResponse* ListProceduresResponse::New() const {
  return new ListProceduresResponse;
}

void ListProceduresResponse::Clear() {
  procedure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListProceduresResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.Procedure procedure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procedure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_procedure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_procedure;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListProceduresResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.Procedure procedure = 1;
  for (int i = 0; i < this->procedure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->procedure(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListProceduresResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.Procedure procedure = 1;
  for (int i = 0; i < this->procedure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->procedure(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListProceduresResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.Procedure procedure = 1;
  total_size += 1 * this->procedure_size();
  for (int i = 0; i < this->procedure_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->procedure(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListProceduresResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListProceduresResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListProceduresResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListProceduresResponse::MergeFrom(const ListProceduresResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  procedure_.MergeFrom(from.procedure_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListProceduresResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProceduresResponse::CopyFrom(const ListProceduresResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProceduresResponse::IsInitialized() const {

  for (int i = 0; i < procedure_size(); i++) {
    if (!this->procedure(i).IsInitialized()) return false;
  }
  return true;
}

void ListProceduresResponse::Swap(ListProceduresResponse* other) {
  if (other != this) {
    procedure_.Swap(&other->procedure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListProceduresResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListProceduresResponse_descriptor_;
  metadata.reflection = ListProceduresResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetQuotaRequest::kUserNameFieldNumber;
const int SetQuotaRequest::kUserGroupFieldNumber;
const int SetQuotaRequest::kNamespaceFieldNumber;
const int SetQuotaRequest::kTableNameFieldNumber;
const int SetQuotaRequest::kRemoveAllFieldNumber;
const int SetQuotaRequest::kBypassGlobalsFieldNumber;
const int SetQuotaRequest::kThrottleFieldNumber;
#endif  // !_MSC_VER

SetQuotaRequest::SetQuotaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetQuotaRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
  throttle_ = const_cast< ::hbase::pb::ThrottleRequest*>(&::hbase::pb::ThrottleRequest::default_instance());
}

SetQuotaRequest::SetQuotaRequest(const SetQuotaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetQuotaRequest::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_name_ = NULL;
  remove_all_ = false;
  bypass_globals_ = false;
  throttle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetQuotaRequest::~SetQuotaRequest() {
  SharedDtor();
}

void SetQuotaRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_group_ != &::google::protobuf::internal::kEmptyString) {
    delete user_group_;
  }
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (this != default_instance_) {
    delete table_name_;
    delete throttle_;
  }
}

void SetQuotaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetQuotaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetQuotaRequest_descriptor_;
}

const SetQuotaRequest& SetQuotaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetQuotaRequest* SetQuotaRequest::default_instance_ = NULL;

SetQuotaRequest* SetQuotaRequest::New() const {
  return new SetQuotaRequest;
}

void SetQuotaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_user_group()) {
      if (user_group_ != &::google::protobuf::internal::kEmptyString) {
        user_group_->clear();
      }
    }
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    remove_all_ = false;
    bypass_globals_ = false;
    if (has_throttle()) {
      if (throttle_ != NULL) throttle_->::hbase::pb::ThrottleRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetQuotaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_group;
        break;
      }

      // optional string user_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_group().data(), this->user_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_namespace;
        break;
      }

      // optional string namespace = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_name;
        break;
      }

      // optional .hbase.pb.TableName table_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remove_all;
        break;
      }

      // optional bool remove_all = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_all_)));
          set_has_remove_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bypass_globals;
        break;
      }

      // optional bool bypass_globals = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bypass_globals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bypass_globals_)));
          set_has_bypass_globals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_throttle;
        break;
      }

      // optional .hbase.pb.ThrottleRequest throttle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_throttle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throttle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetQuotaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string user_group = 2;
  if (has_user_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_group().data(), this->user_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_group(), output);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->namespace_(), output);
  }

  // optional .hbase.pb.TableName table_name = 4;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_name(), output);
  }

  // optional bool remove_all = 5;
  if (has_remove_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->remove_all(), output);
  }

  // optional bool bypass_globals = 6;
  if (has_bypass_globals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bypass_globals(), output);
  }

  // optional .hbase.pb.ThrottleRequest throttle = 7;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->throttle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetQuotaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional string user_group = 2;
  if (has_user_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_group().data(), this->user_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_group(), target);
  }

  // optional string namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }

  // optional .hbase.pb.TableName table_name = 4;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_name(), target);
  }

  // optional bool remove_all = 5;
  if (has_remove_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->remove_all(), target);
  }

  // optional bool bypass_globals = 6;
  if (has_bypass_globals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bypass_globals(), target);
  }

  // optional .hbase.pb.ThrottleRequest throttle = 7;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->throttle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetQuotaRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string user_group = 2;
    if (has_user_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_group());
    }

    // optional string namespace = 3;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // optional .hbase.pb.TableName table_name = 4;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // optional bool remove_all = 5;
    if (has_remove_all()) {
      total_size += 1 + 1;
    }

    // optional bool bypass_globals = 6;
    if (has_bypass_globals()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.ThrottleRequest throttle = 7;
    if (has_throttle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->throttle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetQuotaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetQuotaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetQuotaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetQuotaRequest::MergeFrom(const SetQuotaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_group()) {
      set_user_group(from.user_group());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_remove_all()) {
      set_remove_all(from.remove_all());
    }
    if (from.has_bypass_globals()) {
      set_bypass_globals(from.bypass_globals());
    }
    if (from.has_throttle()) {
      mutable_throttle()->::hbase::pb::ThrottleRequest::MergeFrom(from.throttle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetQuotaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuotaRequest::CopyFrom(const SetQuotaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuotaRequest::IsInitialized() const {

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  if (has_throttle()) {
    if (!this->throttle().IsInitialized()) return false;
  }
  return true;
}

void SetQuotaRequest::Swap(SetQuotaRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(user_group_, other->user_group_);
    std::swap(namespace__, other->namespace__);
    std::swap(table_name_, other->table_name_);
    std::swap(remove_all_, other->remove_all_);
    std::swap(bypass_globals_, other->bypass_globals_);
    std::swap(throttle_, other->throttle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetQuotaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetQuotaRequest_descriptor_;
  metadata.reflection = SetQuotaRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetQuotaResponse::SetQuotaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetQuotaResponse::InitAsDefaultInstance() {
}

SetQuotaResponse::SetQuotaResponse(const SetQuotaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetQuotaResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetQuotaResponse::~SetQuotaResponse() {
  SharedDtor();
}

void SetQuotaResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetQuotaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetQuotaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetQuotaResponse_descriptor_;
}

const SetQuotaResponse& SetQuotaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SetQuotaResponse* SetQuotaResponse::default_instance_ = NULL;

SetQuotaResponse* SetQuotaResponse::New() const {
  return new SetQuotaResponse;
}

void SetQuotaResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetQuotaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetQuotaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetQuotaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetQuotaResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetQuotaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetQuotaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetQuotaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetQuotaResponse::MergeFrom(const SetQuotaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetQuotaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuotaResponse::CopyFrom(const SetQuotaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuotaResponse::IsInitialized() const {

  return true;
}

void SetQuotaResponse::Swap(SetQuotaResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetQuotaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetQuotaResponse_descriptor_;
  metadata.reflection = SetQuotaResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MajorCompactionTimestampRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

MajorCompactionTimestampRequest::MajorCompactionTimestampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MajorCompactionTimestampRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

MajorCompactionTimestampRequest::MajorCompactionTimestampRequest(const MajorCompactionTimestampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MajorCompactionTimestampRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MajorCompactionTimestampRequest::~MajorCompactionTimestampRequest() {
  SharedDtor();
}

void MajorCompactionTimestampRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void MajorCompactionTimestampRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MajorCompactionTimestampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MajorCompactionTimestampRequest_descriptor_;
}

const MajorCompactionTimestampRequest& MajorCompactionTimestampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

MajorCompactionTimestampRequest* MajorCompactionTimestampRequest::default_instance_ = NULL;

MajorCompactionTimestampRequest* MajorCompactionTimestampRequest::New() const {
  return new MajorCompactionTimestampRequest;
}

void MajorCompactionTimestampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MajorCompactionTimestampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MajorCompactionTimestampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MajorCompactionTimestampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MajorCompactionTimestampRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MajorCompactionTimestampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MajorCompactionTimestampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MajorCompactionTimestampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MajorCompactionTimestampRequest::MergeFrom(const MajorCompactionTimestampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MajorCompactionTimestampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MajorCompactionTimestampRequest::CopyFrom(const MajorCompactionTimestampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorCompactionTimestampRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void MajorCompactionTimestampRequest::Swap(MajorCompactionTimestampRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MajorCompactionTimestampRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MajorCompactionTimestampRequest_descriptor_;
  metadata.reflection = MajorCompactionTimestampRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MajorCompactionTimestampForRegionRequest::kRegionFieldNumber;
#endif  // !_MSC_VER

MajorCompactionTimestampForRegionRequest::MajorCompactionTimestampForRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MajorCompactionTimestampForRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

MajorCompactionTimestampForRegionRequest::MajorCompactionTimestampForRegionRequest(const MajorCompactionTimestampForRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MajorCompactionTimestampForRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MajorCompactionTimestampForRegionRequest::~MajorCompactionTimestampForRegionRequest() {
  SharedDtor();
}

void MajorCompactionTimestampForRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void MajorCompactionTimestampForRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MajorCompactionTimestampForRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MajorCompactionTimestampForRegionRequest_descriptor_;
}

const MajorCompactionTimestampForRegionRequest& MajorCompactionTimestampForRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

MajorCompactionTimestampForRegionRequest* MajorCompactionTimestampForRegionRequest::default_instance_ = NULL;

MajorCompactionTimestampForRegionRequest* MajorCompactionTimestampForRegionRequest::New() const {
  return new MajorCompactionTimestampForRegionRequest;
}

void MajorCompactionTimestampForRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MajorCompactionTimestampForRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MajorCompactionTimestampForRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MajorCompactionTimestampForRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MajorCompactionTimestampForRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MajorCompactionTimestampForRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MajorCompactionTimestampForRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MajorCompactionTimestampForRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MajorCompactionTimestampForRegionRequest::MergeFrom(const MajorCompactionTimestampForRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MajorCompactionTimestampForRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MajorCompactionTimestampForRegionRequest::CopyFrom(const MajorCompactionTimestampForRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorCompactionTimestampForRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void MajorCompactionTimestampForRegionRequest::Swap(MajorCompactionTimestampForRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MajorCompactionTimestampForRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MajorCompactionTimestampForRegionRequest_descriptor_;
  metadata.reflection = MajorCompactionTimestampForRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MajorCompactionTimestampResponse::kCompactionTimestampFieldNumber;
#endif  // !_MSC_VER

MajorCompactionTimestampResponse::MajorCompactionTimestampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MajorCompactionTimestampResponse::InitAsDefaultInstance() {
}

MajorCompactionTimestampResponse::MajorCompactionTimestampResponse(const MajorCompactionTimestampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MajorCompactionTimestampResponse::SharedCtor() {
  _cached_size_ = 0;
  compaction_timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MajorCompactionTimestampResponse::~MajorCompactionTimestampResponse() {
  SharedDtor();
}

void MajorCompactionTimestampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MajorCompactionTimestampResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MajorCompactionTimestampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MajorCompactionTimestampResponse_descriptor_;
}

const MajorCompactionTimestampResponse& MajorCompactionTimestampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

MajorCompactionTimestampResponse* MajorCompactionTimestampResponse::default_instance_ = NULL;

MajorCompactionTimestampResponse* MajorCompactionTimestampResponse::New() const {
  return new MajorCompactionTimestampResponse;
}

void MajorCompactionTimestampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    compaction_timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MajorCompactionTimestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 compaction_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compaction_timestamp_)));
          set_has_compaction_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MajorCompactionTimestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 compaction_timestamp = 1;
  if (has_compaction_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->compaction_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MajorCompactionTimestampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 compaction_timestamp = 1;
  if (has_compaction_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->compaction_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MajorCompactionTimestampResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 compaction_timestamp = 1;
    if (has_compaction_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->compaction_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MajorCompactionTimestampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MajorCompactionTimestampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MajorCompactionTimestampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MajorCompactionTimestampResponse::MergeFrom(const MajorCompactionTimestampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compaction_timestamp()) {
      set_compaction_timestamp(from.compaction_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MajorCompactionTimestampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MajorCompactionTimestampResponse::CopyFrom(const MajorCompactionTimestampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MajorCompactionTimestampResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MajorCompactionTimestampResponse::Swap(MajorCompactionTimestampResponse* other) {
  if (other != this) {
    std::swap(compaction_timestamp_, other->compaction_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MajorCompactionTimestampResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MajorCompactionTimestampResponse_descriptor_;
  metadata.reflection = MajorCompactionTimestampResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SecurityCapabilitiesRequest::SecurityCapabilitiesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityCapabilitiesRequest::InitAsDefaultInstance() {
}

SecurityCapabilitiesRequest::SecurityCapabilitiesRequest(const SecurityCapabilitiesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityCapabilitiesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityCapabilitiesRequest::~SecurityCapabilitiesRequest() {
  SharedDtor();
}

void SecurityCapabilitiesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecurityCapabilitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityCapabilitiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityCapabilitiesRequest_descriptor_;
}

const SecurityCapabilitiesRequest& SecurityCapabilitiesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SecurityCapabilitiesRequest* SecurityCapabilitiesRequest::default_instance_ = NULL;

SecurityCapabilitiesRequest* SecurityCapabilitiesRequest::New() const {
  return new SecurityCapabilitiesRequest;
}

void SecurityCapabilitiesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityCapabilitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SecurityCapabilitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityCapabilitiesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityCapabilitiesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityCapabilitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityCapabilitiesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityCapabilitiesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityCapabilitiesRequest::MergeFrom(const SecurityCapabilitiesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityCapabilitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityCapabilitiesRequest::CopyFrom(const SecurityCapabilitiesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityCapabilitiesRequest::IsInitialized() const {

  return true;
}

void SecurityCapabilitiesRequest::Swap(SecurityCapabilitiesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityCapabilitiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityCapabilitiesRequest_descriptor_;
  metadata.reflection = SecurityCapabilitiesRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SecurityCapabilitiesResponse_Capability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityCapabilitiesResponse_Capability_descriptor_;
}
bool SecurityCapabilitiesResponse_Capability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::SIMPLE_AUTHENTICATION;
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::SECURE_AUTHENTICATION;
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::AUTHORIZATION;
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::CELL_AUTHORIZATION;
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::CELL_VISIBILITY;
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::Capability_MIN;
const SecurityCapabilitiesResponse_Capability SecurityCapabilitiesResponse::Capability_MAX;
const int SecurityCapabilitiesResponse::Capability_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SecurityCapabilitiesResponse::kCapabilitiesFieldNumber;
#endif  // !_MSC_VER

SecurityCapabilitiesResponse::SecurityCapabilitiesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityCapabilitiesResponse::InitAsDefaultInstance() {
}

SecurityCapabilitiesResponse::SecurityCapabilitiesResponse(const SecurityCapabilitiesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityCapabilitiesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityCapabilitiesResponse::~SecurityCapabilitiesResponse() {
  SharedDtor();
}

void SecurityCapabilitiesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecurityCapabilitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityCapabilitiesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityCapabilitiesResponse_descriptor_;
}

const SecurityCapabilitiesResponse& SecurityCapabilitiesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Master_2eproto();
  return *default_instance_;
}

SecurityCapabilitiesResponse* SecurityCapabilitiesResponse::default_instance_ = NULL;

SecurityCapabilitiesResponse* SecurityCapabilitiesResponse::New() const {
  return new SecurityCapabilitiesResponse;
}

void SecurityCapabilitiesResponse::Clear() {
  capabilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityCapabilitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.SecurityCapabilitiesResponse.Capability capabilities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capabilities:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::SecurityCapabilitiesResponse_Capability_IsValid(value)) {
            add_capabilities(static_cast< ::hbase::pb::SecurityCapabilitiesResponse_Capability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::hbase::pb::SecurityCapabilitiesResponse_Capability_IsValid,
                 this->mutable_capabilities())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_capabilities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityCapabilitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.SecurityCapabilitiesResponse.Capability capabilities = 1;
  for (int i = 0; i < this->capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->capabilities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityCapabilitiesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.SecurityCapabilitiesResponse.Capability capabilities = 1;
  for (int i = 0; i < this->capabilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->capabilities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityCapabilitiesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.SecurityCapabilitiesResponse.Capability capabilities = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->capabilities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->capabilities(i));
    }
    total_size += 1 * this->capabilities_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityCapabilitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityCapabilitiesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityCapabilitiesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityCapabilitiesResponse::MergeFrom(const SecurityCapabilitiesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  capabilities_.MergeFrom(from.capabilities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityCapabilitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityCapabilitiesResponse::CopyFrom(const SecurityCapabilitiesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityCapabilitiesResponse::IsInitialized() const {

  return true;
}

void SecurityCapabilitiesResponse::Swap(SecurityCapabilitiesResponse* other) {
  if (other != this) {
    capabilities_.Swap(&other->capabilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityCapabilitiesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityCapabilitiesResponse_descriptor_;
  metadata.reflection = SecurityCapabilitiesResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
