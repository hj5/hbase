// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Admin.proto

#ifndef PROTOBUF_Admin_2eproto__INCLUDED
#define PROTOBUF_Admin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Client.pb.h"
#include "HBase.pb.h"
#include "WAL.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Admin_2eproto();
void protobuf_AssignDesc_Admin_2eproto();
void protobuf_ShutdownFile_Admin_2eproto();

class GetRegionInfoRequest;
class GetRegionInfoResponse;
class GetStoreFileRequest;
class GetStoreFileResponse;
class GetOnlineRegionRequest;
class GetOnlineRegionResponse;
class OpenRegionRequest;
class OpenRegionRequest_RegionOpenInfo;
class OpenRegionResponse;
class WarmupRegionRequest;
class WarmupRegionResponse;
class CloseRegionRequest;
class CloseRegionResponse;
class FlushRegionRequest;
class FlushRegionResponse;
class SplitRegionRequest;
class SplitRegionResponse;
class CompactRegionRequest;
class CompactRegionResponse;
class UpdateFavoredNodesRequest;
class UpdateFavoredNodesRequest_RegionUpdateInfo;
class UpdateFavoredNodesResponse;
class MergeRegionsRequest;
class MergeRegionsResponse;
class WALEntry;
class ReplicateWALEntryRequest;
class ReplicateWALEntryResponse;
class RollWALWriterRequest;
class RollWALWriterResponse;
class StopServerRequest;
class StopServerResponse;
class GetServerInfoRequest;
class ServerInfo;
class GetServerInfoResponse;
class UpdateConfigurationRequest;
class UpdateConfigurationResponse;

enum GetRegionInfoResponse_CompactionState {
  GetRegionInfoResponse_CompactionState_NONE = 0,
  GetRegionInfoResponse_CompactionState_MINOR = 1,
  GetRegionInfoResponse_CompactionState_MAJOR = 2,
  GetRegionInfoResponse_CompactionState_MAJOR_AND_MINOR = 3
};
bool GetRegionInfoResponse_CompactionState_IsValid(int value);
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse_CompactionState_CompactionState_MIN = GetRegionInfoResponse_CompactionState_NONE;
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse_CompactionState_CompactionState_MAX = GetRegionInfoResponse_CompactionState_MAJOR_AND_MINOR;
const int GetRegionInfoResponse_CompactionState_CompactionState_ARRAYSIZE = GetRegionInfoResponse_CompactionState_CompactionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetRegionInfoResponse_CompactionState_descriptor();
inline const ::std::string& GetRegionInfoResponse_CompactionState_Name(GetRegionInfoResponse_CompactionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetRegionInfoResponse_CompactionState_descriptor(), value);
}
inline bool GetRegionInfoResponse_CompactionState_Parse(
    const ::std::string& name, GetRegionInfoResponse_CompactionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetRegionInfoResponse_CompactionState>(
    GetRegionInfoResponse_CompactionState_descriptor(), name, value);
}
enum OpenRegionResponse_RegionOpeningState {
  OpenRegionResponse_RegionOpeningState_OPENED = 0,
  OpenRegionResponse_RegionOpeningState_ALREADY_OPENED = 1,
  OpenRegionResponse_RegionOpeningState_FAILED_OPENING = 2
};
bool OpenRegionResponse_RegionOpeningState_IsValid(int value);
const OpenRegionResponse_RegionOpeningState OpenRegionResponse_RegionOpeningState_RegionOpeningState_MIN = OpenRegionResponse_RegionOpeningState_OPENED;
const OpenRegionResponse_RegionOpeningState OpenRegionResponse_RegionOpeningState_RegionOpeningState_MAX = OpenRegionResponse_RegionOpeningState_FAILED_OPENING;
const int OpenRegionResponse_RegionOpeningState_RegionOpeningState_ARRAYSIZE = OpenRegionResponse_RegionOpeningState_RegionOpeningState_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenRegionResponse_RegionOpeningState_descriptor();
inline const ::std::string& OpenRegionResponse_RegionOpeningState_Name(OpenRegionResponse_RegionOpeningState value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenRegionResponse_RegionOpeningState_descriptor(), value);
}
inline bool OpenRegionResponse_RegionOpeningState_Parse(
    const ::std::string& name, OpenRegionResponse_RegionOpeningState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenRegionResponse_RegionOpeningState>(
    OpenRegionResponse_RegionOpeningState_descriptor(), name, value);
}
// ===================================================================

class GetRegionInfoRequest : public ::google::protobuf::Message {
 public:
  GetRegionInfoRequest();
  virtual ~GetRegionInfoRequest();

  GetRegionInfoRequest(const GetRegionInfoRequest& from);

  inline GetRegionInfoRequest& operator=(const GetRegionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegionInfoRequest& default_instance();

  void Swap(GetRegionInfoRequest* other);

  // implements Message ----------------------------------------------

  GetRegionInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegionInfoRequest& from);
  void MergeFrom(const GetRegionInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region();
  inline ::hbase::pb::RegionSpecifier* release_region();
  inline void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional bool compaction_state = 2;
  inline bool has_compaction_state() const;
  inline void clear_compaction_state();
  static const int kCompactionStateFieldNumber = 2;
  inline bool compaction_state() const;
  inline void set_compaction_state(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetRegionInfoRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_compaction_state();
  inline void clear_has_compaction_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_;
  bool compaction_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetRegionInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRegionInfoResponse : public ::google::protobuf::Message {
 public:
  GetRegionInfoResponse();
  virtual ~GetRegionInfoResponse();

  GetRegionInfoResponse(const GetRegionInfoResponse& from);

  inline GetRegionInfoResponse& operator=(const GetRegionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegionInfoResponse& default_instance();

  void Swap(GetRegionInfoResponse* other);

  // implements Message ----------------------------------------------

  GetRegionInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegionInfoResponse& from);
  void MergeFrom(const GetRegionInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetRegionInfoResponse_CompactionState CompactionState;
  static const CompactionState NONE = GetRegionInfoResponse_CompactionState_NONE;
  static const CompactionState MINOR = GetRegionInfoResponse_CompactionState_MINOR;
  static const CompactionState MAJOR = GetRegionInfoResponse_CompactionState_MAJOR;
  static const CompactionState MAJOR_AND_MINOR = GetRegionInfoResponse_CompactionState_MAJOR_AND_MINOR;
  static inline bool CompactionState_IsValid(int value) {
    return GetRegionInfoResponse_CompactionState_IsValid(value);
  }
  static const CompactionState CompactionState_MIN =
    GetRegionInfoResponse_CompactionState_CompactionState_MIN;
  static const CompactionState CompactionState_MAX =
    GetRegionInfoResponse_CompactionState_CompactionState_MAX;
  static const int CompactionState_ARRAYSIZE =
    GetRegionInfoResponse_CompactionState_CompactionState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompactionState_descriptor() {
    return GetRegionInfoResponse_CompactionState_descriptor();
  }
  static inline const ::std::string& CompactionState_Name(CompactionState value) {
    return GetRegionInfoResponse_CompactionState_Name(value);
  }
  static inline bool CompactionState_Parse(const ::std::string& name,
      CompactionState* value) {
    return GetRegionInfoResponse_CompactionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionInfo region_info = 1;
  inline bool has_region_info() const;
  inline void clear_region_info();
  static const int kRegionInfoFieldNumber = 1;
  inline const ::hbase::pb::RegionInfo& region_info() const;
  inline ::hbase::pb::RegionInfo* mutable_region_info();
  inline ::hbase::pb::RegionInfo* release_region_info();
  inline void set_allocated_region_info(::hbase::pb::RegionInfo* region_info);

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  inline bool has_compaction_state() const;
  inline void clear_compaction_state();
  static const int kCompactionStateFieldNumber = 2;
  inline ::hbase::pb::GetRegionInfoResponse_CompactionState compaction_state() const;
  inline void set_compaction_state(::hbase::pb::GetRegionInfoResponse_CompactionState value);

  // optional bool isRecovering = 3;
  inline bool has_isrecovering() const;
  inline void clear_isrecovering();
  static const int kIsRecoveringFieldNumber = 3;
  inline bool isrecovering() const;
  inline void set_isrecovering(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetRegionInfoResponse)
 private:
  inline void set_has_region_info();
  inline void clear_has_region_info();
  inline void set_has_compaction_state();
  inline void clear_has_compaction_state();
  inline void set_has_isrecovering();
  inline void clear_has_isrecovering();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionInfo* region_info_;
  int compaction_state_;
  bool isrecovering_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetRegionInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreFileRequest : public ::google::protobuf::Message {
 public:
  GetStoreFileRequest();
  virtual ~GetStoreFileRequest();

  GetStoreFileRequest(const GetStoreFileRequest& from);

  inline GetStoreFileRequest& operator=(const GetStoreFileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreFileRequest& default_instance();

  void Swap(GetStoreFileRequest* other);

  // implements Message ----------------------------------------------

  GetStoreFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreFileRequest& from);
  void MergeFrom(const GetStoreFileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region();
  inline ::hbase::pb::RegionSpecifier* release_region();
  inline void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // repeated bytes family = 2;
  inline int family_size() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 2;
  inline const ::std::string& family(int index) const;
  inline ::std::string* mutable_family(int index);
  inline void set_family(int index, const ::std::string& value);
  inline void set_family(int index, const char* value);
  inline void set_family(int index, const void* value, size_t size);
  inline ::std::string* add_family();
  inline void add_family(const ::std::string& value);
  inline void add_family(const char* value);
  inline void add_family(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& family() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_family();

  // @@protoc_insertion_point(class_scope:hbase.pb.GetStoreFileRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_;
  ::google::protobuf::RepeatedPtrField< ::std::string> family_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetStoreFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetStoreFileResponse : public ::google::protobuf::Message {
 public:
  GetStoreFileResponse();
  virtual ~GetStoreFileResponse();

  GetStoreFileResponse(const GetStoreFileResponse& from);

  inline GetStoreFileResponse& operator=(const GetStoreFileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStoreFileResponse& default_instance();

  void Swap(GetStoreFileResponse* other);

  // implements Message ----------------------------------------------

  GetStoreFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStoreFileResponse& from);
  void MergeFrom(const GetStoreFileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string store_file = 1;
  inline int store_file_size() const;
  inline void clear_store_file();
  static const int kStoreFileFieldNumber = 1;
  inline const ::std::string& store_file(int index) const;
  inline ::std::string* mutable_store_file(int index);
  inline void set_store_file(int index, const ::std::string& value);
  inline void set_store_file(int index, const char* value);
  inline void set_store_file(int index, const char* value, size_t size);
  inline ::std::string* add_store_file();
  inline void add_store_file(const ::std::string& value);
  inline void add_store_file(const char* value);
  inline void add_store_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& store_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_store_file();

  // @@protoc_insertion_point(class_scope:hbase.pb.GetStoreFileResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> store_file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetStoreFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetOnlineRegionRequest : public ::google::protobuf::Message {
 public:
  GetOnlineRegionRequest();
  virtual ~GetOnlineRegionRequest();

  GetOnlineRegionRequest(const GetOnlineRegionRequest& from);

  inline GetOnlineRegionRequest& operator=(const GetOnlineRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlineRegionRequest& default_instance();

  void Swap(GetOnlineRegionRequest* other);

  // implements Message ----------------------------------------------

  GetOnlineRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetOnlineRegionRequest& from);
  void MergeFrom(const GetOnlineRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.GetOnlineRegionRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetOnlineRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetOnlineRegionResponse : public ::google::protobuf::Message {
 public:
  GetOnlineRegionResponse();
  virtual ~GetOnlineRegionResponse();

  GetOnlineRegionResponse(const GetOnlineRegionResponse& from);

  inline GetOnlineRegionResponse& operator=(const GetOnlineRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlineRegionResponse& default_instance();

  void Swap(GetOnlineRegionResponse* other);

  // implements Message ----------------------------------------------

  GetOnlineRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetOnlineRegionResponse& from);
  void MergeFrom(const GetOnlineRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.RegionInfo region_info = 1;
  inline int region_info_size() const;
  inline void clear_region_info();
  static const int kRegionInfoFieldNumber = 1;
  inline const ::hbase::pb::RegionInfo& region_info(int index) const;
  inline ::hbase::pb::RegionInfo* mutable_region_info(int index);
  inline ::hbase::pb::RegionInfo* add_region_info();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >&
      region_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >*
      mutable_region_info();

  // @@protoc_insertion_point(class_scope:hbase.pb.GetOnlineRegionResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo > region_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetOnlineRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class OpenRegionRequest_RegionOpenInfo : public ::google::protobuf::Message {
 public:
  OpenRegionRequest_RegionOpenInfo();
  virtual ~OpenRegionRequest_RegionOpenInfo();

  OpenRegionRequest_RegionOpenInfo(const OpenRegionRequest_RegionOpenInfo& from);

  inline OpenRegionRequest_RegionOpenInfo& operator=(const OpenRegionRequest_RegionOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenRegionRequest_RegionOpenInfo& default_instance();

  void Swap(OpenRegionRequest_RegionOpenInfo* other);

  // implements Message ----------------------------------------------

  OpenRegionRequest_RegionOpenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenRegionRequest_RegionOpenInfo& from);
  void MergeFrom(const OpenRegionRequest_RegionOpenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionInfo region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionInfo& region() const;
  inline ::hbase::pb::RegionInfo* mutable_region();
  inline ::hbase::pb::RegionInfo* release_region();
  inline void set_allocated_region(::hbase::pb::RegionInfo* region);

  // optional uint32 version_of_offline_node = 2;
  inline bool has_version_of_offline_node() const;
  inline void clear_version_of_offline_node();
  static const int kVersionOfOfflineNodeFieldNumber = 2;
  inline ::google::protobuf::uint32 version_of_offline_node() const;
  inline void set_version_of_offline_node(::google::protobuf::uint32 value);

  // repeated .hbase.pb.ServerName favored_nodes = 3;
  inline int favored_nodes_size() const;
  inline void clear_favored_nodes();
  static const int kFavoredNodesFieldNumber = 3;
  inline const ::hbase::pb::ServerName& favored_nodes(int index) const;
  inline ::hbase::pb::ServerName* mutable_favored_nodes(int index);
  inline ::hbase::pb::ServerName* add_favored_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
      favored_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
      mutable_favored_nodes();

  // optional bool openForDistributedLogReplay = 4;
  inline bool has_openfordistributedlogreplay() const;
  inline void clear_openfordistributedlogreplay();
  static const int kOpenForDistributedLogReplayFieldNumber = 4;
  inline bool openfordistributedlogreplay() const;
  inline void set_openfordistributedlogreplay(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.OpenRegionRequest.RegionOpenInfo)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_version_of_offline_node();
  inline void clear_has_version_of_offline_node();
  inline void set_has_openfordistributedlogreplay();
  inline void clear_has_openfordistributedlogreplay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionInfo* region_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName > favored_nodes_;
  ::google::protobuf::uint32 version_of_offline_node_;
  bool openfordistributedlogreplay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static OpenRegionRequest_RegionOpenInfo* default_instance_;
};
// -------------------------------------------------------------------

class OpenRegionRequest : public ::google::protobuf::Message {
 public:
  OpenRegionRequest();
  virtual ~OpenRegionRequest();

  OpenRegionRequest(const OpenRegionRequest& from);

  inline OpenRegionRequest& operator=(const OpenRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenRegionRequest& default_instance();

  void Swap(OpenRegionRequest* other);

  // implements Message ----------------------------------------------

  OpenRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenRegionRequest& from);
  void MergeFrom(const OpenRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OpenRegionRequest_RegionOpenInfo RegionOpenInfo;

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  inline int open_info_size() const;
  inline void clear_open_info();
  static const int kOpenInfoFieldNumber = 1;
  inline const ::hbase::pb::OpenRegionRequest_RegionOpenInfo& open_info(int index) const;
  inline ::hbase::pb::OpenRegionRequest_RegionOpenInfo* mutable_open_info(int index);
  inline ::hbase::pb::OpenRegionRequest_RegionOpenInfo* add_open_info();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >&
      open_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >*
      mutable_open_info();

  // optional uint64 serverStartCode = 2;
  inline bool has_serverstartcode() const;
  inline void clear_serverstartcode();
  static const int kServerStartCodeFieldNumber = 2;
  inline ::google::protobuf::uint64 serverstartcode() const;
  inline void set_serverstartcode(::google::protobuf::uint64 value);

  // optional uint64 master_system_time = 5;
  inline bool has_master_system_time() const;
  inline void clear_master_system_time();
  static const int kMasterSystemTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 master_system_time() const;
  inline void set_master_system_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.OpenRegionRequest)
 private:
  inline void set_has_serverstartcode();
  inline void clear_has_serverstartcode();
  inline void set_has_master_system_time();
  inline void clear_has_master_system_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo > open_info_;
  ::google::protobuf::uint64 serverstartcode_;
  ::google::protobuf::uint64 master_system_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static OpenRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class OpenRegionResponse : public ::google::protobuf::Message {
 public:
  OpenRegionResponse();
  virtual ~OpenRegionResponse();

  OpenRegionResponse(const OpenRegionResponse& from);

  inline OpenRegionResponse& operator=(const OpenRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenRegionResponse& default_instance();

  void Swap(OpenRegionResponse* other);

  // implements Message ----------------------------------------------

  OpenRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenRegionResponse& from);
  void MergeFrom(const OpenRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OpenRegionResponse_RegionOpeningState RegionOpeningState;
  static const RegionOpeningState OPENED = OpenRegionResponse_RegionOpeningState_OPENED;
  static const RegionOpeningState ALREADY_OPENED = OpenRegionResponse_RegionOpeningState_ALREADY_OPENED;
  static const RegionOpeningState FAILED_OPENING = OpenRegionResponse_RegionOpeningState_FAILED_OPENING;
  static inline bool RegionOpeningState_IsValid(int value) {
    return OpenRegionResponse_RegionOpeningState_IsValid(value);
  }
  static const RegionOpeningState RegionOpeningState_MIN =
    OpenRegionResponse_RegionOpeningState_RegionOpeningState_MIN;
  static const RegionOpeningState RegionOpeningState_MAX =
    OpenRegionResponse_RegionOpeningState_RegionOpeningState_MAX;
  static const int RegionOpeningState_ARRAYSIZE =
    OpenRegionResponse_RegionOpeningState_RegionOpeningState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RegionOpeningState_descriptor() {
    return OpenRegionResponse_RegionOpeningState_descriptor();
  }
  static inline const ::std::string& RegionOpeningState_Name(RegionOpeningState value) {
    return OpenRegionResponse_RegionOpeningState_Name(value);
  }
  static inline bool RegionOpeningState_Parse(const ::std::string& name,
      RegionOpeningState* value) {
    return OpenRegionResponse_RegionOpeningState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  inline int opening_state_size() const;
  inline void clear_opening_state();
  static const int kOpeningStateFieldNumber = 1;
  inline ::hbase::pb::OpenRegionResponse_RegionOpeningState opening_state(int index) const;
  inline void set_opening_state(int index, ::hbase::pb::OpenRegionResponse_RegionOpeningState value);
  inline void add_opening_state(::hbase::pb::OpenRegionResponse_RegionOpeningState value);
  inline const ::google::protobuf::RepeatedField<int>& opening_state() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_opening_state();

  // @@protoc_insertion_point(class_scope:hbase.pb.OpenRegionResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> opening_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static OpenRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class WarmupRegionRequest : public ::google::protobuf::Message {
 public:
  WarmupRegionRequest();
  virtual ~WarmupRegionRequest();

  WarmupRegionRequest(const WarmupRegionRequest& from);

  inline WarmupRegionRequest& operator=(const WarmupRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarmupRegionRequest& default_instance();

  void Swap(WarmupRegionRequest* other);

  // implements Message ----------------------------------------------

  WarmupRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarmupRegionRequest& from);
  void MergeFrom(const WarmupRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionInfo regionInfo = 1;
  inline bool has_regioninfo() const;
  inline void clear_regioninfo();
  static const int kRegionInfoFieldNumber = 1;
  inline const ::hbase::pb::RegionInfo& regioninfo() const;
  inline ::hbase::pb::RegionInfo* mutable_regioninfo();
  inline ::hbase::pb::RegionInfo* release_regioninfo();
  inline void set_allocated_regioninfo(::hbase::pb::RegionInfo* regioninfo);

  // @@protoc_insertion_point(class_scope:hbase.pb.WarmupRegionRequest)
 private:
  inline void set_has_regioninfo();
  inline void clear_has_regioninfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionInfo* regioninfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static WarmupRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class WarmupRegionResponse : public ::google::protobuf::Message {
 public:
  WarmupRegionResponse();
  virtual ~WarmupRegionResponse();

  WarmupRegionResponse(const WarmupRegionResponse& from);

  inline WarmupRegionResponse& operator=(const WarmupRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarmupRegionResponse& default_instance();

  void Swap(WarmupRegionResponse* other);

  // implements Message ----------------------------------------------

  WarmupRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarmupRegionResponse& from);
  void MergeFrom(const WarmupRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.WarmupRegionResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static WarmupRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CloseRegionRequest : public ::google::protobuf::Message {
 public:
  CloseRegionRequest();
  virtual ~CloseRegionRequest();

  CloseRegionRequest(const CloseRegionRequest& from);

  inline CloseRegionRequest& operator=(const CloseRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseRegionRequest& default_instance();

  void Swap(CloseRegionRequest* other);

  // implements Message ----------------------------------------------

  CloseRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseRegionRequest& from);
  void MergeFrom(const CloseRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region();
  inline ::hbase::pb::RegionSpecifier* release_region();
  inline void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional uint32 version_of_closing_node = 2;
  inline bool has_version_of_closing_node() const;
  inline void clear_version_of_closing_node();
  static const int kVersionOfClosingNodeFieldNumber = 2;
  inline ::google::protobuf::uint32 version_of_closing_node() const;
  inline void set_version_of_closing_node(::google::protobuf::uint32 value);

  // optional bool transition_in_ZK = 3 [default = true];
  inline bool has_transition_in_zk() const;
  inline void clear_transition_in_zk();
  static const int kTransitionInZKFieldNumber = 3;
  inline bool transition_in_zk() const;
  inline void set_transition_in_zk(bool value);

  // optional .hbase.pb.ServerName destination_server = 4;
  inline bool has_destination_server() const;
  inline void clear_destination_server();
  static const int kDestinationServerFieldNumber = 4;
  inline const ::hbase::pb::ServerName& destination_server() const;
  inline ::hbase::pb::ServerName* mutable_destination_server();
  inline ::hbase::pb::ServerName* release_destination_server();
  inline void set_allocated_destination_server(::hbase::pb::ServerName* destination_server);

  // optional uint64 serverStartCode = 5;
  inline bool has_serverstartcode() const;
  inline void clear_serverstartcode();
  static const int kServerStartCodeFieldNumber = 5;
  inline ::google::protobuf::uint64 serverstartcode() const;
  inline void set_serverstartcode(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CloseRegionRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_version_of_closing_node();
  inline void clear_has_version_of_closing_node();
  inline void set_has_transition_in_zk();
  inline void clear_has_transition_in_zk();
  inline void set_has_destination_server();
  inline void clear_has_destination_server();
  inline void set_has_serverstartcode();
  inline void clear_has_serverstartcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_;
  ::google::protobuf::uint32 version_of_closing_node_;
  bool transition_in_zk_;
  ::hbase::pb::ServerName* destination_server_;
  ::google::protobuf::uint64 serverstartcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static CloseRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloseRegionResponse : public ::google::protobuf::Message {
 public:
  CloseRegionResponse();
  virtual ~CloseRegionResponse();

  CloseRegionResponse(const CloseRegionResponse& from);

  inline CloseRegionResponse& operator=(const CloseRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseRegionResponse& default_instance();

  void Swap(CloseRegionResponse* other);

  // implements Message ----------------------------------------------

  CloseRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseRegionResponse& from);
  void MergeFrom(const CloseRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool closed = 1;
  inline bool has_closed() const;
  inline void clear_closed();
  static const int kClosedFieldNumber = 1;
  inline bool closed() const;
  inline void set_closed(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CloseRegionResponse)
 private:
  inline void set_has_closed();
  inline void clear_has_closed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool closed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static CloseRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class FlushRegionRequest : public ::google::protobuf::Message {
 public:
  FlushRegionRequest();
  virtual ~FlushRegionRequest();

  FlushRegionRequest(const FlushRegionRequest& from);

  inline FlushRegionRequest& operator=(const FlushRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushRegionRequest& default_instance();

  void Swap(FlushRegionRequest* other);

  // implements Message ----------------------------------------------

  FlushRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushRegionRequest& from);
  void MergeFrom(const FlushRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region();
  inline ::hbase::pb::RegionSpecifier* release_region();
  inline void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional uint64 if_older_than_ts = 2;
  inline bool has_if_older_than_ts() const;
  inline void clear_if_older_than_ts();
  static const int kIfOlderThanTsFieldNumber = 2;
  inline ::google::protobuf::uint64 if_older_than_ts() const;
  inline void set_if_older_than_ts(::google::protobuf::uint64 value);

  // optional bool write_flush_wal_marker = 3;
  inline bool has_write_flush_wal_marker() const;
  inline void clear_write_flush_wal_marker();
  static const int kWriteFlushWalMarkerFieldNumber = 3;
  inline bool write_flush_wal_marker() const;
  inline void set_write_flush_wal_marker(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.FlushRegionRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_if_older_than_ts();
  inline void clear_has_if_older_than_ts();
  inline void set_has_write_flush_wal_marker();
  inline void clear_has_write_flush_wal_marker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_;
  ::google::protobuf::uint64 if_older_than_ts_;
  bool write_flush_wal_marker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static FlushRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class FlushRegionResponse : public ::google::protobuf::Message {
 public:
  FlushRegionResponse();
  virtual ~FlushRegionResponse();

  FlushRegionResponse(const FlushRegionResponse& from);

  inline FlushRegionResponse& operator=(const FlushRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushRegionResponse& default_instance();

  void Swap(FlushRegionResponse* other);

  // implements Message ----------------------------------------------

  FlushRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushRegionResponse& from);
  void MergeFrom(const FlushRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 last_flush_time = 1;
  inline bool has_last_flush_time() const;
  inline void clear_last_flush_time();
  static const int kLastFlushTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 last_flush_time() const;
  inline void set_last_flush_time(::google::protobuf::uint64 value);

  // optional bool flushed = 2;
  inline bool has_flushed() const;
  inline void clear_flushed();
  static const int kFlushedFieldNumber = 2;
  inline bool flushed() const;
  inline void set_flushed(bool value);

  // optional bool wrote_flush_wal_marker = 3;
  inline bool has_wrote_flush_wal_marker() const;
  inline void clear_wrote_flush_wal_marker();
  static const int kWroteFlushWalMarkerFieldNumber = 3;
  inline bool wrote_flush_wal_marker() const;
  inline void set_wrote_flush_wal_marker(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.FlushRegionResponse)
 private:
  inline void set_has_last_flush_time();
  inline void clear_has_last_flush_time();
  inline void set_has_flushed();
  inline void clear_has_flushed();
  inline void set_has_wrote_flush_wal_marker();
  inline void clear_has_wrote_flush_wal_marker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_flush_time_;
  bool flushed_;
  bool wrote_flush_wal_marker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static FlushRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class SplitRegionRequest : public ::google::protobuf::Message {
 public:
  SplitRegionRequest();
  virtual ~SplitRegionRequest();

  SplitRegionRequest(const SplitRegionRequest& from);

  inline SplitRegionRequest& operator=(const SplitRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitRegionRequest& default_instance();

  void Swap(SplitRegionRequest* other);

  // implements Message ----------------------------------------------

  SplitRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitRegionRequest& from);
  void MergeFrom(const SplitRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region();
  inline ::hbase::pb::RegionSpecifier* release_region();
  inline void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional bytes split_point = 2;
  inline bool has_split_point() const;
  inline void clear_split_point();
  static const int kSplitPointFieldNumber = 2;
  inline const ::std::string& split_point() const;
  inline void set_split_point(const ::std::string& value);
  inline void set_split_point(const char* value);
  inline void set_split_point(const void* value, size_t size);
  inline ::std::string* mutable_split_point();
  inline ::std::string* release_split_point();
  inline void set_allocated_split_point(::std::string* split_point);

  // @@protoc_insertion_point(class_scope:hbase.pb.SplitRegionRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_split_point();
  inline void clear_has_split_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_;
  ::std::string* split_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static SplitRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class SplitRegionResponse : public ::google::protobuf::Message {
 public:
  SplitRegionResponse();
  virtual ~SplitRegionResponse();

  SplitRegionResponse(const SplitRegionResponse& from);

  inline SplitRegionResponse& operator=(const SplitRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitRegionResponse& default_instance();

  void Swap(SplitRegionResponse* other);

  // implements Message ----------------------------------------------

  SplitRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitRegionResponse& from);
  void MergeFrom(const SplitRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.SplitRegionResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static SplitRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CompactRegionRequest : public ::google::protobuf::Message {
 public:
  CompactRegionRequest();
  virtual ~CompactRegionRequest();

  CompactRegionRequest(const CompactRegionRequest& from);

  inline CompactRegionRequest& operator=(const CompactRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactRegionRequest& default_instance();

  void Swap(CompactRegionRequest* other);

  // implements Message ----------------------------------------------

  CompactRegionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactRegionRequest& from);
  void MergeFrom(const CompactRegionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region();
  inline ::hbase::pb::RegionSpecifier* release_region();
  inline void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional bool major = 2;
  inline bool has_major() const;
  inline void clear_major();
  static const int kMajorFieldNumber = 2;
  inline bool major() const;
  inline void set_major(bool value);

  // optional bytes family = 3;
  inline bool has_family() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 3;
  inline const ::std::string& family() const;
  inline void set_family(const ::std::string& value);
  inline void set_family(const char* value);
  inline void set_family(const void* value, size_t size);
  inline ::std::string* mutable_family();
  inline ::std::string* release_family();
  inline void set_allocated_family(::std::string* family);

  // @@protoc_insertion_point(class_scope:hbase.pb.CompactRegionRequest)
 private:
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_major();
  inline void clear_has_major();
  inline void set_has_family();
  inline void clear_has_family();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_;
  ::std::string* family_;
  bool major_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static CompactRegionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CompactRegionResponse : public ::google::protobuf::Message {
 public:
  CompactRegionResponse();
  virtual ~CompactRegionResponse();

  CompactRegionResponse(const CompactRegionResponse& from);

  inline CompactRegionResponse& operator=(const CompactRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactRegionResponse& default_instance();

  void Swap(CompactRegionResponse* other);

  // implements Message ----------------------------------------------

  CompactRegionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompactRegionResponse& from);
  void MergeFrom(const CompactRegionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.CompactRegionResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static CompactRegionResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFavoredNodesRequest_RegionUpdateInfo : public ::google::protobuf::Message {
 public:
  UpdateFavoredNodesRequest_RegionUpdateInfo();
  virtual ~UpdateFavoredNodesRequest_RegionUpdateInfo();

  UpdateFavoredNodesRequest_RegionUpdateInfo(const UpdateFavoredNodesRequest_RegionUpdateInfo& from);

  inline UpdateFavoredNodesRequest_RegionUpdateInfo& operator=(const UpdateFavoredNodesRequest_RegionUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFavoredNodesRequest_RegionUpdateInfo& default_instance();

  void Swap(UpdateFavoredNodesRequest_RegionUpdateInfo* other);

  // implements Message ----------------------------------------------

  UpdateFavoredNodesRequest_RegionUpdateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from);
  void MergeFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionInfo region = 1;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 1;
  inline const ::hbase::pb::RegionInfo& region() const;
  inline ::hbase::pb::RegionInfo* mutable_region();
  inline ::hbase::pb::RegionInfo* release_region();
  inline void set_allocated_region(::hbase::pb::RegionInfo* region);

  // repeated .hbase.pb.ServerName favored_nodes = 2;
  inline int favored_nodes_size() const;
  inline void clear_favored_nodes();
  static const int kFavoredNodesFieldNumber = 2;
  inline const ::hbase::pb::ServerName& favored_nodes(int index) const;
  inline ::hbase::pb::ServerName* mutable_favored_nodes(int index);
  inline ::hbase::pb::ServerName* add_favored_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
      favored_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
      mutable_favored_nodes();

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
 private:
  inline void set_has_region();
  inline void clear_has_region();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionInfo* region_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName > favored_nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static UpdateFavoredNodesRequest_RegionUpdateInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFavoredNodesRequest : public ::google::protobuf::Message {
 public:
  UpdateFavoredNodesRequest();
  virtual ~UpdateFavoredNodesRequest();

  UpdateFavoredNodesRequest(const UpdateFavoredNodesRequest& from);

  inline UpdateFavoredNodesRequest& operator=(const UpdateFavoredNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFavoredNodesRequest& default_instance();

  void Swap(UpdateFavoredNodesRequest* other);

  // implements Message ----------------------------------------------

  UpdateFavoredNodesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFavoredNodesRequest& from);
  void MergeFrom(const UpdateFavoredNodesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UpdateFavoredNodesRequest_RegionUpdateInfo RegionUpdateInfo;

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  inline int update_info_size() const;
  inline void clear_update_info();
  static const int kUpdateInfoFieldNumber = 1;
  inline const ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo& update_info(int index) const;
  inline ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* mutable_update_info(int index);
  inline ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* add_update_info();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >&
      update_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >*
      mutable_update_info();

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateFavoredNodesRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo > update_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static UpdateFavoredNodesRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFavoredNodesResponse : public ::google::protobuf::Message {
 public:
  UpdateFavoredNodesResponse();
  virtual ~UpdateFavoredNodesResponse();

  UpdateFavoredNodesResponse(const UpdateFavoredNodesResponse& from);

  inline UpdateFavoredNodesResponse& operator=(const UpdateFavoredNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFavoredNodesResponse& default_instance();

  void Swap(UpdateFavoredNodesResponse* other);

  // implements Message ----------------------------------------------

  UpdateFavoredNodesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFavoredNodesResponse& from);
  void MergeFrom(const UpdateFavoredNodesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 response = 1;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline ::google::protobuf::uint32 response() const;
  inline void set_response(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateFavoredNodesResponse)
 private:
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static UpdateFavoredNodesResponse* default_instance_;
};
// -------------------------------------------------------------------

class MergeRegionsRequest : public ::google::protobuf::Message {
 public:
  MergeRegionsRequest();
  virtual ~MergeRegionsRequest();

  MergeRegionsRequest(const MergeRegionsRequest& from);

  inline MergeRegionsRequest& operator=(const MergeRegionsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeRegionsRequest& default_instance();

  void Swap(MergeRegionsRequest* other);

  // implements Message ----------------------------------------------

  MergeRegionsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeRegionsRequest& from);
  void MergeFrom(const MergeRegionsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.RegionSpecifier region_a = 1;
  inline bool has_region_a() const;
  inline void clear_region_a();
  static const int kRegionAFieldNumber = 1;
  inline const ::hbase::pb::RegionSpecifier& region_a() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region_a();
  inline ::hbase::pb::RegionSpecifier* release_region_a();
  inline void set_allocated_region_a(::hbase::pb::RegionSpecifier* region_a);

  // required .hbase.pb.RegionSpecifier region_b = 2;
  inline bool has_region_b() const;
  inline void clear_region_b();
  static const int kRegionBFieldNumber = 2;
  inline const ::hbase::pb::RegionSpecifier& region_b() const;
  inline ::hbase::pb::RegionSpecifier* mutable_region_b();
  inline ::hbase::pb::RegionSpecifier* release_region_b();
  inline void set_allocated_region_b(::hbase::pb::RegionSpecifier* region_b);

  // optional bool forcible = 3 [default = false];
  inline bool has_forcible() const;
  inline void clear_forcible();
  static const int kForcibleFieldNumber = 3;
  inline bool forcible() const;
  inline void set_forcible(bool value);

  // optional uint64 master_system_time = 4;
  inline bool has_master_system_time() const;
  inline void clear_master_system_time();
  static const int kMasterSystemTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 master_system_time() const;
  inline void set_master_system_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.MergeRegionsRequest)
 private:
  inline void set_has_region_a();
  inline void clear_has_region_a();
  inline void set_has_region_b();
  inline void clear_has_region_b();
  inline void set_has_forcible();
  inline void clear_has_forcible();
  inline void set_has_master_system_time();
  inline void clear_has_master_system_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionSpecifier* region_a_;
  ::hbase::pb::RegionSpecifier* region_b_;
  ::google::protobuf::uint64 master_system_time_;
  bool forcible_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static MergeRegionsRequest* default_instance_;
};
// -------------------------------------------------------------------

class MergeRegionsResponse : public ::google::protobuf::Message {
 public:
  MergeRegionsResponse();
  virtual ~MergeRegionsResponse();

  MergeRegionsResponse(const MergeRegionsResponse& from);

  inline MergeRegionsResponse& operator=(const MergeRegionsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeRegionsResponse& default_instance();

  void Swap(MergeRegionsResponse* other);

  // implements Message ----------------------------------------------

  MergeRegionsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeRegionsResponse& from);
  void MergeFrom(const MergeRegionsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.MergeRegionsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static MergeRegionsResponse* default_instance_;
};
// -------------------------------------------------------------------

class WALEntry : public ::google::protobuf::Message {
 public:
  WALEntry();
  virtual ~WALEntry();

  WALEntry(const WALEntry& from);

  inline WALEntry& operator=(const WALEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WALEntry& default_instance();

  void Swap(WALEntry* other);

  // implements Message ----------------------------------------------

  WALEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WALEntry& from);
  void MergeFrom(const WALEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.WALKey key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::hbase::pb::WALKey& key() const;
  inline ::hbase::pb::WALKey* mutable_key();
  inline ::hbase::pb::WALKey* release_key();
  inline void set_allocated_key(::hbase::pb::WALKey* key);

  // repeated bytes key_value_bytes = 2;
  inline int key_value_bytes_size() const;
  inline void clear_key_value_bytes();
  static const int kKeyValueBytesFieldNumber = 2;
  inline const ::std::string& key_value_bytes(int index) const;
  inline ::std::string* mutable_key_value_bytes(int index);
  inline void set_key_value_bytes(int index, const ::std::string& value);
  inline void set_key_value_bytes(int index, const char* value);
  inline void set_key_value_bytes(int index, const void* value, size_t size);
  inline ::std::string* add_key_value_bytes();
  inline void add_key_value_bytes(const ::std::string& value);
  inline void add_key_value_bytes(const char* value);
  inline void add_key_value_bytes(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key_value_bytes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key_value_bytes();

  // optional int32 associated_cell_count = 3;
  inline bool has_associated_cell_count() const;
  inline void clear_associated_cell_count();
  static const int kAssociatedCellCountFieldNumber = 3;
  inline ::google::protobuf::int32 associated_cell_count() const;
  inline void set_associated_cell_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.WALEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_associated_cell_count();
  inline void clear_has_associated_cell_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::WALKey* key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_value_bytes_;
  ::google::protobuf::int32 associated_cell_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static WALEntry* default_instance_;
};
// -------------------------------------------------------------------

class ReplicateWALEntryRequest : public ::google::protobuf::Message {
 public:
  ReplicateWALEntryRequest();
  virtual ~ReplicateWALEntryRequest();

  ReplicateWALEntryRequest(const ReplicateWALEntryRequest& from);

  inline ReplicateWALEntryRequest& operator=(const ReplicateWALEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicateWALEntryRequest& default_instance();

  void Swap(ReplicateWALEntryRequest* other);

  // implements Message ----------------------------------------------

  ReplicateWALEntryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicateWALEntryRequest& from);
  void MergeFrom(const ReplicateWALEntryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hbase.pb.WALEntry entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::hbase::pb::WALEntry& entry(int index) const;
  inline ::hbase::pb::WALEntry* mutable_entry(int index);
  inline ::hbase::pb::WALEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::WALEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::WALEntry >*
      mutable_entry();

  // optional string replicationClusterId = 2;
  inline bool has_replicationclusterid() const;
  inline void clear_replicationclusterid();
  static const int kReplicationClusterIdFieldNumber = 2;
  inline const ::std::string& replicationclusterid() const;
  inline void set_replicationclusterid(const ::std::string& value);
  inline void set_replicationclusterid(const char* value);
  inline void set_replicationclusterid(const char* value, size_t size);
  inline ::std::string* mutable_replicationclusterid();
  inline ::std::string* release_replicationclusterid();
  inline void set_allocated_replicationclusterid(::std::string* replicationclusterid);

  // optional string sourceBaseNamespaceDirPath = 3;
  inline bool has_sourcebasenamespacedirpath() const;
  inline void clear_sourcebasenamespacedirpath();
  static const int kSourceBaseNamespaceDirPathFieldNumber = 3;
  inline const ::std::string& sourcebasenamespacedirpath() const;
  inline void set_sourcebasenamespacedirpath(const ::std::string& value);
  inline void set_sourcebasenamespacedirpath(const char* value);
  inline void set_sourcebasenamespacedirpath(const char* value, size_t size);
  inline ::std::string* mutable_sourcebasenamespacedirpath();
  inline ::std::string* release_sourcebasenamespacedirpath();
  inline void set_allocated_sourcebasenamespacedirpath(::std::string* sourcebasenamespacedirpath);

  // optional string sourceHFileArchiveDirPath = 4;
  inline bool has_sourcehfilearchivedirpath() const;
  inline void clear_sourcehfilearchivedirpath();
  static const int kSourceHFileArchiveDirPathFieldNumber = 4;
  inline const ::std::string& sourcehfilearchivedirpath() const;
  inline void set_sourcehfilearchivedirpath(const ::std::string& value);
  inline void set_sourcehfilearchivedirpath(const char* value);
  inline void set_sourcehfilearchivedirpath(const char* value, size_t size);
  inline ::std::string* mutable_sourcehfilearchivedirpath();
  inline ::std::string* release_sourcehfilearchivedirpath();
  inline void set_allocated_sourcehfilearchivedirpath(::std::string* sourcehfilearchivedirpath);

  // @@protoc_insertion_point(class_scope:hbase.pb.ReplicateWALEntryRequest)
 private:
  inline void set_has_replicationclusterid();
  inline void clear_has_replicationclusterid();
  inline void set_has_sourcebasenamespacedirpath();
  inline void clear_has_sourcebasenamespacedirpath();
  inline void set_has_sourcehfilearchivedirpath();
  inline void clear_has_sourcehfilearchivedirpath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::hbase::pb::WALEntry > entry_;
  ::std::string* replicationclusterid_;
  ::std::string* sourcebasenamespacedirpath_;
  ::std::string* sourcehfilearchivedirpath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static ReplicateWALEntryRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReplicateWALEntryResponse : public ::google::protobuf::Message {
 public:
  ReplicateWALEntryResponse();
  virtual ~ReplicateWALEntryResponse();

  ReplicateWALEntryResponse(const ReplicateWALEntryResponse& from);

  inline ReplicateWALEntryResponse& operator=(const ReplicateWALEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicateWALEntryResponse& default_instance();

  void Swap(ReplicateWALEntryResponse* other);

  // implements Message ----------------------------------------------

  ReplicateWALEntryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicateWALEntryResponse& from);
  void MergeFrom(const ReplicateWALEntryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.ReplicateWALEntryResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static ReplicateWALEntryResponse* default_instance_;
};
// -------------------------------------------------------------------

class RollWALWriterRequest : public ::google::protobuf::Message {
 public:
  RollWALWriterRequest();
  virtual ~RollWALWriterRequest();

  RollWALWriterRequest(const RollWALWriterRequest& from);

  inline RollWALWriterRequest& operator=(const RollWALWriterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollWALWriterRequest& default_instance();

  void Swap(RollWALWriterRequest* other);

  // implements Message ----------------------------------------------

  RollWALWriterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollWALWriterRequest& from);
  void MergeFrom(const RollWALWriterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.RollWALWriterRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static RollWALWriterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RollWALWriterResponse : public ::google::protobuf::Message {
 public:
  RollWALWriterResponse();
  virtual ~RollWALWriterResponse();

  RollWALWriterResponse(const RollWALWriterResponse& from);

  inline RollWALWriterResponse& operator=(const RollWALWriterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollWALWriterResponse& default_instance();

  void Swap(RollWALWriterResponse* other);

  // implements Message ----------------------------------------------

  RollWALWriterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollWALWriterResponse& from);
  void MergeFrom(const RollWALWriterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes region_to_flush = 1;
  inline int region_to_flush_size() const;
  inline void clear_region_to_flush();
  static const int kRegionToFlushFieldNumber = 1;
  inline const ::std::string& region_to_flush(int index) const;
  inline ::std::string* mutable_region_to_flush(int index);
  inline void set_region_to_flush(int index, const ::std::string& value);
  inline void set_region_to_flush(int index, const char* value);
  inline void set_region_to_flush(int index, const void* value, size_t size);
  inline ::std::string* add_region_to_flush();
  inline void add_region_to_flush(const ::std::string& value);
  inline void add_region_to_flush(const char* value);
  inline void add_region_to_flush(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& region_to_flush() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_region_to_flush();

  // @@protoc_insertion_point(class_scope:hbase.pb.RollWALWriterResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> region_to_flush_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static RollWALWriterResponse* default_instance_;
};
// -------------------------------------------------------------------

class StopServerRequest : public ::google::protobuf::Message {
 public:
  StopServerRequest();
  virtual ~StopServerRequest();

  StopServerRequest(const StopServerRequest& from);

  inline StopServerRequest& operator=(const StopServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopServerRequest& default_instance();

  void Swap(StopServerRequest* other);

  // implements Message ----------------------------------------------

  StopServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopServerRequest& from);
  void MergeFrom(const StopServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:hbase.pb.StopServerRequest)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static StopServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class StopServerResponse : public ::google::protobuf::Message {
 public:
  StopServerResponse();
  virtual ~StopServerResponse();

  StopServerResponse(const StopServerResponse& from);

  inline StopServerResponse& operator=(const StopServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopServerResponse& default_instance();

  void Swap(StopServerResponse* other);

  // implements Message ----------------------------------------------

  StopServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopServerResponse& from);
  void MergeFrom(const StopServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.StopServerResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static StopServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetServerInfoRequest : public ::google::protobuf::Message {
 public:
  GetServerInfoRequest();
  virtual ~GetServerInfoRequest();

  GetServerInfoRequest(const GetServerInfoRequest& from);

  inline GetServerInfoRequest& operator=(const GetServerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerInfoRequest& default_instance();

  void Swap(GetServerInfoRequest* other);

  // implements Message ----------------------------------------------

  GetServerInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerInfoRequest& from);
  void MergeFrom(const GetServerInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.GetServerInfoRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetServerInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ServerName server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::hbase::pb::ServerName& server_name() const;
  inline ::hbase::pb::ServerName* mutable_server_name();
  inline ::hbase::pb::ServerName* release_server_name();
  inline void set_allocated_server_name(::hbase::pb::ServerName* server_name);

  // optional uint32 webui_port = 2;
  inline bool has_webui_port() const;
  inline void clear_webui_port();
  static const int kWebuiPortFieldNumber = 2;
  inline ::google::protobuf::uint32 webui_port() const;
  inline void set_webui_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ServerInfo)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_webui_port();
  inline void clear_has_webui_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ServerName* server_name_;
  ::google::protobuf::uint32 webui_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetServerInfoResponse : public ::google::protobuf::Message {
 public:
  GetServerInfoResponse();
  virtual ~GetServerInfoResponse();

  GetServerInfoResponse(const GetServerInfoResponse& from);

  inline GetServerInfoResponse& operator=(const GetServerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerInfoResponse& default_instance();

  void Swap(GetServerInfoResponse* other);

  // implements Message ----------------------------------------------

  GetServerInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerInfoResponse& from);
  void MergeFrom(const GetServerInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ServerInfo server_info = 1;
  inline bool has_server_info() const;
  inline void clear_server_info();
  static const int kServerInfoFieldNumber = 1;
  inline const ::hbase::pb::ServerInfo& server_info() const;
  inline ::hbase::pb::ServerInfo* mutable_server_info();
  inline ::hbase::pb::ServerInfo* release_server_info();
  inline void set_allocated_server_info(::hbase::pb::ServerInfo* server_info);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetServerInfoResponse)
 private:
  inline void set_has_server_info();
  inline void clear_has_server_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ServerInfo* server_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static GetServerInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateConfigurationRequest : public ::google::protobuf::Message {
 public:
  UpdateConfigurationRequest();
  virtual ~UpdateConfigurationRequest();

  UpdateConfigurationRequest(const UpdateConfigurationRequest& from);

  inline UpdateConfigurationRequest& operator=(const UpdateConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateConfigurationRequest& default_instance();

  void Swap(UpdateConfigurationRequest* other);

  // implements Message ----------------------------------------------

  UpdateConfigurationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateConfigurationRequest& from);
  void MergeFrom(const UpdateConfigurationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateConfigurationRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static UpdateConfigurationRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateConfigurationResponse : public ::google::protobuf::Message {
 public:
  UpdateConfigurationResponse();
  virtual ~UpdateConfigurationResponse();

  UpdateConfigurationResponse(const UpdateConfigurationResponse& from);

  inline UpdateConfigurationResponse& operator=(const UpdateConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateConfigurationResponse& default_instance();

  void Swap(UpdateConfigurationResponse* other);

  // implements Message ----------------------------------------------

  UpdateConfigurationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateConfigurationResponse& from);
  void MergeFrom(const UpdateConfigurationResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateConfigurationResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Admin_2eproto();
  friend void protobuf_AssignDesc_Admin_2eproto();
  friend void protobuf_ShutdownFile_Admin_2eproto();

  void InitAsDefaultInstance();
  static UpdateConfigurationResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetRegionInfoRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool GetRegionInfoRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegionInfoRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegionInfoRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegionInfoRequest::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionSpecifier& GetRegionInfoRequest::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionSpecifier* GetRegionInfoRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionSpecifier;
  return region_;
}
inline ::hbase::pb::RegionSpecifier* GetRegionInfoRequest::release_region() {
  clear_has_region();
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = NULL;
  return temp;
}
inline void GetRegionInfoRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// optional bool compaction_state = 2;
inline bool GetRegionInfoRequest::has_compaction_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRegionInfoRequest::set_has_compaction_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRegionInfoRequest::clear_has_compaction_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRegionInfoRequest::clear_compaction_state() {
  compaction_state_ = false;
  clear_has_compaction_state();
}
inline bool GetRegionInfoRequest::compaction_state() const {
  return compaction_state_;
}
inline void GetRegionInfoRequest::set_compaction_state(bool value) {
  set_has_compaction_state();
  compaction_state_ = value;
}

// -------------------------------------------------------------------

// GetRegionInfoResponse

// required .hbase.pb.RegionInfo region_info = 1;
inline bool GetRegionInfoResponse::has_region_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegionInfoResponse::set_has_region_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegionInfoResponse::clear_has_region_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegionInfoResponse::clear_region_info() {
  if (region_info_ != NULL) region_info_->::hbase::pb::RegionInfo::Clear();
  clear_has_region_info();
}
inline const ::hbase::pb::RegionInfo& GetRegionInfoResponse::region_info() const {
  return region_info_ != NULL ? *region_info_ : *default_instance_->region_info_;
}
inline ::hbase::pb::RegionInfo* GetRegionInfoResponse::mutable_region_info() {
  set_has_region_info();
  if (region_info_ == NULL) region_info_ = new ::hbase::pb::RegionInfo;
  return region_info_;
}
inline ::hbase::pb::RegionInfo* GetRegionInfoResponse::release_region_info() {
  clear_has_region_info();
  ::hbase::pb::RegionInfo* temp = region_info_;
  region_info_ = NULL;
  return temp;
}
inline void GetRegionInfoResponse::set_allocated_region_info(::hbase::pb::RegionInfo* region_info) {
  delete region_info_;
  region_info_ = region_info;
  if (region_info) {
    set_has_region_info();
  } else {
    clear_has_region_info();
  }
}

// optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
inline bool GetRegionInfoResponse::has_compaction_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRegionInfoResponse::set_has_compaction_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRegionInfoResponse::clear_has_compaction_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRegionInfoResponse::clear_compaction_state() {
  compaction_state_ = 0;
  clear_has_compaction_state();
}
inline ::hbase::pb::GetRegionInfoResponse_CompactionState GetRegionInfoResponse::compaction_state() const {
  return static_cast< ::hbase::pb::GetRegionInfoResponse_CompactionState >(compaction_state_);
}
inline void GetRegionInfoResponse::set_compaction_state(::hbase::pb::GetRegionInfoResponse_CompactionState value) {
  assert(::hbase::pb::GetRegionInfoResponse_CompactionState_IsValid(value));
  set_has_compaction_state();
  compaction_state_ = value;
}

// optional bool isRecovering = 3;
inline bool GetRegionInfoResponse::has_isrecovering() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetRegionInfoResponse::set_has_isrecovering() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetRegionInfoResponse::clear_has_isrecovering() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetRegionInfoResponse::clear_isrecovering() {
  isrecovering_ = false;
  clear_has_isrecovering();
}
inline bool GetRegionInfoResponse::isrecovering() const {
  return isrecovering_;
}
inline void GetRegionInfoResponse::set_isrecovering(bool value) {
  set_has_isrecovering();
  isrecovering_ = value;
}

// -------------------------------------------------------------------

// GetStoreFileRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool GetStoreFileRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStoreFileRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStoreFileRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStoreFileRequest::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionSpecifier& GetStoreFileRequest::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionSpecifier* GetStoreFileRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionSpecifier;
  return region_;
}
inline ::hbase::pb::RegionSpecifier* GetStoreFileRequest::release_region() {
  clear_has_region();
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = NULL;
  return temp;
}
inline void GetStoreFileRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// repeated bytes family = 2;
inline int GetStoreFileRequest::family_size() const {
  return family_.size();
}
inline void GetStoreFileRequest::clear_family() {
  family_.Clear();
}
inline const ::std::string& GetStoreFileRequest::family(int index) const {
  return family_.Get(index);
}
inline ::std::string* GetStoreFileRequest::mutable_family(int index) {
  return family_.Mutable(index);
}
inline void GetStoreFileRequest::set_family(int index, const ::std::string& value) {
  family_.Mutable(index)->assign(value);
}
inline void GetStoreFileRequest::set_family(int index, const char* value) {
  family_.Mutable(index)->assign(value);
}
inline void GetStoreFileRequest::set_family(int index, const void* value, size_t size) {
  family_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetStoreFileRequest::add_family() {
  return family_.Add();
}
inline void GetStoreFileRequest::add_family(const ::std::string& value) {
  family_.Add()->assign(value);
}
inline void GetStoreFileRequest::add_family(const char* value) {
  family_.Add()->assign(value);
}
inline void GetStoreFileRequest::add_family(const void* value, size_t size) {
  family_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetStoreFileRequest::family() const {
  return family_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetStoreFileRequest::mutable_family() {
  return &family_;
}

// -------------------------------------------------------------------

// GetStoreFileResponse

// repeated string store_file = 1;
inline int GetStoreFileResponse::store_file_size() const {
  return store_file_.size();
}
inline void GetStoreFileResponse::clear_store_file() {
  store_file_.Clear();
}
inline const ::std::string& GetStoreFileResponse::store_file(int index) const {
  return store_file_.Get(index);
}
inline ::std::string* GetStoreFileResponse::mutable_store_file(int index) {
  return store_file_.Mutable(index);
}
inline void GetStoreFileResponse::set_store_file(int index, const ::std::string& value) {
  store_file_.Mutable(index)->assign(value);
}
inline void GetStoreFileResponse::set_store_file(int index, const char* value) {
  store_file_.Mutable(index)->assign(value);
}
inline void GetStoreFileResponse::set_store_file(int index, const char* value, size_t size) {
  store_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetStoreFileResponse::add_store_file() {
  return store_file_.Add();
}
inline void GetStoreFileResponse::add_store_file(const ::std::string& value) {
  store_file_.Add()->assign(value);
}
inline void GetStoreFileResponse::add_store_file(const char* value) {
  store_file_.Add()->assign(value);
}
inline void GetStoreFileResponse::add_store_file(const char* value, size_t size) {
  store_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetStoreFileResponse::store_file() const {
  return store_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetStoreFileResponse::mutable_store_file() {
  return &store_file_;
}

// -------------------------------------------------------------------

// GetOnlineRegionRequest

// -------------------------------------------------------------------

// GetOnlineRegionResponse

// repeated .hbase.pb.RegionInfo region_info = 1;
inline int GetOnlineRegionResponse::region_info_size() const {
  return region_info_.size();
}
inline void GetOnlineRegionResponse::clear_region_info() {
  region_info_.Clear();
}
inline const ::hbase::pb::RegionInfo& GetOnlineRegionResponse::region_info(int index) const {
  return region_info_.Get(index);
}
inline ::hbase::pb::RegionInfo* GetOnlineRegionResponse::mutable_region_info(int index) {
  return region_info_.Mutable(index);
}
inline ::hbase::pb::RegionInfo* GetOnlineRegionResponse::add_region_info() {
  return region_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >&
GetOnlineRegionResponse::region_info() const {
  return region_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::RegionInfo >*
GetOnlineRegionResponse::mutable_region_info() {
  return &region_info_;
}

// -------------------------------------------------------------------

// OpenRegionRequest_RegionOpenInfo

// required .hbase.pb.RegionInfo region = 1;
inline bool OpenRegionRequest_RegionOpenInfo::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenRegionRequest_RegionOpenInfo::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionInfo::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionInfo& OpenRegionRequest_RegionOpenInfo::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionInfo* OpenRegionRequest_RegionOpenInfo::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionInfo;
  return region_;
}
inline ::hbase::pb::RegionInfo* OpenRegionRequest_RegionOpenInfo::release_region() {
  clear_has_region();
  ::hbase::pb::RegionInfo* temp = region_;
  region_ = NULL;
  return temp;
}
inline void OpenRegionRequest_RegionOpenInfo::set_allocated_region(::hbase::pb::RegionInfo* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// optional uint32 version_of_offline_node = 2;
inline bool OpenRegionRequest_RegionOpenInfo::has_version_of_offline_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenRegionRequest_RegionOpenInfo::set_has_version_of_offline_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_has_version_of_offline_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_version_of_offline_node() {
  version_of_offline_node_ = 0u;
  clear_has_version_of_offline_node();
}
inline ::google::protobuf::uint32 OpenRegionRequest_RegionOpenInfo::version_of_offline_node() const {
  return version_of_offline_node_;
}
inline void OpenRegionRequest_RegionOpenInfo::set_version_of_offline_node(::google::protobuf::uint32 value) {
  set_has_version_of_offline_node();
  version_of_offline_node_ = value;
}

// repeated .hbase.pb.ServerName favored_nodes = 3;
inline int OpenRegionRequest_RegionOpenInfo::favored_nodes_size() const {
  return favored_nodes_.size();
}
inline void OpenRegionRequest_RegionOpenInfo::clear_favored_nodes() {
  favored_nodes_.Clear();
}
inline const ::hbase::pb::ServerName& OpenRegionRequest_RegionOpenInfo::favored_nodes(int index) const {
  return favored_nodes_.Get(index);
}
inline ::hbase::pb::ServerName* OpenRegionRequest_RegionOpenInfo::mutable_favored_nodes(int index) {
  return favored_nodes_.Mutable(index);
}
inline ::hbase::pb::ServerName* OpenRegionRequest_RegionOpenInfo::add_favored_nodes() {
  return favored_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
OpenRegionRequest_RegionOpenInfo::favored_nodes() const {
  return favored_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
OpenRegionRequest_RegionOpenInfo::mutable_favored_nodes() {
  return &favored_nodes_;
}

// optional bool openForDistributedLogReplay = 4;
inline bool OpenRegionRequest_RegionOpenInfo::has_openfordistributedlogreplay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenRegionRequest_RegionOpenInfo::set_has_openfordistributedlogreplay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_has_openfordistributedlogreplay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_openfordistributedlogreplay() {
  openfordistributedlogreplay_ = false;
  clear_has_openfordistributedlogreplay();
}
inline bool OpenRegionRequest_RegionOpenInfo::openfordistributedlogreplay() const {
  return openfordistributedlogreplay_;
}
inline void OpenRegionRequest_RegionOpenInfo::set_openfordistributedlogreplay(bool value) {
  set_has_openfordistributedlogreplay();
  openfordistributedlogreplay_ = value;
}

// -------------------------------------------------------------------

// OpenRegionRequest

// repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
inline int OpenRegionRequest::open_info_size() const {
  return open_info_.size();
}
inline void OpenRegionRequest::clear_open_info() {
  open_info_.Clear();
}
inline const ::hbase::pb::OpenRegionRequest_RegionOpenInfo& OpenRegionRequest::open_info(int index) const {
  return open_info_.Get(index);
}
inline ::hbase::pb::OpenRegionRequest_RegionOpenInfo* OpenRegionRequest::mutable_open_info(int index) {
  return open_info_.Mutable(index);
}
inline ::hbase::pb::OpenRegionRequest_RegionOpenInfo* OpenRegionRequest::add_open_info() {
  return open_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >&
OpenRegionRequest::open_info() const {
  return open_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >*
OpenRegionRequest::mutable_open_info() {
  return &open_info_;
}

// optional uint64 serverStartCode = 2;
inline bool OpenRegionRequest::has_serverstartcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenRegionRequest::set_has_serverstartcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenRegionRequest::clear_has_serverstartcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenRegionRequest::clear_serverstartcode() {
  serverstartcode_ = GOOGLE_ULONGLONG(0);
  clear_has_serverstartcode();
}
inline ::google::protobuf::uint64 OpenRegionRequest::serverstartcode() const {
  return serverstartcode_;
}
inline void OpenRegionRequest::set_serverstartcode(::google::protobuf::uint64 value) {
  set_has_serverstartcode();
  serverstartcode_ = value;
}

// optional uint64 master_system_time = 5;
inline bool OpenRegionRequest::has_master_system_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenRegionRequest::set_has_master_system_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenRegionRequest::clear_has_master_system_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenRegionRequest::clear_master_system_time() {
  master_system_time_ = GOOGLE_ULONGLONG(0);
  clear_has_master_system_time();
}
inline ::google::protobuf::uint64 OpenRegionRequest::master_system_time() const {
  return master_system_time_;
}
inline void OpenRegionRequest::set_master_system_time(::google::protobuf::uint64 value) {
  set_has_master_system_time();
  master_system_time_ = value;
}

// -------------------------------------------------------------------

// OpenRegionResponse

// repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
inline int OpenRegionResponse::opening_state_size() const {
  return opening_state_.size();
}
inline void OpenRegionResponse::clear_opening_state() {
  opening_state_.Clear();
}
inline ::hbase::pb::OpenRegionResponse_RegionOpeningState OpenRegionResponse::opening_state(int index) const {
  return static_cast< ::hbase::pb::OpenRegionResponse_RegionOpeningState >(opening_state_.Get(index));
}
inline void OpenRegionResponse::set_opening_state(int index, ::hbase::pb::OpenRegionResponse_RegionOpeningState value) {
  assert(::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(value));
  opening_state_.Set(index, value);
}
inline void OpenRegionResponse::add_opening_state(::hbase::pb::OpenRegionResponse_RegionOpeningState value) {
  assert(::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(value));
  opening_state_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
OpenRegionResponse::opening_state() const {
  return opening_state_;
}
inline ::google::protobuf::RepeatedField<int>*
OpenRegionResponse::mutable_opening_state() {
  return &opening_state_;
}

// -------------------------------------------------------------------

// WarmupRegionRequest

// required .hbase.pb.RegionInfo regionInfo = 1;
inline bool WarmupRegionRequest::has_regioninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarmupRegionRequest::set_has_regioninfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarmupRegionRequest::clear_has_regioninfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarmupRegionRequest::clear_regioninfo() {
  if (regioninfo_ != NULL) regioninfo_->::hbase::pb::RegionInfo::Clear();
  clear_has_regioninfo();
}
inline const ::hbase::pb::RegionInfo& WarmupRegionRequest::regioninfo() const {
  return regioninfo_ != NULL ? *regioninfo_ : *default_instance_->regioninfo_;
}
inline ::hbase::pb::RegionInfo* WarmupRegionRequest::mutable_regioninfo() {
  set_has_regioninfo();
  if (regioninfo_ == NULL) regioninfo_ = new ::hbase::pb::RegionInfo;
  return regioninfo_;
}
inline ::hbase::pb::RegionInfo* WarmupRegionRequest::release_regioninfo() {
  clear_has_regioninfo();
  ::hbase::pb::RegionInfo* temp = regioninfo_;
  regioninfo_ = NULL;
  return temp;
}
inline void WarmupRegionRequest::set_allocated_regioninfo(::hbase::pb::RegionInfo* regioninfo) {
  delete regioninfo_;
  regioninfo_ = regioninfo;
  if (regioninfo) {
    set_has_regioninfo();
  } else {
    clear_has_regioninfo();
  }
}

// -------------------------------------------------------------------

// WarmupRegionResponse

// -------------------------------------------------------------------

// CloseRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool CloseRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseRegionRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloseRegionRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloseRegionRequest::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionSpecifier& CloseRegionRequest::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionSpecifier* CloseRegionRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionSpecifier;
  return region_;
}
inline ::hbase::pb::RegionSpecifier* CloseRegionRequest::release_region() {
  clear_has_region();
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = NULL;
  return temp;
}
inline void CloseRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// optional uint32 version_of_closing_node = 2;
inline bool CloseRegionRequest::has_version_of_closing_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseRegionRequest::set_has_version_of_closing_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CloseRegionRequest::clear_has_version_of_closing_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CloseRegionRequest::clear_version_of_closing_node() {
  version_of_closing_node_ = 0u;
  clear_has_version_of_closing_node();
}
inline ::google::protobuf::uint32 CloseRegionRequest::version_of_closing_node() const {
  return version_of_closing_node_;
}
inline void CloseRegionRequest::set_version_of_closing_node(::google::protobuf::uint32 value) {
  set_has_version_of_closing_node();
  version_of_closing_node_ = value;
}

// optional bool transition_in_ZK = 3 [default = true];
inline bool CloseRegionRequest::has_transition_in_zk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseRegionRequest::set_has_transition_in_zk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CloseRegionRequest::clear_has_transition_in_zk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CloseRegionRequest::clear_transition_in_zk() {
  transition_in_zk_ = true;
  clear_has_transition_in_zk();
}
inline bool CloseRegionRequest::transition_in_zk() const {
  return transition_in_zk_;
}
inline void CloseRegionRequest::set_transition_in_zk(bool value) {
  set_has_transition_in_zk();
  transition_in_zk_ = value;
}

// optional .hbase.pb.ServerName destination_server = 4;
inline bool CloseRegionRequest::has_destination_server() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseRegionRequest::set_has_destination_server() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CloseRegionRequest::clear_has_destination_server() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CloseRegionRequest::clear_destination_server() {
  if (destination_server_ != NULL) destination_server_->::hbase::pb::ServerName::Clear();
  clear_has_destination_server();
}
inline const ::hbase::pb::ServerName& CloseRegionRequest::destination_server() const {
  return destination_server_ != NULL ? *destination_server_ : *default_instance_->destination_server_;
}
inline ::hbase::pb::ServerName* CloseRegionRequest::mutable_destination_server() {
  set_has_destination_server();
  if (destination_server_ == NULL) destination_server_ = new ::hbase::pb::ServerName;
  return destination_server_;
}
inline ::hbase::pb::ServerName* CloseRegionRequest::release_destination_server() {
  clear_has_destination_server();
  ::hbase::pb::ServerName* temp = destination_server_;
  destination_server_ = NULL;
  return temp;
}
inline void CloseRegionRequest::set_allocated_destination_server(::hbase::pb::ServerName* destination_server) {
  delete destination_server_;
  destination_server_ = destination_server;
  if (destination_server) {
    set_has_destination_server();
  } else {
    clear_has_destination_server();
  }
}

// optional uint64 serverStartCode = 5;
inline bool CloseRegionRequest::has_serverstartcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseRegionRequest::set_has_serverstartcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CloseRegionRequest::clear_has_serverstartcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CloseRegionRequest::clear_serverstartcode() {
  serverstartcode_ = GOOGLE_ULONGLONG(0);
  clear_has_serverstartcode();
}
inline ::google::protobuf::uint64 CloseRegionRequest::serverstartcode() const {
  return serverstartcode_;
}
inline void CloseRegionRequest::set_serverstartcode(::google::protobuf::uint64 value) {
  set_has_serverstartcode();
  serverstartcode_ = value;
}

// -------------------------------------------------------------------

// CloseRegionResponse

// required bool closed = 1;
inline bool CloseRegionResponse::has_closed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseRegionResponse::set_has_closed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloseRegionResponse::clear_has_closed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloseRegionResponse::clear_closed() {
  closed_ = false;
  clear_has_closed();
}
inline bool CloseRegionResponse::closed() const {
  return closed_;
}
inline void CloseRegionResponse::set_closed(bool value) {
  set_has_closed();
  closed_ = value;
}

// -------------------------------------------------------------------

// FlushRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool FlushRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushRegionRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushRegionRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushRegionRequest::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionSpecifier& FlushRegionRequest::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionSpecifier* FlushRegionRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionSpecifier;
  return region_;
}
inline ::hbase::pb::RegionSpecifier* FlushRegionRequest::release_region() {
  clear_has_region();
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = NULL;
  return temp;
}
inline void FlushRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// optional uint64 if_older_than_ts = 2;
inline bool FlushRegionRequest::has_if_older_than_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushRegionRequest::set_has_if_older_than_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushRegionRequest::clear_has_if_older_than_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushRegionRequest::clear_if_older_than_ts() {
  if_older_than_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_if_older_than_ts();
}
inline ::google::protobuf::uint64 FlushRegionRequest::if_older_than_ts() const {
  return if_older_than_ts_;
}
inline void FlushRegionRequest::set_if_older_than_ts(::google::protobuf::uint64 value) {
  set_has_if_older_than_ts();
  if_older_than_ts_ = value;
}

// optional bool write_flush_wal_marker = 3;
inline bool FlushRegionRequest::has_write_flush_wal_marker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushRegionRequest::set_has_write_flush_wal_marker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlushRegionRequest::clear_has_write_flush_wal_marker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlushRegionRequest::clear_write_flush_wal_marker() {
  write_flush_wal_marker_ = false;
  clear_has_write_flush_wal_marker();
}
inline bool FlushRegionRequest::write_flush_wal_marker() const {
  return write_flush_wal_marker_;
}
inline void FlushRegionRequest::set_write_flush_wal_marker(bool value) {
  set_has_write_flush_wal_marker();
  write_flush_wal_marker_ = value;
}

// -------------------------------------------------------------------

// FlushRegionResponse

// required uint64 last_flush_time = 1;
inline bool FlushRegionResponse::has_last_flush_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushRegionResponse::set_has_last_flush_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushRegionResponse::clear_has_last_flush_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushRegionResponse::clear_last_flush_time() {
  last_flush_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_flush_time();
}
inline ::google::protobuf::uint64 FlushRegionResponse::last_flush_time() const {
  return last_flush_time_;
}
inline void FlushRegionResponse::set_last_flush_time(::google::protobuf::uint64 value) {
  set_has_last_flush_time();
  last_flush_time_ = value;
}

// optional bool flushed = 2;
inline bool FlushRegionResponse::has_flushed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushRegionResponse::set_has_flushed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushRegionResponse::clear_has_flushed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushRegionResponse::clear_flushed() {
  flushed_ = false;
  clear_has_flushed();
}
inline bool FlushRegionResponse::flushed() const {
  return flushed_;
}
inline void FlushRegionResponse::set_flushed(bool value) {
  set_has_flushed();
  flushed_ = value;
}

// optional bool wrote_flush_wal_marker = 3;
inline bool FlushRegionResponse::has_wrote_flush_wal_marker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushRegionResponse::set_has_wrote_flush_wal_marker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlushRegionResponse::clear_has_wrote_flush_wal_marker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlushRegionResponse::clear_wrote_flush_wal_marker() {
  wrote_flush_wal_marker_ = false;
  clear_has_wrote_flush_wal_marker();
}
inline bool FlushRegionResponse::wrote_flush_wal_marker() const {
  return wrote_flush_wal_marker_;
}
inline void FlushRegionResponse::set_wrote_flush_wal_marker(bool value) {
  set_has_wrote_flush_wal_marker();
  wrote_flush_wal_marker_ = value;
}

// -------------------------------------------------------------------

// SplitRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool SplitRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitRegionRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitRegionRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitRegionRequest::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionSpecifier& SplitRegionRequest::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionSpecifier* SplitRegionRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionSpecifier;
  return region_;
}
inline ::hbase::pb::RegionSpecifier* SplitRegionRequest::release_region() {
  clear_has_region();
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = NULL;
  return temp;
}
inline void SplitRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// optional bytes split_point = 2;
inline bool SplitRegionRequest::has_split_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitRegionRequest::set_has_split_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitRegionRequest::clear_has_split_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitRegionRequest::clear_split_point() {
  if (split_point_ != &::google::protobuf::internal::kEmptyString) {
    split_point_->clear();
  }
  clear_has_split_point();
}
inline const ::std::string& SplitRegionRequest::split_point() const {
  return *split_point_;
}
inline void SplitRegionRequest::set_split_point(const ::std::string& value) {
  set_has_split_point();
  if (split_point_ == &::google::protobuf::internal::kEmptyString) {
    split_point_ = new ::std::string;
  }
  split_point_->assign(value);
}
inline void SplitRegionRequest::set_split_point(const char* value) {
  set_has_split_point();
  if (split_point_ == &::google::protobuf::internal::kEmptyString) {
    split_point_ = new ::std::string;
  }
  split_point_->assign(value);
}
inline void SplitRegionRequest::set_split_point(const void* value, size_t size) {
  set_has_split_point();
  if (split_point_ == &::google::protobuf::internal::kEmptyString) {
    split_point_ = new ::std::string;
  }
  split_point_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SplitRegionRequest::mutable_split_point() {
  set_has_split_point();
  if (split_point_ == &::google::protobuf::internal::kEmptyString) {
    split_point_ = new ::std::string;
  }
  return split_point_;
}
inline ::std::string* SplitRegionRequest::release_split_point() {
  clear_has_split_point();
  if (split_point_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = split_point_;
    split_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SplitRegionRequest::set_allocated_split_point(::std::string* split_point) {
  if (split_point_ != &::google::protobuf::internal::kEmptyString) {
    delete split_point_;
  }
  if (split_point) {
    set_has_split_point();
    split_point_ = split_point;
  } else {
    clear_has_split_point();
    split_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SplitRegionResponse

// -------------------------------------------------------------------

// CompactRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool CompactRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompactRegionRequest::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompactRegionRequest::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompactRegionRequest::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionSpecifier& CompactRegionRequest::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionSpecifier* CompactRegionRequest::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionSpecifier;
  return region_;
}
inline ::hbase::pb::RegionSpecifier* CompactRegionRequest::release_region() {
  clear_has_region();
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = NULL;
  return temp;
}
inline void CompactRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// optional bool major = 2;
inline bool CompactRegionRequest::has_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompactRegionRequest::set_has_major() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompactRegionRequest::clear_has_major() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompactRegionRequest::clear_major() {
  major_ = false;
  clear_has_major();
}
inline bool CompactRegionRequest::major() const {
  return major_;
}
inline void CompactRegionRequest::set_major(bool value) {
  set_has_major();
  major_ = value;
}

// optional bytes family = 3;
inline bool CompactRegionRequest::has_family() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompactRegionRequest::set_has_family() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompactRegionRequest::clear_has_family() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompactRegionRequest::clear_family() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    family_->clear();
  }
  clear_has_family();
}
inline const ::std::string& CompactRegionRequest::family() const {
  return *family_;
}
inline void CompactRegionRequest::set_family(const ::std::string& value) {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  family_->assign(value);
}
inline void CompactRegionRequest::set_family(const char* value) {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  family_->assign(value);
}
inline void CompactRegionRequest::set_family(const void* value, size_t size) {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  family_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompactRegionRequest::mutable_family() {
  set_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    family_ = new ::std::string;
  }
  return family_;
}
inline ::std::string* CompactRegionRequest::release_family() {
  clear_has_family();
  if (family_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_;
    family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CompactRegionRequest::set_allocated_family(::std::string* family) {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (family) {
    set_has_family();
    family_ = family;
  } else {
    clear_has_family();
    family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CompactRegionResponse

// -------------------------------------------------------------------

// UpdateFavoredNodesRequest_RegionUpdateInfo

// required .hbase.pb.RegionInfo region = 1;
inline bool UpdateFavoredNodesRequest_RegionUpdateInfo::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFavoredNodesRequest_RegionUpdateInfo::set_has_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFavoredNodesRequest_RegionUpdateInfo::clear_has_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFavoredNodesRequest_RegionUpdateInfo::clear_region() {
  if (region_ != NULL) region_->::hbase::pb::RegionInfo::Clear();
  clear_has_region();
}
inline const ::hbase::pb::RegionInfo& UpdateFavoredNodesRequest_RegionUpdateInfo::region() const {
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::hbase::pb::RegionInfo* UpdateFavoredNodesRequest_RegionUpdateInfo::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::hbase::pb::RegionInfo;
  return region_;
}
inline ::hbase::pb::RegionInfo* UpdateFavoredNodesRequest_RegionUpdateInfo::release_region() {
  clear_has_region();
  ::hbase::pb::RegionInfo* temp = region_;
  region_ = NULL;
  return temp;
}
inline void UpdateFavoredNodesRequest_RegionUpdateInfo::set_allocated_region(::hbase::pb::RegionInfo* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
}

// repeated .hbase.pb.ServerName favored_nodes = 2;
inline int UpdateFavoredNodesRequest_RegionUpdateInfo::favored_nodes_size() const {
  return favored_nodes_.size();
}
inline void UpdateFavoredNodesRequest_RegionUpdateInfo::clear_favored_nodes() {
  favored_nodes_.Clear();
}
inline const ::hbase::pb::ServerName& UpdateFavoredNodesRequest_RegionUpdateInfo::favored_nodes(int index) const {
  return favored_nodes_.Get(index);
}
inline ::hbase::pb::ServerName* UpdateFavoredNodesRequest_RegionUpdateInfo::mutable_favored_nodes(int index) {
  return favored_nodes_.Mutable(index);
}
inline ::hbase::pb::ServerName* UpdateFavoredNodesRequest_RegionUpdateInfo::add_favored_nodes() {
  return favored_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >&
UpdateFavoredNodesRequest_RegionUpdateInfo::favored_nodes() const {
  return favored_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::ServerName >*
UpdateFavoredNodesRequest_RegionUpdateInfo::mutable_favored_nodes() {
  return &favored_nodes_;
}

// -------------------------------------------------------------------

// UpdateFavoredNodesRequest

// repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
inline int UpdateFavoredNodesRequest::update_info_size() const {
  return update_info_.size();
}
inline void UpdateFavoredNodesRequest::clear_update_info() {
  update_info_.Clear();
}
inline const ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo& UpdateFavoredNodesRequest::update_info(int index) const {
  return update_info_.Get(index);
}
inline ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* UpdateFavoredNodesRequest::mutable_update_info(int index) {
  return update_info_.Mutable(index);
}
inline ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* UpdateFavoredNodesRequest::add_update_info() {
  return update_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >&
UpdateFavoredNodesRequest::update_info() const {
  return update_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >*
UpdateFavoredNodesRequest::mutable_update_info() {
  return &update_info_;
}

// -------------------------------------------------------------------

// UpdateFavoredNodesResponse

// optional uint32 response = 1;
inline bool UpdateFavoredNodesResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFavoredNodesResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFavoredNodesResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFavoredNodesResponse::clear_response() {
  response_ = 0u;
  clear_has_response();
}
inline ::google::protobuf::uint32 UpdateFavoredNodesResponse::response() const {
  return response_;
}
inline void UpdateFavoredNodesResponse::set_response(::google::protobuf::uint32 value) {
  set_has_response();
  response_ = value;
}

// -------------------------------------------------------------------

// MergeRegionsRequest

// required .hbase.pb.RegionSpecifier region_a = 1;
inline bool MergeRegionsRequest::has_region_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MergeRegionsRequest::set_has_region_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MergeRegionsRequest::clear_has_region_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MergeRegionsRequest::clear_region_a() {
  if (region_a_ != NULL) region_a_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region_a();
}
inline const ::hbase::pb::RegionSpecifier& MergeRegionsRequest::region_a() const {
  return region_a_ != NULL ? *region_a_ : *default_instance_->region_a_;
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::mutable_region_a() {
  set_has_region_a();
  if (region_a_ == NULL) region_a_ = new ::hbase::pb::RegionSpecifier;
  return region_a_;
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::release_region_a() {
  clear_has_region_a();
  ::hbase::pb::RegionSpecifier* temp = region_a_;
  region_a_ = NULL;
  return temp;
}
inline void MergeRegionsRequest::set_allocated_region_a(::hbase::pb::RegionSpecifier* region_a) {
  delete region_a_;
  region_a_ = region_a;
  if (region_a) {
    set_has_region_a();
  } else {
    clear_has_region_a();
  }
}

// required .hbase.pb.RegionSpecifier region_b = 2;
inline bool MergeRegionsRequest::has_region_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MergeRegionsRequest::set_has_region_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MergeRegionsRequest::clear_has_region_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MergeRegionsRequest::clear_region_b() {
  if (region_b_ != NULL) region_b_->::hbase::pb::RegionSpecifier::Clear();
  clear_has_region_b();
}
inline const ::hbase::pb::RegionSpecifier& MergeRegionsRequest::region_b() const {
  return region_b_ != NULL ? *region_b_ : *default_instance_->region_b_;
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::mutable_region_b() {
  set_has_region_b();
  if (region_b_ == NULL) region_b_ = new ::hbase::pb::RegionSpecifier;
  return region_b_;
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::release_region_b() {
  clear_has_region_b();
  ::hbase::pb::RegionSpecifier* temp = region_b_;
  region_b_ = NULL;
  return temp;
}
inline void MergeRegionsRequest::set_allocated_region_b(::hbase::pb::RegionSpecifier* region_b) {
  delete region_b_;
  region_b_ = region_b;
  if (region_b) {
    set_has_region_b();
  } else {
    clear_has_region_b();
  }
}

// optional bool forcible = 3 [default = false];
inline bool MergeRegionsRequest::has_forcible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MergeRegionsRequest::set_has_forcible() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MergeRegionsRequest::clear_has_forcible() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MergeRegionsRequest::clear_forcible() {
  forcible_ = false;
  clear_has_forcible();
}
inline bool MergeRegionsRequest::forcible() const {
  return forcible_;
}
inline void MergeRegionsRequest::set_forcible(bool value) {
  set_has_forcible();
  forcible_ = value;
}

// optional uint64 master_system_time = 4;
inline bool MergeRegionsRequest::has_master_system_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MergeRegionsRequest::set_has_master_system_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MergeRegionsRequest::clear_has_master_system_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MergeRegionsRequest::clear_master_system_time() {
  master_system_time_ = GOOGLE_ULONGLONG(0);
  clear_has_master_system_time();
}
inline ::google::protobuf::uint64 MergeRegionsRequest::master_system_time() const {
  return master_system_time_;
}
inline void MergeRegionsRequest::set_master_system_time(::google::protobuf::uint64 value) {
  set_has_master_system_time();
  master_system_time_ = value;
}

// -------------------------------------------------------------------

// MergeRegionsResponse

// -------------------------------------------------------------------

// WALEntry

// required .hbase.pb.WALKey key = 1;
inline bool WALEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WALEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WALEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WALEntry::clear_key() {
  if (key_ != NULL) key_->::hbase::pb::WALKey::Clear();
  clear_has_key();
}
inline const ::hbase::pb::WALKey& WALEntry::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::hbase::pb::WALKey* WALEntry::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::hbase::pb::WALKey;
  return key_;
}
inline ::hbase::pb::WALKey* WALEntry::release_key() {
  clear_has_key();
  ::hbase::pb::WALKey* temp = key_;
  key_ = NULL;
  return temp;
}
inline void WALEntry::set_allocated_key(::hbase::pb::WALKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// repeated bytes key_value_bytes = 2;
inline int WALEntry::key_value_bytes_size() const {
  return key_value_bytes_.size();
}
inline void WALEntry::clear_key_value_bytes() {
  key_value_bytes_.Clear();
}
inline const ::std::string& WALEntry::key_value_bytes(int index) const {
  return key_value_bytes_.Get(index);
}
inline ::std::string* WALEntry::mutable_key_value_bytes(int index) {
  return key_value_bytes_.Mutable(index);
}
inline void WALEntry::set_key_value_bytes(int index, const ::std::string& value) {
  key_value_bytes_.Mutable(index)->assign(value);
}
inline void WALEntry::set_key_value_bytes(int index, const char* value) {
  key_value_bytes_.Mutable(index)->assign(value);
}
inline void WALEntry::set_key_value_bytes(int index, const void* value, size_t size) {
  key_value_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WALEntry::add_key_value_bytes() {
  return key_value_bytes_.Add();
}
inline void WALEntry::add_key_value_bytes(const ::std::string& value) {
  key_value_bytes_.Add()->assign(value);
}
inline void WALEntry::add_key_value_bytes(const char* value) {
  key_value_bytes_.Add()->assign(value);
}
inline void WALEntry::add_key_value_bytes(const void* value, size_t size) {
  key_value_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WALEntry::key_value_bytes() const {
  return key_value_bytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WALEntry::mutable_key_value_bytes() {
  return &key_value_bytes_;
}

// optional int32 associated_cell_count = 3;
inline bool WALEntry::has_associated_cell_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WALEntry::set_has_associated_cell_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WALEntry::clear_has_associated_cell_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WALEntry::clear_associated_cell_count() {
  associated_cell_count_ = 0;
  clear_has_associated_cell_count();
}
inline ::google::protobuf::int32 WALEntry::associated_cell_count() const {
  return associated_cell_count_;
}
inline void WALEntry::set_associated_cell_count(::google::protobuf::int32 value) {
  set_has_associated_cell_count();
  associated_cell_count_ = value;
}

// -------------------------------------------------------------------

// ReplicateWALEntryRequest

// repeated .hbase.pb.WALEntry entry = 1;
inline int ReplicateWALEntryRequest::entry_size() const {
  return entry_.size();
}
inline void ReplicateWALEntryRequest::clear_entry() {
  entry_.Clear();
}
inline const ::hbase::pb::WALEntry& ReplicateWALEntryRequest::entry(int index) const {
  return entry_.Get(index);
}
inline ::hbase::pb::WALEntry* ReplicateWALEntryRequest::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::hbase::pb::WALEntry* ReplicateWALEntryRequest::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::WALEntry >&
ReplicateWALEntryRequest::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::WALEntry >*
ReplicateWALEntryRequest::mutable_entry() {
  return &entry_;
}

// optional string replicationClusterId = 2;
inline bool ReplicateWALEntryRequest::has_replicationclusterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicateWALEntryRequest::set_has_replicationclusterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicateWALEntryRequest::clear_has_replicationclusterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicateWALEntryRequest::clear_replicationclusterid() {
  if (replicationclusterid_ != &::google::protobuf::internal::kEmptyString) {
    replicationclusterid_->clear();
  }
  clear_has_replicationclusterid();
}
inline const ::std::string& ReplicateWALEntryRequest::replicationclusterid() const {
  return *replicationclusterid_;
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(const ::std::string& value) {
  set_has_replicationclusterid();
  if (replicationclusterid_ == &::google::protobuf::internal::kEmptyString) {
    replicationclusterid_ = new ::std::string;
  }
  replicationclusterid_->assign(value);
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(const char* value) {
  set_has_replicationclusterid();
  if (replicationclusterid_ == &::google::protobuf::internal::kEmptyString) {
    replicationclusterid_ = new ::std::string;
  }
  replicationclusterid_->assign(value);
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(const char* value, size_t size) {
  set_has_replicationclusterid();
  if (replicationclusterid_ == &::google::protobuf::internal::kEmptyString) {
    replicationclusterid_ = new ::std::string;
  }
  replicationclusterid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplicateWALEntryRequest::mutable_replicationclusterid() {
  set_has_replicationclusterid();
  if (replicationclusterid_ == &::google::protobuf::internal::kEmptyString) {
    replicationclusterid_ = new ::std::string;
  }
  return replicationclusterid_;
}
inline ::std::string* ReplicateWALEntryRequest::release_replicationclusterid() {
  clear_has_replicationclusterid();
  if (replicationclusterid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = replicationclusterid_;
    replicationclusterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReplicateWALEntryRequest::set_allocated_replicationclusterid(::std::string* replicationclusterid) {
  if (replicationclusterid_ != &::google::protobuf::internal::kEmptyString) {
    delete replicationclusterid_;
  }
  if (replicationclusterid) {
    set_has_replicationclusterid();
    replicationclusterid_ = replicationclusterid;
  } else {
    clear_has_replicationclusterid();
    replicationclusterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sourceBaseNamespaceDirPath = 3;
inline bool ReplicateWALEntryRequest::has_sourcebasenamespacedirpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplicateWALEntryRequest::set_has_sourcebasenamespacedirpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplicateWALEntryRequest::clear_has_sourcebasenamespacedirpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplicateWALEntryRequest::clear_sourcebasenamespacedirpath() {
  if (sourcebasenamespacedirpath_ != &::google::protobuf::internal::kEmptyString) {
    sourcebasenamespacedirpath_->clear();
  }
  clear_has_sourcebasenamespacedirpath();
}
inline const ::std::string& ReplicateWALEntryRequest::sourcebasenamespacedirpath() const {
  return *sourcebasenamespacedirpath_;
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(const ::std::string& value) {
  set_has_sourcebasenamespacedirpath();
  if (sourcebasenamespacedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcebasenamespacedirpath_ = new ::std::string;
  }
  sourcebasenamespacedirpath_->assign(value);
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(const char* value) {
  set_has_sourcebasenamespacedirpath();
  if (sourcebasenamespacedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcebasenamespacedirpath_ = new ::std::string;
  }
  sourcebasenamespacedirpath_->assign(value);
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(const char* value, size_t size) {
  set_has_sourcebasenamespacedirpath();
  if (sourcebasenamespacedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcebasenamespacedirpath_ = new ::std::string;
  }
  sourcebasenamespacedirpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplicateWALEntryRequest::mutable_sourcebasenamespacedirpath() {
  set_has_sourcebasenamespacedirpath();
  if (sourcebasenamespacedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcebasenamespacedirpath_ = new ::std::string;
  }
  return sourcebasenamespacedirpath_;
}
inline ::std::string* ReplicateWALEntryRequest::release_sourcebasenamespacedirpath() {
  clear_has_sourcebasenamespacedirpath();
  if (sourcebasenamespacedirpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcebasenamespacedirpath_;
    sourcebasenamespacedirpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReplicateWALEntryRequest::set_allocated_sourcebasenamespacedirpath(::std::string* sourcebasenamespacedirpath) {
  if (sourcebasenamespacedirpath_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcebasenamespacedirpath_;
  }
  if (sourcebasenamespacedirpath) {
    set_has_sourcebasenamespacedirpath();
    sourcebasenamespacedirpath_ = sourcebasenamespacedirpath;
  } else {
    clear_has_sourcebasenamespacedirpath();
    sourcebasenamespacedirpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sourceHFileArchiveDirPath = 4;
inline bool ReplicateWALEntryRequest::has_sourcehfilearchivedirpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplicateWALEntryRequest::set_has_sourcehfilearchivedirpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplicateWALEntryRequest::clear_has_sourcehfilearchivedirpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplicateWALEntryRequest::clear_sourcehfilearchivedirpath() {
  if (sourcehfilearchivedirpath_ != &::google::protobuf::internal::kEmptyString) {
    sourcehfilearchivedirpath_->clear();
  }
  clear_has_sourcehfilearchivedirpath();
}
inline const ::std::string& ReplicateWALEntryRequest::sourcehfilearchivedirpath() const {
  return *sourcehfilearchivedirpath_;
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(const ::std::string& value) {
  set_has_sourcehfilearchivedirpath();
  if (sourcehfilearchivedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcehfilearchivedirpath_ = new ::std::string;
  }
  sourcehfilearchivedirpath_->assign(value);
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(const char* value) {
  set_has_sourcehfilearchivedirpath();
  if (sourcehfilearchivedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcehfilearchivedirpath_ = new ::std::string;
  }
  sourcehfilearchivedirpath_->assign(value);
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(const char* value, size_t size) {
  set_has_sourcehfilearchivedirpath();
  if (sourcehfilearchivedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcehfilearchivedirpath_ = new ::std::string;
  }
  sourcehfilearchivedirpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplicateWALEntryRequest::mutable_sourcehfilearchivedirpath() {
  set_has_sourcehfilearchivedirpath();
  if (sourcehfilearchivedirpath_ == &::google::protobuf::internal::kEmptyString) {
    sourcehfilearchivedirpath_ = new ::std::string;
  }
  return sourcehfilearchivedirpath_;
}
inline ::std::string* ReplicateWALEntryRequest::release_sourcehfilearchivedirpath() {
  clear_has_sourcehfilearchivedirpath();
  if (sourcehfilearchivedirpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcehfilearchivedirpath_;
    sourcehfilearchivedirpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReplicateWALEntryRequest::set_allocated_sourcehfilearchivedirpath(::std::string* sourcehfilearchivedirpath) {
  if (sourcehfilearchivedirpath_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcehfilearchivedirpath_;
  }
  if (sourcehfilearchivedirpath) {
    set_has_sourcehfilearchivedirpath();
    sourcehfilearchivedirpath_ = sourcehfilearchivedirpath;
  } else {
    clear_has_sourcehfilearchivedirpath();
    sourcehfilearchivedirpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReplicateWALEntryResponse

// -------------------------------------------------------------------

// RollWALWriterRequest

// -------------------------------------------------------------------

// RollWALWriterResponse

// repeated bytes region_to_flush = 1;
inline int RollWALWriterResponse::region_to_flush_size() const {
  return region_to_flush_.size();
}
inline void RollWALWriterResponse::clear_region_to_flush() {
  region_to_flush_.Clear();
}
inline const ::std::string& RollWALWriterResponse::region_to_flush(int index) const {
  return region_to_flush_.Get(index);
}
inline ::std::string* RollWALWriterResponse::mutable_region_to_flush(int index) {
  return region_to_flush_.Mutable(index);
}
inline void RollWALWriterResponse::set_region_to_flush(int index, const ::std::string& value) {
  region_to_flush_.Mutable(index)->assign(value);
}
inline void RollWALWriterResponse::set_region_to_flush(int index, const char* value) {
  region_to_flush_.Mutable(index)->assign(value);
}
inline void RollWALWriterResponse::set_region_to_flush(int index, const void* value, size_t size) {
  region_to_flush_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RollWALWriterResponse::add_region_to_flush() {
  return region_to_flush_.Add();
}
inline void RollWALWriterResponse::add_region_to_flush(const ::std::string& value) {
  region_to_flush_.Add()->assign(value);
}
inline void RollWALWriterResponse::add_region_to_flush(const char* value) {
  region_to_flush_.Add()->assign(value);
}
inline void RollWALWriterResponse::add_region_to_flush(const void* value, size_t size) {
  region_to_flush_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RollWALWriterResponse::region_to_flush() const {
  return region_to_flush_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RollWALWriterResponse::mutable_region_to_flush() {
  return &region_to_flush_;
}

// -------------------------------------------------------------------

// StopServerRequest

// required string reason = 1;
inline bool StopServerRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopServerRequest::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopServerRequest::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopServerRequest::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& StopServerRequest::reason() const {
  return *reason_;
}
inline void StopServerRequest::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void StopServerRequest::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void StopServerRequest::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StopServerRequest::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* StopServerRequest::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StopServerRequest::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StopServerResponse

// -------------------------------------------------------------------

// GetServerInfoRequest

// -------------------------------------------------------------------

// ServerInfo

// required .hbase.pb.ServerName server_name = 1;
inline bool ServerInfo::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_server_name() {
  if (server_name_ != NULL) server_name_->::hbase::pb::ServerName::Clear();
  clear_has_server_name();
}
inline const ::hbase::pb::ServerName& ServerInfo::server_name() const {
  return server_name_ != NULL ? *server_name_ : *default_instance_->server_name_;
}
inline ::hbase::pb::ServerName* ServerInfo::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == NULL) server_name_ = new ::hbase::pb::ServerName;
  return server_name_;
}
inline ::hbase::pb::ServerName* ServerInfo::release_server_name() {
  clear_has_server_name();
  ::hbase::pb::ServerName* temp = server_name_;
  server_name_ = NULL;
  return temp;
}
inline void ServerInfo::set_allocated_server_name(::hbase::pb::ServerName* server_name) {
  delete server_name_;
  server_name_ = server_name;
  if (server_name) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
}

// optional uint32 webui_port = 2;
inline bool ServerInfo::has_webui_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_webui_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_webui_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_webui_port() {
  webui_port_ = 0u;
  clear_has_webui_port();
}
inline ::google::protobuf::uint32 ServerInfo::webui_port() const {
  return webui_port_;
}
inline void ServerInfo::set_webui_port(::google::protobuf::uint32 value) {
  set_has_webui_port();
  webui_port_ = value;
}

// -------------------------------------------------------------------

// GetServerInfoResponse

// required .hbase.pb.ServerInfo server_info = 1;
inline bool GetServerInfoResponse::has_server_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServerInfoResponse::set_has_server_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServerInfoResponse::clear_has_server_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServerInfoResponse::clear_server_info() {
  if (server_info_ != NULL) server_info_->::hbase::pb::ServerInfo::Clear();
  clear_has_server_info();
}
inline const ::hbase::pb::ServerInfo& GetServerInfoResponse::server_info() const {
  return server_info_ != NULL ? *server_info_ : *default_instance_->server_info_;
}
inline ::hbase::pb::ServerInfo* GetServerInfoResponse::mutable_server_info() {
  set_has_server_info();
  if (server_info_ == NULL) server_info_ = new ::hbase::pb::ServerInfo;
  return server_info_;
}
inline ::hbase::pb::ServerInfo* GetServerInfoResponse::release_server_info() {
  clear_has_server_info();
  ::hbase::pb::ServerInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
inline void GetServerInfoResponse::set_allocated_server_info(::hbase::pb::ServerInfo* server_info) {
  delete server_info_;
  server_info_ = server_info;
  if (server_info) {
    set_has_server_info();
  } else {
    clear_has_server_info();
  }
}

// -------------------------------------------------------------------

// UpdateConfigurationRequest

// -------------------------------------------------------------------

// UpdateConfigurationResponse


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::GetRegionInfoResponse_CompactionState>() {
  return ::hbase::pb::GetRegionInfoResponse_CompactionState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::OpenRegionResponse_RegionOpeningState>() {
  return ::hbase::pb::OpenRegionResponse_RegionOpeningState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Admin_2eproto__INCLUDED
