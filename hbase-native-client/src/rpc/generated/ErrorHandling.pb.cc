// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorHandling.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ErrorHandling.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* StackTraceElementMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StackTraceElementMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericExceptionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericExceptionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForeignExceptionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForeignExceptionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ErrorHandling_2eproto() {
  protobuf_AddDesc_ErrorHandling_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ErrorHandling.proto");
  GOOGLE_CHECK(file != NULL);
  StackTraceElementMessage_descriptor_ = file->message_type(0);
  static const int StackTraceElementMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTraceElementMessage, declaring_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTraceElementMessage, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTraceElementMessage, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTraceElementMessage, line_number_),
  };
  StackTraceElementMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StackTraceElementMessage_descriptor_,
      StackTraceElementMessage::default_instance_,
      StackTraceElementMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTraceElementMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackTraceElementMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StackTraceElementMessage));
  GenericExceptionMessage_descriptor_ = file->message_type(1);
  static const int GenericExceptionMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericExceptionMessage, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericExceptionMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericExceptionMessage, error_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericExceptionMessage, trace_),
  };
  GenericExceptionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericExceptionMessage_descriptor_,
      GenericExceptionMessage::default_instance_,
      GenericExceptionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericExceptionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericExceptionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericExceptionMessage));
  ForeignExceptionMessage_descriptor_ = file->message_type(2);
  static const int ForeignExceptionMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignExceptionMessage, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignExceptionMessage, generic_exception_),
  };
  ForeignExceptionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForeignExceptionMessage_descriptor_,
      ForeignExceptionMessage::default_instance_,
      ForeignExceptionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignExceptionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForeignExceptionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForeignExceptionMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ErrorHandling_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StackTraceElementMessage_descriptor_, &StackTraceElementMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericExceptionMessage_descriptor_, &GenericExceptionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForeignExceptionMessage_descriptor_, &ForeignExceptionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ErrorHandling_2eproto() {
  delete StackTraceElementMessage::default_instance_;
  delete StackTraceElementMessage_reflection_;
  delete GenericExceptionMessage::default_instance_;
  delete GenericExceptionMessage_reflection_;
  delete ForeignExceptionMessage::default_instance_;
  delete ForeignExceptionMessage_reflection_;
}

void protobuf_AddDesc_ErrorHandling_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ErrorHandling.proto\022\010hbase.pb\"p\n\030Stack"
    "TraceElementMessage\022\027\n\017declaring_class\030\001"
    " \001(\t\022\023\n\013method_name\030\002 \001(\t\022\021\n\tfile_name\030\003"
    " \001(\t\022\023\n\013line_number\030\004 \001(\005\"\205\001\n\027GenericExc"
    "eptionMessage\022\022\n\nclass_name\030\001 \001(\t\022\017\n\007mes"
    "sage\030\002 \001(\t\022\022\n\nerror_info\030\003 \001(\014\0221\n\005trace\030"
    "\004 \003(\0132\".hbase.pb.StackTraceElementMessag"
    "e\"g\n\027ForeignExceptionMessage\022\016\n\006source\030\001"
    " \001(\t\022<\n\021generic_exception\030\002 \001(\0132!.hbase."
    "pb.GenericExceptionMessageBF\n*org.apache"
    ".hadoop.hbase.protobuf.generatedB\023ErrorH"
    "andlingProtosH\001\240\001\001", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ErrorHandling.proto", &protobuf_RegisterTypes);
  StackTraceElementMessage::default_instance_ = new StackTraceElementMessage();
  GenericExceptionMessage::default_instance_ = new GenericExceptionMessage();
  ForeignExceptionMessage::default_instance_ = new ForeignExceptionMessage();
  StackTraceElementMessage::default_instance_->InitAsDefaultInstance();
  GenericExceptionMessage::default_instance_->InitAsDefaultInstance();
  ForeignExceptionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ErrorHandling_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ErrorHandling_2eproto {
  StaticDescriptorInitializer_ErrorHandling_2eproto() {
    protobuf_AddDesc_ErrorHandling_2eproto();
  }
} static_descriptor_initializer_ErrorHandling_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StackTraceElementMessage::kDeclaringClassFieldNumber;
const int StackTraceElementMessage::kMethodNameFieldNumber;
const int StackTraceElementMessage::kFileNameFieldNumber;
const int StackTraceElementMessage::kLineNumberFieldNumber;
#endif  // !_MSC_VER

StackTraceElementMessage::StackTraceElementMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StackTraceElementMessage::InitAsDefaultInstance() {
}

StackTraceElementMessage::StackTraceElementMessage(const StackTraceElementMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StackTraceElementMessage::SharedCtor() {
  _cached_size_ = 0;
  declaring_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StackTraceElementMessage::~StackTraceElementMessage() {
  SharedDtor();
}

void StackTraceElementMessage::SharedDtor() {
  if (declaring_class_ != &::google::protobuf::internal::kEmptyString) {
    delete declaring_class_;
  }
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void StackTraceElementMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTraceElementMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StackTraceElementMessage_descriptor_;
}

const StackTraceElementMessage& StackTraceElementMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorHandling_2eproto();
  return *default_instance_;
}

StackTraceElementMessage* StackTraceElementMessage::default_instance_ = NULL;

StackTraceElementMessage* StackTraceElementMessage::New() const {
  return new StackTraceElementMessage;
}

void StackTraceElementMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_declaring_class()) {
      if (declaring_class_ != &::google::protobuf::internal::kEmptyString) {
        declaring_class_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    line_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StackTraceElementMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string declaring_class = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaring_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaring_class().data(), this->declaring_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }

      // optional string method_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_line_number;
        break;
      }

      // optional int32 line_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_number_)));
          set_has_line_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StackTraceElementMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string declaring_class = 1;
  if (has_declaring_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaring_class().data(), this->declaring_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->declaring_class(), output);
  }

  // optional string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method_name(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional int32 line_number = 4;
  if (has_line_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StackTraceElementMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string declaring_class = 1;
  if (has_declaring_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaring_class().data(), this->declaring_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->declaring_class(), target);
  }

  // optional string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // optional int32 line_number = 4;
  if (has_line_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StackTraceElementMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string declaring_class = 1;
    if (has_declaring_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaring_class());
    }

    // optional string method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 line_number = 4;
    if (has_line_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTraceElementMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StackTraceElementMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StackTraceElementMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StackTraceElementMessage::MergeFrom(const StackTraceElementMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_declaring_class()) {
      set_declaring_class(from.declaring_class());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_line_number()) {
      set_line_number(from.line_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StackTraceElementMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTraceElementMessage::CopyFrom(const StackTraceElementMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTraceElementMessage::IsInitialized() const {

  return true;
}

void StackTraceElementMessage::Swap(StackTraceElementMessage* other) {
  if (other != this) {
    std::swap(declaring_class_, other->declaring_class_);
    std::swap(method_name_, other->method_name_);
    std::swap(file_name_, other->file_name_);
    std::swap(line_number_, other->line_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StackTraceElementMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StackTraceElementMessage_descriptor_;
  metadata.reflection = StackTraceElementMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericExceptionMessage::kClassNameFieldNumber;
const int GenericExceptionMessage::kMessageFieldNumber;
const int GenericExceptionMessage::kErrorInfoFieldNumber;
const int GenericExceptionMessage::kTraceFieldNumber;
#endif  // !_MSC_VER

GenericExceptionMessage::GenericExceptionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericExceptionMessage::InitAsDefaultInstance() {
}

GenericExceptionMessage::GenericExceptionMessage(const GenericExceptionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericExceptionMessage::SharedCtor() {
  _cached_size_ = 0;
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericExceptionMessage::~GenericExceptionMessage() {
  SharedDtor();
}

void GenericExceptionMessage::SharedDtor() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (error_info_ != &::google::protobuf::internal::kEmptyString) {
    delete error_info_;
  }
  if (this != default_instance_) {
  }
}

void GenericExceptionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericExceptionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericExceptionMessage_descriptor_;
}

const GenericExceptionMessage& GenericExceptionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorHandling_2eproto();
  return *default_instance_;
}

GenericExceptionMessage* GenericExceptionMessage::default_instance_ = NULL;

GenericExceptionMessage* GenericExceptionMessage::New() const {
  return new GenericExceptionMessage;
}

void GenericExceptionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::kEmptyString) {
        class_name_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_error_info()) {
      if (error_info_ != &::google::protobuf::internal::kEmptyString) {
        error_info_->clear();
      }
    }
  }
  trace_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericExceptionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string class_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_info;
        break;
      }

      // optional bytes error_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trace;
        break;
      }

      // repeated .hbase.pb.StackTraceElementMessage trace = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trace;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericExceptionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string class_name = 1;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->class_name(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional bytes error_info = 3;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->error_info(), output);
  }

  // repeated .hbase.pb.StackTraceElementMessage trace = 4;
  for (int i = 0; i < this->trace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trace(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericExceptionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string class_name = 1;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional bytes error_info = 3;
  if (has_error_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->error_info(), target);
  }

  // repeated .hbase.pb.StackTraceElementMessage trace = 4;
  for (int i = 0; i < this->trace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->trace(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericExceptionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string class_name = 1;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bytes error_info = 3;
    if (has_error_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_info());
    }

  }
  // repeated .hbase.pb.StackTraceElementMessage trace = 4;
  total_size += 1 * this->trace_size();
  for (int i = 0; i < this->trace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trace(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericExceptionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericExceptionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericExceptionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericExceptionMessage::MergeFrom(const GenericExceptionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  trace_.MergeFrom(from.trace_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_error_info()) {
      set_error_info(from.error_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericExceptionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericExceptionMessage::CopyFrom(const GenericExceptionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericExceptionMessage::IsInitialized() const {

  return true;
}

void GenericExceptionMessage::Swap(GenericExceptionMessage* other) {
  if (other != this) {
    std::swap(class_name_, other->class_name_);
    std::swap(message_, other->message_);
    std::swap(error_info_, other->error_info_);
    trace_.Swap(&other->trace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericExceptionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericExceptionMessage_descriptor_;
  metadata.reflection = GenericExceptionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForeignExceptionMessage::kSourceFieldNumber;
const int ForeignExceptionMessage::kGenericExceptionFieldNumber;
#endif  // !_MSC_VER

ForeignExceptionMessage::ForeignExceptionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForeignExceptionMessage::InitAsDefaultInstance() {
  generic_exception_ = const_cast< ::hbase::pb::GenericExceptionMessage*>(&::hbase::pb::GenericExceptionMessage::default_instance());
}

ForeignExceptionMessage::ForeignExceptionMessage(const ForeignExceptionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForeignExceptionMessage::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generic_exception_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForeignExceptionMessage::~ForeignExceptionMessage() {
  SharedDtor();
}

void ForeignExceptionMessage::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (this != default_instance_) {
    delete generic_exception_;
  }
}

void ForeignExceptionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForeignExceptionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForeignExceptionMessage_descriptor_;
}

const ForeignExceptionMessage& ForeignExceptionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorHandling_2eproto();
  return *default_instance_;
}

ForeignExceptionMessage* ForeignExceptionMessage::default_instance_ = NULL;

ForeignExceptionMessage* ForeignExceptionMessage::New() const {
  return new ForeignExceptionMessage;
}

void ForeignExceptionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_generic_exception()) {
      if (generic_exception_ != NULL) generic_exception_->::hbase::pb::GenericExceptionMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForeignExceptionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_generic_exception;
        break;
      }

      // optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generic_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForeignExceptionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }

  // optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
  if (has_generic_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generic_exception(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForeignExceptionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
  if (has_generic_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->generic_exception(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForeignExceptionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
    if (has_generic_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generic_exception());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForeignExceptionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForeignExceptionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForeignExceptionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForeignExceptionMessage::MergeFrom(const ForeignExceptionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_generic_exception()) {
      mutable_generic_exception()->::hbase::pb::GenericExceptionMessage::MergeFrom(from.generic_exception());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForeignExceptionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForeignExceptionMessage::CopyFrom(const ForeignExceptionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignExceptionMessage::IsInitialized() const {

  return true;
}

void ForeignExceptionMessage::Swap(ForeignExceptionMessage* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(generic_exception_, other->generic_exception_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForeignExceptionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForeignExceptionMessage_descriptor_;
  metadata.reflection = ForeignExceptionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
