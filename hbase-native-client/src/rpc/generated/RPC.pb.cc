// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* UserInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellBlockMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellBlockMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExceptionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExceptionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RPC_2eproto() {
  protobuf_AddDesc_RPC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RPC.proto");
  GOOGLE_CHECK(file != NULL);
  UserInformation_descriptor_ = file->message_type(0);
  static const int UserInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformation, effective_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformation, real_user_),
  };
  UserInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInformation_descriptor_,
      UserInformation::default_instance_,
      UserInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInformation));
  ConnectionHeader_descriptor_ = file->message_type(1);
  static const int ConnectionHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, cell_block_codec_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, cell_block_compressor_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, version_info_),
  };
  ConnectionHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionHeader_descriptor_,
      ConnectionHeader::default_instance_,
      ConnectionHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionHeader));
  CellBlockMeta_descriptor_ = file->message_type(2);
  static const int CellBlockMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellBlockMeta, length_),
  };
  CellBlockMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellBlockMeta_descriptor_,
      CellBlockMeta::default_instance_,
      CellBlockMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellBlockMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellBlockMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellBlockMeta));
  ExceptionResponse_descriptor_ = file->message_type(3);
  static const int ExceptionResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, exception_class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, stack_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, do_not_retry_),
  };
  ExceptionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExceptionResponse_descriptor_,
      ExceptionResponse::default_instance_,
      ExceptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExceptionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExceptionResponse));
  RequestHeader_descriptor_ = file->message_type(4);
  static const int RequestHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, call_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, trace_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, request_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cell_block_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, priority_),
  };
  RequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHeader_descriptor_,
      RequestHeader::default_instance_,
      RequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHeader));
  ResponseHeader_descriptor_ = file->message_type(5);
  static const int ResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, call_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cell_block_meta_),
  };
  ResponseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseHeader_descriptor_,
      ResponseHeader::default_instance_,
      ResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RPC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInformation_descriptor_, &UserInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionHeader_descriptor_, &ConnectionHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellBlockMeta_descriptor_, &CellBlockMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExceptionResponse_descriptor_, &ExceptionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHeader_descriptor_, &RequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseHeader_descriptor_, &ResponseHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RPC_2eproto() {
  delete UserInformation::default_instance_;
  delete UserInformation_reflection_;
  delete ConnectionHeader::default_instance_;
  delete ConnectionHeader_reflection_;
  delete CellBlockMeta::default_instance_;
  delete CellBlockMeta_reflection_;
  delete ExceptionResponse::default_instance_;
  delete ExceptionResponse_reflection_;
  delete RequestHeader::default_instance_;
  delete RequestHeader_reflection_;
  delete ResponseHeader::default_instance_;
  delete ResponseHeader_reflection_;
}

void protobuf_AddDesc_RPC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_Tracing_2eproto();
  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tRPC.proto\022\010hbase.pb\032\rTracing.proto\032\013HB"
    "ase.proto\"<\n\017UserInformation\022\026\n\016effectiv"
    "e_user\030\001 \002(\t\022\021\n\treal_user\030\002 \001(\t\"\310\001\n\020Conn"
    "ectionHeader\022,\n\tuser_info\030\001 \001(\0132\031.hbase."
    "pb.UserInformation\022\024\n\014service_name\030\002 \001(\t"
    "\022\036\n\026cell_block_codec_class\030\003 \001(\t\022#\n\033cell"
    "_block_compressor_class\030\004 \001(\t\022+\n\014version"
    "_info\030\005 \001(\0132\025.hbase.pb.VersionInfo\"\037\n\rCe"
    "llBlockMeta\022\016\n\006length\030\001 \001(\r\"|\n\021Exception"
    "Response\022\034\n\024exception_class_name\030\001 \001(\t\022\023"
    "\n\013stack_trace\030\002 \001(\t\022\020\n\010hostname\030\003 \001(\t\022\014\n"
    "\004port\030\004 \001(\005\022\024\n\014do_not_retry\030\005 \001(\010\"\270\001\n\rRe"
    "questHeader\022\017\n\007call_id\030\001 \001(\r\022&\n\ntrace_in"
    "fo\030\002 \001(\0132\022.hbase.pb.RPCTInfo\022\023\n\013method_n"
    "ame\030\003 \001(\t\022\025\n\rrequest_param\030\004 \001(\010\0220\n\017cell"
    "_block_meta\030\005 \001(\0132\027.hbase.pb.CellBlockMe"
    "ta\022\020\n\010priority\030\006 \001(\r\"\203\001\n\016ResponseHeader\022"
    "\017\n\007call_id\030\001 \001(\r\022.\n\texception\030\002 \001(\0132\033.hb"
    "ase.pb.ExceptionResponse\0220\n\017cell_block_m"
    "eta\030\003 \001(\0132\027.hbase.pb.CellBlockMetaB<\n*or"
    "g.apache.hadoop.hbase.protobuf.generated"
    "B\tRPCProtosH\001\240\001\001", 856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RPC.proto", &protobuf_RegisterTypes);
  UserInformation::default_instance_ = new UserInformation();
  ConnectionHeader::default_instance_ = new ConnectionHeader();
  CellBlockMeta::default_instance_ = new CellBlockMeta();
  ExceptionResponse::default_instance_ = new ExceptionResponse();
  RequestHeader::default_instance_ = new RequestHeader();
  ResponseHeader::default_instance_ = new ResponseHeader();
  UserInformation::default_instance_->InitAsDefaultInstance();
  ConnectionHeader::default_instance_->InitAsDefaultInstance();
  CellBlockMeta::default_instance_->InitAsDefaultInstance();
  ExceptionResponse::default_instance_->InitAsDefaultInstance();
  RequestHeader::default_instance_->InitAsDefaultInstance();
  ResponseHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RPC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RPC_2eproto {
  StaticDescriptorInitializer_RPC_2eproto() {
    protobuf_AddDesc_RPC_2eproto();
  }
} static_descriptor_initializer_RPC_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserInformation::kEffectiveUserFieldNumber;
const int UserInformation::kRealUserFieldNumber;
#endif  // !_MSC_VER

UserInformation::UserInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInformation::InitAsDefaultInstance() {
}

UserInformation::UserInformation(const UserInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInformation::SharedCtor() {
  _cached_size_ = 0;
  effective_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  real_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInformation::~UserInformation() {
  SharedDtor();
}

void UserInformation::SharedDtor() {
  if (effective_user_ != &::google::protobuf::internal::kEmptyString) {
    delete effective_user_;
  }
  if (real_user_ != &::google::protobuf::internal::kEmptyString) {
    delete real_user_;
  }
  if (this != default_instance_) {
  }
}

void UserInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInformation_descriptor_;
}

const UserInformation& UserInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPC_2eproto();
  return *default_instance_;
}

UserInformation* UserInformation::default_instance_ = NULL;

UserInformation* UserInformation::New() const {
  return new UserInformation;
}

void UserInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_effective_user()) {
      if (effective_user_ != &::google::protobuf::internal::kEmptyString) {
        effective_user_->clear();
      }
    }
    if (has_real_user()) {
      if (real_user_ != &::google::protobuf::internal::kEmptyString) {
        real_user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string effective_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effective_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effective_user().data(), this->effective_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_real_user;
        break;
      }

      // optional string real_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->real_user().data(), this->real_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string effective_user = 1;
  if (has_effective_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effective_user().data(), this->effective_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->effective_user(), output);
  }

  // optional string real_user = 2;
  if (has_real_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_user().data(), this->real_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->real_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string effective_user = 1;
  if (has_effective_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effective_user().data(), this->effective_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->effective_user(), target);
  }

  // optional string real_user = 2;
  if (has_real_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_user().data(), this->real_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->real_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string effective_user = 1;
    if (has_effective_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effective_user());
    }

    // optional string real_user = 2;
    if (has_real_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInformation::MergeFrom(const UserInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effective_user()) {
      set_effective_user(from.effective_user());
    }
    if (from.has_real_user()) {
      set_real_user(from.real_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInformation::CopyFrom(const UserInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInformation::Swap(UserInformation* other) {
  if (other != this) {
    std::swap(effective_user_, other->effective_user_);
    std::swap(real_user_, other->real_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInformation_descriptor_;
  metadata.reflection = UserInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionHeader::kUserInfoFieldNumber;
const int ConnectionHeader::kServiceNameFieldNumber;
const int ConnectionHeader::kCellBlockCodecClassFieldNumber;
const int ConnectionHeader::kCellBlockCompressorClassFieldNumber;
const int ConnectionHeader::kVersionInfoFieldNumber;
#endif  // !_MSC_VER

ConnectionHeader::ConnectionHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionHeader::InitAsDefaultInstance() {
  user_info_ = const_cast< ::hbase::pb::UserInformation*>(&::hbase::pb::UserInformation::default_instance());
  version_info_ = const_cast< ::hbase::pb::VersionInfo*>(&::hbase::pb::VersionInfo::default_instance());
}

ConnectionHeader::ConnectionHeader(const ConnectionHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionHeader::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_block_codec_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_block_compressor_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionHeader::~ConnectionHeader() {
  SharedDtor();
}

void ConnectionHeader::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (cell_block_codec_class_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_block_codec_class_;
  }
  if (cell_block_compressor_class_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_block_compressor_class_;
  }
  if (this != default_instance_) {
    delete user_info_;
    delete version_info_;
  }
}

void ConnectionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionHeader_descriptor_;
}

const ConnectionHeader& ConnectionHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPC_2eproto();
  return *default_instance_;
}

ConnectionHeader* ConnectionHeader::default_instance_ = NULL;

ConnectionHeader* ConnectionHeader::New() const {
  return new ConnectionHeader;
}

void ConnectionHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_cell_block_codec_class()) {
      if (cell_block_codec_class_ != &::google::protobuf::internal::kEmptyString) {
        cell_block_codec_class_->clear();
      }
    }
    if (has_cell_block_compressor_class()) {
      if (cell_block_compressor_class_ != &::google::protobuf::internal::kEmptyString) {
        cell_block_compressor_class_->clear();
      }
    }
    if (has_version_info()) {
      if (version_info_ != NULL) version_info_->::hbase::pb::VersionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }

      // optional string service_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_block_codec_class;
        break;
      }

      // optional string cell_block_codec_class = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_block_codec_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_block_codec_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cell_block_codec_class().data(), this->cell_block_codec_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cell_block_compressor_class;
        break;
      }

      // optional string cell_block_compressor_class = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_block_compressor_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_block_compressor_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cell_block_compressor_class().data(), this->cell_block_compressor_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version_info;
        break;
      }

      // optional .hbase.pb.VersionInfo version_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }

  // optional string cell_block_codec_class = 3;
  if (has_cell_block_codec_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell_block_codec_class().data(), this->cell_block_codec_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cell_block_codec_class(), output);
  }

  // optional string cell_block_compressor_class = 4;
  if (has_cell_block_compressor_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell_block_compressor_class().data(), this->cell_block_compressor_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cell_block_compressor_class(), output);
  }

  // optional .hbase.pb.VersionInfo version_info = 5;
  if (has_version_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->version_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.UserInformation user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // optional string cell_block_codec_class = 3;
  if (has_cell_block_codec_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell_block_codec_class().data(), this->cell_block_codec_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cell_block_codec_class(), target);
  }

  // optional string cell_block_compressor_class = 4;
  if (has_cell_block_compressor_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell_block_compressor_class().data(), this->cell_block_compressor_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cell_block_compressor_class(), target);
  }

  // optional .hbase.pb.VersionInfo version_info = 5;
  if (has_version_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->version_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.UserInformation user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional string cell_block_codec_class = 3;
    if (has_cell_block_codec_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell_block_codec_class());
    }

    // optional string cell_block_compressor_class = 4;
    if (has_cell_block_compressor_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell_block_compressor_class());
    }

    // optional .hbase.pb.VersionInfo version_info = 5;
    if (has_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionHeader::MergeFrom(const ConnectionHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_cell_block_codec_class()) {
      set_cell_block_codec_class(from.cell_block_codec_class());
    }
    if (from.has_cell_block_compressor_class()) {
      set_cell_block_compressor_class(from.cell_block_compressor_class());
    }
    if (from.has_version_info()) {
      mutable_version_info()->::hbase::pb::VersionInfo::MergeFrom(from.version_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionHeader::CopyFrom(const ConnectionHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionHeader::IsInitialized() const {

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_version_info()) {
    if (!this->version_info().IsInitialized()) return false;
  }
  return true;
}

void ConnectionHeader::Swap(ConnectionHeader* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(service_name_, other->service_name_);
    std::swap(cell_block_codec_class_, other->cell_block_codec_class_);
    std::swap(cell_block_compressor_class_, other->cell_block_compressor_class_);
    std::swap(version_info_, other->version_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionHeader_descriptor_;
  metadata.reflection = ConnectionHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellBlockMeta::kLengthFieldNumber;
#endif  // !_MSC_VER

CellBlockMeta::CellBlockMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellBlockMeta::InitAsDefaultInstance() {
}

CellBlockMeta::CellBlockMeta(const CellBlockMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellBlockMeta::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellBlockMeta::~CellBlockMeta() {
  SharedDtor();
}

void CellBlockMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellBlockMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellBlockMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellBlockMeta_descriptor_;
}

const CellBlockMeta& CellBlockMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPC_2eproto();
  return *default_instance_;
}

CellBlockMeta* CellBlockMeta::default_instance_ = NULL;

CellBlockMeta* CellBlockMeta::New() const {
  return new CellBlockMeta;
}

void CellBlockMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellBlockMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellBlockMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellBlockMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellBlockMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellBlockMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellBlockMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellBlockMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellBlockMeta::MergeFrom(const CellBlockMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellBlockMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellBlockMeta::CopyFrom(const CellBlockMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellBlockMeta::IsInitialized() const {

  return true;
}

void CellBlockMeta::Swap(CellBlockMeta* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellBlockMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellBlockMeta_descriptor_;
  metadata.reflection = CellBlockMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExceptionResponse::kExceptionClassNameFieldNumber;
const int ExceptionResponse::kStackTraceFieldNumber;
const int ExceptionResponse::kHostnameFieldNumber;
const int ExceptionResponse::kPortFieldNumber;
const int ExceptionResponse::kDoNotRetryFieldNumber;
#endif  // !_MSC_VER

ExceptionResponse::ExceptionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExceptionResponse::InitAsDefaultInstance() {
}

ExceptionResponse::ExceptionResponse(const ExceptionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExceptionResponse::SharedCtor() {
  _cached_size_ = 0;
  exception_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stack_trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  do_not_retry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExceptionResponse::~ExceptionResponse() {
  SharedDtor();
}

void ExceptionResponse::SharedDtor() {
  if (exception_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete exception_class_name_;
  }
  if (stack_trace_ != &::google::protobuf::internal::kEmptyString) {
    delete stack_trace_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void ExceptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExceptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExceptionResponse_descriptor_;
}

const ExceptionResponse& ExceptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPC_2eproto();
  return *default_instance_;
}

ExceptionResponse* ExceptionResponse::default_instance_ = NULL;

ExceptionResponse* ExceptionResponse::New() const {
  return new ExceptionResponse;
}

void ExceptionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_exception_class_name()) {
      if (exception_class_name_ != &::google::protobuf::internal::kEmptyString) {
        exception_class_name_->clear();
      }
    }
    if (has_stack_trace()) {
      if (stack_trace_ != &::google::protobuf::internal::kEmptyString) {
        stack_trace_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    port_ = 0;
    do_not_retry_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExceptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exception_class_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exception_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exception_class_name().data(), this->exception_class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stack_trace;
        break;
      }

      // optional string stack_trace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stack_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stack_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stack_trace().data(), this->stack_trace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hostname;
        break;
      }

      // optional string hostname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_do_not_retry;
        break;
      }

      // optional bool do_not_retry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_not_retry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_not_retry_)));
          set_has_do_not_retry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExceptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string exception_class_name = 1;
  if (has_exception_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exception_class_name().data(), this->exception_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->exception_class_name(), output);
  }

  // optional string stack_trace = 2;
  if (has_stack_trace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stack_trace().data(), this->stack_trace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stack_trace(), output);
  }

  // optional string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hostname(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional bool do_not_retry = 5;
  if (has_do_not_retry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->do_not_retry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExceptionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string exception_class_name = 1;
  if (has_exception_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exception_class_name().data(), this->exception_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exception_class_name(), target);
  }

  // optional string stack_trace = 2;
  if (has_stack_trace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stack_trace().data(), this->stack_trace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stack_trace(), target);
  }

  // optional string hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional bool do_not_retry = 5;
  if (has_do_not_retry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->do_not_retry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExceptionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string exception_class_name = 1;
    if (has_exception_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exception_class_name());
    }

    // optional string stack_trace = 2;
    if (has_stack_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stack_trace());
    }

    // optional string hostname = 3;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool do_not_retry = 5;
    if (has_do_not_retry()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExceptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExceptionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExceptionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExceptionResponse::MergeFrom(const ExceptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exception_class_name()) {
      set_exception_class_name(from.exception_class_name());
    }
    if (from.has_stack_trace()) {
      set_stack_trace(from.stack_trace());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_do_not_retry()) {
      set_do_not_retry(from.do_not_retry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExceptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExceptionResponse::CopyFrom(const ExceptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionResponse::IsInitialized() const {

  return true;
}

void ExceptionResponse::Swap(ExceptionResponse* other) {
  if (other != this) {
    std::swap(exception_class_name_, other->exception_class_name_);
    std::swap(stack_trace_, other->stack_trace_);
    std::swap(hostname_, other->hostname_);
    std::swap(port_, other->port_);
    std::swap(do_not_retry_, other->do_not_retry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExceptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExceptionResponse_descriptor_;
  metadata.reflection = ExceptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHeader::kCallIdFieldNumber;
const int RequestHeader::kTraceInfoFieldNumber;
const int RequestHeader::kMethodNameFieldNumber;
const int RequestHeader::kRequestParamFieldNumber;
const int RequestHeader::kCellBlockMetaFieldNumber;
const int RequestHeader::kPriorityFieldNumber;
#endif  // !_MSC_VER

RequestHeader::RequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestHeader::InitAsDefaultInstance() {
  trace_info_ = const_cast< ::hbase::pb::RPCTInfo*>(&::hbase::pb::RPCTInfo::default_instance());
  cell_block_meta_ = const_cast< ::hbase::pb::CellBlockMeta*>(&::hbase::pb::CellBlockMeta::default_instance());
}

RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestHeader::SharedCtor() {
  _cached_size_ = 0;
  call_id_ = 0u;
  trace_info_ = NULL;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_param_ = false;
  cell_block_meta_ = NULL;
  priority_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHeader::~RequestHeader() {
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (this != default_instance_) {
    delete trace_info_;
    delete cell_block_meta_;
  }
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeader_descriptor_;
}

const RequestHeader& RequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPC_2eproto();
  return *default_instance_;
}

RequestHeader* RequestHeader::default_instance_ = NULL;

RequestHeader* RequestHeader::New() const {
  return new RequestHeader;
}

void RequestHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    call_id_ = 0u;
    if (has_trace_info()) {
      if (trace_info_ != NULL) trace_info_->::hbase::pb::RPCTInfo::Clear();
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    request_param_ = false;
    if (has_cell_block_meta()) {
      if (cell_block_meta_ != NULL) cell_block_meta_->::hbase::pb::CellBlockMeta::Clear();
    }
    priority_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 call_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_id_)));
          set_has_call_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trace_info;
        break;
      }

      // optional .hbase.pb.RPCTInfo trace_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trace_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_method_name;
        break;
      }

      // optional string method_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_request_param;
        break;
      }

      // optional bool request_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_param_)));
          set_has_request_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell_block_meta;
        break;
      }

      // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_block_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_block_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 call_id = 1;
  if (has_call_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->call_id(), output);
  }

  // optional .hbase.pb.RPCTInfo trace_info = 2;
  if (has_trace_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trace_info(), output);
  }

  // optional string method_name = 3;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method_name(), output);
  }

  // optional bool request_param = 4;
  if (has_request_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->request_param(), output);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
  if (has_cell_block_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cell_block_meta(), output);
  }

  // optional uint32 priority = 6;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 call_id = 1;
  if (has_call_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->call_id(), target);
  }

  // optional .hbase.pb.RPCTInfo trace_info = 2;
  if (has_trace_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trace_info(), target);
  }

  // optional string method_name = 3;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // optional bool request_param = 4;
  if (has_request_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->request_param(), target);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
  if (has_cell_block_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cell_block_meta(), target);
  }

  // optional uint32 priority = 6;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 call_id = 1;
    if (has_call_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_id());
    }

    // optional .hbase.pb.RPCTInfo trace_info = 2;
    if (has_trace_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace_info());
    }

    // optional string method_name = 3;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional bool request_param = 4;
    if (has_request_param()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
    if (has_cell_block_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_block_meta());
    }

    // optional uint32 priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_id()) {
      set_call_id(from.call_id());
    }
    if (from.has_trace_info()) {
      mutable_trace_info()->::hbase::pb::RPCTInfo::MergeFrom(from.trace_info());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_request_param()) {
      set_request_param(from.request_param());
    }
    if (from.has_cell_block_meta()) {
      mutable_cell_block_meta()->::hbase::pb::CellBlockMeta::MergeFrom(from.cell_block_meta());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {

  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other != this) {
    std::swap(call_id_, other->call_id_);
    std::swap(trace_info_, other->trace_info_);
    std::swap(method_name_, other->method_name_);
    std::swap(request_param_, other->request_param_);
    std::swap(cell_block_meta_, other->cell_block_meta_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeader_descriptor_;
  metadata.reflection = RequestHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseHeader::kCallIdFieldNumber;
const int ResponseHeader::kExceptionFieldNumber;
const int ResponseHeader::kCellBlockMetaFieldNumber;
#endif  // !_MSC_VER

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseHeader::InitAsDefaultInstance() {
  exception_ = const_cast< ::hbase::pb::ExceptionResponse*>(&::hbase::pb::ExceptionResponse::default_instance());
  cell_block_meta_ = const_cast< ::hbase::pb::CellBlockMeta*>(&::hbase::pb::CellBlockMeta::default_instance());
}

ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseHeader::SharedCtor() {
  _cached_size_ = 0;
  call_id_ = 0u;
  exception_ = NULL;
  cell_block_meta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHeader::~ResponseHeader() {
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
    delete cell_block_meta_;
  }
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHeader_descriptor_;
}

const ResponseHeader& ResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RPC_2eproto();
  return *default_instance_;
}

ResponseHeader* ResponseHeader::default_instance_ = NULL;

ResponseHeader* ResponseHeader::New() const {
  return new ResponseHeader;
}

void ResponseHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    call_id_ = 0u;
    if (has_exception()) {
      if (exception_ != NULL) exception_->::hbase::pb::ExceptionResponse::Clear();
    }
    if (has_cell_block_meta()) {
      if (cell_block_meta_ != NULL) cell_block_meta_->::hbase::pb::CellBlockMeta::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 call_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_id_)));
          set_has_call_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .hbase.pb.ExceptionResponse exception = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_block_meta;
        break;
      }

      // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_block_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_block_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 call_id = 1;
  if (has_call_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->call_id(), output);
  }

  // optional .hbase.pb.ExceptionResponse exception = 2;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exception(), output);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
  if (has_cell_block_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_block_meta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 call_id = 1;
  if (has_call_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->call_id(), target);
  }

  // optional .hbase.pb.ExceptionResponse exception = 2;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exception(), target);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
  if (has_cell_block_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_block_meta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 call_id = 1;
    if (has_call_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_id());
    }

    // optional .hbase.pb.ExceptionResponse exception = 2;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception());
    }

    // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
    if (has_cell_block_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_block_meta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_id()) {
      set_call_id(from.call_id());
    }
    if (from.has_exception()) {
      mutable_exception()->::hbase::pb::ExceptionResponse::MergeFrom(from.exception());
    }
    if (from.has_cell_block_meta()) {
      mutable_cell_block_meta()->::hbase::pb::CellBlockMeta::MergeFrom(from.cell_block_meta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {

  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other != this) {
    std::swap(call_id_, other->call_id_);
    std::swap(exception_, other->exception_);
    std::swap(cell_block_meta_, other->cell_block_meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHeader_descriptor_;
  metadata.reflection = ResponseHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
