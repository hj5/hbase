// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authentication.proto

#ifndef PROTOBUF_Authentication_2eproto__INCLUDED
#define PROTOBUF_Authentication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Authentication_2eproto();
void protobuf_AssignDesc_Authentication_2eproto();
void protobuf_ShutdownFile_Authentication_2eproto();

class AuthenticationKey;
class TokenIdentifier;
class Token;
class GetAuthenticationTokenRequest;
class GetAuthenticationTokenResponse;
class WhoAmIRequest;
class WhoAmIResponse;

enum TokenIdentifier_Kind {
  TokenIdentifier_Kind_HBASE_AUTH_TOKEN = 0
};
bool TokenIdentifier_Kind_IsValid(int value);
const TokenIdentifier_Kind TokenIdentifier_Kind_Kind_MIN = TokenIdentifier_Kind_HBASE_AUTH_TOKEN;
const TokenIdentifier_Kind TokenIdentifier_Kind_Kind_MAX = TokenIdentifier_Kind_HBASE_AUTH_TOKEN;
const int TokenIdentifier_Kind_Kind_ARRAYSIZE = TokenIdentifier_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* TokenIdentifier_Kind_descriptor();
inline const ::std::string& TokenIdentifier_Kind_Name(TokenIdentifier_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    TokenIdentifier_Kind_descriptor(), value);
}
inline bool TokenIdentifier_Kind_Parse(
    const ::std::string& name, TokenIdentifier_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TokenIdentifier_Kind>(
    TokenIdentifier_Kind_descriptor(), name, value);
}
// ===================================================================

class AuthenticationKey : public ::google::protobuf::Message {
 public:
  AuthenticationKey();
  virtual ~AuthenticationKey();

  AuthenticationKey(const AuthenticationKey& from);

  inline AuthenticationKey& operator=(const AuthenticationKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticationKey& default_instance();

  void Swap(AuthenticationKey* other);

  // implements Message ----------------------------------------------

  AuthenticationKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticationKey& from);
  void MergeFrom(const AuthenticationKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int64 expiration_date = 2;
  inline bool has_expiration_date() const;
  inline void clear_expiration_date();
  static const int kExpirationDateFieldNumber = 2;
  inline ::google::protobuf::int64 expiration_date() const;
  inline void set_expiration_date(::google::protobuf::int64 value);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:hbase.pb.AuthenticationKey)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_expiration_date();
  inline void clear_has_expiration_date();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 expiration_date_;
  ::std::string* key_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static AuthenticationKey* default_instance_;
};
// -------------------------------------------------------------------

class TokenIdentifier : public ::google::protobuf::Message {
 public:
  TokenIdentifier();
  virtual ~TokenIdentifier();

  TokenIdentifier(const TokenIdentifier& from);

  inline TokenIdentifier& operator=(const TokenIdentifier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenIdentifier& default_instance();

  void Swap(TokenIdentifier* other);

  // implements Message ----------------------------------------------

  TokenIdentifier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TokenIdentifier& from);
  void MergeFrom(const TokenIdentifier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TokenIdentifier_Kind Kind;
  static const Kind HBASE_AUTH_TOKEN = TokenIdentifier_Kind_HBASE_AUTH_TOKEN;
  static inline bool Kind_IsValid(int value) {
    return TokenIdentifier_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    TokenIdentifier_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    TokenIdentifier_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    TokenIdentifier_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return TokenIdentifier_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return TokenIdentifier_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return TokenIdentifier_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.TokenIdentifier.Kind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::hbase::pb::TokenIdentifier_Kind kind() const;
  inline void set_kind(::hbase::pb::TokenIdentifier_Kind value);

  // required bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required int32 key_id = 3;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 3;
  inline ::google::protobuf::int32 key_id() const;
  inline void set_key_id(::google::protobuf::int32 value);

  // optional int64 issue_date = 4;
  inline bool has_issue_date() const;
  inline void clear_issue_date();
  static const int kIssueDateFieldNumber = 4;
  inline ::google::protobuf::int64 issue_date() const;
  inline void set_issue_date(::google::protobuf::int64 value);

  // optional int64 expiration_date = 5;
  inline bool has_expiration_date() const;
  inline void clear_expiration_date();
  static const int kExpirationDateFieldNumber = 5;
  inline ::google::protobuf::int64 expiration_date() const;
  inline void set_expiration_date(::google::protobuf::int64 value);

  // optional int64 sequence_number = 6;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 6;
  inline ::google::protobuf::int64 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.TokenIdentifier)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_key_id();
  inline void clear_has_key_id();
  inline void set_has_issue_date();
  inline void clear_has_issue_date();
  inline void set_has_expiration_date();
  inline void clear_has_expiration_date();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  int kind_;
  ::google::protobuf::int32 key_id_;
  ::google::protobuf::int64 issue_date_;
  ::google::protobuf::int64 expiration_date_;
  ::google::protobuf::int64 sequence_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static TokenIdentifier* default_instance_;
};
// -------------------------------------------------------------------

class Token : public ::google::protobuf::Message {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Token& default_instance();

  void Swap(Token* other);

  // implements Message ----------------------------------------------

  Token* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const void* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bytes service = 3;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 3;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const void* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  inline void set_allocated_service(::std::string* service);

  // @@protoc_insertion_point(class_scope:hbase.pb.Token)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_service();
  inline void clear_has_service();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* identifier_;
  ::std::string* password_;
  ::std::string* service_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static Token* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthenticationTokenRequest : public ::google::protobuf::Message {
 public:
  GetAuthenticationTokenRequest();
  virtual ~GetAuthenticationTokenRequest();

  GetAuthenticationTokenRequest(const GetAuthenticationTokenRequest& from);

  inline GetAuthenticationTokenRequest& operator=(const GetAuthenticationTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAuthenticationTokenRequest& default_instance();

  void Swap(GetAuthenticationTokenRequest* other);

  // implements Message ----------------------------------------------

  GetAuthenticationTokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAuthenticationTokenRequest& from);
  void MergeFrom(const GetAuthenticationTokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthenticationTokenRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static GetAuthenticationTokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAuthenticationTokenResponse : public ::google::protobuf::Message {
 public:
  GetAuthenticationTokenResponse();
  virtual ~GetAuthenticationTokenResponse();

  GetAuthenticationTokenResponse(const GetAuthenticationTokenResponse& from);

  inline GetAuthenticationTokenResponse& operator=(const GetAuthenticationTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAuthenticationTokenResponse& default_instance();

  void Swap(GetAuthenticationTokenResponse* other);

  // implements Message ----------------------------------------------

  GetAuthenticationTokenResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAuthenticationTokenResponse& from);
  void MergeFrom(const GetAuthenticationTokenResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hbase.pb.Token token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::hbase::pb::Token& token() const;
  inline ::hbase::pb::Token* mutable_token();
  inline ::hbase::pb::Token* release_token();
  inline void set_allocated_token(::hbase::pb::Token* token);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthenticationTokenResponse)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::Token* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static GetAuthenticationTokenResponse* default_instance_;
};
// -------------------------------------------------------------------

class WhoAmIRequest : public ::google::protobuf::Message {
 public:
  WhoAmIRequest();
  virtual ~WhoAmIRequest();

  WhoAmIRequest(const WhoAmIRequest& from);

  inline WhoAmIRequest& operator=(const WhoAmIRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhoAmIRequest& default_instance();

  void Swap(WhoAmIRequest* other);

  // implements Message ----------------------------------------------

  WhoAmIRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhoAmIRequest& from);
  void MergeFrom(const WhoAmIRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.WhoAmIRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static WhoAmIRequest* default_instance_;
};
// -------------------------------------------------------------------

class WhoAmIResponse : public ::google::protobuf::Message {
 public:
  WhoAmIResponse();
  virtual ~WhoAmIResponse();

  WhoAmIResponse(const WhoAmIResponse& from);

  inline WhoAmIResponse& operator=(const WhoAmIResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhoAmIResponse& default_instance();

  void Swap(WhoAmIResponse* other);

  // implements Message ----------------------------------------------

  WhoAmIResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhoAmIResponse& from);
  void MergeFrom(const WhoAmIResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string auth_method = 2;
  inline bool has_auth_method() const;
  inline void clear_auth_method();
  static const int kAuthMethodFieldNumber = 2;
  inline const ::std::string& auth_method() const;
  inline void set_auth_method(const ::std::string& value);
  inline void set_auth_method(const char* value);
  inline void set_auth_method(const char* value, size_t size);
  inline ::std::string* mutable_auth_method();
  inline ::std::string* release_auth_method();
  inline void set_allocated_auth_method(::std::string* auth_method);

  // @@protoc_insertion_point(class_scope:hbase.pb.WhoAmIResponse)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_auth_method();
  inline void clear_has_auth_method();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* auth_method_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Authentication_2eproto();
  friend void protobuf_AssignDesc_Authentication_2eproto();
  friend void protobuf_ShutdownFile_Authentication_2eproto();

  void InitAsDefaultInstance();
  static WhoAmIResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthenticationKey

// required int32 id = 1;
inline bool AuthenticationKey::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticationKey::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticationKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticationKey::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AuthenticationKey::id() const {
  return id_;
}
inline void AuthenticationKey::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int64 expiration_date = 2;
inline bool AuthenticationKey::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthenticationKey::set_has_expiration_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthenticationKey::clear_has_expiration_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthenticationKey::clear_expiration_date() {
  expiration_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiration_date();
}
inline ::google::protobuf::int64 AuthenticationKey::expiration_date() const {
  return expiration_date_;
}
inline void AuthenticationKey::set_expiration_date(::google::protobuf::int64 value) {
  set_has_expiration_date();
  expiration_date_ = value;
}

// required bytes key = 3;
inline bool AuthenticationKey::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthenticationKey::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthenticationKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthenticationKey::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AuthenticationKey::key() const {
  return *key_;
}
inline void AuthenticationKey::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AuthenticationKey::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AuthenticationKey::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthenticationKey::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* AuthenticationKey::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AuthenticationKey::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TokenIdentifier

// required .hbase.pb.TokenIdentifier.Kind kind = 1;
inline bool TokenIdentifier::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenIdentifier::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TokenIdentifier::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TokenIdentifier::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::hbase::pb::TokenIdentifier_Kind TokenIdentifier::kind() const {
  return static_cast< ::hbase::pb::TokenIdentifier_Kind >(kind_);
}
inline void TokenIdentifier::set_kind(::hbase::pb::TokenIdentifier_Kind value) {
  assert(::hbase::pb::TokenIdentifier_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
}

// required bytes username = 2;
inline bool TokenIdentifier::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TokenIdentifier::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TokenIdentifier::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TokenIdentifier::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& TokenIdentifier::username() const {
  return *username_;
}
inline void TokenIdentifier::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TokenIdentifier::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TokenIdentifier::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenIdentifier::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* TokenIdentifier::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenIdentifier::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 key_id = 3;
inline bool TokenIdentifier::has_key_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TokenIdentifier::set_has_key_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TokenIdentifier::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TokenIdentifier::clear_key_id() {
  key_id_ = 0;
  clear_has_key_id();
}
inline ::google::protobuf::int32 TokenIdentifier::key_id() const {
  return key_id_;
}
inline void TokenIdentifier::set_key_id(::google::protobuf::int32 value) {
  set_has_key_id();
  key_id_ = value;
}

// optional int64 issue_date = 4;
inline bool TokenIdentifier::has_issue_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TokenIdentifier::set_has_issue_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TokenIdentifier::clear_has_issue_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TokenIdentifier::clear_issue_date() {
  issue_date_ = GOOGLE_LONGLONG(0);
  clear_has_issue_date();
}
inline ::google::protobuf::int64 TokenIdentifier::issue_date() const {
  return issue_date_;
}
inline void TokenIdentifier::set_issue_date(::google::protobuf::int64 value) {
  set_has_issue_date();
  issue_date_ = value;
}

// optional int64 expiration_date = 5;
inline bool TokenIdentifier::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TokenIdentifier::set_has_expiration_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TokenIdentifier::clear_has_expiration_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TokenIdentifier::clear_expiration_date() {
  expiration_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiration_date();
}
inline ::google::protobuf::int64 TokenIdentifier::expiration_date() const {
  return expiration_date_;
}
inline void TokenIdentifier::set_expiration_date(::google::protobuf::int64 value) {
  set_has_expiration_date();
  expiration_date_ = value;
}

// optional int64 sequence_number = 6;
inline bool TokenIdentifier::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TokenIdentifier::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TokenIdentifier::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TokenIdentifier::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::int64 TokenIdentifier::sequence_number() const {
  return sequence_number_;
}
inline void TokenIdentifier::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// -------------------------------------------------------------------

// Token

// optional bytes identifier = 1;
inline bool Token::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Token::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Token::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Token::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& Token::identifier() const {
  return *identifier_;
}
inline void Token::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Token::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Token::set_identifier(const void* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* Token::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes password = 2;
inline bool Token::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Token::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Token::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Token::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Token::password() const {
  return *password_;
}
inline void Token::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Token::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Token::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Token::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes service = 3;
inline bool Token::has_service() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Token::set_has_service() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Token::clear_has_service() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Token::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& Token::service() const {
  return *service_;
}
inline void Token::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void Token::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void Token::set_service(const void* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Token::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* Token::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Token::set_allocated_service(::std::string* service) {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (service) {
    set_has_service();
    service_ = service;
  } else {
    clear_has_service();
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetAuthenticationTokenRequest

// -------------------------------------------------------------------

// GetAuthenticationTokenResponse

// optional .hbase.pb.Token token = 1;
inline bool GetAuthenticationTokenResponse::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthenticationTokenResponse::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAuthenticationTokenResponse::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAuthenticationTokenResponse::clear_token() {
  if (token_ != NULL) token_->::hbase::pb::Token::Clear();
  clear_has_token();
}
inline const ::hbase::pb::Token& GetAuthenticationTokenResponse::token() const {
  return token_ != NULL ? *token_ : *default_instance_->token_;
}
inline ::hbase::pb::Token* GetAuthenticationTokenResponse::mutable_token() {
  set_has_token();
  if (token_ == NULL) token_ = new ::hbase::pb::Token;
  return token_;
}
inline ::hbase::pb::Token* GetAuthenticationTokenResponse::release_token() {
  clear_has_token();
  ::hbase::pb::Token* temp = token_;
  token_ = NULL;
  return temp;
}
inline void GetAuthenticationTokenResponse::set_allocated_token(::hbase::pb::Token* token) {
  delete token_;
  token_ = token;
  if (token) {
    set_has_token();
  } else {
    clear_has_token();
  }
}

// -------------------------------------------------------------------

// WhoAmIRequest

// -------------------------------------------------------------------

// WhoAmIResponse

// optional string username = 1;
inline bool WhoAmIResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhoAmIResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhoAmIResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhoAmIResponse::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& WhoAmIResponse::username() const {
  return *username_;
}
inline void WhoAmIResponse::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void WhoAmIResponse::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void WhoAmIResponse::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhoAmIResponse::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* WhoAmIResponse::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WhoAmIResponse::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string auth_method = 2;
inline bool WhoAmIResponse::has_auth_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhoAmIResponse::set_has_auth_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhoAmIResponse::clear_has_auth_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhoAmIResponse::clear_auth_method() {
  if (auth_method_ != &::google::protobuf::internal::kEmptyString) {
    auth_method_->clear();
  }
  clear_has_auth_method();
}
inline const ::std::string& WhoAmIResponse::auth_method() const {
  return *auth_method_;
}
inline void WhoAmIResponse::set_auth_method(const ::std::string& value) {
  set_has_auth_method();
  if (auth_method_ == &::google::protobuf::internal::kEmptyString) {
    auth_method_ = new ::std::string;
  }
  auth_method_->assign(value);
}
inline void WhoAmIResponse::set_auth_method(const char* value) {
  set_has_auth_method();
  if (auth_method_ == &::google::protobuf::internal::kEmptyString) {
    auth_method_ = new ::std::string;
  }
  auth_method_->assign(value);
}
inline void WhoAmIResponse::set_auth_method(const char* value, size_t size) {
  set_has_auth_method();
  if (auth_method_ == &::google::protobuf::internal::kEmptyString) {
    auth_method_ = new ::std::string;
  }
  auth_method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WhoAmIResponse::mutable_auth_method() {
  set_has_auth_method();
  if (auth_method_ == &::google::protobuf::internal::kEmptyString) {
    auth_method_ = new ::std::string;
  }
  return auth_method_;
}
inline ::std::string* WhoAmIResponse::release_auth_method() {
  clear_has_auth_method();
  if (auth_method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_method_;
    auth_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WhoAmIResponse::set_allocated_auth_method(::std::string* auth_method) {
  if (auth_method_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_method_;
  }
  if (auth_method) {
    set_has_auth_method();
    auth_method_ = auth_method;
  } else {
    clear_has_auth_method();
    auth_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::TokenIdentifier_Kind>() {
  return ::hbase::pb::TokenIdentifier_Kind_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Authentication_2eproto__INCLUDED
