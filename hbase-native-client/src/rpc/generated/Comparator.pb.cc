// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Comparator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Comparator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* Comparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Comparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* ByteArrayComparable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ByteArrayComparable_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryComparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* LongComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LongComparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryPrefixComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryPrefixComparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitComparator_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BitComparator_BitwiseOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NullComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullComparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegexStringComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegexStringComparator_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubstringComparator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubstringComparator_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Comparator_2eproto() {
  protobuf_AddDesc_Comparator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Comparator.proto");
  GOOGLE_CHECK(file != NULL);
  Comparator_descriptor_ = file->message_type(0);
  static const int Comparator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comparator, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comparator, serialized_comparator_),
  };
  Comparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Comparator_descriptor_,
      Comparator::default_instance_,
      Comparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Comparator));
  ByteArrayComparable_descriptor_ = file->message_type(1);
  static const int ByteArrayComparable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteArrayComparable, value_),
  };
  ByteArrayComparable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ByteArrayComparable_descriptor_,
      ByteArrayComparable::default_instance_,
      ByteArrayComparable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteArrayComparable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteArrayComparable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ByteArrayComparable));
  BinaryComparator_descriptor_ = file->message_type(2);
  static const int BinaryComparator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryComparator, comparable_),
  };
  BinaryComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryComparator_descriptor_,
      BinaryComparator::default_instance_,
      BinaryComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryComparator));
  LongComparator_descriptor_ = file->message_type(3);
  static const int LongComparator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongComparator, comparable_),
  };
  LongComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LongComparator_descriptor_,
      LongComparator::default_instance_,
      LongComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LongComparator));
  BinaryPrefixComparator_descriptor_ = file->message_type(4);
  static const int BinaryPrefixComparator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPrefixComparator, comparable_),
  };
  BinaryPrefixComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryPrefixComparator_descriptor_,
      BinaryPrefixComparator::default_instance_,
      BinaryPrefixComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPrefixComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPrefixComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryPrefixComparator));
  BitComparator_descriptor_ = file->message_type(5);
  static const int BitComparator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitComparator, comparable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitComparator, bitwise_op_),
  };
  BitComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitComparator_descriptor_,
      BitComparator::default_instance_,
      BitComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitComparator));
  BitComparator_BitwiseOp_descriptor_ = BitComparator_descriptor_->enum_type(0);
  NullComparator_descriptor_ = file->message_type(6);
  static const int NullComparator_offsets_[1] = {
  };
  NullComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NullComparator_descriptor_,
      NullComparator::default_instance_,
      NullComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NullComparator));
  RegexStringComparator_descriptor_ = file->message_type(7);
  static const int RegexStringComparator_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegexStringComparator, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegexStringComparator, pattern_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegexStringComparator, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegexStringComparator, engine_),
  };
  RegexStringComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegexStringComparator_descriptor_,
      RegexStringComparator::default_instance_,
      RegexStringComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegexStringComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegexStringComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegexStringComparator));
  SubstringComparator_descriptor_ = file->message_type(8);
  static const int SubstringComparator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstringComparator, substr_),
  };
  SubstringComparator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubstringComparator_descriptor_,
      SubstringComparator::default_instance_,
      SubstringComparator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstringComparator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubstringComparator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubstringComparator));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Comparator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Comparator_descriptor_, &Comparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ByteArrayComparable_descriptor_, &ByteArrayComparable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryComparator_descriptor_, &BinaryComparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LongComparator_descriptor_, &LongComparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryPrefixComparator_descriptor_, &BinaryPrefixComparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitComparator_descriptor_, &BitComparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NullComparator_descriptor_, &NullComparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegexStringComparator_descriptor_, &RegexStringComparator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubstringComparator_descriptor_, &SubstringComparator::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Comparator_2eproto() {
  delete Comparator::default_instance_;
  delete Comparator_reflection_;
  delete ByteArrayComparable::default_instance_;
  delete ByteArrayComparable_reflection_;
  delete BinaryComparator::default_instance_;
  delete BinaryComparator_reflection_;
  delete LongComparator::default_instance_;
  delete LongComparator_reflection_;
  delete BinaryPrefixComparator::default_instance_;
  delete BinaryPrefixComparator_reflection_;
  delete BitComparator::default_instance_;
  delete BitComparator_reflection_;
  delete NullComparator::default_instance_;
  delete NullComparator_reflection_;
  delete RegexStringComparator::default_instance_;
  delete RegexStringComparator_reflection_;
  delete SubstringComparator::default_instance_;
  delete SubstringComparator_reflection_;
}

void protobuf_AddDesc_Comparator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Comparator.proto\022\010hbase.pb\"9\n\nComparat"
    "or\022\014\n\004name\030\001 \002(\t\022\035\n\025serialized_comparato"
    "r\030\002 \001(\014\"$\n\023ByteArrayComparable\022\r\n\005value\030"
    "\001 \001(\014\"E\n\020BinaryComparator\0221\n\ncomparable\030"
    "\001 \002(\0132\035.hbase.pb.ByteArrayComparable\"C\n\016"
    "LongComparator\0221\n\ncomparable\030\001 \002(\0132\035.hba"
    "se.pb.ByteArrayComparable\"K\n\026BinaryPrefi"
    "xComparator\0221\n\ncomparable\030\001 \002(\0132\035.hbase."
    "pb.ByteArrayComparable\"\240\001\n\rBitComparator"
    "\0221\n\ncomparable\030\001 \002(\0132\035.hbase.pb.ByteArra"
    "yComparable\0225\n\nbitwise_op\030\002 \002(\0162!.hbase."
    "pb.BitComparator.BitwiseOp\"%\n\tBitwiseOp\022"
    "\007\n\003AND\020\001\022\006\n\002OR\020\002\022\007\n\003XOR\020\003\"\020\n\016NullCompara"
    "tor\"`\n\025RegexStringComparator\022\017\n\007pattern\030"
    "\001 \002(\t\022\025\n\rpattern_flags\030\002 \002(\005\022\017\n\007charset\030"
    "\003 \002(\t\022\016\n\006engine\030\004 \001(\t\"%\n\023SubstringCompar"
    "ator\022\016\n\006substr\030\001 \002(\tBF\n*org.apache.hadoo"
    "p.hbase.protobuf.generatedB\020ComparatorPr"
    "otosH\001\210\001\001\240\001\001", 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Comparator.proto", &protobuf_RegisterTypes);
  Comparator::default_instance_ = new Comparator();
  ByteArrayComparable::default_instance_ = new ByteArrayComparable();
  BinaryComparator::default_instance_ = new BinaryComparator();
  LongComparator::default_instance_ = new LongComparator();
  BinaryPrefixComparator::default_instance_ = new BinaryPrefixComparator();
  BitComparator::default_instance_ = new BitComparator();
  NullComparator::default_instance_ = new NullComparator();
  RegexStringComparator::default_instance_ = new RegexStringComparator();
  SubstringComparator::default_instance_ = new SubstringComparator();
  Comparator::default_instance_->InitAsDefaultInstance();
  ByteArrayComparable::default_instance_->InitAsDefaultInstance();
  BinaryComparator::default_instance_->InitAsDefaultInstance();
  LongComparator::default_instance_->InitAsDefaultInstance();
  BinaryPrefixComparator::default_instance_->InitAsDefaultInstance();
  BitComparator::default_instance_->InitAsDefaultInstance();
  NullComparator::default_instance_->InitAsDefaultInstance();
  RegexStringComparator::default_instance_->InitAsDefaultInstance();
  SubstringComparator::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Comparator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Comparator_2eproto {
  StaticDescriptorInitializer_Comparator_2eproto() {
    protobuf_AddDesc_Comparator_2eproto();
  }
} static_descriptor_initializer_Comparator_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Comparator::kNameFieldNumber;
const int Comparator::kSerializedComparatorFieldNumber;
#endif  // !_MSC_VER

Comparator::Comparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Comparator::InitAsDefaultInstance() {
}

Comparator::Comparator(const Comparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Comparator::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_comparator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Comparator::~Comparator() {
  SharedDtor();
}

void Comparator::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (serialized_comparator_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_comparator_;
  }
  if (this != default_instance_) {
  }
}

void Comparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Comparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Comparator_descriptor_;
}

const Comparator& Comparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

Comparator* Comparator::default_instance_ = NULL;

Comparator* Comparator::New() const {
  return new Comparator;
}

void Comparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_serialized_comparator()) {
      if (serialized_comparator_ != &::google::protobuf::internal::kEmptyString) {
        serialized_comparator_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Comparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_comparator;
        break;
      }

      // optional bytes serialized_comparator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_comparator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_comparator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Comparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes serialized_comparator = 2;
  if (has_serialized_comparator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialized_comparator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Comparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes serialized_comparator = 2;
  if (has_serialized_comparator()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_comparator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Comparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes serialized_comparator = 2;
    if (has_serialized_comparator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_comparator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Comparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Comparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Comparator::MergeFrom(const Comparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_serialized_comparator()) {
      set_serialized_comparator(from.serialized_comparator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Comparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comparator::CopyFrom(const Comparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Comparator::Swap(Comparator* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(serialized_comparator_, other->serialized_comparator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Comparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Comparator_descriptor_;
  metadata.reflection = Comparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ByteArrayComparable::kValueFieldNumber;
#endif  // !_MSC_VER

ByteArrayComparable::ByteArrayComparable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ByteArrayComparable::InitAsDefaultInstance() {
}

ByteArrayComparable::ByteArrayComparable(const ByteArrayComparable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ByteArrayComparable::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ByteArrayComparable::~ByteArrayComparable() {
  SharedDtor();
}

void ByteArrayComparable::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ByteArrayComparable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ByteArrayComparable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ByteArrayComparable_descriptor_;
}

const ByteArrayComparable& ByteArrayComparable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

ByteArrayComparable* ByteArrayComparable::default_instance_ = NULL;

ByteArrayComparable* ByteArrayComparable::New() const {
  return new ByteArrayComparable;
}

void ByteArrayComparable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ByteArrayComparable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ByteArrayComparable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ByteArrayComparable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ByteArrayComparable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ByteArrayComparable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ByteArrayComparable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ByteArrayComparable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ByteArrayComparable::MergeFrom(const ByteArrayComparable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ByteArrayComparable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ByteArrayComparable::CopyFrom(const ByteArrayComparable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ByteArrayComparable::IsInitialized() const {

  return true;
}

void ByteArrayComparable::Swap(ByteArrayComparable* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ByteArrayComparable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ByteArrayComparable_descriptor_;
  metadata.reflection = ByteArrayComparable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryComparator::kComparableFieldNumber;
#endif  // !_MSC_VER

BinaryComparator::BinaryComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinaryComparator::InitAsDefaultInstance() {
  comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(&::hbase::pb::ByteArrayComparable::default_instance());
}

BinaryComparator::BinaryComparator(const BinaryComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinaryComparator::SharedCtor() {
  _cached_size_ = 0;
  comparable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryComparator::~BinaryComparator() {
  SharedDtor();
}

void BinaryComparator::SharedDtor() {
  if (this != default_instance_) {
    delete comparable_;
  }
}

void BinaryComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryComparator_descriptor_;
}

const BinaryComparator& BinaryComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

BinaryComparator* BinaryComparator::default_instance_ = NULL;

BinaryComparator* BinaryComparator::New() const {
  return new BinaryComparator;
}

void BinaryComparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comparable()) {
      if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comparable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comparable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryComparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ByteArrayComparable comparable = 1;
    if (has_comparable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comparable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryComparator::MergeFrom(const BinaryComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comparable()) {
      mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryComparator::CopyFrom(const BinaryComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BinaryComparator::Swap(BinaryComparator* other) {
  if (other != this) {
    std::swap(comparable_, other->comparable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryComparator_descriptor_;
  metadata.reflection = BinaryComparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LongComparator::kComparableFieldNumber;
#endif  // !_MSC_VER

LongComparator::LongComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LongComparator::InitAsDefaultInstance() {
  comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(&::hbase::pb::ByteArrayComparable::default_instance());
}

LongComparator::LongComparator(const LongComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LongComparator::SharedCtor() {
  _cached_size_ = 0;
  comparable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LongComparator::~LongComparator() {
  SharedDtor();
}

void LongComparator::SharedDtor() {
  if (this != default_instance_) {
    delete comparable_;
  }
}

void LongComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LongComparator_descriptor_;
}

const LongComparator& LongComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

LongComparator* LongComparator::default_instance_ = NULL;

LongComparator* LongComparator::New() const {
  return new LongComparator;
}

void LongComparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comparable()) {
      if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LongComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LongComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comparable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LongComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comparable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LongComparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ByteArrayComparable comparable = 1;
    if (has_comparable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comparable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LongComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LongComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LongComparator::MergeFrom(const LongComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comparable()) {
      mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LongComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongComparator::CopyFrom(const LongComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LongComparator::Swap(LongComparator* other) {
  if (other != this) {
    std::swap(comparable_, other->comparable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LongComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LongComparator_descriptor_;
  metadata.reflection = LongComparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryPrefixComparator::kComparableFieldNumber;
#endif  // !_MSC_VER

BinaryPrefixComparator::BinaryPrefixComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BinaryPrefixComparator::InitAsDefaultInstance() {
  comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(&::hbase::pb::ByteArrayComparable::default_instance());
}

BinaryPrefixComparator::BinaryPrefixComparator(const BinaryPrefixComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BinaryPrefixComparator::SharedCtor() {
  _cached_size_ = 0;
  comparable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryPrefixComparator::~BinaryPrefixComparator() {
  SharedDtor();
}

void BinaryPrefixComparator::SharedDtor() {
  if (this != default_instance_) {
    delete comparable_;
  }
}

void BinaryPrefixComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryPrefixComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryPrefixComparator_descriptor_;
}

const BinaryPrefixComparator& BinaryPrefixComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

BinaryPrefixComparator* BinaryPrefixComparator::default_instance_ = NULL;

BinaryPrefixComparator* BinaryPrefixComparator::New() const {
  return new BinaryPrefixComparator;
}

void BinaryPrefixComparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comparable()) {
      if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryPrefixComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BinaryPrefixComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comparable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BinaryPrefixComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comparable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BinaryPrefixComparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ByteArrayComparable comparable = 1;
    if (has_comparable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comparable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryPrefixComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryPrefixComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryPrefixComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryPrefixComparator::MergeFrom(const BinaryPrefixComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comparable()) {
      mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryPrefixComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryPrefixComparator::CopyFrom(const BinaryPrefixComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryPrefixComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BinaryPrefixComparator::Swap(BinaryPrefixComparator* other) {
  if (other != this) {
    std::swap(comparable_, other->comparable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryPrefixComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryPrefixComparator_descriptor_;
  metadata.reflection = BinaryPrefixComparator_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BitComparator_BitwiseOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitComparator_BitwiseOp_descriptor_;
}
bool BitComparator_BitwiseOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BitComparator_BitwiseOp BitComparator::AND;
const BitComparator_BitwiseOp BitComparator::OR;
const BitComparator_BitwiseOp BitComparator::XOR;
const BitComparator_BitwiseOp BitComparator::BitwiseOp_MIN;
const BitComparator_BitwiseOp BitComparator::BitwiseOp_MAX;
const int BitComparator::BitwiseOp_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BitComparator::kComparableFieldNumber;
const int BitComparator::kBitwiseOpFieldNumber;
#endif  // !_MSC_VER

BitComparator::BitComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitComparator::InitAsDefaultInstance() {
  comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(&::hbase::pb::ByteArrayComparable::default_instance());
}

BitComparator::BitComparator(const BitComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitComparator::SharedCtor() {
  _cached_size_ = 0;
  comparable_ = NULL;
  bitwise_op_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitComparator::~BitComparator() {
  SharedDtor();
}

void BitComparator::SharedDtor() {
  if (this != default_instance_) {
    delete comparable_;
  }
}

void BitComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitComparator_descriptor_;
}

const BitComparator& BitComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

BitComparator* BitComparator::default_instance_ = NULL;

BitComparator* BitComparator::New() const {
  return new BitComparator;
}

void BitComparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comparable()) {
      if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
    }
    bitwise_op_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bitwise_op;
        break;
      }

      // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitwise_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::BitComparator_BitwiseOp_IsValid(value)) {
            set_bitwise_op(static_cast< ::hbase::pb::BitComparator_BitwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comparable(), output);
  }

  // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
  if (has_bitwise_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bitwise_op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comparable(), target);
  }

  // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
  if (has_bitwise_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bitwise_op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitComparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ByteArrayComparable comparable = 1;
    if (has_comparable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comparable());
    }

    // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
    if (has_bitwise_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bitwise_op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitComparator::MergeFrom(const BitComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comparable()) {
      mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
    }
    if (from.has_bitwise_op()) {
      set_bitwise_op(from.bitwise_op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitComparator::CopyFrom(const BitComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BitComparator::Swap(BitComparator* other) {
  if (other != this) {
    std::swap(comparable_, other->comparable_);
    std::swap(bitwise_op_, other->bitwise_op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitComparator_descriptor_;
  metadata.reflection = BitComparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NullComparator::NullComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NullComparator::InitAsDefaultInstance() {
}

NullComparator::NullComparator(const NullComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NullComparator::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NullComparator::~NullComparator() {
  SharedDtor();
}

void NullComparator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NullComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullComparator_descriptor_;
}

const NullComparator& NullComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

NullComparator* NullComparator::default_instance_ = NULL;

NullComparator* NullComparator::New() const {
  return new NullComparator;
}

void NullComparator::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NullComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NullComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NullComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NullComparator::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NullComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NullComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NullComparator::MergeFrom(const NullComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NullComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullComparator::CopyFrom(const NullComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullComparator::IsInitialized() const {

  return true;
}

void NullComparator::Swap(NullComparator* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NullComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullComparator_descriptor_;
  metadata.reflection = NullComparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegexStringComparator::kPatternFieldNumber;
const int RegexStringComparator::kPatternFlagsFieldNumber;
const int RegexStringComparator::kCharsetFieldNumber;
const int RegexStringComparator::kEngineFieldNumber;
#endif  // !_MSC_VER

RegexStringComparator::RegexStringComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegexStringComparator::InitAsDefaultInstance() {
}

RegexStringComparator::RegexStringComparator(const RegexStringComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegexStringComparator::SharedCtor() {
  _cached_size_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pattern_flags_ = 0;
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegexStringComparator::~RegexStringComparator() {
  SharedDtor();
}

void RegexStringComparator::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_;
  }
  if (charset_ != &::google::protobuf::internal::kEmptyString) {
    delete charset_;
  }
  if (engine_ != &::google::protobuf::internal::kEmptyString) {
    delete engine_;
  }
  if (this != default_instance_) {
  }
}

void RegexStringComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegexStringComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegexStringComparator_descriptor_;
}

const RegexStringComparator& RegexStringComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

RegexStringComparator* RegexStringComparator::default_instance_ = NULL;

RegexStringComparator* RegexStringComparator::New() const {
  return new RegexStringComparator;
}

void RegexStringComparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::kEmptyString) {
        pattern_->clear();
      }
    }
    pattern_flags_ = 0;
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::kEmptyString) {
        charset_->clear();
      }
    }
    if (has_engine()) {
      if (engine_ != &::google::protobuf::internal::kEmptyString) {
        engine_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegexStringComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pattern = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pattern_flags;
        break;
      }

      // required int32 pattern_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pattern_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pattern_flags_)));
          set_has_pattern_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charset;
        break;
      }

      // required string charset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_engine;
        break;
      }

      // optional string engine = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_engine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->engine().data(), this->engine().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegexStringComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pattern(), output);
  }

  // required int32 pattern_flags = 2;
  if (has_pattern_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pattern_flags(), output);
  }

  // required string charset = 3;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charset(), output);
  }

  // optional string engine = 4;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->engine().data(), this->engine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->engine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegexStringComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // required int32 pattern_flags = 2;
  if (has_pattern_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pattern_flags(), target);
  }

  // required string charset = 3;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charset(), target);
  }

  // optional string engine = 4;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->engine().data(), this->engine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->engine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegexStringComparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // required int32 pattern_flags = 2;
    if (has_pattern_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pattern_flags());
    }

    // required string charset = 3;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional string engine = 4;
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegexStringComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegexStringComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegexStringComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegexStringComparator::MergeFrom(const RegexStringComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_pattern_flags()) {
      set_pattern_flags(from.pattern_flags());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegexStringComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegexStringComparator::CopyFrom(const RegexStringComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegexStringComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegexStringComparator::Swap(RegexStringComparator* other) {
  if (other != this) {
    std::swap(pattern_, other->pattern_);
    std::swap(pattern_flags_, other->pattern_flags_);
    std::swap(charset_, other->charset_);
    std::swap(engine_, other->engine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegexStringComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegexStringComparator_descriptor_;
  metadata.reflection = RegexStringComparator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubstringComparator::kSubstrFieldNumber;
#endif  // !_MSC_VER

SubstringComparator::SubstringComparator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubstringComparator::InitAsDefaultInstance() {
}

SubstringComparator::SubstringComparator(const SubstringComparator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubstringComparator::SharedCtor() {
  _cached_size_ = 0;
  substr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubstringComparator::~SubstringComparator() {
  SharedDtor();
}

void SubstringComparator::SharedDtor() {
  if (substr_ != &::google::protobuf::internal::kEmptyString) {
    delete substr_;
  }
  if (this != default_instance_) {
  }
}

void SubstringComparator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubstringComparator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubstringComparator_descriptor_;
}

const SubstringComparator& SubstringComparator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Comparator_2eproto();
  return *default_instance_;
}

SubstringComparator* SubstringComparator::default_instance_ = NULL;

SubstringComparator* SubstringComparator::New() const {
  return new SubstringComparator;
}

void SubstringComparator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_substr()) {
      if (substr_ != &::google::protobuf::internal::kEmptyString) {
        substr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubstringComparator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string substr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->substr().data(), this->substr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubstringComparator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string substr = 1;
  if (has_substr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substr().data(), this->substr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->substr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubstringComparator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string substr = 1;
  if (has_substr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substr().data(), this->substr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->substr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubstringComparator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string substr = 1;
    if (has_substr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->substr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubstringComparator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubstringComparator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubstringComparator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubstringComparator::MergeFrom(const SubstringComparator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_substr()) {
      set_substr(from.substr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubstringComparator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstringComparator::CopyFrom(const SubstringComparator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstringComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubstringComparator::Swap(SubstringComparator* other) {
  if (other != this) {
    std::swap(substr_, other->substr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubstringComparator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubstringComparator_descriptor_;
  metadata.reflection = SubstringComparator_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
