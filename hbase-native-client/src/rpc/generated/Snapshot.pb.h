// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snapshot.proto

#ifndef PROTOBUF_Snapshot_2eproto__INCLUDED
#define PROTOBUF_Snapshot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "FS.pb.h"
#include "HBase.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Snapshot_2eproto();
void protobuf_AssignDesc_Snapshot_2eproto();
void protobuf_ShutdownFile_Snapshot_2eproto();

class SnapshotFileInfo;
class SnapshotRegionManifest;
class SnapshotRegionManifest_StoreFile;
class SnapshotRegionManifest_FamilyFiles;
class SnapshotDataManifest;

enum SnapshotFileInfo_Type {
  SnapshotFileInfo_Type_HFILE = 1,
  SnapshotFileInfo_Type_WAL = 2
};
bool SnapshotFileInfo_Type_IsValid(int value);
const SnapshotFileInfo_Type SnapshotFileInfo_Type_Type_MIN = SnapshotFileInfo_Type_HFILE;
const SnapshotFileInfo_Type SnapshotFileInfo_Type_Type_MAX = SnapshotFileInfo_Type_WAL;
const int SnapshotFileInfo_Type_Type_ARRAYSIZE = SnapshotFileInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SnapshotFileInfo_Type_descriptor();
inline const ::std::string& SnapshotFileInfo_Type_Name(SnapshotFileInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SnapshotFileInfo_Type_descriptor(), value);
}
inline bool SnapshotFileInfo_Type_Parse(
    const ::std::string& name, SnapshotFileInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SnapshotFileInfo_Type>(
    SnapshotFileInfo_Type_descriptor(), name, value);
}
// ===================================================================

class SnapshotFileInfo : public ::google::protobuf::Message {
 public:
  SnapshotFileInfo();
  virtual ~SnapshotFileInfo();

  SnapshotFileInfo(const SnapshotFileInfo& from);

  inline SnapshotFileInfo& operator=(const SnapshotFileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotFileInfo& default_instance();

  void Swap(SnapshotFileInfo* other);

  // implements Message ----------------------------------------------

  SnapshotFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotFileInfo& from);
  void MergeFrom(const SnapshotFileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SnapshotFileInfo_Type Type;
  static const Type HFILE = SnapshotFileInfo_Type_HFILE;
  static const Type WAL = SnapshotFileInfo_Type_WAL;
  static inline bool Type_IsValid(int value) {
    return SnapshotFileInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SnapshotFileInfo_Type_Type_MIN;
  static const Type Type_MAX =
    SnapshotFileInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SnapshotFileInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SnapshotFileInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SnapshotFileInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SnapshotFileInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::hbase::pb::SnapshotFileInfo_Type type() const;
  inline void set_type(::hbase::pb::SnapshotFileInfo_Type value);

  // optional string hfile = 3;
  inline bool has_hfile() const;
  inline void clear_hfile();
  static const int kHfileFieldNumber = 3;
  inline const ::std::string& hfile() const;
  inline void set_hfile(const ::std::string& value);
  inline void set_hfile(const char* value);
  inline void set_hfile(const char* value, size_t size);
  inline ::std::string* mutable_hfile();
  inline ::std::string* release_hfile();
  inline void set_allocated_hfile(::std::string* hfile);

  // optional string wal_server = 4;
  inline bool has_wal_server() const;
  inline void clear_wal_server();
  static const int kWalServerFieldNumber = 4;
  inline const ::std::string& wal_server() const;
  inline void set_wal_server(const ::std::string& value);
  inline void set_wal_server(const char* value);
  inline void set_wal_server(const char* value, size_t size);
  inline ::std::string* mutable_wal_server();
  inline ::std::string* release_wal_server();
  inline void set_allocated_wal_server(::std::string* wal_server);

  // optional string wal_name = 5;
  inline bool has_wal_name() const;
  inline void clear_wal_name();
  static const int kWalNameFieldNumber = 5;
  inline const ::std::string& wal_name() const;
  inline void set_wal_name(const ::std::string& value);
  inline void set_wal_name(const char* value);
  inline void set_wal_name(const char* value, size_t size);
  inline ::std::string* mutable_wal_name();
  inline ::std::string* release_wal_name();
  inline void set_allocated_wal_name(::std::string* wal_name);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotFileInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hfile();
  inline void clear_has_hfile();
  inline void set_has_wal_server();
  inline void clear_has_wal_server();
  inline void set_has_wal_name();
  inline void clear_has_wal_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* hfile_;
  ::std::string* wal_server_;
  ::std::string* wal_name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Snapshot_2eproto();
  friend void protobuf_AssignDesc_Snapshot_2eproto();
  friend void protobuf_ShutdownFile_Snapshot_2eproto();

  void InitAsDefaultInstance();
  static SnapshotFileInfo* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotRegionManifest_StoreFile : public ::google::protobuf::Message {
 public:
  SnapshotRegionManifest_StoreFile();
  virtual ~SnapshotRegionManifest_StoreFile();

  SnapshotRegionManifest_StoreFile(const SnapshotRegionManifest_StoreFile& from);

  inline SnapshotRegionManifest_StoreFile& operator=(const SnapshotRegionManifest_StoreFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotRegionManifest_StoreFile& default_instance();

  void Swap(SnapshotRegionManifest_StoreFile* other);

  // implements Message ----------------------------------------------

  SnapshotRegionManifest_StoreFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotRegionManifest_StoreFile& from);
  void MergeFrom(const SnapshotRegionManifest_StoreFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .hbase.pb.Reference reference = 2;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 2;
  inline const ::hbase::pb::Reference& reference() const;
  inline ::hbase::pb::Reference* mutable_reference();
  inline ::hbase::pb::Reference* release_reference();
  inline void set_allocated_reference(::hbase::pb::Reference* reference);

  // optional uint64 file_size = 3;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotRegionManifest.StoreFile)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_file_size();
  inline void clear_has_file_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::hbase::pb::Reference* reference_;
  ::google::protobuf::uint64 file_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Snapshot_2eproto();
  friend void protobuf_AssignDesc_Snapshot_2eproto();
  friend void protobuf_ShutdownFile_Snapshot_2eproto();

  void InitAsDefaultInstance();
  static SnapshotRegionManifest_StoreFile* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotRegionManifest_FamilyFiles : public ::google::protobuf::Message {
 public:
  SnapshotRegionManifest_FamilyFiles();
  virtual ~SnapshotRegionManifest_FamilyFiles();

  SnapshotRegionManifest_FamilyFiles(const SnapshotRegionManifest_FamilyFiles& from);

  inline SnapshotRegionManifest_FamilyFiles& operator=(const SnapshotRegionManifest_FamilyFiles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotRegionManifest_FamilyFiles& default_instance();

  void Swap(SnapshotRegionManifest_FamilyFiles* other);

  // implements Message ----------------------------------------------

  SnapshotRegionManifest_FamilyFiles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotRegionManifest_FamilyFiles& from);
  void MergeFrom(const SnapshotRegionManifest_FamilyFiles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes family_name = 1;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 1;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const void* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  inline int store_files_size() const;
  inline void clear_store_files();
  static const int kStoreFilesFieldNumber = 2;
  inline const ::hbase::pb::SnapshotRegionManifest_StoreFile& store_files(int index) const;
  inline ::hbase::pb::SnapshotRegionManifest_StoreFile* mutable_store_files(int index);
  inline ::hbase::pb::SnapshotRegionManifest_StoreFile* add_store_files();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >&
      store_files() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >*
      mutable_store_files();

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotRegionManifest.FamilyFiles)
 private:
  inline void set_has_family_name();
  inline void clear_has_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* family_name_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile > store_files_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Snapshot_2eproto();
  friend void protobuf_AssignDesc_Snapshot_2eproto();
  friend void protobuf_ShutdownFile_Snapshot_2eproto();

  void InitAsDefaultInstance();
  static SnapshotRegionManifest_FamilyFiles* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotRegionManifest : public ::google::protobuf::Message {
 public:
  SnapshotRegionManifest();
  virtual ~SnapshotRegionManifest();

  SnapshotRegionManifest(const SnapshotRegionManifest& from);

  inline SnapshotRegionManifest& operator=(const SnapshotRegionManifest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotRegionManifest& default_instance();

  void Swap(SnapshotRegionManifest* other);

  // implements Message ----------------------------------------------

  SnapshotRegionManifest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotRegionManifest& from);
  void MergeFrom(const SnapshotRegionManifest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SnapshotRegionManifest_StoreFile StoreFile;
  typedef SnapshotRegionManifest_FamilyFiles FamilyFiles;

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required .hbase.pb.RegionInfo region_info = 2;
  inline bool has_region_info() const;
  inline void clear_region_info();
  static const int kRegionInfoFieldNumber = 2;
  inline const ::hbase::pb::RegionInfo& region_info() const;
  inline ::hbase::pb::RegionInfo* mutable_region_info();
  inline ::hbase::pb::RegionInfo* release_region_info();
  inline void set_allocated_region_info(::hbase::pb::RegionInfo* region_info);

  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  inline int family_files_size() const;
  inline void clear_family_files();
  static const int kFamilyFilesFieldNumber = 3;
  inline const ::hbase::pb::SnapshotRegionManifest_FamilyFiles& family_files(int index) const;
  inline ::hbase::pb::SnapshotRegionManifest_FamilyFiles* mutable_family_files(int index);
  inline ::hbase::pb::SnapshotRegionManifest_FamilyFiles* add_family_files();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >&
      family_files() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >*
      mutable_family_files();

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotRegionManifest)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_region_info();
  inline void clear_has_region_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RegionInfo* region_info_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles > family_files_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Snapshot_2eproto();
  friend void protobuf_AssignDesc_Snapshot_2eproto();
  friend void protobuf_ShutdownFile_Snapshot_2eproto();

  void InitAsDefaultInstance();
  static SnapshotRegionManifest* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotDataManifest : public ::google::protobuf::Message {
 public:
  SnapshotDataManifest();
  virtual ~SnapshotDataManifest();

  SnapshotDataManifest(const SnapshotDataManifest& from);

  inline SnapshotDataManifest& operator=(const SnapshotDataManifest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotDataManifest& default_instance();

  void Swap(SnapshotDataManifest* other);

  // implements Message ----------------------------------------------

  SnapshotDataManifest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotDataManifest& from);
  void MergeFrom(const SnapshotDataManifest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.TableSchema table_schema = 1;
  inline bool has_table_schema() const;
  inline void clear_table_schema();
  static const int kTableSchemaFieldNumber = 1;
  inline const ::hbase::pb::TableSchema& table_schema() const;
  inline ::hbase::pb::TableSchema* mutable_table_schema();
  inline ::hbase::pb::TableSchema* release_table_schema();
  inline void set_allocated_table_schema(::hbase::pb::TableSchema* table_schema);

  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  inline int region_manifests_size() const;
  inline void clear_region_manifests();
  static const int kRegionManifestsFieldNumber = 2;
  inline const ::hbase::pb::SnapshotRegionManifest& region_manifests(int index) const;
  inline ::hbase::pb::SnapshotRegionManifest* mutable_region_manifests(int index);
  inline ::hbase::pb::SnapshotRegionManifest* add_region_manifests();
  inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >&
      region_manifests() const;
  inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >*
      mutable_region_manifests();

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotDataManifest)
 private:
  inline void set_has_table_schema();
  inline void clear_has_table_schema();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::TableSchema* table_schema_;
  ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest > region_manifests_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Snapshot_2eproto();
  friend void protobuf_AssignDesc_Snapshot_2eproto();
  friend void protobuf_ShutdownFile_Snapshot_2eproto();

  void InitAsDefaultInstance();
  static SnapshotDataManifest* default_instance_;
};
// ===================================================================


// ===================================================================

// SnapshotFileInfo

// required .hbase.pb.SnapshotFileInfo.Type type = 1;
inline bool SnapshotFileInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotFileInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotFileInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotFileInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::hbase::pb::SnapshotFileInfo_Type SnapshotFileInfo::type() const {
  return static_cast< ::hbase::pb::SnapshotFileInfo_Type >(type_);
}
inline void SnapshotFileInfo::set_type(::hbase::pb::SnapshotFileInfo_Type value) {
  assert(::hbase::pb::SnapshotFileInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string hfile = 3;
inline bool SnapshotFileInfo::has_hfile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotFileInfo::set_has_hfile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotFileInfo::clear_has_hfile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotFileInfo::clear_hfile() {
  if (hfile_ != &::google::protobuf::internal::kEmptyString) {
    hfile_->clear();
  }
  clear_has_hfile();
}
inline const ::std::string& SnapshotFileInfo::hfile() const {
  return *hfile_;
}
inline void SnapshotFileInfo::set_hfile(const ::std::string& value) {
  set_has_hfile();
  if (hfile_ == &::google::protobuf::internal::kEmptyString) {
    hfile_ = new ::std::string;
  }
  hfile_->assign(value);
}
inline void SnapshotFileInfo::set_hfile(const char* value) {
  set_has_hfile();
  if (hfile_ == &::google::protobuf::internal::kEmptyString) {
    hfile_ = new ::std::string;
  }
  hfile_->assign(value);
}
inline void SnapshotFileInfo::set_hfile(const char* value, size_t size) {
  set_has_hfile();
  if (hfile_ == &::google::protobuf::internal::kEmptyString) {
    hfile_ = new ::std::string;
  }
  hfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotFileInfo::mutable_hfile() {
  set_has_hfile();
  if (hfile_ == &::google::protobuf::internal::kEmptyString) {
    hfile_ = new ::std::string;
  }
  return hfile_;
}
inline ::std::string* SnapshotFileInfo::release_hfile() {
  clear_has_hfile();
  if (hfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hfile_;
    hfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SnapshotFileInfo::set_allocated_hfile(::std::string* hfile) {
  if (hfile_ != &::google::protobuf::internal::kEmptyString) {
    delete hfile_;
  }
  if (hfile) {
    set_has_hfile();
    hfile_ = hfile;
  } else {
    clear_has_hfile();
    hfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wal_server = 4;
inline bool SnapshotFileInfo::has_wal_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnapshotFileInfo::set_has_wal_server() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnapshotFileInfo::clear_has_wal_server() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnapshotFileInfo::clear_wal_server() {
  if (wal_server_ != &::google::protobuf::internal::kEmptyString) {
    wal_server_->clear();
  }
  clear_has_wal_server();
}
inline const ::std::string& SnapshotFileInfo::wal_server() const {
  return *wal_server_;
}
inline void SnapshotFileInfo::set_wal_server(const ::std::string& value) {
  set_has_wal_server();
  if (wal_server_ == &::google::protobuf::internal::kEmptyString) {
    wal_server_ = new ::std::string;
  }
  wal_server_->assign(value);
}
inline void SnapshotFileInfo::set_wal_server(const char* value) {
  set_has_wal_server();
  if (wal_server_ == &::google::protobuf::internal::kEmptyString) {
    wal_server_ = new ::std::string;
  }
  wal_server_->assign(value);
}
inline void SnapshotFileInfo::set_wal_server(const char* value, size_t size) {
  set_has_wal_server();
  if (wal_server_ == &::google::protobuf::internal::kEmptyString) {
    wal_server_ = new ::std::string;
  }
  wal_server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotFileInfo::mutable_wal_server() {
  set_has_wal_server();
  if (wal_server_ == &::google::protobuf::internal::kEmptyString) {
    wal_server_ = new ::std::string;
  }
  return wal_server_;
}
inline ::std::string* SnapshotFileInfo::release_wal_server() {
  clear_has_wal_server();
  if (wal_server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wal_server_;
    wal_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SnapshotFileInfo::set_allocated_wal_server(::std::string* wal_server) {
  if (wal_server_ != &::google::protobuf::internal::kEmptyString) {
    delete wal_server_;
  }
  if (wal_server) {
    set_has_wal_server();
    wal_server_ = wal_server;
  } else {
    clear_has_wal_server();
    wal_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wal_name = 5;
inline bool SnapshotFileInfo::has_wal_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnapshotFileInfo::set_has_wal_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnapshotFileInfo::clear_has_wal_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnapshotFileInfo::clear_wal_name() {
  if (wal_name_ != &::google::protobuf::internal::kEmptyString) {
    wal_name_->clear();
  }
  clear_has_wal_name();
}
inline const ::std::string& SnapshotFileInfo::wal_name() const {
  return *wal_name_;
}
inline void SnapshotFileInfo::set_wal_name(const ::std::string& value) {
  set_has_wal_name();
  if (wal_name_ == &::google::protobuf::internal::kEmptyString) {
    wal_name_ = new ::std::string;
  }
  wal_name_->assign(value);
}
inline void SnapshotFileInfo::set_wal_name(const char* value) {
  set_has_wal_name();
  if (wal_name_ == &::google::protobuf::internal::kEmptyString) {
    wal_name_ = new ::std::string;
  }
  wal_name_->assign(value);
}
inline void SnapshotFileInfo::set_wal_name(const char* value, size_t size) {
  set_has_wal_name();
  if (wal_name_ == &::google::protobuf::internal::kEmptyString) {
    wal_name_ = new ::std::string;
  }
  wal_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotFileInfo::mutable_wal_name() {
  set_has_wal_name();
  if (wal_name_ == &::google::protobuf::internal::kEmptyString) {
    wal_name_ = new ::std::string;
  }
  return wal_name_;
}
inline ::std::string* SnapshotFileInfo::release_wal_name() {
  clear_has_wal_name();
  if (wal_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wal_name_;
    wal_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SnapshotFileInfo::set_allocated_wal_name(::std::string* wal_name) {
  if (wal_name_ != &::google::protobuf::internal::kEmptyString) {
    delete wal_name_;
  }
  if (wal_name) {
    set_has_wal_name();
    wal_name_ = wal_name;
  } else {
    clear_has_wal_name();
    wal_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SnapshotRegionManifest_StoreFile

// required string name = 1;
inline bool SnapshotRegionManifest_StoreFile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRegionManifest_StoreFile::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotRegionManifest_StoreFile::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotRegionManifest_StoreFile::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SnapshotRegionManifest_StoreFile::name() const {
  return *name_;
}
inline void SnapshotRegionManifest_StoreFile::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SnapshotRegionManifest_StoreFile::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SnapshotRegionManifest_StoreFile::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotRegionManifest_StoreFile::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SnapshotRegionManifest_StoreFile::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SnapshotRegionManifest_StoreFile::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .hbase.pb.Reference reference = 2;
inline bool SnapshotRegionManifest_StoreFile::has_reference() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotRegionManifest_StoreFile::set_has_reference() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotRegionManifest_StoreFile::clear_has_reference() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotRegionManifest_StoreFile::clear_reference() {
  if (reference_ != NULL) reference_->::hbase::pb::Reference::Clear();
  clear_has_reference();
}
inline const ::hbase::pb::Reference& SnapshotRegionManifest_StoreFile::reference() const {
  return reference_ != NULL ? *reference_ : *default_instance_->reference_;
}
inline ::hbase::pb::Reference* SnapshotRegionManifest_StoreFile::mutable_reference() {
  set_has_reference();
  if (reference_ == NULL) reference_ = new ::hbase::pb::Reference;
  return reference_;
}
inline ::hbase::pb::Reference* SnapshotRegionManifest_StoreFile::release_reference() {
  clear_has_reference();
  ::hbase::pb::Reference* temp = reference_;
  reference_ = NULL;
  return temp;
}
inline void SnapshotRegionManifest_StoreFile::set_allocated_reference(::hbase::pb::Reference* reference) {
  delete reference_;
  reference_ = reference;
  if (reference) {
    set_has_reference();
  } else {
    clear_has_reference();
  }
}

// optional uint64 file_size = 3;
inline bool SnapshotRegionManifest_StoreFile::has_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnapshotRegionManifest_StoreFile::set_has_file_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnapshotRegionManifest_StoreFile::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnapshotRegionManifest_StoreFile::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 SnapshotRegionManifest_StoreFile::file_size() const {
  return file_size_;
}
inline void SnapshotRegionManifest_StoreFile::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// -------------------------------------------------------------------

// SnapshotRegionManifest_FamilyFiles

// required bytes family_name = 1;
inline bool SnapshotRegionManifest_FamilyFiles::has_family_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRegionManifest_FamilyFiles::set_has_family_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotRegionManifest_FamilyFiles::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotRegionManifest_FamilyFiles::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& SnapshotRegionManifest_FamilyFiles::family_name() const {
  return *family_name_;
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(const void* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SnapshotRegionManifest_FamilyFiles::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* SnapshotRegionManifest_FamilyFiles::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SnapshotRegionManifest_FamilyFiles::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
inline int SnapshotRegionManifest_FamilyFiles::store_files_size() const {
  return store_files_.size();
}
inline void SnapshotRegionManifest_FamilyFiles::clear_store_files() {
  store_files_.Clear();
}
inline const ::hbase::pb::SnapshotRegionManifest_StoreFile& SnapshotRegionManifest_FamilyFiles::store_files(int index) const {
  return store_files_.Get(index);
}
inline ::hbase::pb::SnapshotRegionManifest_StoreFile* SnapshotRegionManifest_FamilyFiles::mutable_store_files(int index) {
  return store_files_.Mutable(index);
}
inline ::hbase::pb::SnapshotRegionManifest_StoreFile* SnapshotRegionManifest_FamilyFiles::add_store_files() {
  return store_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >&
SnapshotRegionManifest_FamilyFiles::store_files() const {
  return store_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >*
SnapshotRegionManifest_FamilyFiles::mutable_store_files() {
  return &store_files_;
}

// -------------------------------------------------------------------

// SnapshotRegionManifest

// optional int32 version = 1;
inline bool SnapshotRegionManifest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRegionManifest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotRegionManifest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotRegionManifest::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 SnapshotRegionManifest::version() const {
  return version_;
}
inline void SnapshotRegionManifest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required .hbase.pb.RegionInfo region_info = 2;
inline bool SnapshotRegionManifest::has_region_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotRegionManifest::set_has_region_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotRegionManifest::clear_has_region_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotRegionManifest::clear_region_info() {
  if (region_info_ != NULL) region_info_->::hbase::pb::RegionInfo::Clear();
  clear_has_region_info();
}
inline const ::hbase::pb::RegionInfo& SnapshotRegionManifest::region_info() const {
  return region_info_ != NULL ? *region_info_ : *default_instance_->region_info_;
}
inline ::hbase::pb::RegionInfo* SnapshotRegionManifest::mutable_region_info() {
  set_has_region_info();
  if (region_info_ == NULL) region_info_ = new ::hbase::pb::RegionInfo;
  return region_info_;
}
inline ::hbase::pb::RegionInfo* SnapshotRegionManifest::release_region_info() {
  clear_has_region_info();
  ::hbase::pb::RegionInfo* temp = region_info_;
  region_info_ = NULL;
  return temp;
}
inline void SnapshotRegionManifest::set_allocated_region_info(::hbase::pb::RegionInfo* region_info) {
  delete region_info_;
  region_info_ = region_info;
  if (region_info) {
    set_has_region_info();
  } else {
    clear_has_region_info();
  }
}

// repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
inline int SnapshotRegionManifest::family_files_size() const {
  return family_files_.size();
}
inline void SnapshotRegionManifest::clear_family_files() {
  family_files_.Clear();
}
inline const ::hbase::pb::SnapshotRegionManifest_FamilyFiles& SnapshotRegionManifest::family_files(int index) const {
  return family_files_.Get(index);
}
inline ::hbase::pb::SnapshotRegionManifest_FamilyFiles* SnapshotRegionManifest::mutable_family_files(int index) {
  return family_files_.Mutable(index);
}
inline ::hbase::pb::SnapshotRegionManifest_FamilyFiles* SnapshotRegionManifest::add_family_files() {
  return family_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >&
SnapshotRegionManifest::family_files() const {
  return family_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >*
SnapshotRegionManifest::mutable_family_files() {
  return &family_files_;
}

// -------------------------------------------------------------------

// SnapshotDataManifest

// required .hbase.pb.TableSchema table_schema = 1;
inline bool SnapshotDataManifest::has_table_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotDataManifest::set_has_table_schema() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotDataManifest::clear_has_table_schema() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotDataManifest::clear_table_schema() {
  if (table_schema_ != NULL) table_schema_->::hbase::pb::TableSchema::Clear();
  clear_has_table_schema();
}
inline const ::hbase::pb::TableSchema& SnapshotDataManifest::table_schema() const {
  return table_schema_ != NULL ? *table_schema_ : *default_instance_->table_schema_;
}
inline ::hbase::pb::TableSchema* SnapshotDataManifest::mutable_table_schema() {
  set_has_table_schema();
  if (table_schema_ == NULL) table_schema_ = new ::hbase::pb::TableSchema;
  return table_schema_;
}
inline ::hbase::pb::TableSchema* SnapshotDataManifest::release_table_schema() {
  clear_has_table_schema();
  ::hbase::pb::TableSchema* temp = table_schema_;
  table_schema_ = NULL;
  return temp;
}
inline void SnapshotDataManifest::set_allocated_table_schema(::hbase::pb::TableSchema* table_schema) {
  delete table_schema_;
  table_schema_ = table_schema;
  if (table_schema) {
    set_has_table_schema();
  } else {
    clear_has_table_schema();
  }
}

// repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
inline int SnapshotDataManifest::region_manifests_size() const {
  return region_manifests_.size();
}
inline void SnapshotDataManifest::clear_region_manifests() {
  region_manifests_.Clear();
}
inline const ::hbase::pb::SnapshotRegionManifest& SnapshotDataManifest::region_manifests(int index) const {
  return region_manifests_.Get(index);
}
inline ::hbase::pb::SnapshotRegionManifest* SnapshotDataManifest::mutable_region_manifests(int index) {
  return region_manifests_.Mutable(index);
}
inline ::hbase::pb::SnapshotRegionManifest* SnapshotDataManifest::add_region_manifests() {
  return region_manifests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >&
SnapshotDataManifest::region_manifests() const {
  return region_manifests_;
}
inline ::google::protobuf::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >*
SnapshotDataManifest::mutable_region_manifests() {
  return &region_manifests_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::SnapshotFileInfo_Type>() {
  return ::hbase::pb::SnapshotFileInfo_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Snapshot_2eproto__INCLUDED
