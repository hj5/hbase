// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* GetRegionInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetRegionInfoResponse_CompactionState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetStoreFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOnlineRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOnlineRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOnlineRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOnlineRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRegionRequest_RegionOpenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRegionRequest_RegionOpenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRegionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpenRegionResponse_RegionOpeningState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WarmupRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarmupRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarmupRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarmupRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFavoredNodesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFavoredNodesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFavoredNodesRequest_RegionUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFavoredNodesRequest_RegionUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFavoredNodesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFavoredNodesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeRegionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeRegionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeRegionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeRegionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WALEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WALEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicateWALEntryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicateWALEntryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicateWALEntryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicateWALEntryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollWALWriterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollWALWriterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollWALWriterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollWALWriterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateConfigurationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateConfigurationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateConfigurationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateConfigurationResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Admin_2eproto() {
  protobuf_AddDesc_Admin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Admin.proto");
  GOOGLE_CHECK(file != NULL);
  GetRegionInfoRequest_descriptor_ = file->message_type(0);
  static const int GetRegionInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoRequest, compaction_state_),
  };
  GetRegionInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegionInfoRequest_descriptor_,
      GetRegionInfoRequest::default_instance_,
      GetRegionInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegionInfoRequest));
  GetRegionInfoResponse_descriptor_ = file->message_type(1);
  static const int GetRegionInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoResponse, region_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoResponse, compaction_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoResponse, isrecovering_),
  };
  GetRegionInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegionInfoResponse_descriptor_,
      GetRegionInfoResponse::default_instance_,
      GetRegionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegionInfoResponse));
  GetRegionInfoResponse_CompactionState_descriptor_ = GetRegionInfoResponse_descriptor_->enum_type(0);
  GetStoreFileRequest_descriptor_ = file->message_type(2);
  static const int GetStoreFileRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileRequest, family_),
  };
  GetStoreFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreFileRequest_descriptor_,
      GetStoreFileRequest::default_instance_,
      GetStoreFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreFileRequest));
  GetStoreFileResponse_descriptor_ = file->message_type(3);
  static const int GetStoreFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileResponse, store_file_),
  };
  GetStoreFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoreFileResponse_descriptor_,
      GetStoreFileResponse::default_instance_,
      GetStoreFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoreFileResponse));
  GetOnlineRegionRequest_descriptor_ = file->message_type(4);
  static const int GetOnlineRegionRequest_offsets_[1] = {
  };
  GetOnlineRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOnlineRegionRequest_descriptor_,
      GetOnlineRegionRequest::default_instance_,
      GetOnlineRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOnlineRegionRequest));
  GetOnlineRegionResponse_descriptor_ = file->message_type(5);
  static const int GetOnlineRegionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineRegionResponse, region_info_),
  };
  GetOnlineRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOnlineRegionResponse_descriptor_,
      GetOnlineRegionResponse::default_instance_,
      GetOnlineRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOnlineRegionResponse));
  OpenRegionRequest_descriptor_ = file->message_type(6);
  static const int OpenRegionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest, open_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest, serverstartcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest, master_system_time_),
  };
  OpenRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRegionRequest_descriptor_,
      OpenRegionRequest::default_instance_,
      OpenRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRegionRequest));
  OpenRegionRequest_RegionOpenInfo_descriptor_ = OpenRegionRequest_descriptor_->nested_type(0);
  static const int OpenRegionRequest_RegionOpenInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest_RegionOpenInfo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest_RegionOpenInfo, version_of_offline_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest_RegionOpenInfo, favored_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest_RegionOpenInfo, openfordistributedlogreplay_),
  };
  OpenRegionRequest_RegionOpenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRegionRequest_RegionOpenInfo_descriptor_,
      OpenRegionRequest_RegionOpenInfo::default_instance_,
      OpenRegionRequest_RegionOpenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest_RegionOpenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionRequest_RegionOpenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRegionRequest_RegionOpenInfo));
  OpenRegionResponse_descriptor_ = file->message_type(7);
  static const int OpenRegionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionResponse, opening_state_),
  };
  OpenRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRegionResponse_descriptor_,
      OpenRegionResponse::default_instance_,
      OpenRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRegionResponse));
  OpenRegionResponse_RegionOpeningState_descriptor_ = OpenRegionResponse_descriptor_->enum_type(0);
  WarmupRegionRequest_descriptor_ = file->message_type(8);
  static const int WarmupRegionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmupRegionRequest, regioninfo_),
  };
  WarmupRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarmupRegionRequest_descriptor_,
      WarmupRegionRequest::default_instance_,
      WarmupRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmupRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmupRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarmupRegionRequest));
  WarmupRegionResponse_descriptor_ = file->message_type(9);
  static const int WarmupRegionResponse_offsets_[1] = {
  };
  WarmupRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarmupRegionResponse_descriptor_,
      WarmupRegionResponse::default_instance_,
      WarmupRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmupRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmupRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarmupRegionResponse));
  CloseRegionRequest_descriptor_ = file->message_type(10);
  static const int CloseRegionRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, version_of_closing_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, transition_in_zk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, destination_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, serverstartcode_),
  };
  CloseRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseRegionRequest_descriptor_,
      CloseRegionRequest::default_instance_,
      CloseRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseRegionRequest));
  CloseRegionResponse_descriptor_ = file->message_type(11);
  static const int CloseRegionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionResponse, closed_),
  };
  CloseRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseRegionResponse_descriptor_,
      CloseRegionResponse::default_instance_,
      CloseRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseRegionResponse));
  FlushRegionRequest_descriptor_ = file->message_type(12);
  static const int FlushRegionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionRequest, if_older_than_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionRequest, write_flush_wal_marker_),
  };
  FlushRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushRegionRequest_descriptor_,
      FlushRegionRequest::default_instance_,
      FlushRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushRegionRequest));
  FlushRegionResponse_descriptor_ = file->message_type(13);
  static const int FlushRegionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionResponse, last_flush_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionResponse, flushed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionResponse, wrote_flush_wal_marker_),
  };
  FlushRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushRegionResponse_descriptor_,
      FlushRegionResponse::default_instance_,
      FlushRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushRegionResponse));
  SplitRegionRequest_descriptor_ = file->message_type(14);
  static const int SplitRegionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, split_point_),
  };
  SplitRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitRegionRequest_descriptor_,
      SplitRegionRequest::default_instance_,
      SplitRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitRegionRequest));
  SplitRegionResponse_descriptor_ = file->message_type(15);
  static const int SplitRegionResponse_offsets_[1] = {
  };
  SplitRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitRegionResponse_descriptor_,
      SplitRegionResponse::default_instance_,
      SplitRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitRegionResponse));
  CompactRegionRequest_descriptor_ = file->message_type(16);
  static const int CompactRegionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionRequest, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionRequest, family_),
  };
  CompactRegionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactRegionRequest_descriptor_,
      CompactRegionRequest::default_instance_,
      CompactRegionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactRegionRequest));
  CompactRegionResponse_descriptor_ = file->message_type(17);
  static const int CompactRegionResponse_offsets_[1] = {
  };
  CompactRegionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactRegionResponse_descriptor_,
      CompactRegionResponse::default_instance_,
      CompactRegionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactRegionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactRegionResponse));
  UpdateFavoredNodesRequest_descriptor_ = file->message_type(18);
  static const int UpdateFavoredNodesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest, update_info_),
  };
  UpdateFavoredNodesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFavoredNodesRequest_descriptor_,
      UpdateFavoredNodesRequest::default_instance_,
      UpdateFavoredNodesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFavoredNodesRequest));
  UpdateFavoredNodesRequest_RegionUpdateInfo_descriptor_ = UpdateFavoredNodesRequest_descriptor_->nested_type(0);
  static const int UpdateFavoredNodesRequest_RegionUpdateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest_RegionUpdateInfo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest_RegionUpdateInfo, favored_nodes_),
  };
  UpdateFavoredNodesRequest_RegionUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFavoredNodesRequest_RegionUpdateInfo_descriptor_,
      UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance_,
      UpdateFavoredNodesRequest_RegionUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest_RegionUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesRequest_RegionUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFavoredNodesRequest_RegionUpdateInfo));
  UpdateFavoredNodesResponse_descriptor_ = file->message_type(19);
  static const int UpdateFavoredNodesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesResponse, response_),
  };
  UpdateFavoredNodesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFavoredNodesResponse_descriptor_,
      UpdateFavoredNodesResponse::default_instance_,
      UpdateFavoredNodesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFavoredNodesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFavoredNodesResponse));
  MergeRegionsRequest_descriptor_ = file->message_type(20);
  static const int MergeRegionsRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsRequest, region_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsRequest, region_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsRequest, forcible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsRequest, master_system_time_),
  };
  MergeRegionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeRegionsRequest_descriptor_,
      MergeRegionsRequest::default_instance_,
      MergeRegionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeRegionsRequest));
  MergeRegionsResponse_descriptor_ = file->message_type(21);
  static const int MergeRegionsResponse_offsets_[1] = {
  };
  MergeRegionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeRegionsResponse_descriptor_,
      MergeRegionsResponse::default_instance_,
      MergeRegionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRegionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeRegionsResponse));
  WALEntry_descriptor_ = file->message_type(22);
  static const int WALEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALEntry, key_value_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALEntry, associated_cell_count_),
  };
  WALEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WALEntry_descriptor_,
      WALEntry::default_instance_,
      WALEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WALEntry));
  ReplicateWALEntryRequest_descriptor_ = file->message_type(23);
  static const int ReplicateWALEntryRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryRequest, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryRequest, replicationclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryRequest, sourcebasenamespacedirpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryRequest, sourcehfilearchivedirpath_),
  };
  ReplicateWALEntryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplicateWALEntryRequest_descriptor_,
      ReplicateWALEntryRequest::default_instance_,
      ReplicateWALEntryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplicateWALEntryRequest));
  ReplicateWALEntryResponse_descriptor_ = file->message_type(24);
  static const int ReplicateWALEntryResponse_offsets_[1] = {
  };
  ReplicateWALEntryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplicateWALEntryResponse_descriptor_,
      ReplicateWALEntryResponse::default_instance_,
      ReplicateWALEntryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicateWALEntryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplicateWALEntryResponse));
  RollWALWriterRequest_descriptor_ = file->message_type(25);
  static const int RollWALWriterRequest_offsets_[1] = {
  };
  RollWALWriterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollWALWriterRequest_descriptor_,
      RollWALWriterRequest::default_instance_,
      RollWALWriterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollWALWriterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollWALWriterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollWALWriterRequest));
  RollWALWriterResponse_descriptor_ = file->message_type(26);
  static const int RollWALWriterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollWALWriterResponse, region_to_flush_),
  };
  RollWALWriterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollWALWriterResponse_descriptor_,
      RollWALWriterResponse::default_instance_,
      RollWALWriterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollWALWriterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollWALWriterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollWALWriterResponse));
  StopServerRequest_descriptor_ = file->message_type(27);
  static const int StopServerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerRequest, reason_),
  };
  StopServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopServerRequest_descriptor_,
      StopServerRequest::default_instance_,
      StopServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopServerRequest));
  StopServerResponse_descriptor_ = file->message_type(28);
  static const int StopServerResponse_offsets_[1] = {
  };
  StopServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopServerResponse_descriptor_,
      StopServerResponse::default_instance_,
      StopServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopServerResponse));
  GetServerInfoRequest_descriptor_ = file->message_type(29);
  static const int GetServerInfoRequest_offsets_[1] = {
  };
  GetServerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerInfoRequest_descriptor_,
      GetServerInfoRequest::default_instance_,
      GetServerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerInfoRequest));
  ServerInfo_descriptor_ = file->message_type(30);
  static const int ServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, webui_port_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  GetServerInfoResponse_descriptor_ = file->message_type(31);
  static const int GetServerInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfoResponse, server_info_),
  };
  GetServerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerInfoResponse_descriptor_,
      GetServerInfoResponse::default_instance_,
      GetServerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerInfoResponse));
  UpdateConfigurationRequest_descriptor_ = file->message_type(32);
  static const int UpdateConfigurationRequest_offsets_[1] = {
  };
  UpdateConfigurationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateConfigurationRequest_descriptor_,
      UpdateConfigurationRequest::default_instance_,
      UpdateConfigurationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigurationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigurationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateConfigurationRequest));
  UpdateConfigurationResponse_descriptor_ = file->message_type(33);
  static const int UpdateConfigurationResponse_offsets_[1] = {
  };
  UpdateConfigurationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateConfigurationResponse_descriptor_,
      UpdateConfigurationResponse::default_instance_,
      UpdateConfigurationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigurationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigurationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateConfigurationResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Admin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegionInfoRequest_descriptor_, &GetRegionInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegionInfoResponse_descriptor_, &GetRegionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreFileRequest_descriptor_, &GetStoreFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoreFileResponse_descriptor_, &GetStoreFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOnlineRegionRequest_descriptor_, &GetOnlineRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOnlineRegionResponse_descriptor_, &GetOnlineRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRegionRequest_descriptor_, &OpenRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRegionRequest_RegionOpenInfo_descriptor_, &OpenRegionRequest_RegionOpenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRegionResponse_descriptor_, &OpenRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarmupRegionRequest_descriptor_, &WarmupRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarmupRegionResponse_descriptor_, &WarmupRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseRegionRequest_descriptor_, &CloseRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseRegionResponse_descriptor_, &CloseRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushRegionRequest_descriptor_, &FlushRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushRegionResponse_descriptor_, &FlushRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitRegionRequest_descriptor_, &SplitRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitRegionResponse_descriptor_, &SplitRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactRegionRequest_descriptor_, &CompactRegionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactRegionResponse_descriptor_, &CompactRegionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFavoredNodesRequest_descriptor_, &UpdateFavoredNodesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFavoredNodesRequest_RegionUpdateInfo_descriptor_, &UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFavoredNodesResponse_descriptor_, &UpdateFavoredNodesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeRegionsRequest_descriptor_, &MergeRegionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeRegionsResponse_descriptor_, &MergeRegionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WALEntry_descriptor_, &WALEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplicateWALEntryRequest_descriptor_, &ReplicateWALEntryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplicateWALEntryResponse_descriptor_, &ReplicateWALEntryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollWALWriterRequest_descriptor_, &RollWALWriterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollWALWriterResponse_descriptor_, &RollWALWriterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopServerRequest_descriptor_, &StopServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopServerResponse_descriptor_, &StopServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerInfoRequest_descriptor_, &GetServerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerInfoResponse_descriptor_, &GetServerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateConfigurationRequest_descriptor_, &UpdateConfigurationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateConfigurationResponse_descriptor_, &UpdateConfigurationResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Admin_2eproto() {
  delete GetRegionInfoRequest::default_instance_;
  delete GetRegionInfoRequest_reflection_;
  delete GetRegionInfoResponse::default_instance_;
  delete GetRegionInfoResponse_reflection_;
  delete GetStoreFileRequest::default_instance_;
  delete GetStoreFileRequest_reflection_;
  delete GetStoreFileResponse::default_instance_;
  delete GetStoreFileResponse_reflection_;
  delete GetOnlineRegionRequest::default_instance_;
  delete GetOnlineRegionRequest_reflection_;
  delete GetOnlineRegionResponse::default_instance_;
  delete GetOnlineRegionResponse_reflection_;
  delete OpenRegionRequest::default_instance_;
  delete OpenRegionRequest_reflection_;
  delete OpenRegionRequest_RegionOpenInfo::default_instance_;
  delete OpenRegionRequest_RegionOpenInfo_reflection_;
  delete OpenRegionResponse::default_instance_;
  delete OpenRegionResponse_reflection_;
  delete WarmupRegionRequest::default_instance_;
  delete WarmupRegionRequest_reflection_;
  delete WarmupRegionResponse::default_instance_;
  delete WarmupRegionResponse_reflection_;
  delete CloseRegionRequest::default_instance_;
  delete CloseRegionRequest_reflection_;
  delete CloseRegionResponse::default_instance_;
  delete CloseRegionResponse_reflection_;
  delete FlushRegionRequest::default_instance_;
  delete FlushRegionRequest_reflection_;
  delete FlushRegionResponse::default_instance_;
  delete FlushRegionResponse_reflection_;
  delete SplitRegionRequest::default_instance_;
  delete SplitRegionRequest_reflection_;
  delete SplitRegionResponse::default_instance_;
  delete SplitRegionResponse_reflection_;
  delete CompactRegionRequest::default_instance_;
  delete CompactRegionRequest_reflection_;
  delete CompactRegionResponse::default_instance_;
  delete CompactRegionResponse_reflection_;
  delete UpdateFavoredNodesRequest::default_instance_;
  delete UpdateFavoredNodesRequest_reflection_;
  delete UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance_;
  delete UpdateFavoredNodesRequest_RegionUpdateInfo_reflection_;
  delete UpdateFavoredNodesResponse::default_instance_;
  delete UpdateFavoredNodesResponse_reflection_;
  delete MergeRegionsRequest::default_instance_;
  delete MergeRegionsRequest_reflection_;
  delete MergeRegionsResponse::default_instance_;
  delete MergeRegionsResponse_reflection_;
  delete WALEntry::default_instance_;
  delete WALEntry_reflection_;
  delete ReplicateWALEntryRequest::default_instance_;
  delete ReplicateWALEntryRequest_reflection_;
  delete ReplicateWALEntryResponse::default_instance_;
  delete ReplicateWALEntryResponse_reflection_;
  delete RollWALWriterRequest::default_instance_;
  delete RollWALWriterRequest_reflection_;
  delete RollWALWriterResponse::default_instance_;
  delete RollWALWriterResponse_reflection_;
  delete StopServerRequest::default_instance_;
  delete StopServerRequest_reflection_;
  delete StopServerResponse::default_instance_;
  delete StopServerResponse_reflection_;
  delete GetServerInfoRequest::default_instance_;
  delete GetServerInfoRequest_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete GetServerInfoResponse::default_instance_;
  delete GetServerInfoResponse_reflection_;
  delete UpdateConfigurationRequest::default_instance_;
  delete UpdateConfigurationRequest_reflection_;
  delete UpdateConfigurationResponse::default_instance_;
  delete UpdateConfigurationResponse_reflection_;
}

void protobuf_AddDesc_Admin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_WAL_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Admin.proto\022\010hbase.pb\032\014Client.proto\032\013H"
    "Base.proto\032\tWAL.proto\"[\n\024GetRegionInfoRe"
    "quest\022)\n\006region\030\001 \002(\0132\031.hbase.pb.RegionS"
    "pecifier\022\030\n\020compaction_state\030\002 \001(\010\"\353\001\n\025G"
    "etRegionInfoResponse\022)\n\013region_info\030\001 \002("
    "\0132\024.hbase.pb.RegionInfo\022I\n\020compaction_st"
    "ate\030\002 \001(\0162/.hbase.pb.GetRegionInfoRespon"
    "se.CompactionState\022\024\n\014isRecovering\030\003 \001(\010"
    "\"F\n\017CompactionState\022\010\n\004NONE\020\000\022\t\n\005MINOR\020\001"
    "\022\t\n\005MAJOR\020\002\022\023\n\017MAJOR_AND_MINOR\020\003\"P\n\023GetS"
    "toreFileRequest\022)\n\006region\030\001 \002(\0132\031.hbase."
    "pb.RegionSpecifier\022\016\n\006family\030\002 \003(\014\"*\n\024Ge"
    "tStoreFileResponse\022\022\n\nstore_file\030\001 \003(\t\"\030"
    "\n\026GetOnlineRegionRequest\"D\n\027GetOnlineReg"
    "ionResponse\022)\n\013region_info\030\001 \003(\0132\024.hbase"
    ".pb.RegionInfo\"\263\002\n\021OpenRegionRequest\022=\n\t"
    "open_info\030\001 \003(\0132*.hbase.pb.OpenRegionReq"
    "uest.RegionOpenInfo\022\027\n\017serverStartCode\030\002"
    " \001(\004\022\032\n\022master_system_time\030\005 \001(\004\032\251\001\n\016Reg"
    "ionOpenInfo\022$\n\006region\030\001 \002(\0132\024.hbase.pb.R"
    "egionInfo\022\037\n\027version_of_offline_node\030\002 \001"
    "(\r\022+\n\rfavored_nodes\030\003 \003(\0132\024.hbase.pb.Ser"
    "verName\022#\n\033openForDistributedLogReplay\030\004"
    " \001(\010\"\246\001\n\022OpenRegionResponse\022F\n\ropening_s"
    "tate\030\001 \003(\0162/.hbase.pb.OpenRegionResponse"
    ".RegionOpeningState\"H\n\022RegionOpeningStat"
    "e\022\n\n\006OPENED\020\000\022\022\n\016ALREADY_OPENED\020\001\022\022\n\016FAI"
    "LED_OPENING\020\002\"\?\n\023WarmupRegionRequest\022(\n\n"
    "regionInfo\030\001 \002(\0132\024.hbase.pb.RegionInfo\"\026"
    "\n\024WarmupRegionResponse\"\313\001\n\022CloseRegionRe"
    "quest\022)\n\006region\030\001 \002(\0132\031.hbase.pb.RegionS"
    "pecifier\022\037\n\027version_of_closing_node\030\002 \001("
    "\r\022\036\n\020transition_in_ZK\030\003 \001(\010:\004true\0220\n\022des"
    "tination_server\030\004 \001(\0132\024.hbase.pb.ServerN"
    "ame\022\027\n\017serverStartCode\030\005 \001(\004\"%\n\023CloseReg"
    "ionResponse\022\016\n\006closed\030\001 \002(\010\"y\n\022FlushRegi"
    "onRequest\022)\n\006region\030\001 \002(\0132\031.hbase.pb.Reg"
    "ionSpecifier\022\030\n\020if_older_than_ts\030\002 \001(\004\022\036"
    "\n\026write_flush_wal_marker\030\003 \001(\010\"_\n\023FlushR"
    "egionResponse\022\027\n\017last_flush_time\030\001 \002(\004\022\017"
    "\n\007flushed\030\002 \001(\010\022\036\n\026wrote_flush_wal_marke"
    "r\030\003 \001(\010\"T\n\022SplitRegionRequest\022)\n\006region\030"
    "\001 \002(\0132\031.hbase.pb.RegionSpecifier\022\023\n\013spli"
    "t_point\030\002 \001(\014\"\025\n\023SplitRegionResponse\"`\n\024"
    "CompactRegionRequest\022)\n\006region\030\001 \002(\0132\031.h"
    "base.pb.RegionSpecifier\022\r\n\005major\030\002 \001(\010\022\016"
    "\n\006family\030\003 \001(\014\"\027\n\025CompactRegionResponse\""
    "\315\001\n\031UpdateFavoredNodesRequest\022I\n\013update_"
    "info\030\001 \003(\01324.hbase.pb.UpdateFavoredNodes"
    "Request.RegionUpdateInfo\032e\n\020RegionUpdate"
    "Info\022$\n\006region\030\001 \002(\0132\024.hbase.pb.RegionIn"
    "fo\022+\n\rfavored_nodes\030\002 \003(\0132\024.hbase.pb.Ser"
    "verName\".\n\032UpdateFavoredNodesResponse\022\020\n"
    "\010response\030\001 \001(\r\"\244\001\n\023MergeRegionsRequest\022"
    "+\n\010region_a\030\001 \002(\0132\031.hbase.pb.RegionSpeci"
    "fier\022+\n\010region_b\030\002 \002(\0132\031.hbase.pb.Region"
    "Specifier\022\027\n\010forcible\030\003 \001(\010:\005false\022\032\n\022ma"
    "ster_system_time\030\004 \001(\004\"\026\n\024MergeRegionsRe"
    "sponse\"a\n\010WALEntry\022\035\n\003key\030\001 \002(\0132\020.hbase."
    "pb.WALKey\022\027\n\017key_value_bytes\030\002 \003(\014\022\035\n\025as"
    "sociated_cell_count\030\003 \001(\005\"\242\001\n\030ReplicateW"
    "ALEntryRequest\022!\n\005entry\030\001 \003(\0132\022.hbase.pb"
    ".WALEntry\022\034\n\024replicationClusterId\030\002 \001(\t\022"
    "\"\n\032sourceBaseNamespaceDirPath\030\003 \001(\t\022!\n\031s"
    "ourceHFileArchiveDirPath\030\004 \001(\t\"\033\n\031Replic"
    "ateWALEntryResponse\"\026\n\024RollWALWriterRequ"
    "est\"0\n\025RollWALWriterResponse\022\027\n\017region_t"
    "o_flush\030\001 \003(\014\"#\n\021StopServerRequest\022\016\n\006re"
    "ason\030\001 \002(\t\"\024\n\022StopServerResponse\"\026\n\024GetS"
    "erverInfoRequest\"K\n\nServerInfo\022)\n\013server"
    "_name\030\001 \002(\0132\024.hbase.pb.ServerName\022\022\n\nweb"
    "ui_port\030\002 \001(\r\"B\n\025GetServerInfoResponse\022)"
    "\n\013server_info\030\001 \002(\0132\024.hbase.pb.ServerInf"
    "o\"\034\n\032UpdateConfigurationRequest\"\035\n\033Updat"
    "eConfigurationResponse2\207\013\n\014AdminService\022"
    "P\n\rGetRegionInfo\022\036.hbase.pb.GetRegionInf"
    "oRequest\032\037.hbase.pb.GetRegionInfoRespons"
    "e\022M\n\014GetStoreFile\022\035.hbase.pb.GetStoreFil"
    "eRequest\032\036.hbase.pb.GetStoreFileResponse"
    "\022V\n\017GetOnlineRegion\022 .hbase.pb.GetOnline"
    "RegionRequest\032!.hbase.pb.GetOnlineRegion"
    "Response\022G\n\nOpenRegion\022\033.hbase.pb.OpenRe"
    "gionRequest\032\034.hbase.pb.OpenRegionRespons"
    "e\022M\n\014WarmupRegion\022\035.hbase.pb.WarmupRegio"
    "nRequest\032\036.hbase.pb.WarmupRegionResponse"
    "\022J\n\013CloseRegion\022\034.hbase.pb.CloseRegionRe"
    "quest\032\035.hbase.pb.CloseRegionResponse\022J\n\013"
    "FlushRegion\022\034.hbase.pb.FlushRegionReques"
    "t\032\035.hbase.pb.FlushRegionResponse\022J\n\013Spli"
    "tRegion\022\034.hbase.pb.SplitRegionRequest\032\035."
    "hbase.pb.SplitRegionResponse\022P\n\rCompactR"
    "egion\022\036.hbase.pb.CompactRegionRequest\032\037."
    "hbase.pb.CompactRegionResponse\022M\n\014MergeR"
    "egions\022\035.hbase.pb.MergeRegionsRequest\032\036."
    "hbase.pb.MergeRegionsResponse\022\\\n\021Replica"
    "teWALEntry\022\".hbase.pb.ReplicateWALEntryR"
    "equest\032#.hbase.pb.ReplicateWALEntryRespo"
    "nse\022Q\n\006Replay\022\".hbase.pb.ReplicateWALEnt"
    "ryRequest\032#.hbase.pb.ReplicateWALEntryRe"
    "sponse\022P\n\rRollWALWriter\022\036.hbase.pb.RollW"
    "ALWriterRequest\032\037.hbase.pb.RollWALWriter"
    "Response\022P\n\rGetServerInfo\022\036.hbase.pb.Get"
    "ServerInfoRequest\032\037.hbase.pb.GetServerIn"
    "foResponse\022G\n\nStopServer\022\033.hbase.pb.Stop"
    "ServerRequest\032\034.hbase.pb.StopServerRespo"
    "nse\022_\n\022UpdateFavoredNodes\022#.hbase.pb.Upd"
    "ateFavoredNodesRequest\032$.hbase.pb.Update"
    "FavoredNodesResponse\022b\n\023UpdateConfigurat"
    "ion\022$.hbase.pb.UpdateConfigurationReques"
    "t\032%.hbase.pb.UpdateConfigurationResponse"
    "BA\n*org.apache.hadoop.hbase.protobuf.gen"
    "eratedB\013AdminProtosH\001\210\001\001\240\001\001", 4467);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Admin.proto", &protobuf_RegisterTypes);
  GetRegionInfoRequest::default_instance_ = new GetRegionInfoRequest();
  GetRegionInfoResponse::default_instance_ = new GetRegionInfoResponse();
  GetStoreFileRequest::default_instance_ = new GetStoreFileRequest();
  GetStoreFileResponse::default_instance_ = new GetStoreFileResponse();
  GetOnlineRegionRequest::default_instance_ = new GetOnlineRegionRequest();
  GetOnlineRegionResponse::default_instance_ = new GetOnlineRegionResponse();
  OpenRegionRequest::default_instance_ = new OpenRegionRequest();
  OpenRegionRequest_RegionOpenInfo::default_instance_ = new OpenRegionRequest_RegionOpenInfo();
  OpenRegionResponse::default_instance_ = new OpenRegionResponse();
  WarmupRegionRequest::default_instance_ = new WarmupRegionRequest();
  WarmupRegionResponse::default_instance_ = new WarmupRegionResponse();
  CloseRegionRequest::default_instance_ = new CloseRegionRequest();
  CloseRegionResponse::default_instance_ = new CloseRegionResponse();
  FlushRegionRequest::default_instance_ = new FlushRegionRequest();
  FlushRegionResponse::default_instance_ = new FlushRegionResponse();
  SplitRegionRequest::default_instance_ = new SplitRegionRequest();
  SplitRegionResponse::default_instance_ = new SplitRegionResponse();
  CompactRegionRequest::default_instance_ = new CompactRegionRequest();
  CompactRegionResponse::default_instance_ = new CompactRegionResponse();
  UpdateFavoredNodesRequest::default_instance_ = new UpdateFavoredNodesRequest();
  UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance_ = new UpdateFavoredNodesRequest_RegionUpdateInfo();
  UpdateFavoredNodesResponse::default_instance_ = new UpdateFavoredNodesResponse();
  MergeRegionsRequest::default_instance_ = new MergeRegionsRequest();
  MergeRegionsResponse::default_instance_ = new MergeRegionsResponse();
  WALEntry::default_instance_ = new WALEntry();
  ReplicateWALEntryRequest::default_instance_ = new ReplicateWALEntryRequest();
  ReplicateWALEntryResponse::default_instance_ = new ReplicateWALEntryResponse();
  RollWALWriterRequest::default_instance_ = new RollWALWriterRequest();
  RollWALWriterResponse::default_instance_ = new RollWALWriterResponse();
  StopServerRequest::default_instance_ = new StopServerRequest();
  StopServerResponse::default_instance_ = new StopServerResponse();
  GetServerInfoRequest::default_instance_ = new GetServerInfoRequest();
  ServerInfo::default_instance_ = new ServerInfo();
  GetServerInfoResponse::default_instance_ = new GetServerInfoResponse();
  UpdateConfigurationRequest::default_instance_ = new UpdateConfigurationRequest();
  UpdateConfigurationResponse::default_instance_ = new UpdateConfigurationResponse();
  GetRegionInfoRequest::default_instance_->InitAsDefaultInstance();
  GetRegionInfoResponse::default_instance_->InitAsDefaultInstance();
  GetStoreFileRequest::default_instance_->InitAsDefaultInstance();
  GetStoreFileResponse::default_instance_->InitAsDefaultInstance();
  GetOnlineRegionRequest::default_instance_->InitAsDefaultInstance();
  GetOnlineRegionResponse::default_instance_->InitAsDefaultInstance();
  OpenRegionRequest::default_instance_->InitAsDefaultInstance();
  OpenRegionRequest_RegionOpenInfo::default_instance_->InitAsDefaultInstance();
  OpenRegionResponse::default_instance_->InitAsDefaultInstance();
  WarmupRegionRequest::default_instance_->InitAsDefaultInstance();
  WarmupRegionResponse::default_instance_->InitAsDefaultInstance();
  CloseRegionRequest::default_instance_->InitAsDefaultInstance();
  CloseRegionResponse::default_instance_->InitAsDefaultInstance();
  FlushRegionRequest::default_instance_->InitAsDefaultInstance();
  FlushRegionResponse::default_instance_->InitAsDefaultInstance();
  SplitRegionRequest::default_instance_->InitAsDefaultInstance();
  SplitRegionResponse::default_instance_->InitAsDefaultInstance();
  CompactRegionRequest::default_instance_->InitAsDefaultInstance();
  CompactRegionResponse::default_instance_->InitAsDefaultInstance();
  UpdateFavoredNodesRequest::default_instance_->InitAsDefaultInstance();
  UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance_->InitAsDefaultInstance();
  UpdateFavoredNodesResponse::default_instance_->InitAsDefaultInstance();
  MergeRegionsRequest::default_instance_->InitAsDefaultInstance();
  MergeRegionsResponse::default_instance_->InitAsDefaultInstance();
  WALEntry::default_instance_->InitAsDefaultInstance();
  ReplicateWALEntryRequest::default_instance_->InitAsDefaultInstance();
  ReplicateWALEntryResponse::default_instance_->InitAsDefaultInstance();
  RollWALWriterRequest::default_instance_->InitAsDefaultInstance();
  RollWALWriterResponse::default_instance_->InitAsDefaultInstance();
  StopServerRequest::default_instance_->InitAsDefaultInstance();
  StopServerResponse::default_instance_->InitAsDefaultInstance();
  GetServerInfoRequest::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  GetServerInfoResponse::default_instance_->InitAsDefaultInstance();
  UpdateConfigurationRequest::default_instance_->InitAsDefaultInstance();
  UpdateConfigurationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Admin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Admin_2eproto {
  StaticDescriptorInitializer_Admin_2eproto() {
    protobuf_AddDesc_Admin_2eproto();
  }
} static_descriptor_initializer_Admin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetRegionInfoRequest::kRegionFieldNumber;
const int GetRegionInfoRequest::kCompactionStateFieldNumber;
#endif  // !_MSC_VER

GetRegionInfoRequest::GetRegionInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRegionInfoRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

GetRegionInfoRequest::GetRegionInfoRequest(const GetRegionInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRegionInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  compaction_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegionInfoRequest::~GetRegionInfoRequest() {
  SharedDtor();
}

void GetRegionInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void GetRegionInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionInfoRequest_descriptor_;
}

const GetRegionInfoRequest& GetRegionInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetRegionInfoRequest* GetRegionInfoRequest::default_instance_ = NULL;

GetRegionInfoRequest* GetRegionInfoRequest::New() const {
  return new GetRegionInfoRequest;
}

void GetRegionInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    compaction_state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegionInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_compaction_state;
        break;
      }

      // optional bool compaction_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compaction_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compaction_state_)));
          set_has_compaction_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRegionInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional bool compaction_state = 2;
  if (has_compaction_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->compaction_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRegionInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional bool compaction_state = 2;
  if (has_compaction_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->compaction_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRegionInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional bool compaction_state = 2;
    if (has_compaction_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegionInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegionInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegionInfoRequest::MergeFrom(const GetRegionInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_compaction_state()) {
      set_compaction_state(from.compaction_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegionInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionInfoRequest::CopyFrom(const GetRegionInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void GetRegionInfoRequest::Swap(GetRegionInfoRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(compaction_state_, other->compaction_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegionInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionInfoRequest_descriptor_;
  metadata.reflection = GetRegionInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetRegionInfoResponse_CompactionState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionInfoResponse_CompactionState_descriptor_;
}
bool GetRegionInfoResponse_CompactionState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse::NONE;
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse::MINOR;
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse::MAJOR;
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse::MAJOR_AND_MINOR;
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse::CompactionState_MIN;
const GetRegionInfoResponse_CompactionState GetRegionInfoResponse::CompactionState_MAX;
const int GetRegionInfoResponse::CompactionState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetRegionInfoResponse::kRegionInfoFieldNumber;
const int GetRegionInfoResponse::kCompactionStateFieldNumber;
const int GetRegionInfoResponse::kIsRecoveringFieldNumber;
#endif  // !_MSC_VER

GetRegionInfoResponse::GetRegionInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRegionInfoResponse::InitAsDefaultInstance() {
  region_info_ = const_cast< ::hbase::pb::RegionInfo*>(&::hbase::pb::RegionInfo::default_instance());
}

GetRegionInfoResponse::GetRegionInfoResponse(const GetRegionInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRegionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  region_info_ = NULL;
  compaction_state_ = 0;
  isrecovering_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegionInfoResponse::~GetRegionInfoResponse() {
  SharedDtor();
}

void GetRegionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete region_info_;
  }
}

void GetRegionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionInfoResponse_descriptor_;
}

const GetRegionInfoResponse& GetRegionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetRegionInfoResponse* GetRegionInfoResponse::default_instance_ = NULL;

GetRegionInfoResponse* GetRegionInfoResponse::New() const {
  return new GetRegionInfoResponse;
}

void GetRegionInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region_info()) {
      if (region_info_ != NULL) region_info_->::hbase::pb::RegionInfo::Clear();
    }
    compaction_state_ = 0;
    isrecovering_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_compaction_state;
        break;
      }

      // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compaction_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::GetRegionInfoResponse_CompactionState_IsValid(value)) {
            set_compaction_state(static_cast< ::hbase::pb::GetRegionInfoResponse_CompactionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isRecovering;
        break;
      }

      // optional bool isRecovering = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRecovering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecovering_)));
          set_has_isrecovering();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRegionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionInfo region_info = 1;
  if (has_region_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_info(), output);
  }

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  if (has_compaction_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->compaction_state(), output);
  }

  // optional bool isRecovering = 3;
  if (has_isrecovering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrecovering(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRegionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionInfo region_info = 1;
  if (has_region_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region_info(), target);
  }

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  if (has_compaction_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->compaction_state(), target);
  }

  // optional bool isRecovering = 3;
  if (has_isrecovering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrecovering(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRegionInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionInfo region_info = 1;
    if (has_region_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_info());
    }

    // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
    if (has_compaction_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compaction_state());
    }

    // optional bool isRecovering = 3;
    if (has_isrecovering()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegionInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegionInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegionInfoResponse::MergeFrom(const GetRegionInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_info()) {
      mutable_region_info()->::hbase::pb::RegionInfo::MergeFrom(from.region_info());
    }
    if (from.has_compaction_state()) {
      set_compaction_state(from.compaction_state());
    }
    if (from.has_isrecovering()) {
      set_isrecovering(from.isrecovering());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionInfoResponse::CopyFrom(const GetRegionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region_info()) {
    if (!this->region_info().IsInitialized()) return false;
  }
  return true;
}

void GetRegionInfoResponse::Swap(GetRegionInfoResponse* other) {
  if (other != this) {
    std::swap(region_info_, other->region_info_);
    std::swap(compaction_state_, other->compaction_state_);
    std::swap(isrecovering_, other->isrecovering_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegionInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionInfoResponse_descriptor_;
  metadata.reflection = GetRegionInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreFileRequest::kRegionFieldNumber;
const int GetStoreFileRequest::kFamilyFieldNumber;
#endif  // !_MSC_VER

GetStoreFileRequest::GetStoreFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreFileRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

GetStoreFileRequest::GetStoreFileRequest(const GetStoreFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreFileRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreFileRequest::~GetStoreFileRequest() {
  SharedDtor();
}

void GetStoreFileRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void GetStoreFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreFileRequest_descriptor_;
}

const GetStoreFileRequest& GetStoreFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetStoreFileRequest* GetStoreFileRequest::default_instance_ = NULL;

GetStoreFileRequest* GetStoreFileRequest::New() const {
  return new GetStoreFileRequest;
}

void GetStoreFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
  }
  family_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family;
        break;
      }

      // repeated bytes family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // repeated bytes family = 2;
  for (int i = 0; i < this->family_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->family(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // repeated bytes family = 2;
  for (int i = 0; i < this->family_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->family(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  // repeated bytes family = 2;
  total_size += 1 * this->family_size();
  for (int i = 0; i < this->family_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->family(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreFileRequest::MergeFrom(const GetStoreFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_.MergeFrom(from.family_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreFileRequest::CopyFrom(const GetStoreFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void GetStoreFileRequest::Swap(GetStoreFileRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    family_.Swap(&other->family_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreFileRequest_descriptor_;
  metadata.reflection = GetStoreFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoreFileResponse::kStoreFileFieldNumber;
#endif  // !_MSC_VER

GetStoreFileResponse::GetStoreFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoreFileResponse::InitAsDefaultInstance() {
}

GetStoreFileResponse::GetStoreFileResponse(const GetStoreFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoreFileResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoreFileResponse::~GetStoreFileResponse() {
  SharedDtor();
}

void GetStoreFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStoreFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreFileResponse_descriptor_;
}

const GetStoreFileResponse& GetStoreFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetStoreFileResponse* GetStoreFileResponse::default_instance_ = NULL;

GetStoreFileResponse* GetStoreFileResponse::New() const {
  return new GetStoreFileResponse;
}

void GetStoreFileResponse::Clear() {
  store_file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoreFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string store_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_store_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_file(this->store_file_size() - 1).data(),
            this->store_file(this->store_file_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_store_file;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoreFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string store_file = 1;
  for (int i = 0; i < this->store_file_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->store_file(i).data(), this->store_file(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->store_file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoreFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string store_file = 1;
  for (int i = 0; i < this->store_file_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_file(i).data(), this->store_file(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->store_file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoreFileResponse::ByteSize() const {
  int total_size = 0;

  // repeated string store_file = 1;
  total_size += 1 * this->store_file_size();
  for (int i = 0; i < this->store_file_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->store_file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoreFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoreFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoreFileResponse::MergeFrom(const GetStoreFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_file_.MergeFrom(from.store_file_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoreFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreFileResponse::CopyFrom(const GetStoreFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreFileResponse::IsInitialized() const {

  return true;
}

void GetStoreFileResponse::Swap(GetStoreFileResponse* other) {
  if (other != this) {
    store_file_.Swap(&other->store_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoreFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreFileResponse_descriptor_;
  metadata.reflection = GetStoreFileResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetOnlineRegionRequest::GetOnlineRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOnlineRegionRequest::InitAsDefaultInstance() {
}

GetOnlineRegionRequest::GetOnlineRegionRequest(const GetOnlineRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOnlineRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOnlineRegionRequest::~GetOnlineRegionRequest() {
  SharedDtor();
}

void GetOnlineRegionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOnlineRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOnlineRegionRequest_descriptor_;
}

const GetOnlineRegionRequest& GetOnlineRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetOnlineRegionRequest* GetOnlineRegionRequest::default_instance_ = NULL;

GetOnlineRegionRequest* GetOnlineRegionRequest::New() const {
  return new GetOnlineRegionRequest;
}

void GetOnlineRegionRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOnlineRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetOnlineRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOnlineRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOnlineRegionRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOnlineRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOnlineRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOnlineRegionRequest::MergeFrom(const GetOnlineRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOnlineRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineRegionRequest::CopyFrom(const GetOnlineRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineRegionRequest::IsInitialized() const {

  return true;
}

void GetOnlineRegionRequest::Swap(GetOnlineRegionRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOnlineRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOnlineRegionRequest_descriptor_;
  metadata.reflection = GetOnlineRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOnlineRegionResponse::kRegionInfoFieldNumber;
#endif  // !_MSC_VER

GetOnlineRegionResponse::GetOnlineRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOnlineRegionResponse::InitAsDefaultInstance() {
}

GetOnlineRegionResponse::GetOnlineRegionResponse(const GetOnlineRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOnlineRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOnlineRegionResponse::~GetOnlineRegionResponse() {
  SharedDtor();
}

void GetOnlineRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOnlineRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOnlineRegionResponse_descriptor_;
}

const GetOnlineRegionResponse& GetOnlineRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetOnlineRegionResponse* GetOnlineRegionResponse::default_instance_ = NULL;

GetOnlineRegionResponse* GetOnlineRegionResponse::New() const {
  return new GetOnlineRegionResponse;
}

void GetOnlineRegionResponse::Clear() {
  region_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOnlineRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionInfo region_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_region_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOnlineRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.RegionInfo region_info = 1;
  for (int i = 0; i < this->region_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOnlineRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.RegionInfo region_info = 1;
  for (int i = 0; i < this->region_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOnlineRegionResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.RegionInfo region_info = 1;
  total_size += 1 * this->region_info_size();
  for (int i = 0; i < this->region_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOnlineRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOnlineRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOnlineRegionResponse::MergeFrom(const GetOnlineRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_info_.MergeFrom(from.region_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOnlineRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineRegionResponse::CopyFrom(const GetOnlineRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineRegionResponse::IsInitialized() const {

  for (int i = 0; i < region_info_size(); i++) {
    if (!this->region_info(i).IsInitialized()) return false;
  }
  return true;
}

void GetOnlineRegionResponse::Swap(GetOnlineRegionResponse* other) {
  if (other != this) {
    region_info_.Swap(&other->region_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOnlineRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOnlineRegionResponse_descriptor_;
  metadata.reflection = GetOnlineRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenRegionRequest_RegionOpenInfo::kRegionFieldNumber;
const int OpenRegionRequest_RegionOpenInfo::kVersionOfOfflineNodeFieldNumber;
const int OpenRegionRequest_RegionOpenInfo::kFavoredNodesFieldNumber;
const int OpenRegionRequest_RegionOpenInfo::kOpenForDistributedLogReplayFieldNumber;
#endif  // !_MSC_VER

OpenRegionRequest_RegionOpenInfo::OpenRegionRequest_RegionOpenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenRegionRequest_RegionOpenInfo::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionInfo*>(&::hbase::pb::RegionInfo::default_instance());
}

OpenRegionRequest_RegionOpenInfo::OpenRegionRequest_RegionOpenInfo(const OpenRegionRequest_RegionOpenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenRegionRequest_RegionOpenInfo::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  version_of_offline_node_ = 0u;
  openfordistributedlogreplay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRegionRequest_RegionOpenInfo::~OpenRegionRequest_RegionOpenInfo() {
  SharedDtor();
}

void OpenRegionRequest_RegionOpenInfo::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void OpenRegionRequest_RegionOpenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRegionRequest_RegionOpenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRegionRequest_RegionOpenInfo_descriptor_;
}

const OpenRegionRequest_RegionOpenInfo& OpenRegionRequest_RegionOpenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

OpenRegionRequest_RegionOpenInfo* OpenRegionRequest_RegionOpenInfo::default_instance_ = NULL;

OpenRegionRequest_RegionOpenInfo* OpenRegionRequest_RegionOpenInfo::New() const {
  return new OpenRegionRequest_RegionOpenInfo;
}

void OpenRegionRequest_RegionOpenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionInfo::Clear();
    }
    version_of_offline_node_ = 0u;
    openfordistributedlogreplay_ = false;
  }
  favored_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRegionRequest_RegionOpenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_of_offline_node;
        break;
      }

      // optional uint32 version_of_offline_node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_of_offline_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_of_offline_node_)));
          set_has_version_of_offline_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_favored_nodes;
        break;
      }

      // repeated .hbase.pb.ServerName favored_nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favored_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_favored_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_favored_nodes;
        if (input->ExpectTag(32)) goto parse_openForDistributedLogReplay;
        break;
      }

      // optional bool openForDistributedLogReplay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openForDistributedLogReplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openfordistributedlogreplay_)));
          set_has_openfordistributedlogreplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenRegionRequest_RegionOpenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionInfo region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional uint32 version_of_offline_node = 2;
  if (has_version_of_offline_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version_of_offline_node(), output);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 3;
  for (int i = 0; i < this->favored_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->favored_nodes(i), output);
  }

  // optional bool openForDistributedLogReplay = 4;
  if (has_openfordistributedlogreplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->openfordistributedlogreplay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenRegionRequest_RegionOpenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionInfo region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional uint32 version_of_offline_node = 2;
  if (has_version_of_offline_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_of_offline_node(), target);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 3;
  for (int i = 0; i < this->favored_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->favored_nodes(i), target);
  }

  // optional bool openForDistributedLogReplay = 4;
  if (has_openfordistributedlogreplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->openfordistributedlogreplay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenRegionRequest_RegionOpenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionInfo region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional uint32 version_of_offline_node = 2;
    if (has_version_of_offline_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_of_offline_node());
    }

    // optional bool openForDistributedLogReplay = 4;
    if (has_openfordistributedlogreplay()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.ServerName favored_nodes = 3;
  total_size += 1 * this->favored_nodes_size();
  for (int i = 0; i < this->favored_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->favored_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRegionRequest_RegionOpenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRegionRequest_RegionOpenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRegionRequest_RegionOpenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRegionRequest_RegionOpenInfo::MergeFrom(const OpenRegionRequest_RegionOpenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  favored_nodes_.MergeFrom(from.favored_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionInfo::MergeFrom(from.region());
    }
    if (from.has_version_of_offline_node()) {
      set_version_of_offline_node(from.version_of_offline_node());
    }
    if (from.has_openfordistributedlogreplay()) {
      set_openfordistributedlogreplay(from.openfordistributedlogreplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRegionRequest_RegionOpenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRegionRequest_RegionOpenInfo::CopyFrom(const OpenRegionRequest_RegionOpenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRegionRequest_RegionOpenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  for (int i = 0; i < favored_nodes_size(); i++) {
    if (!this->favored_nodes(i).IsInitialized()) return false;
  }
  return true;
}

void OpenRegionRequest_RegionOpenInfo::Swap(OpenRegionRequest_RegionOpenInfo* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(version_of_offline_node_, other->version_of_offline_node_);
    favored_nodes_.Swap(&other->favored_nodes_);
    std::swap(openfordistributedlogreplay_, other->openfordistributedlogreplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRegionRequest_RegionOpenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRegionRequest_RegionOpenInfo_descriptor_;
  metadata.reflection = OpenRegionRequest_RegionOpenInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OpenRegionRequest::kOpenInfoFieldNumber;
const int OpenRegionRequest::kServerStartCodeFieldNumber;
const int OpenRegionRequest::kMasterSystemTimeFieldNumber;
#endif  // !_MSC_VER

OpenRegionRequest::OpenRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenRegionRequest::InitAsDefaultInstance() {
}

OpenRegionRequest::OpenRegionRequest(const OpenRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  serverstartcode_ = GOOGLE_ULONGLONG(0);
  master_system_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRegionRequest::~OpenRegionRequest() {
  SharedDtor();
}

void OpenRegionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRegionRequest_descriptor_;
}

const OpenRegionRequest& OpenRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

OpenRegionRequest* OpenRegionRequest::default_instance_ = NULL;

OpenRegionRequest* OpenRegionRequest::New() const {
  return new OpenRegionRequest;
}

void OpenRegionRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    serverstartcode_ = GOOGLE_ULONGLONG(0);
    master_system_time_ = GOOGLE_ULONGLONG(0);
  }
  open_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_open_info;
        if (input->ExpectTag(16)) goto parse_serverStartCode;
        break;
      }

      // optional uint64 serverStartCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverStartCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverstartcode_)));
          set_has_serverstartcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_master_system_time;
        break;
      }

      // optional uint64 master_system_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_system_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &master_system_time_)));
          set_has_master_system_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  for (int i = 0; i < this->open_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->open_info(i), output);
  }

  // optional uint64 serverStartCode = 2;
  if (has_serverstartcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serverstartcode(), output);
  }

  // optional uint64 master_system_time = 5;
  if (has_master_system_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->master_system_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  for (int i = 0; i < this->open_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->open_info(i), target);
  }

  // optional uint64 serverStartCode = 2;
  if (has_serverstartcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serverstartcode(), target);
  }

  // optional uint64 master_system_time = 5;
  if (has_master_system_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->master_system_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 serverStartCode = 2;
    if (has_serverstartcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverstartcode());
    }

    // optional uint64 master_system_time = 5;
    if (has_master_system_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->master_system_time());
    }

  }
  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  total_size += 1 * this->open_info_size();
  for (int i = 0; i < this->open_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRegionRequest::MergeFrom(const OpenRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_info_.MergeFrom(from.open_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_serverstartcode()) {
      set_serverstartcode(from.serverstartcode());
    }
    if (from.has_master_system_time()) {
      set_master_system_time(from.master_system_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRegionRequest::CopyFrom(const OpenRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRegionRequest::IsInitialized() const {

  for (int i = 0; i < open_info_size(); i++) {
    if (!this->open_info(i).IsInitialized()) return false;
  }
  return true;
}

void OpenRegionRequest::Swap(OpenRegionRequest* other) {
  if (other != this) {
    open_info_.Swap(&other->open_info_);
    std::swap(serverstartcode_, other->serverstartcode_);
    std::swap(master_system_time_, other->master_system_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRegionRequest_descriptor_;
  metadata.reflection = OpenRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OpenRegionResponse_RegionOpeningState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRegionResponse_RegionOpeningState_descriptor_;
}
bool OpenRegionResponse_RegionOpeningState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OpenRegionResponse_RegionOpeningState OpenRegionResponse::OPENED;
const OpenRegionResponse_RegionOpeningState OpenRegionResponse::ALREADY_OPENED;
const OpenRegionResponse_RegionOpeningState OpenRegionResponse::FAILED_OPENING;
const OpenRegionResponse_RegionOpeningState OpenRegionResponse::RegionOpeningState_MIN;
const OpenRegionResponse_RegionOpeningState OpenRegionResponse::RegionOpeningState_MAX;
const int OpenRegionResponse::RegionOpeningState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OpenRegionResponse::kOpeningStateFieldNumber;
#endif  // !_MSC_VER

OpenRegionResponse::OpenRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenRegionResponse::InitAsDefaultInstance() {
}

OpenRegionResponse::OpenRegionResponse(const OpenRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRegionResponse::~OpenRegionResponse() {
  SharedDtor();
}

void OpenRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRegionResponse_descriptor_;
}

const OpenRegionResponse& OpenRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

OpenRegionResponse* OpenRegionResponse::default_instance_ = NULL;

OpenRegionResponse* OpenRegionResponse::New() const {
  return new OpenRegionResponse;
}

void OpenRegionResponse::Clear() {
  opening_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opening_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(value)) {
            add_opening_state(static_cast< ::hbase::pb::OpenRegionResponse_RegionOpeningState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid,
                 this->mutable_opening_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_opening_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  for (int i = 0; i < this->opening_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opening_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  for (int i = 0; i < this->opening_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opening_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenRegionResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->opening_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->opening_state(i));
    }
    total_size += 1 * this->opening_state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRegionResponse::MergeFrom(const OpenRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  opening_state_.MergeFrom(from.opening_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRegionResponse::CopyFrom(const OpenRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRegionResponse::IsInitialized() const {

  return true;
}

void OpenRegionResponse::Swap(OpenRegionResponse* other) {
  if (other != this) {
    opening_state_.Swap(&other->opening_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRegionResponse_descriptor_;
  metadata.reflection = OpenRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarmupRegionRequest::kRegionInfoFieldNumber;
#endif  // !_MSC_VER

WarmupRegionRequest::WarmupRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarmupRegionRequest::InitAsDefaultInstance() {
  regioninfo_ = const_cast< ::hbase::pb::RegionInfo*>(&::hbase::pb::RegionInfo::default_instance());
}

WarmupRegionRequest::WarmupRegionRequest(const WarmupRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarmupRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  regioninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarmupRegionRequest::~WarmupRegionRequest() {
  SharedDtor();
}

void WarmupRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete regioninfo_;
  }
}

void WarmupRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarmupRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarmupRegionRequest_descriptor_;
}

const WarmupRegionRequest& WarmupRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

WarmupRegionRequest* WarmupRegionRequest::default_instance_ = NULL;

WarmupRegionRequest* WarmupRegionRequest::New() const {
  return new WarmupRegionRequest;
}

void WarmupRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regioninfo()) {
      if (regioninfo_ != NULL) regioninfo_->::hbase::pb::RegionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarmupRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo regionInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarmupRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionInfo regionInfo = 1;
  if (has_regioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regioninfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarmupRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionInfo regionInfo = 1;
  if (has_regioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->regioninfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarmupRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionInfo regionInfo = 1;
    if (has_regioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regioninfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarmupRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarmupRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarmupRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarmupRegionRequest::MergeFrom(const WarmupRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regioninfo()) {
      mutable_regioninfo()->::hbase::pb::RegionInfo::MergeFrom(from.regioninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarmupRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmupRegionRequest::CopyFrom(const WarmupRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmupRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_regioninfo()) {
    if (!this->regioninfo().IsInitialized()) return false;
  }
  return true;
}

void WarmupRegionRequest::Swap(WarmupRegionRequest* other) {
  if (other != this) {
    std::swap(regioninfo_, other->regioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarmupRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarmupRegionRequest_descriptor_;
  metadata.reflection = WarmupRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WarmupRegionResponse::WarmupRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarmupRegionResponse::InitAsDefaultInstance() {
}

WarmupRegionResponse::WarmupRegionResponse(const WarmupRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarmupRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarmupRegionResponse::~WarmupRegionResponse() {
  SharedDtor();
}

void WarmupRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarmupRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarmupRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarmupRegionResponse_descriptor_;
}

const WarmupRegionResponse& WarmupRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

WarmupRegionResponse* WarmupRegionResponse::default_instance_ = NULL;

WarmupRegionResponse* WarmupRegionResponse::New() const {
  return new WarmupRegionResponse;
}

void WarmupRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarmupRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WarmupRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarmupRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarmupRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarmupRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarmupRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarmupRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarmupRegionResponse::MergeFrom(const WarmupRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarmupRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmupRegionResponse::CopyFrom(const WarmupRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmupRegionResponse::IsInitialized() const {

  return true;
}

void WarmupRegionResponse::Swap(WarmupRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarmupRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarmupRegionResponse_descriptor_;
  metadata.reflection = WarmupRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseRegionRequest::kRegionFieldNumber;
const int CloseRegionRequest::kVersionOfClosingNodeFieldNumber;
const int CloseRegionRequest::kTransitionInZKFieldNumber;
const int CloseRegionRequest::kDestinationServerFieldNumber;
const int CloseRegionRequest::kServerStartCodeFieldNumber;
#endif  // !_MSC_VER

CloseRegionRequest::CloseRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  destination_server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

CloseRegionRequest::CloseRegionRequest(const CloseRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  version_of_closing_node_ = 0u;
  transition_in_zk_ = true;
  destination_server_ = NULL;
  serverstartcode_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseRegionRequest::~CloseRegionRequest() {
  SharedDtor();
}

void CloseRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
    delete destination_server_;
  }
}

void CloseRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseRegionRequest_descriptor_;
}

const CloseRegionRequest& CloseRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

CloseRegionRequest* CloseRegionRequest::default_instance_ = NULL;

CloseRegionRequest* CloseRegionRequest::New() const {
  return new CloseRegionRequest;
}

void CloseRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    version_of_closing_node_ = 0u;
    transition_in_zk_ = true;
    if (has_destination_server()) {
      if (destination_server_ != NULL) destination_server_->::hbase::pb::ServerName::Clear();
    }
    serverstartcode_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_of_closing_node;
        break;
      }

      // optional uint32 version_of_closing_node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_of_closing_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_of_closing_node_)));
          set_has_version_of_closing_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transition_in_ZK;
        break;
      }

      // optional bool transition_in_ZK = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transition_in_ZK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transition_in_zk_)));
          set_has_transition_in_zk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_destination_server;
        break;
      }

      // optional .hbase.pb.ServerName destination_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverStartCode;
        break;
      }

      // optional uint64 serverStartCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverStartCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverstartcode_)));
          set_has_serverstartcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional uint32 version_of_closing_node = 2;
  if (has_version_of_closing_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version_of_closing_node(), output);
  }

  // optional bool transition_in_ZK = 3 [default = true];
  if (has_transition_in_zk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transition_in_zk(), output);
  }

  // optional .hbase.pb.ServerName destination_server = 4;
  if (has_destination_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->destination_server(), output);
  }

  // optional uint64 serverStartCode = 5;
  if (has_serverstartcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->serverstartcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional uint32 version_of_closing_node = 2;
  if (has_version_of_closing_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_of_closing_node(), target);
  }

  // optional bool transition_in_ZK = 3 [default = true];
  if (has_transition_in_zk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transition_in_zk(), target);
  }

  // optional .hbase.pb.ServerName destination_server = 4;
  if (has_destination_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->destination_server(), target);
  }

  // optional uint64 serverStartCode = 5;
  if (has_serverstartcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->serverstartcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional uint32 version_of_closing_node = 2;
    if (has_version_of_closing_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_of_closing_node());
    }

    // optional bool transition_in_ZK = 3 [default = true];
    if (has_transition_in_zk()) {
      total_size += 1 + 1;
    }

    // optional .hbase.pb.ServerName destination_server = 4;
    if (has_destination_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination_server());
    }

    // optional uint64 serverStartCode = 5;
    if (has_serverstartcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverstartcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseRegionRequest::MergeFrom(const CloseRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_version_of_closing_node()) {
      set_version_of_closing_node(from.version_of_closing_node());
    }
    if (from.has_transition_in_zk()) {
      set_transition_in_zk(from.transition_in_zk());
    }
    if (from.has_destination_server()) {
      mutable_destination_server()->::hbase::pb::ServerName::MergeFrom(from.destination_server());
    }
    if (from.has_serverstartcode()) {
      set_serverstartcode(from.serverstartcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRegionRequest::CopyFrom(const CloseRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_destination_server()) {
    if (!this->destination_server().IsInitialized()) return false;
  }
  return true;
}

void CloseRegionRequest::Swap(CloseRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(version_of_closing_node_, other->version_of_closing_node_);
    std::swap(transition_in_zk_, other->transition_in_zk_);
    std::swap(destination_server_, other->destination_server_);
    std::swap(serverstartcode_, other->serverstartcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseRegionRequest_descriptor_;
  metadata.reflection = CloseRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseRegionResponse::kClosedFieldNumber;
#endif  // !_MSC_VER

CloseRegionResponse::CloseRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseRegionResponse::InitAsDefaultInstance() {
}

CloseRegionResponse::CloseRegionResponse(const CloseRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseRegionResponse::~CloseRegionResponse() {
  SharedDtor();
}

void CloseRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseRegionResponse_descriptor_;
}

const CloseRegionResponse& CloseRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

CloseRegionResponse* CloseRegionResponse::default_instance_ = NULL;

CloseRegionResponse* CloseRegionResponse::New() const {
  return new CloseRegionResponse;
}

void CloseRegionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    closed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool closed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
          set_has_closed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool closed = 1;
  if (has_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->closed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool closed = 1;
  if (has_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->closed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseRegionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool closed = 1;
    if (has_closed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseRegionResponse::MergeFrom(const CloseRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_closed()) {
      set_closed(from.closed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRegionResponse::CopyFrom(const CloseRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRegionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CloseRegionResponse::Swap(CloseRegionResponse* other) {
  if (other != this) {
    std::swap(closed_, other->closed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseRegionResponse_descriptor_;
  metadata.reflection = CloseRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushRegionRequest::kRegionFieldNumber;
const int FlushRegionRequest::kIfOlderThanTsFieldNumber;
const int FlushRegionRequest::kWriteFlushWalMarkerFieldNumber;
#endif  // !_MSC_VER

FlushRegionRequest::FlushRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

FlushRegionRequest::FlushRegionRequest(const FlushRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  if_older_than_ts_ = GOOGLE_ULONGLONG(0);
  write_flush_wal_marker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushRegionRequest::~FlushRegionRequest() {
  SharedDtor();
}

void FlushRegionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void FlushRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushRegionRequest_descriptor_;
}

const FlushRegionRequest& FlushRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

FlushRegionRequest* FlushRegionRequest::default_instance_ = NULL;

FlushRegionRequest* FlushRegionRequest::New() const {
  return new FlushRegionRequest;
}

void FlushRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if_older_than_ts_ = GOOGLE_ULONGLONG(0);
    write_flush_wal_marker_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_if_older_than_ts;
        break;
      }

      // optional uint64 if_older_than_ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_if_older_than_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &if_older_than_ts_)));
          set_has_if_older_than_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_write_flush_wal_marker;
        break;
      }

      // optional bool write_flush_wal_marker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_flush_wal_marker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_flush_wal_marker_)));
          set_has_write_flush_wal_marker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional uint64 if_older_than_ts = 2;
  if (has_if_older_than_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->if_older_than_ts(), output);
  }

  // optional bool write_flush_wal_marker = 3;
  if (has_write_flush_wal_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->write_flush_wal_marker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional uint64 if_older_than_ts = 2;
  if (has_if_older_than_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->if_older_than_ts(), target);
  }

  // optional bool write_flush_wal_marker = 3;
  if (has_write_flush_wal_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->write_flush_wal_marker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional uint64 if_older_than_ts = 2;
    if (has_if_older_than_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->if_older_than_ts());
    }

    // optional bool write_flush_wal_marker = 3;
    if (has_write_flush_wal_marker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushRegionRequest::MergeFrom(const FlushRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_if_older_than_ts()) {
      set_if_older_than_ts(from.if_older_than_ts());
    }
    if (from.has_write_flush_wal_marker()) {
      set_write_flush_wal_marker(from.write_flush_wal_marker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRegionRequest::CopyFrom(const FlushRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void FlushRegionRequest::Swap(FlushRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(if_older_than_ts_, other->if_older_than_ts_);
    std::swap(write_flush_wal_marker_, other->write_flush_wal_marker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushRegionRequest_descriptor_;
  metadata.reflection = FlushRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushRegionResponse::kLastFlushTimeFieldNumber;
const int FlushRegionResponse::kFlushedFieldNumber;
const int FlushRegionResponse::kWroteFlushWalMarkerFieldNumber;
#endif  // !_MSC_VER

FlushRegionResponse::FlushRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushRegionResponse::InitAsDefaultInstance() {
}

FlushRegionResponse::FlushRegionResponse(const FlushRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  last_flush_time_ = GOOGLE_ULONGLONG(0);
  flushed_ = false;
  wrote_flush_wal_marker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushRegionResponse::~FlushRegionResponse() {
  SharedDtor();
}

void FlushRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlushRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushRegionResponse_descriptor_;
}

const FlushRegionResponse& FlushRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

FlushRegionResponse* FlushRegionResponse::default_instance_ = NULL;

FlushRegionResponse* FlushRegionResponse::New() const {
  return new FlushRegionResponse;
}

void FlushRegionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_flush_time_ = GOOGLE_ULONGLONG(0);
    flushed_ = false;
    wrote_flush_wal_marker_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 last_flush_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_flush_time_)));
          set_has_last_flush_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flushed;
        break;
      }

      // optional bool flushed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flushed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flushed_)));
          set_has_flushed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wrote_flush_wal_marker;
        break;
      }

      // optional bool wrote_flush_wal_marker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrote_flush_wal_marker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wrote_flush_wal_marker_)));
          set_has_wrote_flush_wal_marker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 last_flush_time = 1;
  if (has_last_flush_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_flush_time(), output);
  }

  // optional bool flushed = 2;
  if (has_flushed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flushed(), output);
  }

  // optional bool wrote_flush_wal_marker = 3;
  if (has_wrote_flush_wal_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wrote_flush_wal_marker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 last_flush_time = 1;
  if (has_last_flush_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_flush_time(), target);
  }

  // optional bool flushed = 2;
  if (has_flushed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flushed(), target);
  }

  // optional bool wrote_flush_wal_marker = 3;
  if (has_wrote_flush_wal_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wrote_flush_wal_marker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushRegionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 last_flush_time = 1;
    if (has_last_flush_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_flush_time());
    }

    // optional bool flushed = 2;
    if (has_flushed()) {
      total_size += 1 + 1;
    }

    // optional bool wrote_flush_wal_marker = 3;
    if (has_wrote_flush_wal_marker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushRegionResponse::MergeFrom(const FlushRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_flush_time()) {
      set_last_flush_time(from.last_flush_time());
    }
    if (from.has_flushed()) {
      set_flushed(from.flushed());
    }
    if (from.has_wrote_flush_wal_marker()) {
      set_wrote_flush_wal_marker(from.wrote_flush_wal_marker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRegionResponse::CopyFrom(const FlushRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRegionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlushRegionResponse::Swap(FlushRegionResponse* other) {
  if (other != this) {
    std::swap(last_flush_time_, other->last_flush_time_);
    std::swap(flushed_, other->flushed_);
    std::swap(wrote_flush_wal_marker_, other->wrote_flush_wal_marker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushRegionResponse_descriptor_;
  metadata.reflection = FlushRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SplitRegionRequest::kRegionFieldNumber;
const int SplitRegionRequest::kSplitPointFieldNumber;
#endif  // !_MSC_VER

SplitRegionRequest::SplitRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SplitRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

SplitRegionRequest::SplitRegionRequest(const SplitRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SplitRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  split_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitRegionRequest::~SplitRegionRequest() {
  SharedDtor();
}

void SplitRegionRequest::SharedDtor() {
  if (split_point_ != &::google::protobuf::internal::kEmptyString) {
    delete split_point_;
  }
  if (this != default_instance_) {
    delete region_;
  }
}

void SplitRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRegionRequest_descriptor_;
}

const SplitRegionRequest& SplitRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

SplitRegionRequest* SplitRegionRequest::default_instance_ = NULL;

SplitRegionRequest* SplitRegionRequest::New() const {
  return new SplitRegionRequest;
}

void SplitRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_split_point()) {
      if (split_point_ != &::google::protobuf::internal::kEmptyString) {
        split_point_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_split_point;
        break;
      }

      // optional bytes split_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_split_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SplitRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional bytes split_point = 2;
  if (has_split_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->split_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SplitRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional bytes split_point = 2;
  if (has_split_point()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->split_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SplitRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional bytes split_point = 2;
    if (has_split_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->split_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitRegionRequest::MergeFrom(const SplitRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_split_point()) {
      set_split_point(from.split_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegionRequest::CopyFrom(const SplitRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void SplitRegionRequest::Swap(SplitRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(split_point_, other->split_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRegionRequest_descriptor_;
  metadata.reflection = SplitRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SplitRegionResponse::SplitRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SplitRegionResponse::InitAsDefaultInstance() {
}

SplitRegionResponse::SplitRegionResponse(const SplitRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SplitRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitRegionResponse::~SplitRegionResponse() {
  SharedDtor();
}

void SplitRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SplitRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRegionResponse_descriptor_;
}

const SplitRegionResponse& SplitRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

SplitRegionResponse* SplitRegionResponse::default_instance_ = NULL;

SplitRegionResponse* SplitRegionResponse::New() const {
  return new SplitRegionResponse;
}

void SplitRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SplitRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SplitRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SplitRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitRegionResponse::MergeFrom(const SplitRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegionResponse::CopyFrom(const SplitRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRegionResponse::IsInitialized() const {

  return true;
}

void SplitRegionResponse::Swap(SplitRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRegionResponse_descriptor_;
  metadata.reflection = SplitRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompactRegionRequest::kRegionFieldNumber;
const int CompactRegionRequest::kMajorFieldNumber;
const int CompactRegionRequest::kFamilyFieldNumber;
#endif  // !_MSC_VER

CompactRegionRequest::CompactRegionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompactRegionRequest::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

CompactRegionRequest::CompactRegionRequest(const CompactRegionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompactRegionRequest::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  major_ = false;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactRegionRequest::~CompactRegionRequest() {
  SharedDtor();
}

void CompactRegionRequest::SharedDtor() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (this != default_instance_) {
    delete region_;
  }
}

void CompactRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactRegionRequest_descriptor_;
}

const CompactRegionRequest& CompactRegionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

CompactRegionRequest* CompactRegionRequest::default_instance_ = NULL;

CompactRegionRequest* CompactRegionRequest::New() const {
  return new CompactRegionRequest;
}

void CompactRegionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionSpecifier::Clear();
    }
    major_ = false;
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_major;
        break;
      }

      // optional bool major = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family;
        break;
      }

      // optional bytes family = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompactRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // optional bool major = 2;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->major(), output);
  }

  // optional bytes family = 3;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->family(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompactRegionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // optional bool major = 2;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->major(), target);
  }

  // optional bytes family = 3;
  if (has_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->family(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompactRegionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional bool major = 2;
    if (has_major()) {
      total_size += 1 + 1;
    }

    // optional bytes family = 3;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactRegionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactRegionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactRegionRequest::MergeFrom(const CompactRegionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_family()) {
      set_family(from.family());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactRegionRequest::CopyFrom(const CompactRegionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  return true;
}

void CompactRegionRequest::Swap(CompactRegionRequest* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(major_, other->major_);
    std::swap(family_, other->family_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactRegionRequest_descriptor_;
  metadata.reflection = CompactRegionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CompactRegionResponse::CompactRegionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompactRegionResponse::InitAsDefaultInstance() {
}

CompactRegionResponse::CompactRegionResponse(const CompactRegionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompactRegionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactRegionResponse::~CompactRegionResponse() {
  SharedDtor();
}

void CompactRegionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompactRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactRegionResponse_descriptor_;
}

const CompactRegionResponse& CompactRegionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

CompactRegionResponse* CompactRegionResponse::default_instance_ = NULL;

CompactRegionResponse* CompactRegionResponse::New() const {
  return new CompactRegionResponse;
}

void CompactRegionResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CompactRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompactRegionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompactRegionResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactRegionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactRegionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactRegionResponse::MergeFrom(const CompactRegionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactRegionResponse::CopyFrom(const CompactRegionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactRegionResponse::IsInitialized() const {

  return true;
}

void CompactRegionResponse::Swap(CompactRegionResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactRegionResponse_descriptor_;
  metadata.reflection = CompactRegionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFavoredNodesRequest_RegionUpdateInfo::kRegionFieldNumber;
const int UpdateFavoredNodesRequest_RegionUpdateInfo::kFavoredNodesFieldNumber;
#endif  // !_MSC_VER

UpdateFavoredNodesRequest_RegionUpdateInfo::UpdateFavoredNodesRequest_RegionUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::InitAsDefaultInstance() {
  region_ = const_cast< ::hbase::pb::RegionInfo*>(&::hbase::pb::RegionInfo::default_instance());
}

UpdateFavoredNodesRequest_RegionUpdateInfo::UpdateFavoredNodesRequest_RegionUpdateInfo(const UpdateFavoredNodesRequest_RegionUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  region_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFavoredNodesRequest_RegionUpdateInfo::~UpdateFavoredNodesRequest_RegionUpdateInfo() {
  SharedDtor();
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete region_;
  }
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFavoredNodesRequest_RegionUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFavoredNodesRequest_RegionUpdateInfo_descriptor_;
}

const UpdateFavoredNodesRequest_RegionUpdateInfo& UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

UpdateFavoredNodesRequest_RegionUpdateInfo* UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance_ = NULL;

UpdateFavoredNodesRequest_RegionUpdateInfo* UpdateFavoredNodesRequest_RegionUpdateInfo::New() const {
  return new UpdateFavoredNodesRequest_RegionUpdateInfo;
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region()) {
      if (region_ != NULL) region_->::hbase::pb::RegionInfo::Clear();
    }
  }
  favored_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFavoredNodesRequest_RegionUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_favored_nodes;
        break;
      }

      // repeated .hbase.pb.ServerName favored_nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favored_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_favored_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_favored_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionInfo region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(), output);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 2;
  for (int i = 0; i < this->favored_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->favored_nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFavoredNodesRequest_RegionUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionInfo region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region(), target);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 2;
  for (int i = 0; i < this->favored_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->favored_nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFavoredNodesRequest_RegionUpdateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionInfo region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

  }
  // repeated .hbase.pb.ServerName favored_nodes = 2;
  total_size += 1 * this->favored_nodes_size();
  for (int i = 0; i < this->favored_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->favored_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFavoredNodesRequest_RegionUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFavoredNodesRequest_RegionUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::MergeFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  favored_nodes_.MergeFrom(from.favored_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      mutable_region()->::hbase::pb::RegionInfo::MergeFrom(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::CopyFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFavoredNodesRequest_RegionUpdateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  for (int i = 0; i < favored_nodes_size(); i++) {
    if (!this->favored_nodes(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::Swap(UpdateFavoredNodesRequest_RegionUpdateInfo* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    favored_nodes_.Swap(&other->favored_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFavoredNodesRequest_RegionUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFavoredNodesRequest_RegionUpdateInfo_descriptor_;
  metadata.reflection = UpdateFavoredNodesRequest_RegionUpdateInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UpdateFavoredNodesRequest::kUpdateInfoFieldNumber;
#endif  // !_MSC_VER

UpdateFavoredNodesRequest::UpdateFavoredNodesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFavoredNodesRequest::InitAsDefaultInstance() {
}

UpdateFavoredNodesRequest::UpdateFavoredNodesRequest(const UpdateFavoredNodesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFavoredNodesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFavoredNodesRequest::~UpdateFavoredNodesRequest() {
  SharedDtor();
}

void UpdateFavoredNodesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFavoredNodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFavoredNodesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFavoredNodesRequest_descriptor_;
}

const UpdateFavoredNodesRequest& UpdateFavoredNodesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

UpdateFavoredNodesRequest* UpdateFavoredNodesRequest::default_instance_ = NULL;

UpdateFavoredNodesRequest* UpdateFavoredNodesRequest::New() const {
  return new UpdateFavoredNodesRequest;
}

void UpdateFavoredNodesRequest::Clear() {
  update_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFavoredNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_update_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFavoredNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  for (int i = 0; i < this->update_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFavoredNodesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  for (int i = 0; i < this->update_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFavoredNodesRequest::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  total_size += 1 * this->update_info_size();
  for (int i = 0; i < this->update_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFavoredNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFavoredNodesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFavoredNodesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFavoredNodesRequest::MergeFrom(const UpdateFavoredNodesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_info_.MergeFrom(from.update_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFavoredNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFavoredNodesRequest::CopyFrom(const UpdateFavoredNodesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFavoredNodesRequest::IsInitialized() const {

  for (int i = 0; i < update_info_size(); i++) {
    if (!this->update_info(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateFavoredNodesRequest::Swap(UpdateFavoredNodesRequest* other) {
  if (other != this) {
    update_info_.Swap(&other->update_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFavoredNodesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFavoredNodesRequest_descriptor_;
  metadata.reflection = UpdateFavoredNodesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFavoredNodesResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

UpdateFavoredNodesResponse::UpdateFavoredNodesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFavoredNodesResponse::InitAsDefaultInstance() {
}

UpdateFavoredNodesResponse::UpdateFavoredNodesResponse(const UpdateFavoredNodesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFavoredNodesResponse::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFavoredNodesResponse::~UpdateFavoredNodesResponse() {
  SharedDtor();
}

void UpdateFavoredNodesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFavoredNodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFavoredNodesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFavoredNodesResponse_descriptor_;
}

const UpdateFavoredNodesResponse& UpdateFavoredNodesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

UpdateFavoredNodesResponse* UpdateFavoredNodesResponse::default_instance_ = NULL;

UpdateFavoredNodesResponse* UpdateFavoredNodesResponse::New() const {
  return new UpdateFavoredNodesResponse;
}

void UpdateFavoredNodesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFavoredNodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFavoredNodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFavoredNodesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 response = 1;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFavoredNodesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFavoredNodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFavoredNodesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFavoredNodesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFavoredNodesResponse::MergeFrom(const UpdateFavoredNodesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFavoredNodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFavoredNodesResponse::CopyFrom(const UpdateFavoredNodesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFavoredNodesResponse::IsInitialized() const {

  return true;
}

void UpdateFavoredNodesResponse::Swap(UpdateFavoredNodesResponse* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFavoredNodesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFavoredNodesResponse_descriptor_;
  metadata.reflection = UpdateFavoredNodesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MergeRegionsRequest::kRegionAFieldNumber;
const int MergeRegionsRequest::kRegionBFieldNumber;
const int MergeRegionsRequest::kForcibleFieldNumber;
const int MergeRegionsRequest::kMasterSystemTimeFieldNumber;
#endif  // !_MSC_VER

MergeRegionsRequest::MergeRegionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MergeRegionsRequest::InitAsDefaultInstance() {
  region_a_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  region_b_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

MergeRegionsRequest::MergeRegionsRequest(const MergeRegionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MergeRegionsRequest::SharedCtor() {
  _cached_size_ = 0;
  region_a_ = NULL;
  region_b_ = NULL;
  forcible_ = false;
  master_system_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeRegionsRequest::~MergeRegionsRequest() {
  SharedDtor();
}

void MergeRegionsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete region_a_;
    delete region_b_;
  }
}

void MergeRegionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeRegionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeRegionsRequest_descriptor_;
}

const MergeRegionsRequest& MergeRegionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

MergeRegionsRequest* MergeRegionsRequest::default_instance_ = NULL;

MergeRegionsRequest* MergeRegionsRequest::New() const {
  return new MergeRegionsRequest;
}

void MergeRegionsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region_a()) {
      if (region_a_ != NULL) region_a_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_region_b()) {
      if (region_b_ != NULL) region_b_->::hbase::pb::RegionSpecifier::Clear();
    }
    forcible_ = false;
    master_system_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeRegionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region_a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_b;
        break;
      }

      // required .hbase.pb.RegionSpecifier region_b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forcible;
        break;
      }

      // optional bool forcible = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forcible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forcible_)));
          set_has_forcible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_master_system_time;
        break;
      }

      // optional uint64 master_system_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_system_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &master_system_time_)));
          set_has_master_system_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MergeRegionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region_a = 1;
  if (has_region_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_a(), output);
  }

  // required .hbase.pb.RegionSpecifier region_b = 2;
  if (has_region_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_b(), output);
  }

  // optional bool forcible = 3 [default = false];
  if (has_forcible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forcible(), output);
  }

  // optional uint64 master_system_time = 4;
  if (has_master_system_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->master_system_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MergeRegionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region_a = 1;
  if (has_region_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region_a(), target);
  }

  // required .hbase.pb.RegionSpecifier region_b = 2;
  if (has_region_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_b(), target);
  }

  // optional bool forcible = 3 [default = false];
  if (has_forcible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forcible(), target);
  }

  // optional uint64 master_system_time = 4;
  if (has_master_system_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->master_system_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MergeRegionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region_a = 1;
    if (has_region_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_a());
    }

    // required .hbase.pb.RegionSpecifier region_b = 2;
    if (has_region_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_b());
    }

    // optional bool forcible = 3 [default = false];
    if (has_forcible()) {
      total_size += 1 + 1;
    }

    // optional uint64 master_system_time = 4;
    if (has_master_system_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->master_system_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeRegionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeRegionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeRegionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeRegionsRequest::MergeFrom(const MergeRegionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_a()) {
      mutable_region_a()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_a());
    }
    if (from.has_region_b()) {
      mutable_region_b()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_b());
    }
    if (from.has_forcible()) {
      set_forcible(from.forcible());
    }
    if (from.has_master_system_time()) {
      set_master_system_time(from.master_system_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeRegionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRegionsRequest::CopyFrom(const MergeRegionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region_a()) {
    if (!this->region_a().IsInitialized()) return false;
  }
  if (has_region_b()) {
    if (!this->region_b().IsInitialized()) return false;
  }
  return true;
}

void MergeRegionsRequest::Swap(MergeRegionsRequest* other) {
  if (other != this) {
    std::swap(region_a_, other->region_a_);
    std::swap(region_b_, other->region_b_);
    std::swap(forcible_, other->forcible_);
    std::swap(master_system_time_, other->master_system_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeRegionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeRegionsRequest_descriptor_;
  metadata.reflection = MergeRegionsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MergeRegionsResponse::MergeRegionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MergeRegionsResponse::InitAsDefaultInstance() {
}

MergeRegionsResponse::MergeRegionsResponse(const MergeRegionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MergeRegionsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeRegionsResponse::~MergeRegionsResponse() {
  SharedDtor();
}

void MergeRegionsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MergeRegionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeRegionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeRegionsResponse_descriptor_;
}

const MergeRegionsResponse& MergeRegionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

MergeRegionsResponse* MergeRegionsResponse::default_instance_ = NULL;

MergeRegionsResponse* MergeRegionsResponse::New() const {
  return new MergeRegionsResponse;
}

void MergeRegionsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeRegionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MergeRegionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MergeRegionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MergeRegionsResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeRegionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeRegionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeRegionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeRegionsResponse::MergeFrom(const MergeRegionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeRegionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRegionsResponse::CopyFrom(const MergeRegionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionsResponse::IsInitialized() const {

  return true;
}

void MergeRegionsResponse::Swap(MergeRegionsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeRegionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeRegionsResponse_descriptor_;
  metadata.reflection = MergeRegionsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WALEntry::kKeyFieldNumber;
const int WALEntry::kKeyValueBytesFieldNumber;
const int WALEntry::kAssociatedCellCountFieldNumber;
#endif  // !_MSC_VER

WALEntry::WALEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WALEntry::InitAsDefaultInstance() {
  key_ = const_cast< ::hbase::pb::WALKey*>(&::hbase::pb::WALKey::default_instance());
}

WALEntry::WALEntry(const WALEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WALEntry::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  associated_cell_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WALEntry::~WALEntry() {
  SharedDtor();
}

void WALEntry::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void WALEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WALEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WALEntry_descriptor_;
}

const WALEntry& WALEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

WALEntry* WALEntry::default_instance_ = NULL;

WALEntry* WALEntry::New() const {
  return new WALEntry;
}

void WALEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != NULL) key_->::hbase::pb::WALKey::Clear();
    }
    associated_cell_count_ = 0;
  }
  key_value_bytes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WALEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.WALKey key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_value_bytes;
        break;
      }

      // repeated bytes key_value_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_value_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key_value_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_value_bytes;
        if (input->ExpectTag(24)) goto parse_associated_cell_count;
        break;
      }

      // optional int32 associated_cell_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_associated_cell_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &associated_cell_count_)));
          set_has_associated_cell_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WALEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.WALKey key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(), output);
  }

  // repeated bytes key_value_bytes = 2;
  for (int i = 0; i < this->key_value_bytes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key_value_bytes(i), output);
  }

  // optional int32 associated_cell_count = 3;
  if (has_associated_cell_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->associated_cell_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WALEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.WALKey key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key(), target);
  }

  // repeated bytes key_value_bytes = 2;
  for (int i = 0; i < this->key_value_bytes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key_value_bytes(i), target);
  }

  // optional int32 associated_cell_count = 3;
  if (has_associated_cell_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->associated_cell_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WALEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.WALKey key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional int32 associated_cell_count = 3;
    if (has_associated_cell_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->associated_cell_count());
    }

  }
  // repeated bytes key_value_bytes = 2;
  total_size += 1 * this->key_value_bytes_size();
  for (int i = 0; i < this->key_value_bytes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key_value_bytes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WALEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WALEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WALEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WALEntry::MergeFrom(const WALEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_value_bytes_.MergeFrom(from.key_value_bytes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      mutable_key()->::hbase::pb::WALKey::MergeFrom(from.key());
    }
    if (from.has_associated_cell_count()) {
      set_associated_cell_count(from.associated_cell_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WALEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALEntry::CopyFrom(const WALEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void WALEntry::Swap(WALEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    key_value_bytes_.Swap(&other->key_value_bytes_);
    std::swap(associated_cell_count_, other->associated_cell_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WALEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WALEntry_descriptor_;
  metadata.reflection = WALEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplicateWALEntryRequest::kEntryFieldNumber;
const int ReplicateWALEntryRequest::kReplicationClusterIdFieldNumber;
const int ReplicateWALEntryRequest::kSourceBaseNamespaceDirPathFieldNumber;
const int ReplicateWALEntryRequest::kSourceHFileArchiveDirPathFieldNumber;
#endif  // !_MSC_VER

ReplicateWALEntryRequest::ReplicateWALEntryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplicateWALEntryRequest::InitAsDefaultInstance() {
}

ReplicateWALEntryRequest::ReplicateWALEntryRequest(const ReplicateWALEntryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplicateWALEntryRequest::SharedCtor() {
  _cached_size_ = 0;
  replicationclusterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcebasenamespacedirpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcehfilearchivedirpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicateWALEntryRequest::~ReplicateWALEntryRequest() {
  SharedDtor();
}

void ReplicateWALEntryRequest::SharedDtor() {
  if (replicationclusterid_ != &::google::protobuf::internal::kEmptyString) {
    delete replicationclusterid_;
  }
  if (sourcebasenamespacedirpath_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcebasenamespacedirpath_;
  }
  if (sourcehfilearchivedirpath_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcehfilearchivedirpath_;
  }
  if (this != default_instance_) {
  }
}

void ReplicateWALEntryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicateWALEntryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicateWALEntryRequest_descriptor_;
}

const ReplicateWALEntryRequest& ReplicateWALEntryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

ReplicateWALEntryRequest* ReplicateWALEntryRequest::default_instance_ = NULL;

ReplicateWALEntryRequest* ReplicateWALEntryRequest::New() const {
  return new ReplicateWALEntryRequest;
}

void ReplicateWALEntryRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_replicationclusterid()) {
      if (replicationclusterid_ != &::google::protobuf::internal::kEmptyString) {
        replicationclusterid_->clear();
      }
    }
    if (has_sourcebasenamespacedirpath()) {
      if (sourcebasenamespacedirpath_ != &::google::protobuf::internal::kEmptyString) {
        sourcebasenamespacedirpath_->clear();
      }
    }
    if (has_sourcehfilearchivedirpath()) {
      if (sourcehfilearchivedirpath_ != &::google::protobuf::internal::kEmptyString) {
        sourcehfilearchivedirpath_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplicateWALEntryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.WALEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectTag(18)) goto parse_replicationClusterId;
        break;
      }

      // optional string replicationClusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replicationClusterId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replicationclusterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replicationclusterid().data(), this->replicationclusterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sourceBaseNamespaceDirPath;
        break;
      }

      // optional string sourceBaseNamespaceDirPath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceBaseNamespaceDirPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcebasenamespacedirpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcebasenamespacedirpath().data(), this->sourcebasenamespacedirpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sourceHFileArchiveDirPath;
        break;
      }

      // optional string sourceHFileArchiveDirPath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceHFileArchiveDirPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcehfilearchivedirpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcehfilearchivedirpath().data(), this->sourcehfilearchivedirpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplicateWALEntryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.WALEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  // optional string replicationClusterId = 2;
  if (has_replicationclusterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replicationclusterid().data(), this->replicationclusterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->replicationclusterid(), output);
  }

  // optional string sourceBaseNamespaceDirPath = 3;
  if (has_sourcebasenamespacedirpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcebasenamespacedirpath().data(), this->sourcebasenamespacedirpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sourcebasenamespacedirpath(), output);
  }

  // optional string sourceHFileArchiveDirPath = 4;
  if (has_sourcehfilearchivedirpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcehfilearchivedirpath().data(), this->sourcehfilearchivedirpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sourcehfilearchivedirpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplicateWALEntryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.WALEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  // optional string replicationClusterId = 2;
  if (has_replicationclusterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replicationclusterid().data(), this->replicationclusterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->replicationclusterid(), target);
  }

  // optional string sourceBaseNamespaceDirPath = 3;
  if (has_sourcebasenamespacedirpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcebasenamespacedirpath().data(), this->sourcebasenamespacedirpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sourcebasenamespacedirpath(), target);
  }

  // optional string sourceHFileArchiveDirPath = 4;
  if (has_sourcehfilearchivedirpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcehfilearchivedirpath().data(), this->sourcehfilearchivedirpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sourcehfilearchivedirpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplicateWALEntryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string replicationClusterId = 2;
    if (has_replicationclusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replicationclusterid());
    }

    // optional string sourceBaseNamespaceDirPath = 3;
    if (has_sourcebasenamespacedirpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcebasenamespacedirpath());
    }

    // optional string sourceHFileArchiveDirPath = 4;
    if (has_sourcehfilearchivedirpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcehfilearchivedirpath());
    }

  }
  // repeated .hbase.pb.WALEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicateWALEntryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplicateWALEntryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplicateWALEntryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicateWALEntryRequest::MergeFrom(const ReplicateWALEntryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_replicationclusterid()) {
      set_replicationclusterid(from.replicationclusterid());
    }
    if (from.has_sourcebasenamespacedirpath()) {
      set_sourcebasenamespacedirpath(from.sourcebasenamespacedirpath());
    }
    if (from.has_sourcehfilearchivedirpath()) {
      set_sourcehfilearchivedirpath(from.sourcehfilearchivedirpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplicateWALEntryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateWALEntryRequest::CopyFrom(const ReplicateWALEntryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateWALEntryRequest::IsInitialized() const {

  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void ReplicateWALEntryRequest::Swap(ReplicateWALEntryRequest* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(replicationclusterid_, other->replicationclusterid_);
    std::swap(sourcebasenamespacedirpath_, other->sourcebasenamespacedirpath_);
    std::swap(sourcehfilearchivedirpath_, other->sourcehfilearchivedirpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplicateWALEntryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicateWALEntryRequest_descriptor_;
  metadata.reflection = ReplicateWALEntryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReplicateWALEntryResponse::ReplicateWALEntryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplicateWALEntryResponse::InitAsDefaultInstance() {
}

ReplicateWALEntryResponse::ReplicateWALEntryResponse(const ReplicateWALEntryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplicateWALEntryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicateWALEntryResponse::~ReplicateWALEntryResponse() {
  SharedDtor();
}

void ReplicateWALEntryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplicateWALEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicateWALEntryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicateWALEntryResponse_descriptor_;
}

const ReplicateWALEntryResponse& ReplicateWALEntryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

ReplicateWALEntryResponse* ReplicateWALEntryResponse::default_instance_ = NULL;

ReplicateWALEntryResponse* ReplicateWALEntryResponse::New() const {
  return new ReplicateWALEntryResponse;
}

void ReplicateWALEntryResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplicateWALEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReplicateWALEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplicateWALEntryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplicateWALEntryResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicateWALEntryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplicateWALEntryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplicateWALEntryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicateWALEntryResponse::MergeFrom(const ReplicateWALEntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplicateWALEntryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateWALEntryResponse::CopyFrom(const ReplicateWALEntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateWALEntryResponse::IsInitialized() const {

  return true;
}

void ReplicateWALEntryResponse::Swap(ReplicateWALEntryResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplicateWALEntryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicateWALEntryResponse_descriptor_;
  metadata.reflection = ReplicateWALEntryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RollWALWriterRequest::RollWALWriterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RollWALWriterRequest::InitAsDefaultInstance() {
}

RollWALWriterRequest::RollWALWriterRequest(const RollWALWriterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RollWALWriterRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollWALWriterRequest::~RollWALWriterRequest() {
  SharedDtor();
}

void RollWALWriterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RollWALWriterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollWALWriterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollWALWriterRequest_descriptor_;
}

const RollWALWriterRequest& RollWALWriterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

RollWALWriterRequest* RollWALWriterRequest::default_instance_ = NULL;

RollWALWriterRequest* RollWALWriterRequest::New() const {
  return new RollWALWriterRequest;
}

void RollWALWriterRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollWALWriterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RollWALWriterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RollWALWriterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RollWALWriterRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollWALWriterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollWALWriterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollWALWriterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollWALWriterRequest::MergeFrom(const RollWALWriterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollWALWriterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollWALWriterRequest::CopyFrom(const RollWALWriterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollWALWriterRequest::IsInitialized() const {

  return true;
}

void RollWALWriterRequest::Swap(RollWALWriterRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollWALWriterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollWALWriterRequest_descriptor_;
  metadata.reflection = RollWALWriterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RollWALWriterResponse::kRegionToFlushFieldNumber;
#endif  // !_MSC_VER

RollWALWriterResponse::RollWALWriterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RollWALWriterResponse::InitAsDefaultInstance() {
}

RollWALWriterResponse::RollWALWriterResponse(const RollWALWriterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RollWALWriterResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollWALWriterResponse::~RollWALWriterResponse() {
  SharedDtor();
}

void RollWALWriterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RollWALWriterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollWALWriterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollWALWriterResponse_descriptor_;
}

const RollWALWriterResponse& RollWALWriterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

RollWALWriterResponse* RollWALWriterResponse::default_instance_ = NULL;

RollWALWriterResponse* RollWALWriterResponse::New() const {
  return new RollWALWriterResponse;
}

void RollWALWriterResponse::Clear() {
  region_to_flush_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollWALWriterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes region_to_flush = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_to_flush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_region_to_flush()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_region_to_flush;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RollWALWriterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes region_to_flush = 1;
  for (int i = 0; i < this->region_to_flush_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->region_to_flush(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RollWALWriterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes region_to_flush = 1;
  for (int i = 0; i < this->region_to_flush_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->region_to_flush(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RollWALWriterResponse::ByteSize() const {
  int total_size = 0;

  // repeated bytes region_to_flush = 1;
  total_size += 1 * this->region_to_flush_size();
  for (int i = 0; i < this->region_to_flush_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->region_to_flush(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollWALWriterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollWALWriterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollWALWriterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollWALWriterResponse::MergeFrom(const RollWALWriterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_to_flush_.MergeFrom(from.region_to_flush_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollWALWriterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollWALWriterResponse::CopyFrom(const RollWALWriterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollWALWriterResponse::IsInitialized() const {

  return true;
}

void RollWALWriterResponse::Swap(RollWALWriterResponse* other) {
  if (other != this) {
    region_to_flush_.Swap(&other->region_to_flush_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollWALWriterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollWALWriterResponse_descriptor_;
  metadata.reflection = RollWALWriterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopServerRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

StopServerRequest::StopServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopServerRequest::InitAsDefaultInstance() {
}

StopServerRequest::StopServerRequest(const StopServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopServerRequest::SharedCtor() {
  _cached_size_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopServerRequest::~StopServerRequest() {
  SharedDtor();
}

void StopServerRequest::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void StopServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopServerRequest_descriptor_;
}

const StopServerRequest& StopServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

StopServerRequest* StopServerRequest::default_instance_ = NULL;

StopServerRequest* StopServerRequest::New() const {
  return new StopServerRequest;
}

void StopServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopServerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopServerRequest::MergeFrom(const StopServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerRequest::CopyFrom(const StopServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StopServerRequest::Swap(StopServerRequest* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopServerRequest_descriptor_;
  metadata.reflection = StopServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopServerResponse::StopServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopServerResponse::InitAsDefaultInstance() {
}

StopServerResponse::StopServerResponse(const StopServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopServerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopServerResponse::~StopServerResponse() {
  SharedDtor();
}

void StopServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopServerResponse_descriptor_;
}

const StopServerResponse& StopServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

StopServerResponse* StopServerResponse::default_instance_ = NULL;

StopServerResponse* StopServerResponse::New() const {
  return new StopServerResponse;
}

void StopServerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StopServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopServerResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopServerResponse::MergeFrom(const StopServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerResponse::CopyFrom(const StopServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerResponse::IsInitialized() const {

  return true;
}

void StopServerResponse::Swap(StopServerResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopServerResponse_descriptor_;
  metadata.reflection = StopServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServerInfoRequest::GetServerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerInfoRequest::InitAsDefaultInstance() {
}

GetServerInfoRequest::GetServerInfoRequest(const GetServerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerInfoRequest::~GetServerInfoRequest() {
  SharedDtor();
}

void GetServerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerInfoRequest_descriptor_;
}

const GetServerInfoRequest& GetServerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetServerInfoRequest* GetServerInfoRequest::default_instance_ = NULL;

GetServerInfoRequest* GetServerInfoRequest::New() const {
  return new GetServerInfoRequest;
}

void GetServerInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerInfoRequest::MergeFrom(const GetServerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfoRequest::CopyFrom(const GetServerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfoRequest::IsInitialized() const {

  return true;
}

void GetServerInfoRequest::Swap(GetServerInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerInfoRequest_descriptor_;
  metadata.reflection = GetServerInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kServerNameFieldNumber;
const int ServerInfo::kWebuiPortFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
  server_name_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = NULL;
  webui_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete server_name_;
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != NULL) server_name_->::hbase::pb::ServerName::Clear();
    }
    webui_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webui_port;
        break;
      }

      // optional uint32 webui_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webui_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webui_port_)));
          set_has_webui_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_name(), output);
  }

  // optional uint32 webui_port = 2;
  if (has_webui_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webui_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server_name = 1;
  if (has_server_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_name(), target);
  }

  // optional uint32 webui_port = 2;
  if (has_webui_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webui_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_name());
    }

    // optional uint32 webui_port = 2;
    if (has_webui_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webui_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      mutable_server_name()->::hbase::pb::ServerName::MergeFrom(from.server_name());
    }
    if (from.has_webui_port()) {
      set_webui_port(from.webui_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server_name()) {
    if (!this->server_name().IsInitialized()) return false;
  }
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(webui_port_, other->webui_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServerInfoResponse::kServerInfoFieldNumber;
#endif  // !_MSC_VER

GetServerInfoResponse::GetServerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerInfoResponse::InitAsDefaultInstance() {
  server_info_ = const_cast< ::hbase::pb::ServerInfo*>(&::hbase::pb::ServerInfo::default_instance());
}

GetServerInfoResponse::GetServerInfoResponse(const GetServerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  server_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerInfoResponse::~GetServerInfoResponse() {
  SharedDtor();
}

void GetServerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete server_info_;
  }
}

void GetServerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerInfoResponse_descriptor_;
}

const GetServerInfoResponse& GetServerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

GetServerInfoResponse* GetServerInfoResponse::default_instance_ = NULL;

GetServerInfoResponse* GetServerInfoResponse::New() const {
  return new GetServerInfoResponse;
}

void GetServerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_info()) {
      if (server_info_ != NULL) server_info_->::hbase::pb::ServerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerInfo server_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerInfo server_info = 1;
  if (has_server_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerInfo server_info = 1;
  if (has_server_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerInfo server_info = 1;
    if (has_server_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerInfoResponse::MergeFrom(const GetServerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_info()) {
      mutable_server_info()->::hbase::pb::ServerInfo::MergeFrom(from.server_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfoResponse::CopyFrom(const GetServerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server_info()) {
    if (!this->server_info().IsInitialized()) return false;
  }
  return true;
}

void GetServerInfoResponse::Swap(GetServerInfoResponse* other) {
  if (other != this) {
    std::swap(server_info_, other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerInfoResponse_descriptor_;
  metadata.reflection = GetServerInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateConfigurationRequest::UpdateConfigurationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateConfigurationRequest::InitAsDefaultInstance() {
}

UpdateConfigurationRequest::UpdateConfigurationRequest(const UpdateConfigurationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateConfigurationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateConfigurationRequest::~UpdateConfigurationRequest() {
  SharedDtor();
}

void UpdateConfigurationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateConfigurationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConfigurationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateConfigurationRequest_descriptor_;
}

const UpdateConfigurationRequest& UpdateConfigurationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

UpdateConfigurationRequest* UpdateConfigurationRequest::default_instance_ = NULL;

UpdateConfigurationRequest* UpdateConfigurationRequest::New() const {
  return new UpdateConfigurationRequest;
}

void UpdateConfigurationRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateConfigurationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UpdateConfigurationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateConfigurationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateConfigurationRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConfigurationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateConfigurationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateConfigurationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateConfigurationRequest::MergeFrom(const UpdateConfigurationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateConfigurationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigurationRequest::CopyFrom(const UpdateConfigurationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigurationRequest::IsInitialized() const {

  return true;
}

void UpdateConfigurationRequest::Swap(UpdateConfigurationRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateConfigurationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateConfigurationRequest_descriptor_;
  metadata.reflection = UpdateConfigurationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateConfigurationResponse::UpdateConfigurationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateConfigurationResponse::InitAsDefaultInstance() {
}

UpdateConfigurationResponse::UpdateConfigurationResponse(const UpdateConfigurationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateConfigurationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateConfigurationResponse::~UpdateConfigurationResponse() {
  SharedDtor();
}

void UpdateConfigurationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateConfigurationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConfigurationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateConfigurationResponse_descriptor_;
}

const UpdateConfigurationResponse& UpdateConfigurationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

UpdateConfigurationResponse* UpdateConfigurationResponse::default_instance_ = NULL;

UpdateConfigurationResponse* UpdateConfigurationResponse::New() const {
  return new UpdateConfigurationResponse;
}

void UpdateConfigurationResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateConfigurationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UpdateConfigurationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateConfigurationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateConfigurationResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConfigurationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateConfigurationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateConfigurationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateConfigurationResponse::MergeFrom(const UpdateConfigurationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateConfigurationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigurationResponse::CopyFrom(const UpdateConfigurationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigurationResponse::IsInitialized() const {

  return true;
}

void UpdateConfigurationResponse::Swap(UpdateConfigurationResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateConfigurationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateConfigurationResponse_descriptor_;
  metadata.reflection = UpdateConfigurationResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
