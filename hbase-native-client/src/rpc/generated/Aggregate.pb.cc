// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Aggregate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Aggregate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* AggregateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AggregateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregateResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Aggregate_2eproto() {
  protobuf_AddDesc_Aggregate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Aggregate.proto");
  GOOGLE_CHECK(file != NULL);
  AggregateRequest_descriptor_ = file->message_type(0);
  static const int AggregateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRequest, interpreter_class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRequest, scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRequest, interpreter_specific_bytes_),
  };
  AggregateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregateRequest_descriptor_,
      AggregateRequest::default_instance_,
      AggregateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregateRequest));
  AggregateResponse_descriptor_ = file->message_type(1);
  static const int AggregateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateResponse, first_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateResponse, second_part_),
  };
  AggregateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregateResponse_descriptor_,
      AggregateResponse::default_instance_,
      AggregateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregateResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Aggregate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregateRequest_descriptor_, &AggregateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregateResponse_descriptor_, &AggregateResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Aggregate_2eproto() {
  delete AggregateRequest::default_instance_;
  delete AggregateRequest_reflection_;
  delete AggregateResponse::default_instance_;
  delete AggregateResponse_reflection_;
}

void protobuf_AddDesc_Aggregate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Aggregate.proto\022\010hbase.pb\032\014Client.prot"
    "o\"t\n\020AggregateRequest\022\036\n\026interpreter_cla"
    "ss_name\030\001 \002(\t\022\034\n\004scan\030\002 \002(\0132\016.hbase.pb.S"
    "can\022\"\n\032interpreter_specific_bytes\030\003 \001(\014\""
    "<\n\021AggregateResponse\022\022\n\nfirst_part\030\001 \003(\014"
    "\022\023\n\013second_part\030\002 \001(\0142\355\003\n\020AggregateServi"
    "ce\022A\n\006GetMax\022\032.hbase.pb.AggregateRequest"
    "\032\033.hbase.pb.AggregateResponse\022A\n\006GetMin\022"
    "\032.hbase.pb.AggregateRequest\032\033.hbase.pb.A"
    "ggregateResponse\022A\n\006GetSum\022\032.hbase.pb.Ag"
    "gregateRequest\032\033.hbase.pb.AggregateRespo"
    "nse\022D\n\tGetRowNum\022\032.hbase.pb.AggregateReq"
    "uest\032\033.hbase.pb.AggregateResponse\022A\n\006Get"
    "Avg\022\032.hbase.pb.AggregateRequest\032\033.hbase."
    "pb.AggregateResponse\022A\n\006GetStd\022\032.hbase.p"
    "b.AggregateRequest\032\033.hbase.pb.AggregateR"
    "esponse\022D\n\tGetMedian\022\032.hbase.pb.Aggregat"
    "eRequest\032\033.hbase.pb.AggregateResponseBE\n"
    "*org.apache.hadoop.hbase.protobuf.genera"
    "tedB\017AggregateProtosH\001\210\001\001\240\001\001", 788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Aggregate.proto", &protobuf_RegisterTypes);
  AggregateRequest::default_instance_ = new AggregateRequest();
  AggregateResponse::default_instance_ = new AggregateResponse();
  AggregateRequest::default_instance_->InitAsDefaultInstance();
  AggregateResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Aggregate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Aggregate_2eproto {
  StaticDescriptorInitializer_Aggregate_2eproto() {
    protobuf_AddDesc_Aggregate_2eproto();
  }
} static_descriptor_initializer_Aggregate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AggregateRequest::kInterpreterClassNameFieldNumber;
const int AggregateRequest::kScanFieldNumber;
const int AggregateRequest::kInterpreterSpecificBytesFieldNumber;
#endif  // !_MSC_VER

AggregateRequest::AggregateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggregateRequest::InitAsDefaultInstance() {
  scan_ = const_cast< ::hbase::pb::Scan*>(&::hbase::pb::Scan::default_instance());
}

AggregateRequest::AggregateRequest(const AggregateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggregateRequest::SharedCtor() {
  _cached_size_ = 0;
  interpreter_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scan_ = NULL;
  interpreter_specific_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregateRequest::~AggregateRequest() {
  SharedDtor();
}

void AggregateRequest::SharedDtor() {
  if (interpreter_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete interpreter_class_name_;
  }
  if (interpreter_specific_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete interpreter_specific_bytes_;
  }
  if (this != default_instance_) {
    delete scan_;
  }
}

void AggregateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregateRequest_descriptor_;
}

const AggregateRequest& AggregateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Aggregate_2eproto();
  return *default_instance_;
}

AggregateRequest* AggregateRequest::default_instance_ = NULL;

AggregateRequest* AggregateRequest::New() const {
  return new AggregateRequest;
}

void AggregateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_interpreter_class_name()) {
      if (interpreter_class_name_ != &::google::protobuf::internal::kEmptyString) {
        interpreter_class_name_->clear();
      }
    }
    if (has_scan()) {
      if (scan_ != NULL) scan_->::hbase::pb::Scan::Clear();
    }
    if (has_interpreter_specific_bytes()) {
      if (interpreter_specific_bytes_ != &::google::protobuf::internal::kEmptyString) {
        interpreter_specific_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string interpreter_class_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interpreter_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interpreter_class_name().data(), this->interpreter_class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scan;
        break;
      }

      // required .hbase.pb.Scan scan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_interpreter_specific_bytes;
        break;
      }

      // optional bytes interpreter_specific_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpreter_specific_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_interpreter_specific_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string interpreter_class_name = 1;
  if (has_interpreter_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interpreter_class_name().data(), this->interpreter_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->interpreter_class_name(), output);
  }

  // required .hbase.pb.Scan scan = 2;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scan(), output);
  }

  // optional bytes interpreter_specific_bytes = 3;
  if (has_interpreter_specific_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->interpreter_specific_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggregateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string interpreter_class_name = 1;
  if (has_interpreter_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interpreter_class_name().data(), this->interpreter_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interpreter_class_name(), target);
  }

  // required .hbase.pb.Scan scan = 2;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scan(), target);
  }

  // optional bytes interpreter_specific_bytes = 3;
  if (has_interpreter_specific_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->interpreter_specific_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggregateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string interpreter_class_name = 1;
    if (has_interpreter_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interpreter_class_name());
    }

    // required .hbase.pb.Scan scan = 2;
    if (has_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan());
    }

    // optional bytes interpreter_specific_bytes = 3;
    if (has_interpreter_specific_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->interpreter_specific_bytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregateRequest::MergeFrom(const AggregateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interpreter_class_name()) {
      set_interpreter_class_name(from.interpreter_class_name());
    }
    if (from.has_scan()) {
      mutable_scan()->::hbase::pb::Scan::MergeFrom(from.scan());
    }
    if (from.has_interpreter_specific_bytes()) {
      set_interpreter_specific_bytes(from.interpreter_specific_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateRequest::CopyFrom(const AggregateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_scan()) {
    if (!this->scan().IsInitialized()) return false;
  }
  return true;
}

void AggregateRequest::Swap(AggregateRequest* other) {
  if (other != this) {
    std::swap(interpreter_class_name_, other->interpreter_class_name_);
    std::swap(scan_, other->scan_);
    std::swap(interpreter_specific_bytes_, other->interpreter_specific_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregateRequest_descriptor_;
  metadata.reflection = AggregateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AggregateResponse::kFirstPartFieldNumber;
const int AggregateResponse::kSecondPartFieldNumber;
#endif  // !_MSC_VER

AggregateResponse::AggregateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggregateResponse::InitAsDefaultInstance() {
}

AggregateResponse::AggregateResponse(const AggregateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggregateResponse::SharedCtor() {
  _cached_size_ = 0;
  second_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregateResponse::~AggregateResponse() {
  SharedDtor();
}

void AggregateResponse::SharedDtor() {
  if (second_part_ != &::google::protobuf::internal::kEmptyString) {
    delete second_part_;
  }
  if (this != default_instance_) {
  }
}

void AggregateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregateResponse_descriptor_;
}

const AggregateResponse& AggregateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Aggregate_2eproto();
  return *default_instance_;
}

AggregateResponse* AggregateResponse::default_instance_ = NULL;

AggregateResponse* AggregateResponse::New() const {
  return new AggregateResponse;
}

void AggregateResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_second_part()) {
      if (second_part_ != &::google::protobuf::internal::kEmptyString) {
        second_part_->clear();
      }
    }
  }
  first_part_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes first_part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_first_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_first_part;
        if (input->ExpectTag(18)) goto parse_second_part;
        break;
      }

      // optional bytes second_part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_second_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes first_part = 1;
  for (int i = 0; i < this->first_part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->first_part(i), output);
  }

  // optional bytes second_part = 2;
  if (has_second_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->second_part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggregateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes first_part = 1;
  for (int i = 0; i < this->first_part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->first_part(i), target);
  }

  // optional bytes second_part = 2;
  if (has_second_part()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->second_part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggregateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes second_part = 2;
    if (has_second_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->second_part());
    }

  }
  // repeated bytes first_part = 1;
  total_size += 1 * this->first_part_size();
  for (int i = 0; i < this->first_part_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->first_part(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregateResponse::MergeFrom(const AggregateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_part_.MergeFrom(from.first_part_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_second_part()) {
      set_second_part(from.second_part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateResponse::CopyFrom(const AggregateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateResponse::IsInitialized() const {

  return true;
}

void AggregateResponse::Swap(AggregateResponse* other) {
  if (other != this) {
    first_part_.Swap(&other->first_part_);
    std::swap(second_part_, other->second_part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregateResponse_descriptor_;
  metadata.reflection = AggregateResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
