// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* TableName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableName_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TableDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnFamilySchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnFamilySchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FavoredNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FavoredNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionSpecifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionSpecifier_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegionSpecifier_RegionSpecifierType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TimeRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnFamilyTimeRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnFamilyTimeRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coprocessor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coprocessor_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameStringPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameStringPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameBytesPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameBytesPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* BytesBytesPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BytesBytesPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameInt64Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameInt64Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotDescription_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SnapshotDescription_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProcedureDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcedureDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LongMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LongMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigDecimalMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigDecimalMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamespaceDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamespaceDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionServerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CompareType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeUnit_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_HBase_2eproto() {
  protobuf_AddDesc_HBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HBase.proto");
  GOOGLE_CHECK(file != NULL);
  TableName_descriptor_ = file->message_type(0);
  static const int TableName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, qualifier_),
  };
  TableName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableName_descriptor_,
      TableName::default_instance_,
      TableName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableName));
  TableSchema_descriptor_ = file->message_type(1);
  static const int TableSchema_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, column_families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, configuration_),
  };
  TableSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableSchema_descriptor_,
      TableSchema::default_instance_,
      TableSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableSchema));
  TableState_descriptor_ = file->message_type(2);
  static const int TableState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, state_),
  };
  TableState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableState_descriptor_,
      TableState::default_instance_,
      TableState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableState));
  TableState_State_descriptor_ = TableState_descriptor_->enum_type(0);
  TableDescriptor_descriptor_ = file->message_type(3);
  static const int TableDescriptor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDescriptor, schema_),
  };
  TableDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableDescriptor_descriptor_,
      TableDescriptor::default_instance_,
      TableDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableDescriptor));
  ColumnFamilySchema_descriptor_ = file->message_type(4);
  static const int ColumnFamilySchema_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilySchema, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilySchema, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilySchema, configuration_),
  };
  ColumnFamilySchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnFamilySchema_descriptor_,
      ColumnFamilySchema::default_instance_,
      ColumnFamilySchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilySchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilySchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnFamilySchema));
  RegionInfo_descriptor_ = file->message_type(5);
  static const int RegionInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, replica_id_),
  };
  RegionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionInfo_descriptor_,
      RegionInfo::default_instance_,
      RegionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionInfo));
  FavoredNodes_descriptor_ = file->message_type(6);
  static const int FavoredNodes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavoredNodes, favored_node_),
  };
  FavoredNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FavoredNodes_descriptor_,
      FavoredNodes::default_instance_,
      FavoredNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavoredNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavoredNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FavoredNodes));
  RegionSpecifier_descriptor_ = file->message_type(7);
  static const int RegionSpecifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSpecifier, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSpecifier, value_),
  };
  RegionSpecifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionSpecifier_descriptor_,
      RegionSpecifier::default_instance_,
      RegionSpecifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSpecifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionSpecifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionSpecifier));
  RegionSpecifier_RegionSpecifierType_descriptor_ = RegionSpecifier_descriptor_->enum_type(0);
  TimeRange_descriptor_ = file->message_type(8);
  static const int TimeRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, to_),
  };
  TimeRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeRange_descriptor_,
      TimeRange::default_instance_,
      TimeRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeRange));
  ColumnFamilyTimeRange_descriptor_ = file->message_type(9);
  static const int ColumnFamilyTimeRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilyTimeRange, column_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilyTimeRange, time_range_),
  };
  ColumnFamilyTimeRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnFamilyTimeRange_descriptor_,
      ColumnFamilyTimeRange::default_instance_,
      ColumnFamilyTimeRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilyTimeRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnFamilyTimeRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnFamilyTimeRange));
  ServerName_descriptor_ = file->message_type(10);
  static const int ServerName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, start_code_),
  };
  ServerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerName_descriptor_,
      ServerName::default_instance_,
      ServerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerName));
  Coprocessor_descriptor_ = file->message_type(11);
  static const int Coprocessor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coprocessor, name_),
  };
  Coprocessor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coprocessor_descriptor_,
      Coprocessor::default_instance_,
      Coprocessor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coprocessor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coprocessor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coprocessor));
  NameStringPair_descriptor_ = file->message_type(12);
  static const int NameStringPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStringPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStringPair, value_),
  };
  NameStringPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameStringPair_descriptor_,
      NameStringPair::default_instance_,
      NameStringPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStringPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameStringPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameStringPair));
  NameBytesPair_descriptor_ = file->message_type(13);
  static const int NameBytesPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameBytesPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameBytesPair, value_),
  };
  NameBytesPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameBytesPair_descriptor_,
      NameBytesPair::default_instance_,
      NameBytesPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameBytesPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameBytesPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameBytesPair));
  BytesBytesPair_descriptor_ = file->message_type(14);
  static const int BytesBytesPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesBytesPair, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesBytesPair, second_),
  };
  BytesBytesPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BytesBytesPair_descriptor_,
      BytesBytesPair::default_instance_,
      BytesBytesPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesBytesPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesBytesPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BytesBytesPair));
  NameInt64Pair_descriptor_ = file->message_type(15);
  static const int NameInt64Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameInt64Pair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameInt64Pair, value_),
  };
  NameInt64Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameInt64Pair_descriptor_,
      NameInt64Pair::default_instance_,
      NameInt64Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameInt64Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameInt64Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameInt64Pair));
  SnapshotDescription_descriptor_ = file->message_type(16);
  static const int SnapshotDescription_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, owner_),
  };
  SnapshotDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotDescription_descriptor_,
      SnapshotDescription::default_instance_,
      SnapshotDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotDescription));
  SnapshotDescription_Type_descriptor_ = SnapshotDescription_descriptor_->enum_type(0);
  ProcedureDescription_descriptor_ = file->message_type(17);
  static const int ProcedureDescription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcedureDescription, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcedureDescription, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcedureDescription, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcedureDescription, configuration_),
  };
  ProcedureDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcedureDescription_descriptor_,
      ProcedureDescription::default_instance_,
      ProcedureDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcedureDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcedureDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcedureDescription));
  EmptyMsg_descriptor_ = file->message_type(18);
  static const int EmptyMsg_offsets_[1] = {
  };
  EmptyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMsg_descriptor_,
      EmptyMsg::default_instance_,
      EmptyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMsg));
  LongMsg_descriptor_ = file->message_type(19);
  static const int LongMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongMsg, long_msg_),
  };
  LongMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LongMsg_descriptor_,
      LongMsg::default_instance_,
      LongMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LongMsg));
  DoubleMsg_descriptor_ = file->message_type(20);
  static const int DoubleMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMsg, double_msg_),
  };
  DoubleMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleMsg_descriptor_,
      DoubleMsg::default_instance_,
      DoubleMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleMsg));
  BigDecimalMsg_descriptor_ = file->message_type(21);
  static const int BigDecimalMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigDecimalMsg, bigdecimal_msg_),
  };
  BigDecimalMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigDecimalMsg_descriptor_,
      BigDecimalMsg::default_instance_,
      BigDecimalMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigDecimalMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigDecimalMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigDecimalMsg));
  UUID_descriptor_ = file->message_type(22);
  static const int UUID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, least_sig_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, most_sig_bits_),
  };
  UUID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UUID_descriptor_,
      UUID::default_instance_,
      UUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UUID));
  NamespaceDescriptor_descriptor_ = file->message_type(23);
  static const int NamespaceDescriptor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceDescriptor, configuration_),
  };
  NamespaceDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NamespaceDescriptor_descriptor_,
      NamespaceDescriptor::default_instance_,
      NamespaceDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamespaceDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NamespaceDescriptor));
  VersionInfo_descriptor_ = file->message_type(24);
  static const int VersionInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, src_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, version_minor_),
  };
  VersionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionInfo_descriptor_,
      VersionInfo::default_instance_,
      VersionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionInfo));
  RegionServerInfo_descriptor_ = file->message_type(25);
  static const int RegionServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerInfo, infoport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerInfo, version_info_),
  };
  RegionServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionServerInfo_descriptor_,
      RegionServerInfo::default_instance_,
      RegionServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionServerInfo));
  CompareType_descriptor_ = file->enum_type(0);
  TimeUnit_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableName_descriptor_, &TableName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableSchema_descriptor_, &TableSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableState_descriptor_, &TableState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableDescriptor_descriptor_, &TableDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnFamilySchema_descriptor_, &ColumnFamilySchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionInfo_descriptor_, &RegionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FavoredNodes_descriptor_, &FavoredNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionSpecifier_descriptor_, &RegionSpecifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeRange_descriptor_, &TimeRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnFamilyTimeRange_descriptor_, &ColumnFamilyTimeRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerName_descriptor_, &ServerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coprocessor_descriptor_, &Coprocessor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameStringPair_descriptor_, &NameStringPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameBytesPair_descriptor_, &NameBytesPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BytesBytesPair_descriptor_, &BytesBytesPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameInt64Pair_descriptor_, &NameInt64Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotDescription_descriptor_, &SnapshotDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcedureDescription_descriptor_, &ProcedureDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMsg_descriptor_, &EmptyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LongMsg_descriptor_, &LongMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleMsg_descriptor_, &DoubleMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigDecimalMsg_descriptor_, &BigDecimalMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UUID_descriptor_, &UUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NamespaceDescriptor_descriptor_, &NamespaceDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionInfo_descriptor_, &VersionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionServerInfo_descriptor_, &RegionServerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HBase_2eproto() {
  delete TableName::default_instance_;
  delete TableName_reflection_;
  delete TableSchema::default_instance_;
  delete TableSchema_reflection_;
  delete TableState::default_instance_;
  delete TableState_reflection_;
  delete TableDescriptor::default_instance_;
  delete TableDescriptor_reflection_;
  delete ColumnFamilySchema::default_instance_;
  delete ColumnFamilySchema_reflection_;
  delete RegionInfo::default_instance_;
  delete RegionInfo_reflection_;
  delete FavoredNodes::default_instance_;
  delete FavoredNodes_reflection_;
  delete RegionSpecifier::default_instance_;
  delete RegionSpecifier_reflection_;
  delete TimeRange::default_instance_;
  delete TimeRange_reflection_;
  delete ColumnFamilyTimeRange::default_instance_;
  delete ColumnFamilyTimeRange_reflection_;
  delete ServerName::default_instance_;
  delete ServerName_reflection_;
  delete Coprocessor::default_instance_;
  delete Coprocessor_reflection_;
  delete NameStringPair::default_instance_;
  delete NameStringPair_reflection_;
  delete NameBytesPair::default_instance_;
  delete NameBytesPair_reflection_;
  delete BytesBytesPair::default_instance_;
  delete BytesBytesPair_reflection_;
  delete NameInt64Pair::default_instance_;
  delete NameInt64Pair_reflection_;
  delete SnapshotDescription::default_instance_;
  delete SnapshotDescription_reflection_;
  delete ProcedureDescription::default_instance_;
  delete ProcedureDescription_reflection_;
  delete EmptyMsg::default_instance_;
  delete EmptyMsg_reflection_;
  delete LongMsg::default_instance_;
  delete LongMsg_reflection_;
  delete DoubleMsg::default_instance_;
  delete DoubleMsg_reflection_;
  delete BigDecimalMsg::default_instance_;
  delete BigDecimalMsg_reflection_;
  delete UUID::default_instance_;
  delete UUID_reflection_;
  delete NamespaceDescriptor::default_instance_;
  delete NamespaceDescriptor_reflection_;
  delete VersionInfo::default_instance_;
  delete VersionInfo_reflection_;
  delete RegionServerInfo::default_instance_;
  delete RegionServerInfo_reflection_;
}

void protobuf_AddDesc_HBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_Cell_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013HBase.proto\022\010hbase.pb\032\nCell.proto\"1\n\tT"
    "ableName\022\021\n\tnamespace\030\001 \002(\014\022\021\n\tqualifier"
    "\030\002 \002(\014\"\314\001\n\013TableSchema\022\'\n\ntable_name\030\001 \001"
    "(\0132\023.hbase.pb.TableName\022,\n\nattributes\030\002 "
    "\003(\0132\030.hbase.pb.BytesBytesPair\0225\n\017column_"
    "families\030\003 \003(\0132\034.hbase.pb.ColumnFamilySc"
    "hema\022/\n\rconfiguration\030\004 \003(\0132\030.hbase.pb.N"
    "ameStringPair\"x\n\nTableState\022)\n\005state\030\001 \002"
    "(\0162\032.hbase.pb.TableState.State\"\?\n\005State\022"
    "\013\n\007ENABLED\020\000\022\014\n\010DISABLED\020\001\022\r\n\tDISABLING\020"
    "\002\022\014\n\010ENABLING\020\003\"8\n\017TableDescriptor\022%\n\006sc"
    "hema\030\001 \002(\0132\025.hbase.pb.TableSchema\"\201\001\n\022Co"
    "lumnFamilySchema\022\014\n\004name\030\001 \002(\014\022,\n\nattrib"
    "utes\030\002 \003(\0132\030.hbase.pb.BytesBytesPair\022/\n\r"
    "configuration\030\003 \003(\0132\030.hbase.pb.NameStrin"
    "gPair\"\243\001\n\nRegionInfo\022\021\n\tregion_id\030\001 \002(\004\022"
    "\'\n\ntable_name\030\002 \002(\0132\023.hbase.pb.TableName"
    "\022\021\n\tstart_key\030\003 \001(\014\022\017\n\007end_key\030\004 \001(\014\022\017\n\007"
    "offline\030\005 \001(\010\022\r\n\005split\030\006 \001(\010\022\025\n\nreplica_"
    "id\030\007 \001(\005:\0010\":\n\014FavoredNodes\022*\n\014favored_n"
    "ode\030\001 \003(\0132\024.hbase.pb.ServerName\"\236\001\n\017Regi"
    "onSpecifier\022;\n\004type\030\001 \002(\0162-.hbase.pb.Reg"
    "ionSpecifier.RegionSpecifierType\022\r\n\005valu"
    "e\030\002 \002(\014\"\?\n\023RegionSpecifierType\022\017\n\013REGION"
    "_NAME\020\001\022\027\n\023ENCODED_REGION_NAME\020\002\"%\n\tTime"
    "Range\022\014\n\004from\030\001 \001(\004\022\n\n\002to\030\002 \001(\004\"W\n\025Colum"
    "nFamilyTimeRange\022\025\n\rcolumn_family\030\001 \002(\014\022"
    "\'\n\ntime_range\030\002 \002(\0132\023.hbase.pb.TimeRange"
    "\"A\n\nServerName\022\021\n\thost_name\030\001 \002(\t\022\014\n\004por"
    "t\030\002 \001(\r\022\022\n\nstart_code\030\003 \001(\004\"\033\n\013Coprocess"
    "or\022\014\n\004name\030\001 \002(\t\"-\n\016NameStringPair\022\014\n\004na"
    "me\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\",\n\rNameBytesPair"
    "\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \001(\014\"/\n\016BytesBy"
    "tesPair\022\r\n\005first\030\001 \002(\014\022\016\n\006second\030\002 \002(\014\","
    "\n\rNameInt64Pair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\003\"\325\001\n\023SnapshotDescription\022\014\n\004name\030\001 \002"
    "(\t\022\r\n\005table\030\002 \001(\t\022\030\n\rcreation_time\030\003 \001(\003"
    ":\0010\0227\n\004type\030\004 \001(\0162\".hbase.pb.SnapshotDes"
    "cription.Type:\005FLUSH\022\017\n\007version\030\005 \001(\005\022\r\n"
    "\005owner\030\006 \001(\t\".\n\004Type\022\014\n\010DISABLED\020\000\022\t\n\005FL"
    "USH\020\001\022\r\n\tSKIPFLUSH\020\002\"\206\001\n\024ProcedureDescri"
    "ption\022\021\n\tsignature\030\001 \002(\t\022\020\n\010instance\030\002 \001"
    "(\t\022\030\n\rcreation_time\030\003 \001(\003:\0010\022/\n\rconfigur"
    "ation\030\004 \003(\0132\030.hbase.pb.NameStringPair\"\n\n"
    "\010EmptyMsg\"\033\n\007LongMsg\022\020\n\010long_msg\030\001 \002(\003\"\037"
    "\n\tDoubleMsg\022\022\n\ndouble_msg\030\001 \002(\001\"\'\n\rBigDe"
    "cimalMsg\022\026\n\016bigdecimal_msg\030\001 \002(\014\"5\n\004UUID"
    "\022\026\n\016least_sig_bits\030\001 \002(\004\022\025\n\rmost_sig_bit"
    "s\030\002 \002(\004\"T\n\023NamespaceDescriptor\022\014\n\004name\030\001"
    " \002(\014\022/\n\rconfiguration\030\002 \003(\0132\030.hbase.pb.N"
    "ameStringPair\"\235\001\n\013VersionInfo\022\017\n\007version"
    "\030\001 \002(\t\022\013\n\003url\030\002 \002(\t\022\020\n\010revision\030\003 \002(\t\022\014\n"
    "\004user\030\004 \002(\t\022\014\n\004date\030\005 \002(\t\022\024\n\014src_checksu"
    "m\030\006 \002(\t\022\025\n\rversion_major\030\007 \001(\r\022\025\n\rversio"
    "n_minor\030\010 \001(\r\"Q\n\020RegionServerInfo\022\020\n\010inf"
    "oPort\030\001 \001(\005\022+\n\014version_info\030\002 \001(\0132\025.hbas"
    "e.pb.VersionInfo*r\n\013CompareType\022\010\n\004LESS\020"
    "\000\022\021\n\rLESS_OR_EQUAL\020\001\022\t\n\005EQUAL\020\002\022\r\n\tNOT_E"
    "QUAL\020\003\022\024\n\020GREATER_OR_EQUAL\020\004\022\013\n\007GREATER\020"
    "\005\022\t\n\005NO_OP\020\006*n\n\010TimeUnit\022\017\n\013NANOSECONDS\020"
    "\001\022\020\n\014MICROSECONDS\020\002\022\020\n\014MILLISECONDS\020\003\022\013\n"
    "\007SECONDS\020\004\022\013\n\007MINUTES\020\005\022\t\n\005HOURS\020\006\022\010\n\004DA"
    "YS\020\007B>\n*org.apache.hadoop.hbase.protobuf"
    ".generatedB\013HBaseProtosH\001\240\001\001", 2548);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HBase.proto", &protobuf_RegisterTypes);
  TableName::default_instance_ = new TableName();
  TableSchema::default_instance_ = new TableSchema();
  TableState::default_instance_ = new TableState();
  TableDescriptor::default_instance_ = new TableDescriptor();
  ColumnFamilySchema::default_instance_ = new ColumnFamilySchema();
  RegionInfo::default_instance_ = new RegionInfo();
  FavoredNodes::default_instance_ = new FavoredNodes();
  RegionSpecifier::default_instance_ = new RegionSpecifier();
  TimeRange::default_instance_ = new TimeRange();
  ColumnFamilyTimeRange::default_instance_ = new ColumnFamilyTimeRange();
  ServerName::default_instance_ = new ServerName();
  Coprocessor::default_instance_ = new Coprocessor();
  NameStringPair::default_instance_ = new NameStringPair();
  NameBytesPair::default_instance_ = new NameBytesPair();
  BytesBytesPair::default_instance_ = new BytesBytesPair();
  NameInt64Pair::default_instance_ = new NameInt64Pair();
  SnapshotDescription::default_instance_ = new SnapshotDescription();
  ProcedureDescription::default_instance_ = new ProcedureDescription();
  EmptyMsg::default_instance_ = new EmptyMsg();
  LongMsg::default_instance_ = new LongMsg();
  DoubleMsg::default_instance_ = new DoubleMsg();
  BigDecimalMsg::default_instance_ = new BigDecimalMsg();
  UUID::default_instance_ = new UUID();
  NamespaceDescriptor::default_instance_ = new NamespaceDescriptor();
  VersionInfo::default_instance_ = new VersionInfo();
  RegionServerInfo::default_instance_ = new RegionServerInfo();
  TableName::default_instance_->InitAsDefaultInstance();
  TableSchema::default_instance_->InitAsDefaultInstance();
  TableState::default_instance_->InitAsDefaultInstance();
  TableDescriptor::default_instance_->InitAsDefaultInstance();
  ColumnFamilySchema::default_instance_->InitAsDefaultInstance();
  RegionInfo::default_instance_->InitAsDefaultInstance();
  FavoredNodes::default_instance_->InitAsDefaultInstance();
  RegionSpecifier::default_instance_->InitAsDefaultInstance();
  TimeRange::default_instance_->InitAsDefaultInstance();
  ColumnFamilyTimeRange::default_instance_->InitAsDefaultInstance();
  ServerName::default_instance_->InitAsDefaultInstance();
  Coprocessor::default_instance_->InitAsDefaultInstance();
  NameStringPair::default_instance_->InitAsDefaultInstance();
  NameBytesPair::default_instance_->InitAsDefaultInstance();
  BytesBytesPair::default_instance_->InitAsDefaultInstance();
  NameInt64Pair::default_instance_->InitAsDefaultInstance();
  SnapshotDescription::default_instance_->InitAsDefaultInstance();
  ProcedureDescription::default_instance_->InitAsDefaultInstance();
  EmptyMsg::default_instance_->InitAsDefaultInstance();
  LongMsg::default_instance_->InitAsDefaultInstance();
  DoubleMsg::default_instance_->InitAsDefaultInstance();
  BigDecimalMsg::default_instance_->InitAsDefaultInstance();
  UUID::default_instance_->InitAsDefaultInstance();
  NamespaceDescriptor::default_instance_->InitAsDefaultInstance();
  VersionInfo::default_instance_->InitAsDefaultInstance();
  RegionServerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HBase_2eproto {
  StaticDescriptorInitializer_HBase_2eproto() {
    protobuf_AddDesc_HBase_2eproto();
  }
} static_descriptor_initializer_HBase_2eproto_;
const ::google::protobuf::EnumDescriptor* CompareType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompareType_descriptor_;
}
bool CompareType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeUnit_descriptor_;
}
bool TimeUnit_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TableName::kNamespaceFieldNumber;
const int TableName::kQualifierFieldNumber;
#endif  // !_MSC_VER

TableName::TableName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableName::InitAsDefaultInstance() {
}

TableName::TableName(const TableName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableName::SharedCtor() {
  _cached_size_ = 0;
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableName::~TableName() {
  SharedDtor();
}

void TableName::SharedDtor() {
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
    delete qualifier_;
  }
  if (this != default_instance_) {
  }
}

void TableName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableName_descriptor_;
}

const TableName& TableName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

TableName* TableName::default_instance_ = NULL;

TableName* TableName::New() const {
  return new TableName;
}

void TableName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
    if (has_qualifier()) {
      if (qualifier_ != &::google::protobuf::internal::kEmptyString) {
        qualifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes namespace = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_namespace_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qualifier;
        break;
      }

      // required bytes qualifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes namespace = 1;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->namespace_(), output);
  }

  // required bytes qualifier = 2;
  if (has_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->qualifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes namespace = 1;
  if (has_namespace_()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->namespace_(), target);
  }

  // required bytes qualifier = 2;
  if (has_qualifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->qualifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes namespace = 1;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->namespace_());
    }

    // required bytes qualifier = 2;
    if (has_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qualifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableName::MergeFrom(const TableName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_qualifier()) {
      set_qualifier(from.qualifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableName::CopyFrom(const TableName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TableName::Swap(TableName* other) {
  if (other != this) {
    std::swap(namespace__, other->namespace__);
    std::swap(qualifier_, other->qualifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableName_descriptor_;
  metadata.reflection = TableName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableSchema::kTableNameFieldNumber;
const int TableSchema::kAttributesFieldNumber;
const int TableSchema::kColumnFamiliesFieldNumber;
const int TableSchema::kConfigurationFieldNumber;
#endif  // !_MSC_VER

TableSchema::TableSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableSchema::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

TableSchema::TableSchema(const TableSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableSchema::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableSchema::~TableSchema() {
  SharedDtor();
}

void TableSchema::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void TableSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableSchema_descriptor_;
}

const TableSchema& TableSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

TableSchema* TableSchema::default_instance_ = NULL;

TableSchema* TableSchema::New() const {
  return new TableSchema;
}

void TableSchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  attributes_.Clear();
  column_families_.Clear();
  configuration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // repeated .hbase.pb.BytesBytesPair attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        if (input->ExpectTag(26)) goto parse_column_families;
        break;
      }

      // repeated .hbase.pb.ColumnFamilySchema column_families = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_families:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column_families()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_column_families;
        if (input->ExpectTag(34)) goto parse_configuration;
        break;
      }

      // repeated .hbase.pb.NameStringPair configuration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_configuration;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // repeated .hbase.pb.BytesBytesPair attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(i), output);
  }

  // repeated .hbase.pb.ColumnFamilySchema column_families = 3;
  for (int i = 0; i < this->column_families_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->column_families(i), output);
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  for (int i = 0; i < this->configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->configuration(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // repeated .hbase.pb.BytesBytesPair attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(i), target);
  }

  // repeated .hbase.pb.ColumnFamilySchema column_families = 3;
  for (int i = 0; i < this->column_families_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->column_families(i), target);
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  for (int i = 0; i < this->configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->configuration(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  // repeated .hbase.pb.BytesBytesPair attributes = 2;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  // repeated .hbase.pb.ColumnFamilySchema column_families = 3;
  total_size += 1 * this->column_families_size();
  for (int i = 0; i < this->column_families_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_families(i));
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  total_size += 1 * this->configuration_size();
  for (int i = 0; i < this->configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableSchema::MergeFrom(const TableSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  column_families_.MergeFrom(from.column_families_);
  configuration_.MergeFrom(from.configuration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSchema::CopyFrom(const TableSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSchema::IsInitialized() const {

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < column_families_size(); i++) {
    if (!this->column_families(i).IsInitialized()) return false;
  }
  for (int i = 0; i < configuration_size(); i++) {
    if (!this->configuration(i).IsInitialized()) return false;
  }
  return true;
}

void TableSchema::Swap(TableSchema* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    attributes_.Swap(&other->attributes_);
    column_families_.Swap(&other->column_families_);
    configuration_.Swap(&other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableSchema_descriptor_;
  metadata.reflection = TableSchema_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TableState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableState_State_descriptor_;
}
bool TableState_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TableState_State TableState::ENABLED;
const TableState_State TableState::DISABLED;
const TableState_State TableState::DISABLING;
const TableState_State TableState::ENABLING;
const TableState_State TableState::State_MIN;
const TableState_State TableState::State_MAX;
const int TableState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TableState::kStateFieldNumber;
#endif  // !_MSC_VER

TableState::TableState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableState::InitAsDefaultInstance() {
}

TableState::TableState(const TableState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableState::~TableState() {
  SharedDtor();
}

void TableState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableState_descriptor_;
}

const TableState& TableState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

TableState* TableState::default_instance_ = NULL;

TableState* TableState::New() const {
  return new TableState;
}

void TableState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableState.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::TableState_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::TableState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TableState::Swap(TableState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableState_descriptor_;
  metadata.reflection = TableState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableDescriptor::kSchemaFieldNumber;
#endif  // !_MSC_VER

TableDescriptor::TableDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableDescriptor::InitAsDefaultInstance() {
  schema_ = const_cast< ::hbase::pb::TableSchema*>(&::hbase::pb::TableSchema::default_instance());
}

TableDescriptor::TableDescriptor(const TableDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableDescriptor::SharedCtor() {
  _cached_size_ = 0;
  schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableDescriptor::~TableDescriptor() {
  SharedDtor();
}

void TableDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete schema_;
  }
}

void TableDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableDescriptor_descriptor_;
}

const TableDescriptor& TableDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

TableDescriptor* TableDescriptor::default_instance_ = NULL;

TableDescriptor* TableDescriptor::New() const {
  return new TableDescriptor;
}

void TableDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schema()) {
      if (schema_ != NULL) schema_->::hbase::pb::TableSchema::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableSchema schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableSchema schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableSchema schema = 1;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableSchema schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableDescriptor::MergeFrom(const TableDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      mutable_schema()->::hbase::pb::TableSchema::MergeFrom(from.schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDescriptor::CopyFrom(const TableDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  return true;
}

void TableDescriptor::Swap(TableDescriptor* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableDescriptor_descriptor_;
  metadata.reflection = TableDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnFamilySchema::kNameFieldNumber;
const int ColumnFamilySchema::kAttributesFieldNumber;
const int ColumnFamilySchema::kConfigurationFieldNumber;
#endif  // !_MSC_VER

ColumnFamilySchema::ColumnFamilySchema()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnFamilySchema::InitAsDefaultInstance() {
}

ColumnFamilySchema::ColumnFamilySchema(const ColumnFamilySchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnFamilySchema::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnFamilySchema::~ColumnFamilySchema() {
  SharedDtor();
}

void ColumnFamilySchema::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ColumnFamilySchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnFamilySchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnFamilySchema_descriptor_;
}

const ColumnFamilySchema& ColumnFamilySchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

ColumnFamilySchema* ColumnFamilySchema::default_instance_ = NULL;

ColumnFamilySchema* ColumnFamilySchema::New() const {
  return new ColumnFamilySchema;
}

void ColumnFamilySchema::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  attributes_.Clear();
  configuration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnFamilySchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // repeated .hbase.pb.BytesBytesPair attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        if (input->ExpectTag(26)) goto parse_configuration;
        break;
      }

      // repeated .hbase.pb.NameStringPair configuration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configuration;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnFamilySchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // repeated .hbase.pb.BytesBytesPair attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(i), output);
  }

  // repeated .hbase.pb.NameStringPair configuration = 3;
  for (int i = 0; i < this->configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configuration(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnFamilySchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // repeated .hbase.pb.BytesBytesPair attributes = 2;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(i), target);
  }

  // repeated .hbase.pb.NameStringPair configuration = 3;
  for (int i = 0; i < this->configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configuration(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnFamilySchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .hbase.pb.BytesBytesPair attributes = 2;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  // repeated .hbase.pb.NameStringPair configuration = 3;
  total_size += 1 * this->configuration_size();
  for (int i = 0; i < this->configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnFamilySchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnFamilySchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnFamilySchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnFamilySchema::MergeFrom(const ColumnFamilySchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  configuration_.MergeFrom(from.configuration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnFamilySchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnFamilySchema::CopyFrom(const ColumnFamilySchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnFamilySchema::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < configuration_size(); i++) {
    if (!this->configuration(i).IsInitialized()) return false;
  }
  return true;
}

void ColumnFamilySchema::Swap(ColumnFamilySchema* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    attributes_.Swap(&other->attributes_);
    configuration_.Swap(&other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnFamilySchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnFamilySchema_descriptor_;
  metadata.reflection = ColumnFamilySchema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionInfo::kRegionIdFieldNumber;
const int RegionInfo::kTableNameFieldNumber;
const int RegionInfo::kStartKeyFieldNumber;
const int RegionInfo::kEndKeyFieldNumber;
const int RegionInfo::kOfflineFieldNumber;
const int RegionInfo::kSplitFieldNumber;
const int RegionInfo::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

RegionInfo::RegionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionInfo::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

RegionInfo::RegionInfo(const RegionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = GOOGLE_ULONGLONG(0);
  table_name_ = NULL;
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offline_ = false;
  split_ = false;
  replica_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionInfo::~RegionInfo() {
  SharedDtor();
}

void RegionInfo::SharedDtor() {
  if (start_key_ != &::google::protobuf::internal::kEmptyString) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::kEmptyString) {
    delete end_key_;
  }
  if (this != default_instance_) {
    delete table_name_;
  }
}

void RegionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionInfo_descriptor_;
}

const RegionInfo& RegionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

RegionInfo* RegionInfo::default_instance_ = NULL;

RegionInfo* RegionInfo::New() const {
  return new RegionInfo;
}

void RegionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = GOOGLE_ULONGLONG(0);
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::kEmptyString) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::kEmptyString) {
        end_key_->clear();
      }
    }
    offline_ = false;
    split_ = false;
    replica_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offline;
        break;
      }

      // optional bool offline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_)));
          set_has_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_split;
        break;
      }

      // optional bool split = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_split:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_)));
          set_has_split();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_replica_id;
        break;
      }

      // optional int32 replica_id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replica_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
          set_has_replica_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(), output);
  }

  // optional bytes start_key = 3;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->start_key(), output);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->end_key(), output);
  }

  // optional bool offline = 5;
  if (has_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->offline(), output);
  }

  // optional bool split = 6;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->split(), output);
  }

  // optional int32 replica_id = 7 [default = 0];
  if (has_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->replica_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // required .hbase.pb.TableName table_name = 2;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(), target);
  }

  // optional bytes start_key = 3;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_key(), target);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  // optional bool offline = 5;
  if (has_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->offline(), target);
  }

  // optional bool split = 6;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->split(), target);
  }

  // optional int32 replica_id = 7 [default = 0];
  if (has_replica_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->replica_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->region_id());
    }

    // required .hbase.pb.TableName table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // optional bytes start_key = 3;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 4;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional bool offline = 5;
    if (has_offline()) {
      total_size += 1 + 1;
    }

    // optional bool split = 6;
    if (has_split()) {
      total_size += 1 + 1;
    }

    // optional int32 replica_id = 7 [default = 0];
    if (has_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionInfo::MergeFrom(const RegionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
    if (from.has_offline()) {
      set_offline(from.offline());
    }
    if (from.has_split()) {
      set_split(from.split());
    }
    if (from.has_replica_id()) {
      set_replica_id(from.replica_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void RegionInfo::Swap(RegionInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(table_name_, other->table_name_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    std::swap(offline_, other->offline_);
    std::swap(split_, other->split_);
    std::swap(replica_id_, other->replica_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionInfo_descriptor_;
  metadata.reflection = RegionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FavoredNodes::kFavoredNodeFieldNumber;
#endif  // !_MSC_VER

FavoredNodes::FavoredNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FavoredNodes::InitAsDefaultInstance() {
}

FavoredNodes::FavoredNodes(const FavoredNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FavoredNodes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FavoredNodes::~FavoredNodes() {
  SharedDtor();
}

void FavoredNodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FavoredNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavoredNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FavoredNodes_descriptor_;
}

const FavoredNodes& FavoredNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

FavoredNodes* FavoredNodes::default_instance_ = NULL;

FavoredNodes* FavoredNodes::New() const {
  return new FavoredNodes;
}

void FavoredNodes::Clear() {
  favored_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FavoredNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.ServerName favored_node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favored_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_favored_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_favored_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FavoredNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.ServerName favored_node = 1;
  for (int i = 0; i < this->favored_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->favored_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FavoredNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.ServerName favored_node = 1;
  for (int i = 0; i < this->favored_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->favored_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FavoredNodes::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.ServerName favored_node = 1;
  total_size += 1 * this->favored_node_size();
  for (int i = 0; i < this->favored_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->favored_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavoredNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FavoredNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FavoredNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FavoredNodes::MergeFrom(const FavoredNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  favored_node_.MergeFrom(from.favored_node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FavoredNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavoredNodes::CopyFrom(const FavoredNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavoredNodes::IsInitialized() const {

  for (int i = 0; i < favored_node_size(); i++) {
    if (!this->favored_node(i).IsInitialized()) return false;
  }
  return true;
}

void FavoredNodes::Swap(FavoredNodes* other) {
  if (other != this) {
    favored_node_.Swap(&other->favored_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FavoredNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FavoredNodes_descriptor_;
  metadata.reflection = FavoredNodes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegionSpecifier_RegionSpecifierType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionSpecifier_RegionSpecifierType_descriptor_;
}
bool RegionSpecifier_RegionSpecifierType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegionSpecifier_RegionSpecifierType RegionSpecifier::REGION_NAME;
const RegionSpecifier_RegionSpecifierType RegionSpecifier::ENCODED_REGION_NAME;
const RegionSpecifier_RegionSpecifierType RegionSpecifier::RegionSpecifierType_MIN;
const RegionSpecifier_RegionSpecifierType RegionSpecifier::RegionSpecifierType_MAX;
const int RegionSpecifier::RegionSpecifierType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegionSpecifier::kTypeFieldNumber;
const int RegionSpecifier::kValueFieldNumber;
#endif  // !_MSC_VER

RegionSpecifier::RegionSpecifier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionSpecifier::InitAsDefaultInstance() {
}

RegionSpecifier::RegionSpecifier(const RegionSpecifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionSpecifier::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionSpecifier::~RegionSpecifier() {
  SharedDtor();
}

void RegionSpecifier::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RegionSpecifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionSpecifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionSpecifier_descriptor_;
}

const RegionSpecifier& RegionSpecifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

RegionSpecifier* RegionSpecifier::default_instance_ = NULL;

RegionSpecifier* RegionSpecifier::New() const {
  return new RegionSpecifier;
}

void RegionSpecifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionSpecifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier.RegionSpecifierType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionSpecifier_RegionSpecifierType_IsValid(value)) {
            set_type(static_cast< ::hbase::pb::RegionSpecifier_RegionSpecifierType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionSpecifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier.RegionSpecifierType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionSpecifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier.RegionSpecifierType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionSpecifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier.RegionSpecifierType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionSpecifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionSpecifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionSpecifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionSpecifier::MergeFrom(const RegionSpecifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionSpecifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionSpecifier::CopyFrom(const RegionSpecifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSpecifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegionSpecifier::Swap(RegionSpecifier* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionSpecifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionSpecifier_descriptor_;
  metadata.reflection = RegionSpecifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeRange::kFromFieldNumber;
const int TimeRange::kToFieldNumber;
#endif  // !_MSC_VER

TimeRange::TimeRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeRange::InitAsDefaultInstance() {
}

TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeRange::SharedCtor() {
  _cached_size_ = 0;
  from_ = GOOGLE_ULONGLONG(0);
  to_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeRange::~TimeRange() {
  SharedDtor();
}

void TimeRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeRange_descriptor_;
}

const TimeRange& TimeRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

TimeRange* TimeRange::default_instance_ = NULL;

TimeRange* TimeRange::New() const {
  return new TimeRange;
}

void TimeRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = GOOGLE_ULONGLONG(0);
    to_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // optional uint64 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from(), output);
  }

  // optional uint64 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from(), target);
  }

  // optional uint64 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from());
    }

    // optional uint64 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {

  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeRange_descriptor_;
  metadata.reflection = TimeRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnFamilyTimeRange::kColumnFamilyFieldNumber;
const int ColumnFamilyTimeRange::kTimeRangeFieldNumber;
#endif  // !_MSC_VER

ColumnFamilyTimeRange::ColumnFamilyTimeRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnFamilyTimeRange::InitAsDefaultInstance() {
  time_range_ = const_cast< ::hbase::pb::TimeRange*>(&::hbase::pb::TimeRange::default_instance());
}

ColumnFamilyTimeRange::ColumnFamilyTimeRange(const ColumnFamilyTimeRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnFamilyTimeRange::SharedCtor() {
  _cached_size_ = 0;
  column_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnFamilyTimeRange::~ColumnFamilyTimeRange() {
  SharedDtor();
}

void ColumnFamilyTimeRange::SharedDtor() {
  if (column_family_ != &::google::protobuf::internal::kEmptyString) {
    delete column_family_;
  }
  if (this != default_instance_) {
    delete time_range_;
  }
}

void ColumnFamilyTimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnFamilyTimeRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnFamilyTimeRange_descriptor_;
}

const ColumnFamilyTimeRange& ColumnFamilyTimeRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

ColumnFamilyTimeRange* ColumnFamilyTimeRange::default_instance_ = NULL;

ColumnFamilyTimeRange* ColumnFamilyTimeRange::New() const {
  return new ColumnFamilyTimeRange;
}

void ColumnFamilyTimeRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_column_family()) {
      if (column_family_ != &::google::protobuf::internal::kEmptyString) {
        column_family_->clear();
      }
    }
    if (has_time_range()) {
      if (time_range_ != NULL) time_range_->::hbase::pb::TimeRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnFamilyTimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes column_family = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_range;
        break;
      }

      // required .hbase.pb.TimeRange time_range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnFamilyTimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes column_family = 1;
  if (has_column_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->column_family(), output);
  }

  // required .hbase.pb.TimeRange time_range = 2;
  if (has_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnFamilyTimeRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes column_family = 1;
  if (has_column_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->column_family(), target);
  }

  // required .hbase.pb.TimeRange time_range = 2;
  if (has_time_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->time_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnFamilyTimeRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes column_family = 1;
    if (has_column_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->column_family());
    }

    // required .hbase.pb.TimeRange time_range = 2;
    if (has_time_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnFamilyTimeRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnFamilyTimeRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnFamilyTimeRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnFamilyTimeRange::MergeFrom(const ColumnFamilyTimeRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column_family()) {
      set_column_family(from.column_family());
    }
    if (from.has_time_range()) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnFamilyTimeRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnFamilyTimeRange::CopyFrom(const ColumnFamilyTimeRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnFamilyTimeRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ColumnFamilyTimeRange::Swap(ColumnFamilyTimeRange* other) {
  if (other != this) {
    std::swap(column_family_, other->column_family_);
    std::swap(time_range_, other->time_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnFamilyTimeRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnFamilyTimeRange_descriptor_;
  metadata.reflection = ColumnFamilyTimeRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerName::kHostNameFieldNumber;
const int ServerName::kPortFieldNumber;
const int ServerName::kStartCodeFieldNumber;
#endif  // !_MSC_VER

ServerName::ServerName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerName::InitAsDefaultInstance() {
}

ServerName::ServerName(const ServerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerName::SharedCtor() {
  _cached_size_ = 0;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  start_code_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerName::~ServerName() {
  SharedDtor();
}

void ServerName::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void ServerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerName_descriptor_;
}

const ServerName& ServerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

ServerName* ServerName::default_instance_ = NULL;

ServerName* ServerName::New() const {
  return new ServerName;
}

void ServerName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
    port_ = 0u;
    start_code_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_code;
        break;
      }

      // optional uint64 start_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_code_)));
          set_has_start_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host_name = 1;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host_name(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint64 start_code = 3;
  if (has_start_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host_name = 1;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint64 start_code = 3;
  if (has_start_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host_name = 1;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint64 start_code = 3;
    if (has_start_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerName::MergeFrom(const ServerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_start_code()) {
      set_start_code(from.start_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerName::CopyFrom(const ServerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerName::Swap(ServerName* other) {
  if (other != this) {
    std::swap(host_name_, other->host_name_);
    std::swap(port_, other->port_);
    std::swap(start_code_, other->start_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerName_descriptor_;
  metadata.reflection = ServerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coprocessor::kNameFieldNumber;
#endif  // !_MSC_VER

Coprocessor::Coprocessor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coprocessor::InitAsDefaultInstance() {
}

Coprocessor::Coprocessor(const Coprocessor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coprocessor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coprocessor::~Coprocessor() {
  SharedDtor();
}

void Coprocessor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Coprocessor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coprocessor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coprocessor_descriptor_;
}

const Coprocessor& Coprocessor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

Coprocessor* Coprocessor::default_instance_ = NULL;

Coprocessor* Coprocessor::New() const {
  return new Coprocessor;
}

void Coprocessor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coprocessor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coprocessor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coprocessor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coprocessor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coprocessor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coprocessor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coprocessor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coprocessor::MergeFrom(const Coprocessor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coprocessor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coprocessor::CopyFrom(const Coprocessor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coprocessor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Coprocessor::Swap(Coprocessor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coprocessor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coprocessor_descriptor_;
  metadata.reflection = Coprocessor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameStringPair::kNameFieldNumber;
const int NameStringPair::kValueFieldNumber;
#endif  // !_MSC_VER

NameStringPair::NameStringPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameStringPair::InitAsDefaultInstance() {
}

NameStringPair::NameStringPair(const NameStringPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameStringPair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameStringPair::~NameStringPair() {
  SharedDtor();
}

void NameStringPair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NameStringPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameStringPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameStringPair_descriptor_;
}

const NameStringPair& NameStringPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

NameStringPair* NameStringPair::default_instance_ = NULL;

NameStringPair* NameStringPair::New() const {
  return new NameStringPair;
}

void NameStringPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameStringPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameStringPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameStringPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameStringPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameStringPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameStringPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameStringPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameStringPair::MergeFrom(const NameStringPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameStringPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameStringPair::CopyFrom(const NameStringPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameStringPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NameStringPair::Swap(NameStringPair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameStringPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameStringPair_descriptor_;
  metadata.reflection = NameStringPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameBytesPair::kNameFieldNumber;
const int NameBytesPair::kValueFieldNumber;
#endif  // !_MSC_VER

NameBytesPair::NameBytesPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameBytesPair::InitAsDefaultInstance() {
}

NameBytesPair::NameBytesPair(const NameBytesPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameBytesPair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameBytesPair::~NameBytesPair() {
  SharedDtor();
}

void NameBytesPair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NameBytesPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameBytesPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameBytesPair_descriptor_;
}

const NameBytesPair& NameBytesPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

NameBytesPair* NameBytesPair::default_instance_ = NULL;

NameBytesPair* NameBytesPair::New() const {
  return new NameBytesPair;
}

void NameBytesPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameBytesPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameBytesPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameBytesPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameBytesPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameBytesPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameBytesPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameBytesPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameBytesPair::MergeFrom(const NameBytesPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameBytesPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameBytesPair::CopyFrom(const NameBytesPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameBytesPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NameBytesPair::Swap(NameBytesPair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameBytesPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameBytesPair_descriptor_;
  metadata.reflection = NameBytesPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BytesBytesPair::kFirstFieldNumber;
const int BytesBytesPair::kSecondFieldNumber;
#endif  // !_MSC_VER

BytesBytesPair::BytesBytesPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BytesBytesPair::InitAsDefaultInstance() {
}

BytesBytesPair::BytesBytesPair(const BytesBytesPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BytesBytesPair::SharedCtor() {
  _cached_size_ = 0;
  first_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  second_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BytesBytesPair::~BytesBytesPair() {
  SharedDtor();
}

void BytesBytesPair::SharedDtor() {
  if (first_ != &::google::protobuf::internal::kEmptyString) {
    delete first_;
  }
  if (second_ != &::google::protobuf::internal::kEmptyString) {
    delete second_;
  }
  if (this != default_instance_) {
  }
}

void BytesBytesPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BytesBytesPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BytesBytesPair_descriptor_;
}

const BytesBytesPair& BytesBytesPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

BytesBytesPair* BytesBytesPair::default_instance_ = NULL;

BytesBytesPair* BytesBytesPair::New() const {
  return new BytesBytesPair;
}

void BytesBytesPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first()) {
      if (first_ != &::google::protobuf::internal::kEmptyString) {
        first_->clear();
      }
    }
    if (has_second()) {
      if (second_ != &::google::protobuf::internal::kEmptyString) {
        second_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BytesBytesPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_second;
        break;
      }

      // required bytes second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_second()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BytesBytesPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->first(), output);
  }

  // required bytes second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BytesBytesPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes first = 1;
  if (has_first()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->first(), target);
  }

  // required bytes second = 2;
  if (has_second()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BytesBytesPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first());
    }

    // required bytes second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BytesBytesPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BytesBytesPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BytesBytesPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BytesBytesPair::MergeFrom(const BytesBytesPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BytesBytesPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesBytesPair::CopyFrom(const BytesBytesPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesBytesPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BytesBytesPair::Swap(BytesBytesPair* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BytesBytesPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BytesBytesPair_descriptor_;
  metadata.reflection = BytesBytesPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameInt64Pair::kNameFieldNumber;
const int NameInt64Pair::kValueFieldNumber;
#endif  // !_MSC_VER

NameInt64Pair::NameInt64Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameInt64Pair::InitAsDefaultInstance() {
}

NameInt64Pair::NameInt64Pair(const NameInt64Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameInt64Pair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameInt64Pair::~NameInt64Pair() {
  SharedDtor();
}

void NameInt64Pair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NameInt64Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameInt64Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameInt64Pair_descriptor_;
}

const NameInt64Pair& NameInt64Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

NameInt64Pair* NameInt64Pair::default_instance_ = NULL;

NameInt64Pair* NameInt64Pair::New() const {
  return new NameInt64Pair;
}

void NameInt64Pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameInt64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameInt64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameInt64Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameInt64Pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameInt64Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameInt64Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameInt64Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameInt64Pair::MergeFrom(const NameInt64Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameInt64Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameInt64Pair::CopyFrom(const NameInt64Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameInt64Pair::IsInitialized() const {

  return true;
}

void NameInt64Pair::Swap(NameInt64Pair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameInt64Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameInt64Pair_descriptor_;
  metadata.reflection = NameInt64Pair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SnapshotDescription_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotDescription_Type_descriptor_;
}
bool SnapshotDescription_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SnapshotDescription_Type SnapshotDescription::DISABLED;
const SnapshotDescription_Type SnapshotDescription::FLUSH;
const SnapshotDescription_Type SnapshotDescription::SKIPFLUSH;
const SnapshotDescription_Type SnapshotDescription::Type_MIN;
const SnapshotDescription_Type SnapshotDescription::Type_MAX;
const int SnapshotDescription::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SnapshotDescription::kNameFieldNumber;
const int SnapshotDescription::kTableFieldNumber;
const int SnapshotDescription::kCreationTimeFieldNumber;
const int SnapshotDescription::kTypeFieldNumber;
const int SnapshotDescription::kVersionFieldNumber;
const int SnapshotDescription::kOwnerFieldNumber;
#endif  // !_MSC_VER

SnapshotDescription::SnapshotDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotDescription::InitAsDefaultInstance() {
}

SnapshotDescription::SnapshotDescription(const SnapshotDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotDescription::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creation_time_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  version_ = 0;
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotDescription::~SnapshotDescription() {
  SharedDtor();
}

void SnapshotDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (this != default_instance_) {
  }
}

void SnapshotDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotDescription_descriptor_;
}

const SnapshotDescription& SnapshotDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

SnapshotDescription* SnapshotDescription::default_instance_ = NULL;

SnapshotDescription* SnapshotDescription::New() const {
  return new SnapshotDescription;
}

void SnapshotDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    creation_time_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    version_ = 0;
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // optional string table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creation_time;
        break;
      }

      // optional int64 creation_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .hbase.pb.SnapshotDescription.Type type = 4 [default = FLUSH];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::SnapshotDescription_Type_IsValid(value)) {
            set_type(static_cast< ::hbase::pb::SnapshotDescription_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional int32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_owner;
        break;
      }

      // optional string owner = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table(), output);
  }

  // optional int64 creation_time = 3 [default = 0];
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->creation_time(), output);
  }

  // optional .hbase.pb.SnapshotDescription.Type type = 4 [default = FLUSH];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // optional string owner = 6;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // optional int64 creation_time = 3 [default = 0];
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->creation_time(), target);
  }

  // optional .hbase.pb.SnapshotDescription.Type type = 4 [default = FLUSH];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // optional string owner = 6;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // optional int64 creation_time = 3 [default = 0];
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_time());
    }

    // optional .hbase.pb.SnapshotDescription.Type type = 4 [default = FLUSH];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string owner = 6;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotDescription::MergeFrom(const SnapshotDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotDescription::CopyFrom(const SnapshotDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SnapshotDescription::Swap(SnapshotDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(table_, other->table_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(type_, other->type_);
    std::swap(version_, other->version_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotDescription_descriptor_;
  metadata.reflection = SnapshotDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcedureDescription::kSignatureFieldNumber;
const int ProcedureDescription::kInstanceFieldNumber;
const int ProcedureDescription::kCreationTimeFieldNumber;
const int ProcedureDescription::kConfigurationFieldNumber;
#endif  // !_MSC_VER

ProcedureDescription::ProcedureDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcedureDescription::InitAsDefaultInstance() {
}

ProcedureDescription::ProcedureDescription(const ProcedureDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcedureDescription::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creation_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcedureDescription::~ProcedureDescription() {
  SharedDtor();
}

void ProcedureDescription::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (instance_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_;
  }
  if (this != default_instance_) {
  }
}

void ProcedureDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcedureDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcedureDescription_descriptor_;
}

const ProcedureDescription& ProcedureDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

ProcedureDescription* ProcedureDescription::default_instance_ = NULL;

ProcedureDescription* ProcedureDescription::New() const {
  return new ProcedureDescription;
}

void ProcedureDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_instance()) {
      if (instance_ != &::google::protobuf::internal::kEmptyString) {
        instance_->clear();
      }
    }
    creation_time_ = GOOGLE_LONGLONG(0);
  }
  configuration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcedureDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance;
        break;
      }

      // optional string instance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creation_time;
        break;
      }

      // optional int64 creation_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_configuration;
        break;
      }

      // repeated .hbase.pb.NameStringPair configuration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_configuration;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcedureDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }

  // optional string instance = 2;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instance(), output);
  }

  // optional int64 creation_time = 3 [default = 0];
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->creation_time(), output);
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  for (int i = 0; i < this->configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->configuration(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcedureDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  // optional string instance = 2;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instance(), target);
  }

  // optional int64 creation_time = 3 [default = 0];
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->creation_time(), target);
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  for (int i = 0; i < this->configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->configuration(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcedureDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string instance = 2;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance());
    }

    // optional int64 creation_time = 3 [default = 0];
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_time());
    }

  }
  // repeated .hbase.pb.NameStringPair configuration = 4;
  total_size += 1 * this->configuration_size();
  for (int i = 0; i < this->configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcedureDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcedureDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcedureDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcedureDescription::MergeFrom(const ProcedureDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  configuration_.MergeFrom(from.configuration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcedureDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcedureDescription::CopyFrom(const ProcedureDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < configuration_size(); i++) {
    if (!this->configuration(i).IsInitialized()) return false;
  }
  return true;
}

void ProcedureDescription::Swap(ProcedureDescription* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(instance_, other->instance_);
    std::swap(creation_time_, other->creation_time_);
    configuration_.Swap(&other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcedureDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcedureDescription_descriptor_;
  metadata.reflection = ProcedureDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMsg::EmptyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMsg::InitAsDefaultInstance() {
}

EmptyMsg::EmptyMsg(const EmptyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMsg::~EmptyMsg() {
  SharedDtor();
}

void EmptyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMsg_descriptor_;
}

const EmptyMsg& EmptyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

EmptyMsg* EmptyMsg::default_instance_ = NULL;

EmptyMsg* EmptyMsg::New() const {
  return new EmptyMsg;
}

void EmptyMsg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMsg::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMsg::MergeFrom(const EmptyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMsg::CopyFrom(const EmptyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMsg::IsInitialized() const {

  return true;
}

void EmptyMsg::Swap(EmptyMsg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMsg_descriptor_;
  metadata.reflection = EmptyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LongMsg::kLongMsgFieldNumber;
#endif  // !_MSC_VER

LongMsg::LongMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LongMsg::InitAsDefaultInstance() {
}

LongMsg::LongMsg(const LongMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LongMsg::SharedCtor() {
  _cached_size_ = 0;
  long_msg_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LongMsg::~LongMsg() {
  SharedDtor();
}

void LongMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LongMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LongMsg_descriptor_;
}

const LongMsg& LongMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

LongMsg* LongMsg::default_instance_ = NULL;

LongMsg* LongMsg::New() const {
  return new LongMsg;
}

void LongMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    long_msg_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LongMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 long_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &long_msg_)));
          set_has_long_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LongMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 long_msg = 1;
  if (has_long_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->long_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LongMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 long_msg = 1;
  if (has_long_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->long_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LongMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 long_msg = 1;
    if (has_long_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->long_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LongMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LongMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LongMsg::MergeFrom(const LongMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_long_msg()) {
      set_long_msg(from.long_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LongMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongMsg::CopyFrom(const LongMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LongMsg::Swap(LongMsg* other) {
  if (other != this) {
    std::swap(long_msg_, other->long_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LongMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LongMsg_descriptor_;
  metadata.reflection = LongMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleMsg::kDoubleMsgFieldNumber;
#endif  // !_MSC_VER

DoubleMsg::DoubleMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleMsg::InitAsDefaultInstance() {
}

DoubleMsg::DoubleMsg(const DoubleMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleMsg::SharedCtor() {
  _cached_size_ = 0;
  double_msg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleMsg::~DoubleMsg() {
  SharedDtor();
}

void DoubleMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleMsg_descriptor_;
}

const DoubleMsg& DoubleMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

DoubleMsg* DoubleMsg::default_instance_ = NULL;

DoubleMsg* DoubleMsg::New() const {
  return new DoubleMsg;
}

void DoubleMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    double_msg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double double_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_msg_)));
          set_has_double_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double double_msg = 1;
  if (has_double_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->double_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double double_msg = 1;
  if (has_double_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->double_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double double_msg = 1;
    if (has_double_msg()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleMsg::MergeFrom(const DoubleMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_double_msg()) {
      set_double_msg(from.double_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleMsg::CopyFrom(const DoubleMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DoubleMsg::Swap(DoubleMsg* other) {
  if (other != this) {
    std::swap(double_msg_, other->double_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleMsg_descriptor_;
  metadata.reflection = DoubleMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigDecimalMsg::kBigdecimalMsgFieldNumber;
#endif  // !_MSC_VER

BigDecimalMsg::BigDecimalMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigDecimalMsg::InitAsDefaultInstance() {
}

BigDecimalMsg::BigDecimalMsg(const BigDecimalMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigDecimalMsg::SharedCtor() {
  _cached_size_ = 0;
  bigdecimal_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigDecimalMsg::~BigDecimalMsg() {
  SharedDtor();
}

void BigDecimalMsg::SharedDtor() {
  if (bigdecimal_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete bigdecimal_msg_;
  }
  if (this != default_instance_) {
  }
}

void BigDecimalMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigDecimalMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigDecimalMsg_descriptor_;
}

const BigDecimalMsg& BigDecimalMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

BigDecimalMsg* BigDecimalMsg::default_instance_ = NULL;

BigDecimalMsg* BigDecimalMsg::New() const {
  return new BigDecimalMsg;
}

void BigDecimalMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bigdecimal_msg()) {
      if (bigdecimal_msg_ != &::google::protobuf::internal::kEmptyString) {
        bigdecimal_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigDecimalMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bigdecimal_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bigdecimal_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigDecimalMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bigdecimal_msg = 1;
  if (has_bigdecimal_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bigdecimal_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigDecimalMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bigdecimal_msg = 1;
  if (has_bigdecimal_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bigdecimal_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigDecimalMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bigdecimal_msg = 1;
    if (has_bigdecimal_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bigdecimal_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigDecimalMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigDecimalMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigDecimalMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigDecimalMsg::MergeFrom(const BigDecimalMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bigdecimal_msg()) {
      set_bigdecimal_msg(from.bigdecimal_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigDecimalMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigDecimalMsg::CopyFrom(const BigDecimalMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigDecimalMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BigDecimalMsg::Swap(BigDecimalMsg* other) {
  if (other != this) {
    std::swap(bigdecimal_msg_, other->bigdecimal_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigDecimalMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigDecimalMsg_descriptor_;
  metadata.reflection = BigDecimalMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UUID::kLeastSigBitsFieldNumber;
const int UUID::kMostSigBitsFieldNumber;
#endif  // !_MSC_VER

UUID::UUID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UUID::InitAsDefaultInstance() {
}

UUID::UUID(const UUID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UUID::SharedCtor() {
  _cached_size_ = 0;
  least_sig_bits_ = GOOGLE_ULONGLONG(0);
  most_sig_bits_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UUID::~UUID() {
  SharedDtor();
}

void UUID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UUID_descriptor_;
}

const UUID& UUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

UUID* UUID::default_instance_ = NULL;

UUID* UUID::New() const {
  return new UUID;
}

void UUID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    least_sig_bits_ = GOOGLE_ULONGLONG(0);
    most_sig_bits_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 least_sig_bits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &least_sig_bits_)));
          set_has_least_sig_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_most_sig_bits;
        break;
      }

      // required uint64 most_sig_bits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_most_sig_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &most_sig_bits_)));
          set_has_most_sig_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 least_sig_bits = 1;
  if (has_least_sig_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->least_sig_bits(), output);
  }

  // required uint64 most_sig_bits = 2;
  if (has_most_sig_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->most_sig_bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UUID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 least_sig_bits = 1;
  if (has_least_sig_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->least_sig_bits(), target);
  }

  // required uint64 most_sig_bits = 2;
  if (has_most_sig_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->most_sig_bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UUID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 least_sig_bits = 1;
    if (has_least_sig_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->least_sig_bits());
    }

    // required uint64 most_sig_bits = 2;
    if (has_most_sig_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->most_sig_bits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UUID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UUID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UUID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UUID::MergeFrom(const UUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_least_sig_bits()) {
      set_least_sig_bits(from.least_sig_bits());
    }
    if (from.has_most_sig_bits()) {
      set_most_sig_bits(from.most_sig_bits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UUID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUID::CopyFrom(const UUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UUID::Swap(UUID* other) {
  if (other != this) {
    std::swap(least_sig_bits_, other->least_sig_bits_);
    std::swap(most_sig_bits_, other->most_sig_bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UUID_descriptor_;
  metadata.reflection = UUID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NamespaceDescriptor::kNameFieldNumber;
const int NamespaceDescriptor::kConfigurationFieldNumber;
#endif  // !_MSC_VER

NamespaceDescriptor::NamespaceDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NamespaceDescriptor::InitAsDefaultInstance() {
}

NamespaceDescriptor::NamespaceDescriptor(const NamespaceDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NamespaceDescriptor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamespaceDescriptor::~NamespaceDescriptor() {
  SharedDtor();
}

void NamespaceDescriptor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NamespaceDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamespaceDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamespaceDescriptor_descriptor_;
}

const NamespaceDescriptor& NamespaceDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

NamespaceDescriptor* NamespaceDescriptor::default_instance_ = NULL;

NamespaceDescriptor* NamespaceDescriptor::New() const {
  return new NamespaceDescriptor;
}

void NamespaceDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  configuration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NamespaceDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration;
        break;
      }

      // repeated .hbase.pb.NameStringPair configuration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configuration;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NamespaceDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // repeated .hbase.pb.NameStringPair configuration = 2;
  for (int i = 0; i < this->configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configuration(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NamespaceDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // repeated .hbase.pb.NameStringPair configuration = 2;
  for (int i = 0; i < this->configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configuration(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NamespaceDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .hbase.pb.NameStringPair configuration = 2;
  total_size += 1 * this->configuration_size();
  for (int i = 0; i < this->configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamespaceDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NamespaceDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NamespaceDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamespaceDescriptor::MergeFrom(const NamespaceDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  configuration_.MergeFrom(from.configuration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NamespaceDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamespaceDescriptor::CopyFrom(const NamespaceDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamespaceDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < configuration_size(); i++) {
    if (!this->configuration(i).IsInitialized()) return false;
  }
  return true;
}

void NamespaceDescriptor::Swap(NamespaceDescriptor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    configuration_.Swap(&other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NamespaceDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamespaceDescriptor_descriptor_;
  metadata.reflection = NamespaceDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VersionInfo::kVersionFieldNumber;
const int VersionInfo::kUrlFieldNumber;
const int VersionInfo::kRevisionFieldNumber;
const int VersionInfo::kUserFieldNumber;
const int VersionInfo::kDateFieldNumber;
const int VersionInfo::kSrcChecksumFieldNumber;
const int VersionInfo::kVersionMajorFieldNumber;
const int VersionInfo::kVersionMinorFieldNumber;
#endif  // !_MSC_VER

VersionInfo::VersionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionInfo::InitAsDefaultInstance() {
}

VersionInfo::VersionInfo(const VersionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionInfo::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_major_ = 0u;
  version_minor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionInfo::~VersionInfo() {
  SharedDtor();
}

void VersionInfo::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (revision_ != &::google::protobuf::internal::kEmptyString) {
    delete revision_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (src_checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete src_checksum_;
  }
  if (this != default_instance_) {
  }
}

void VersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionInfo_descriptor_;
}

const VersionInfo& VersionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

VersionInfo* VersionInfo::default_instance_ = NULL;

VersionInfo* VersionInfo::New() const {
  return new VersionInfo;
}

void VersionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_revision()) {
      if (revision_ != &::google::protobuf::internal::kEmptyString) {
        revision_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_src_checksum()) {
      if (src_checksum_ != &::google::protobuf::internal::kEmptyString) {
        src_checksum_->clear();
      }
    }
    version_major_ = 0u;
    version_minor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_revision;
        break;
      }

      // required string revision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->revision().data(), this->revision().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_date;
        break;
      }

      // required string date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_src_checksum;
        break;
      }

      // required string src_checksum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_checksum().data(), this->src_checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_version_major;
        break;
      }

      // optional uint32 version_major = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_major_)));
          set_has_version_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_version_minor;
        break;
      }

      // optional uint32 version_minor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_minor_)));
          set_has_version_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  // required string revision = 3;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->revision(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // required string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->date(), output);
  }

  // required string src_checksum = 6;
  if (has_src_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_checksum().data(), this->src_checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->src_checksum(), output);
  }

  // optional uint32 version_major = 7;
  if (has_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version_major(), output);
  }

  // optional uint32 version_minor = 8;
  if (has_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version_minor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // required string revision = 3;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->revision(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // required string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  // required string src_checksum = 6;
  if (has_src_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_checksum().data(), this->src_checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->src_checksum(), target);
  }

  // optional uint32 version_major = 7;
  if (has_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version_major(), target);
  }

  // optional uint32 version_minor = 8;
  if (has_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version_minor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // required string revision = 3;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revision());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string date = 5;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // required string src_checksum = 6;
    if (has_src_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_checksum());
    }

    // optional uint32 version_major = 7;
    if (has_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_major());
    }

    // optional uint32 version_minor = 8;
    if (has_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_minor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionInfo::MergeFrom(const VersionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_src_checksum()) {
      set_src_checksum(from.src_checksum());
    }
    if (from.has_version_major()) {
      set_version_major(from.version_major());
    }
    if (from.has_version_minor()) {
      set_version_minor(from.version_minor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void VersionInfo::Swap(VersionInfo* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(url_, other->url_);
    std::swap(revision_, other->revision_);
    std::swap(user_, other->user_);
    std::swap(date_, other->date_);
    std::swap(src_checksum_, other->src_checksum_);
    std::swap(version_major_, other->version_major_);
    std::swap(version_minor_, other->version_minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionInfo_descriptor_;
  metadata.reflection = VersionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionServerInfo::kInfoPortFieldNumber;
const int RegionServerInfo::kVersionInfoFieldNumber;
#endif  // !_MSC_VER

RegionServerInfo::RegionServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionServerInfo::InitAsDefaultInstance() {
  version_info_ = const_cast< ::hbase::pb::VersionInfo*>(&::hbase::pb::VersionInfo::default_instance());
}

RegionServerInfo::RegionServerInfo(const RegionServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionServerInfo::SharedCtor() {
  _cached_size_ = 0;
  infoport_ = 0;
  version_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionServerInfo::~RegionServerInfo() {
  SharedDtor();
}

void RegionServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete version_info_;
  }
}

void RegionServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionServerInfo_descriptor_;
}

const RegionServerInfo& RegionServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HBase_2eproto();
  return *default_instance_;
}

RegionServerInfo* RegionServerInfo::default_instance_ = NULL;

RegionServerInfo* RegionServerInfo::New() const {
  return new RegionServerInfo;
}

void RegionServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    infoport_ = 0;
    if (has_version_info()) {
      if (version_info_ != NULL) version_info_->::hbase::pb::VersionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 infoPort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infoport_)));
          set_has_infoport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version_info;
        break;
      }

      // optional .hbase.pb.VersionInfo version_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 infoPort = 1;
  if (has_infoport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->infoport(), output);
  }

  // optional .hbase.pb.VersionInfo version_info = 2;
  if (has_version_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->version_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 infoPort = 1;
  if (has_infoport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->infoport(), target);
  }

  // optional .hbase.pb.VersionInfo version_info = 2;
  if (has_version_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->version_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 infoPort = 1;
    if (has_infoport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infoport());
    }

    // optional .hbase.pb.VersionInfo version_info = 2;
    if (has_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionServerInfo::MergeFrom(const RegionServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infoport()) {
      set_infoport(from.infoport());
    }
    if (from.has_version_info()) {
      mutable_version_info()->::hbase::pb::VersionInfo::MergeFrom(from.version_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionServerInfo::CopyFrom(const RegionServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionServerInfo::IsInitialized() const {

  if (has_version_info()) {
    if (!this->version_info().IsInitialized()) return false;
  }
  return true;
}

void RegionServerInfo::Swap(RegionServerInfo* other) {
  if (other != this) {
    std::swap(infoport_, other->infoport_);
    std::swap(version_info_, other->version_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionServerInfo_descriptor_;
  metadata.reflection = RegionServerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
