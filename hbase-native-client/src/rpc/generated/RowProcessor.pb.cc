// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RowProcessor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RowProcessor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* ProcessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RowProcessor_2eproto() {
  protobuf_AddDesc_RowProcessor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RowProcessor.proto");
  GOOGLE_CHECK(file != NULL);
  ProcessRequest_descriptor_ = file->message_type(0);
  static const int ProcessRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, row_processor_class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, row_processor_initializer_message_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, row_processor_initializer_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, nonce_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, nonce_),
  };
  ProcessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessRequest_descriptor_,
      ProcessRequest::default_instance_,
      ProcessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessRequest));
  ProcessResponse_descriptor_ = file->message_type(1);
  static const int ProcessResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, row_processor_result_),
  };
  ProcessResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessResponse_descriptor_,
      ProcessResponse::default_instance_,
      ProcessResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RowProcessor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessRequest_descriptor_, &ProcessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessResponse_descriptor_, &ProcessResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RowProcessor_2eproto() {
  delete ProcessRequest::default_instance_;
  delete ProcessRequest_reflection_;
  delete ProcessResponse::default_instance_;
  delete ProcessResponse_reflection_;
}

void protobuf_AddDesc_RowProcessor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RowProcessor.proto\022\010hbase.pb\"\261\001\n\016Proce"
    "ssRequest\022 \n\030row_processor_class_name\030\001 "
    "\002(\t\022.\n&row_processor_initializer_message"
    "_name\030\002 \001(\t\022)\n!row_processor_initializer"
    "_message\030\003 \001(\014\022\023\n\013nonce_group\030\004 \001(\004\022\r\n\005n"
    "once\030\005 \001(\004\"/\n\017ProcessResponse\022\034\n\024row_pro"
    "cessor_result\030\001 \002(\0142U\n\023RowProcessorServi"
    "ce\022>\n\007Process\022\030.hbase.pb.ProcessRequest\032"
    "\031.hbase.pb.ProcessResponseBH\n*org.apache"
    ".hadoop.hbase.protobuf.generatedB\022RowPro"
    "cessorProtosH\001\210\001\001\240\001\001", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RowProcessor.proto", &protobuf_RegisterTypes);
  ProcessRequest::default_instance_ = new ProcessRequest();
  ProcessResponse::default_instance_ = new ProcessResponse();
  ProcessRequest::default_instance_->InitAsDefaultInstance();
  ProcessResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RowProcessor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RowProcessor_2eproto {
  StaticDescriptorInitializer_RowProcessor_2eproto() {
    protobuf_AddDesc_RowProcessor_2eproto();
  }
} static_descriptor_initializer_RowProcessor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProcessRequest::kRowProcessorClassNameFieldNumber;
const int ProcessRequest::kRowProcessorInitializerMessageNameFieldNumber;
const int ProcessRequest::kRowProcessorInitializerMessageFieldNumber;
const int ProcessRequest::kNonceGroupFieldNumber;
const int ProcessRequest::kNonceFieldNumber;
#endif  // !_MSC_VER

ProcessRequest::ProcessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessRequest::InitAsDefaultInstance() {
}

ProcessRequest::ProcessRequest(const ProcessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessRequest::SharedCtor() {
  _cached_size_ = 0;
  row_processor_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  row_processor_initializer_message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  row_processor_initializer_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonce_group_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessRequest::~ProcessRequest() {
  SharedDtor();
}

void ProcessRequest::SharedDtor() {
  if (row_processor_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_class_name_;
  }
  if (row_processor_initializer_message_name_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_initializer_message_name_;
  }
  if (row_processor_initializer_message_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_initializer_message_;
  }
  if (this != default_instance_) {
  }
}

void ProcessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessRequest_descriptor_;
}

const ProcessRequest& ProcessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RowProcessor_2eproto();
  return *default_instance_;
}

ProcessRequest* ProcessRequest::default_instance_ = NULL;

ProcessRequest* ProcessRequest::New() const {
  return new ProcessRequest;
}

void ProcessRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row_processor_class_name()) {
      if (row_processor_class_name_ != &::google::protobuf::internal::kEmptyString) {
        row_processor_class_name_->clear();
      }
    }
    if (has_row_processor_initializer_message_name()) {
      if (row_processor_initializer_message_name_ != &::google::protobuf::internal::kEmptyString) {
        row_processor_initializer_message_name_->clear();
      }
    }
    if (has_row_processor_initializer_message()) {
      if (row_processor_initializer_message_ != &::google::protobuf::internal::kEmptyString) {
        row_processor_initializer_message_->clear();
      }
    }
    nonce_group_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string row_processor_class_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_row_processor_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_processor_class_name().data(), this->row_processor_class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_processor_initializer_message_name;
        break;
      }

      // optional string row_processor_initializer_message_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_processor_initializer_message_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_row_processor_initializer_message_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_processor_initializer_message_name().data(), this->row_processor_initializer_message_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_row_processor_initializer_message;
        break;
      }

      // optional bytes row_processor_initializer_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_processor_initializer_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_processor_initializer_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nonce_group;
        break;
      }

      // optional uint64 nonce_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
          set_has_nonce_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string row_processor_class_name = 1;
  if (has_row_processor_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_processor_class_name().data(), this->row_processor_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->row_processor_class_name(), output);
  }

  // optional string row_processor_initializer_message_name = 2;
  if (has_row_processor_initializer_message_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_processor_initializer_message_name().data(), this->row_processor_initializer_message_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->row_processor_initializer_message_name(), output);
  }

  // optional bytes row_processor_initializer_message = 3;
  if (has_row_processor_initializer_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->row_processor_initializer_message(), output);
  }

  // optional uint64 nonce_group = 4;
  if (has_nonce_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->nonce_group(), output);
  }

  // optional uint64 nonce = 5;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string row_processor_class_name = 1;
  if (has_row_processor_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_processor_class_name().data(), this->row_processor_class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->row_processor_class_name(), target);
  }

  // optional string row_processor_initializer_message_name = 2;
  if (has_row_processor_initializer_message_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_processor_initializer_message_name().data(), this->row_processor_initializer_message_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->row_processor_initializer_message_name(), target);
  }

  // optional bytes row_processor_initializer_message = 3;
  if (has_row_processor_initializer_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->row_processor_initializer_message(), target);
  }

  // optional uint64 nonce_group = 4;
  if (has_nonce_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce_group(), target);
  }

  // optional uint64 nonce = 5;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string row_processor_class_name = 1;
    if (has_row_processor_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->row_processor_class_name());
    }

    // optional string row_processor_initializer_message_name = 2;
    if (has_row_processor_initializer_message_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->row_processor_initializer_message_name());
    }

    // optional bytes row_processor_initializer_message = 3;
    if (has_row_processor_initializer_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_processor_initializer_message());
    }

    // optional uint64 nonce_group = 4;
    if (has_nonce_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 5;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessRequest::MergeFrom(const ProcessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_processor_class_name()) {
      set_row_processor_class_name(from.row_processor_class_name());
    }
    if (from.has_row_processor_initializer_message_name()) {
      set_row_processor_initializer_message_name(from.row_processor_initializer_message_name());
    }
    if (from.has_row_processor_initializer_message()) {
      set_row_processor_initializer_message(from.row_processor_initializer_message());
    }
    if (from.has_nonce_group()) {
      set_nonce_group(from.nonce_group());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessRequest::CopyFrom(const ProcessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProcessRequest::Swap(ProcessRequest* other) {
  if (other != this) {
    std::swap(row_processor_class_name_, other->row_processor_class_name_);
    std::swap(row_processor_initializer_message_name_, other->row_processor_initializer_message_name_);
    std::swap(row_processor_initializer_message_, other->row_processor_initializer_message_);
    std::swap(nonce_group_, other->nonce_group_);
    std::swap(nonce_, other->nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessRequest_descriptor_;
  metadata.reflection = ProcessRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessResponse::kRowProcessorResultFieldNumber;
#endif  // !_MSC_VER

ProcessResponse::ProcessResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessResponse::InitAsDefaultInstance() {
}

ProcessResponse::ProcessResponse(const ProcessResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessResponse::SharedCtor() {
  _cached_size_ = 0;
  row_processor_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessResponse::~ProcessResponse() {
  SharedDtor();
}

void ProcessResponse::SharedDtor() {
  if (row_processor_result_ != &::google::protobuf::internal::kEmptyString) {
    delete row_processor_result_;
  }
  if (this != default_instance_) {
  }
}

void ProcessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessResponse_descriptor_;
}

const ProcessResponse& ProcessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RowProcessor_2eproto();
  return *default_instance_;
}

ProcessResponse* ProcessResponse::default_instance_ = NULL;

ProcessResponse* ProcessResponse::New() const {
  return new ProcessResponse;
}

void ProcessResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row_processor_result()) {
      if (row_processor_result_ != &::google::protobuf::internal::kEmptyString) {
        row_processor_result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row_processor_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_processor_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes row_processor_result = 1;
  if (has_row_processor_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->row_processor_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes row_processor_result = 1;
  if (has_row_processor_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_processor_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes row_processor_result = 1;
    if (has_row_processor_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_processor_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessResponse::MergeFrom(const ProcessResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_processor_result()) {
      set_row_processor_result(from.row_processor_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessResponse::CopyFrom(const ProcessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProcessResponse::Swap(ProcessResponse* other) {
  if (other != this) {
    std::swap(row_processor_result_, other->row_processor_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessResponse_descriptor_;
  metadata.reflection = ProcessResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
