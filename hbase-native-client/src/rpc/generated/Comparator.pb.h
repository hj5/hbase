// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Comparator.proto

#ifndef PROTOBUF_Comparator_2eproto__INCLUDED
#define PROTOBUF_Comparator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Comparator_2eproto();
void protobuf_AssignDesc_Comparator_2eproto();
void protobuf_ShutdownFile_Comparator_2eproto();

class Comparator;
class ByteArrayComparable;
class BinaryComparator;
class LongComparator;
class BinaryPrefixComparator;
class BitComparator;
class NullComparator;
class RegexStringComparator;
class SubstringComparator;

enum BitComparator_BitwiseOp {
  BitComparator_BitwiseOp_AND = 1,
  BitComparator_BitwiseOp_OR = 2,
  BitComparator_BitwiseOp_XOR = 3
};
bool BitComparator_BitwiseOp_IsValid(int value);
const BitComparator_BitwiseOp BitComparator_BitwiseOp_BitwiseOp_MIN = BitComparator_BitwiseOp_AND;
const BitComparator_BitwiseOp BitComparator_BitwiseOp_BitwiseOp_MAX = BitComparator_BitwiseOp_XOR;
const int BitComparator_BitwiseOp_BitwiseOp_ARRAYSIZE = BitComparator_BitwiseOp_BitwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* BitComparator_BitwiseOp_descriptor();
inline const ::std::string& BitComparator_BitwiseOp_Name(BitComparator_BitwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    BitComparator_BitwiseOp_descriptor(), value);
}
inline bool BitComparator_BitwiseOp_Parse(
    const ::std::string& name, BitComparator_BitwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BitComparator_BitwiseOp>(
    BitComparator_BitwiseOp_descriptor(), name, value);
}
// ===================================================================

class Comparator : public ::google::protobuf::Message {
 public:
  Comparator();
  virtual ~Comparator();

  Comparator(const Comparator& from);

  inline Comparator& operator=(const Comparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Comparator& default_instance();

  void Swap(Comparator* other);

  // implements Message ----------------------------------------------

  Comparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Comparator& from);
  void MergeFrom(const Comparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes serialized_comparator = 2;
  inline bool has_serialized_comparator() const;
  inline void clear_serialized_comparator();
  static const int kSerializedComparatorFieldNumber = 2;
  inline const ::std::string& serialized_comparator() const;
  inline void set_serialized_comparator(const ::std::string& value);
  inline void set_serialized_comparator(const char* value);
  inline void set_serialized_comparator(const void* value, size_t size);
  inline ::std::string* mutable_serialized_comparator();
  inline ::std::string* release_serialized_comparator();
  inline void set_allocated_serialized_comparator(::std::string* serialized_comparator);

  // @@protoc_insertion_point(class_scope:hbase.pb.Comparator)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_serialized_comparator();
  inline void clear_has_serialized_comparator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* serialized_comparator_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static Comparator* default_instance_;
};
// -------------------------------------------------------------------

class ByteArrayComparable : public ::google::protobuf::Message {
 public:
  ByteArrayComparable();
  virtual ~ByteArrayComparable();

  ByteArrayComparable(const ByteArrayComparable& from);

  inline ByteArrayComparable& operator=(const ByteArrayComparable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ByteArrayComparable& default_instance();

  void Swap(ByteArrayComparable* other);

  // implements Message ----------------------------------------------

  ByteArrayComparable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ByteArrayComparable& from);
  void MergeFrom(const ByteArrayComparable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ByteArrayComparable)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static ByteArrayComparable* default_instance_;
};
// -------------------------------------------------------------------

class BinaryComparator : public ::google::protobuf::Message {
 public:
  BinaryComparator();
  virtual ~BinaryComparator();

  BinaryComparator(const BinaryComparator& from);

  inline BinaryComparator& operator=(const BinaryComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryComparator& default_instance();

  void Swap(BinaryComparator* other);

  // implements Message ----------------------------------------------

  BinaryComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinaryComparator& from);
  void MergeFrom(const BinaryComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ByteArrayComparable comparable = 1;
  inline bool has_comparable() const;
  inline void clear_comparable();
  static const int kComparableFieldNumber = 1;
  inline const ::hbase::pb::ByteArrayComparable& comparable() const;
  inline ::hbase::pb::ByteArrayComparable* mutable_comparable();
  inline ::hbase::pb::ByteArrayComparable* release_comparable();
  inline void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.BinaryComparator)
 private:
  inline void set_has_comparable();
  inline void clear_has_comparable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ByteArrayComparable* comparable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static BinaryComparator* default_instance_;
};
// -------------------------------------------------------------------

class LongComparator : public ::google::protobuf::Message {
 public:
  LongComparator();
  virtual ~LongComparator();

  LongComparator(const LongComparator& from);

  inline LongComparator& operator=(const LongComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LongComparator& default_instance();

  void Swap(LongComparator* other);

  // implements Message ----------------------------------------------

  LongComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LongComparator& from);
  void MergeFrom(const LongComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ByteArrayComparable comparable = 1;
  inline bool has_comparable() const;
  inline void clear_comparable();
  static const int kComparableFieldNumber = 1;
  inline const ::hbase::pb::ByteArrayComparable& comparable() const;
  inline ::hbase::pb::ByteArrayComparable* mutable_comparable();
  inline ::hbase::pb::ByteArrayComparable* release_comparable();
  inline void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.LongComparator)
 private:
  inline void set_has_comparable();
  inline void clear_has_comparable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ByteArrayComparable* comparable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static LongComparator* default_instance_;
};
// -------------------------------------------------------------------

class BinaryPrefixComparator : public ::google::protobuf::Message {
 public:
  BinaryPrefixComparator();
  virtual ~BinaryPrefixComparator();

  BinaryPrefixComparator(const BinaryPrefixComparator& from);

  inline BinaryPrefixComparator& operator=(const BinaryPrefixComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinaryPrefixComparator& default_instance();

  void Swap(BinaryPrefixComparator* other);

  // implements Message ----------------------------------------------

  BinaryPrefixComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinaryPrefixComparator& from);
  void MergeFrom(const BinaryPrefixComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hbase.pb.ByteArrayComparable comparable = 1;
  inline bool has_comparable() const;
  inline void clear_comparable();
  static const int kComparableFieldNumber = 1;
  inline const ::hbase::pb::ByteArrayComparable& comparable() const;
  inline ::hbase::pb::ByteArrayComparable* mutable_comparable();
  inline ::hbase::pb::ByteArrayComparable* release_comparable();
  inline void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.BinaryPrefixComparator)
 private:
  inline void set_has_comparable();
  inline void clear_has_comparable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ByteArrayComparable* comparable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static BinaryPrefixComparator* default_instance_;
};
// -------------------------------------------------------------------

class BitComparator : public ::google::protobuf::Message {
 public:
  BitComparator();
  virtual ~BitComparator();

  BitComparator(const BitComparator& from);

  inline BitComparator& operator=(const BitComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitComparator& default_instance();

  void Swap(BitComparator* other);

  // implements Message ----------------------------------------------

  BitComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitComparator& from);
  void MergeFrom(const BitComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BitComparator_BitwiseOp BitwiseOp;
  static const BitwiseOp AND = BitComparator_BitwiseOp_AND;
  static const BitwiseOp OR = BitComparator_BitwiseOp_OR;
  static const BitwiseOp XOR = BitComparator_BitwiseOp_XOR;
  static inline bool BitwiseOp_IsValid(int value) {
    return BitComparator_BitwiseOp_IsValid(value);
  }
  static const BitwiseOp BitwiseOp_MIN =
    BitComparator_BitwiseOp_BitwiseOp_MIN;
  static const BitwiseOp BitwiseOp_MAX =
    BitComparator_BitwiseOp_BitwiseOp_MAX;
  static const int BitwiseOp_ARRAYSIZE =
    BitComparator_BitwiseOp_BitwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BitwiseOp_descriptor() {
    return BitComparator_BitwiseOp_descriptor();
  }
  static inline const ::std::string& BitwiseOp_Name(BitwiseOp value) {
    return BitComparator_BitwiseOp_Name(value);
  }
  static inline bool BitwiseOp_Parse(const ::std::string& name,
      BitwiseOp* value) {
    return BitComparator_BitwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .hbase.pb.ByteArrayComparable comparable = 1;
  inline bool has_comparable() const;
  inline void clear_comparable();
  static const int kComparableFieldNumber = 1;
  inline const ::hbase::pb::ByteArrayComparable& comparable() const;
  inline ::hbase::pb::ByteArrayComparable* mutable_comparable();
  inline ::hbase::pb::ByteArrayComparable* release_comparable();
  inline void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
  inline bool has_bitwise_op() const;
  inline void clear_bitwise_op();
  static const int kBitwiseOpFieldNumber = 2;
  inline ::hbase::pb::BitComparator_BitwiseOp bitwise_op() const;
  inline void set_bitwise_op(::hbase::pb::BitComparator_BitwiseOp value);

  // @@protoc_insertion_point(class_scope:hbase.pb.BitComparator)
 private:
  inline void set_has_comparable();
  inline void clear_has_comparable();
  inline void set_has_bitwise_op();
  inline void clear_has_bitwise_op();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ByteArrayComparable* comparable_;
  int bitwise_op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static BitComparator* default_instance_;
};
// -------------------------------------------------------------------

class NullComparator : public ::google::protobuf::Message {
 public:
  NullComparator();
  virtual ~NullComparator();

  NullComparator(const NullComparator& from);

  inline NullComparator& operator=(const NullComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NullComparator& default_instance();

  void Swap(NullComparator* other);

  // implements Message ----------------------------------------------

  NullComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NullComparator& from);
  void MergeFrom(const NullComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.NullComparator)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static NullComparator* default_instance_;
};
// -------------------------------------------------------------------

class RegexStringComparator : public ::google::protobuf::Message {
 public:
  RegexStringComparator();
  virtual ~RegexStringComparator();

  RegexStringComparator(const RegexStringComparator& from);

  inline RegexStringComparator& operator=(const RegexStringComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegexStringComparator& default_instance();

  void Swap(RegexStringComparator* other);

  // implements Message ----------------------------------------------

  RegexStringComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegexStringComparator& from);
  void MergeFrom(const RegexStringComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pattern = 1;
  inline bool has_pattern() const;
  inline void clear_pattern();
  static const int kPatternFieldNumber = 1;
  inline const ::std::string& pattern() const;
  inline void set_pattern(const ::std::string& value);
  inline void set_pattern(const char* value);
  inline void set_pattern(const char* value, size_t size);
  inline ::std::string* mutable_pattern();
  inline ::std::string* release_pattern();
  inline void set_allocated_pattern(::std::string* pattern);

  // required int32 pattern_flags = 2;
  inline bool has_pattern_flags() const;
  inline void clear_pattern_flags();
  static const int kPatternFlagsFieldNumber = 2;
  inline ::google::protobuf::int32 pattern_flags() const;
  inline void set_pattern_flags(::google::protobuf::int32 value);

  // required string charset = 3;
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 3;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  inline void set_allocated_charset(::std::string* charset);

  // optional string engine = 4;
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 4;
  inline const ::std::string& engine() const;
  inline void set_engine(const ::std::string& value);
  inline void set_engine(const char* value);
  inline void set_engine(const char* value, size_t size);
  inline ::std::string* mutable_engine();
  inline ::std::string* release_engine();
  inline void set_allocated_engine(::std::string* engine);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegexStringComparator)
 private:
  inline void set_has_pattern();
  inline void clear_has_pattern();
  inline void set_has_pattern_flags();
  inline void clear_has_pattern_flags();
  inline void set_has_charset();
  inline void clear_has_charset();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pattern_;
  ::std::string* charset_;
  ::std::string* engine_;
  ::google::protobuf::int32 pattern_flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static RegexStringComparator* default_instance_;
};
// -------------------------------------------------------------------

class SubstringComparator : public ::google::protobuf::Message {
 public:
  SubstringComparator();
  virtual ~SubstringComparator();

  SubstringComparator(const SubstringComparator& from);

  inline SubstringComparator& operator=(const SubstringComparator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubstringComparator& default_instance();

  void Swap(SubstringComparator* other);

  // implements Message ----------------------------------------------

  SubstringComparator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubstringComparator& from);
  void MergeFrom(const SubstringComparator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string substr = 1;
  inline bool has_substr() const;
  inline void clear_substr();
  static const int kSubstrFieldNumber = 1;
  inline const ::std::string& substr() const;
  inline void set_substr(const ::std::string& value);
  inline void set_substr(const char* value);
  inline void set_substr(const char* value, size_t size);
  inline ::std::string* mutable_substr();
  inline ::std::string* release_substr();
  inline void set_allocated_substr(::std::string* substr);

  // @@protoc_insertion_point(class_scope:hbase.pb.SubstringComparator)
 private:
  inline void set_has_substr();
  inline void clear_has_substr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* substr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Comparator_2eproto();
  friend void protobuf_AssignDesc_Comparator_2eproto();
  friend void protobuf_ShutdownFile_Comparator_2eproto();

  void InitAsDefaultInstance();
  static SubstringComparator* default_instance_;
};
// ===================================================================


// ===================================================================

// Comparator

// required string name = 1;
inline bool Comparator::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Comparator::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Comparator::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Comparator::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Comparator::name() const {
  return *name_;
}
inline void Comparator::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Comparator::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Comparator::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Comparator::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Comparator::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Comparator::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes serialized_comparator = 2;
inline bool Comparator::has_serialized_comparator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Comparator::set_has_serialized_comparator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Comparator::clear_has_serialized_comparator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Comparator::clear_serialized_comparator() {
  if (serialized_comparator_ != &::google::protobuf::internal::kEmptyString) {
    serialized_comparator_->clear();
  }
  clear_has_serialized_comparator();
}
inline const ::std::string& Comparator::serialized_comparator() const {
  return *serialized_comparator_;
}
inline void Comparator::set_serialized_comparator(const ::std::string& value) {
  set_has_serialized_comparator();
  if (serialized_comparator_ == &::google::protobuf::internal::kEmptyString) {
    serialized_comparator_ = new ::std::string;
  }
  serialized_comparator_->assign(value);
}
inline void Comparator::set_serialized_comparator(const char* value) {
  set_has_serialized_comparator();
  if (serialized_comparator_ == &::google::protobuf::internal::kEmptyString) {
    serialized_comparator_ = new ::std::string;
  }
  serialized_comparator_->assign(value);
}
inline void Comparator::set_serialized_comparator(const void* value, size_t size) {
  set_has_serialized_comparator();
  if (serialized_comparator_ == &::google::protobuf::internal::kEmptyString) {
    serialized_comparator_ = new ::std::string;
  }
  serialized_comparator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Comparator::mutable_serialized_comparator() {
  set_has_serialized_comparator();
  if (serialized_comparator_ == &::google::protobuf::internal::kEmptyString) {
    serialized_comparator_ = new ::std::string;
  }
  return serialized_comparator_;
}
inline ::std::string* Comparator::release_serialized_comparator() {
  clear_has_serialized_comparator();
  if (serialized_comparator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_comparator_;
    serialized_comparator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Comparator::set_allocated_serialized_comparator(::std::string* serialized_comparator) {
  if (serialized_comparator_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_comparator_;
  }
  if (serialized_comparator) {
    set_has_serialized_comparator();
    serialized_comparator_ = serialized_comparator;
  } else {
    clear_has_serialized_comparator();
    serialized_comparator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ByteArrayComparable

// optional bytes value = 1;
inline bool ByteArrayComparable::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ByteArrayComparable::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ByteArrayComparable::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ByteArrayComparable::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ByteArrayComparable::value() const {
  return *value_;
}
inline void ByteArrayComparable::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ByteArrayComparable::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ByteArrayComparable::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ByteArrayComparable::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ByteArrayComparable::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ByteArrayComparable::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BinaryComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BinaryComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryComparator::set_has_comparable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinaryComparator::clear_has_comparable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinaryComparator::clear_comparable() {
  if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
  clear_has_comparable();
}
inline const ::hbase::pb::ByteArrayComparable& BinaryComparator::comparable() const {
  return comparable_ != NULL ? *comparable_ : *default_instance_->comparable_;
}
inline ::hbase::pb::ByteArrayComparable* BinaryComparator::mutable_comparable() {
  set_has_comparable();
  if (comparable_ == NULL) comparable_ = new ::hbase::pb::ByteArrayComparable;
  return comparable_;
}
inline ::hbase::pb::ByteArrayComparable* BinaryComparator::release_comparable() {
  clear_has_comparable();
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = NULL;
  return temp;
}
inline void BinaryComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  delete comparable_;
  comparable_ = comparable;
  if (comparable) {
    set_has_comparable();
  } else {
    clear_has_comparable();
  }
}

// -------------------------------------------------------------------

// LongComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool LongComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LongComparator::set_has_comparable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LongComparator::clear_has_comparable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LongComparator::clear_comparable() {
  if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
  clear_has_comparable();
}
inline const ::hbase::pb::ByteArrayComparable& LongComparator::comparable() const {
  return comparable_ != NULL ? *comparable_ : *default_instance_->comparable_;
}
inline ::hbase::pb::ByteArrayComparable* LongComparator::mutable_comparable() {
  set_has_comparable();
  if (comparable_ == NULL) comparable_ = new ::hbase::pb::ByteArrayComparable;
  return comparable_;
}
inline ::hbase::pb::ByteArrayComparable* LongComparator::release_comparable() {
  clear_has_comparable();
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = NULL;
  return temp;
}
inline void LongComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  delete comparable_;
  comparable_ = comparable;
  if (comparable) {
    set_has_comparable();
  } else {
    clear_has_comparable();
  }
}

// -------------------------------------------------------------------

// BinaryPrefixComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BinaryPrefixComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryPrefixComparator::set_has_comparable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinaryPrefixComparator::clear_has_comparable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinaryPrefixComparator::clear_comparable() {
  if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
  clear_has_comparable();
}
inline const ::hbase::pb::ByteArrayComparable& BinaryPrefixComparator::comparable() const {
  return comparable_ != NULL ? *comparable_ : *default_instance_->comparable_;
}
inline ::hbase::pb::ByteArrayComparable* BinaryPrefixComparator::mutable_comparable() {
  set_has_comparable();
  if (comparable_ == NULL) comparable_ = new ::hbase::pb::ByteArrayComparable;
  return comparable_;
}
inline ::hbase::pb::ByteArrayComparable* BinaryPrefixComparator::release_comparable() {
  clear_has_comparable();
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = NULL;
  return temp;
}
inline void BinaryPrefixComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  delete comparable_;
  comparable_ = comparable;
  if (comparable) {
    set_has_comparable();
  } else {
    clear_has_comparable();
  }
}

// -------------------------------------------------------------------

// BitComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BitComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitComparator::set_has_comparable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitComparator::clear_has_comparable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitComparator::clear_comparable() {
  if (comparable_ != NULL) comparable_->::hbase::pb::ByteArrayComparable::Clear();
  clear_has_comparable();
}
inline const ::hbase::pb::ByteArrayComparable& BitComparator::comparable() const {
  return comparable_ != NULL ? *comparable_ : *default_instance_->comparable_;
}
inline ::hbase::pb::ByteArrayComparable* BitComparator::mutable_comparable() {
  set_has_comparable();
  if (comparable_ == NULL) comparable_ = new ::hbase::pb::ByteArrayComparable;
  return comparable_;
}
inline ::hbase::pb::ByteArrayComparable* BitComparator::release_comparable() {
  clear_has_comparable();
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = NULL;
  return temp;
}
inline void BitComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  delete comparable_;
  comparable_ = comparable;
  if (comparable) {
    set_has_comparable();
  } else {
    clear_has_comparable();
  }
}

// required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
inline bool BitComparator::has_bitwise_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitComparator::set_has_bitwise_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitComparator::clear_has_bitwise_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitComparator::clear_bitwise_op() {
  bitwise_op_ = 1;
  clear_has_bitwise_op();
}
inline ::hbase::pb::BitComparator_BitwiseOp BitComparator::bitwise_op() const {
  return static_cast< ::hbase::pb::BitComparator_BitwiseOp >(bitwise_op_);
}
inline void BitComparator::set_bitwise_op(::hbase::pb::BitComparator_BitwiseOp value) {
  assert(::hbase::pb::BitComparator_BitwiseOp_IsValid(value));
  set_has_bitwise_op();
  bitwise_op_ = value;
}

// -------------------------------------------------------------------

// NullComparator

// -------------------------------------------------------------------

// RegexStringComparator

// required string pattern = 1;
inline bool RegexStringComparator::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegexStringComparator::set_has_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegexStringComparator::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegexStringComparator::clear_pattern() {
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    pattern_->clear();
  }
  clear_has_pattern();
}
inline const ::std::string& RegexStringComparator::pattern() const {
  return *pattern_;
}
inline void RegexStringComparator::set_pattern(const ::std::string& value) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(value);
}
inline void RegexStringComparator::set_pattern(const char* value) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(value);
}
inline void RegexStringComparator::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegexStringComparator::mutable_pattern() {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  return pattern_;
}
inline ::std::string* RegexStringComparator::release_pattern() {
  clear_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pattern_;
    pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegexStringComparator::set_allocated_pattern(::std::string* pattern) {
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_;
  }
  if (pattern) {
    set_has_pattern();
    pattern_ = pattern;
  } else {
    clear_has_pattern();
    pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pattern_flags = 2;
inline bool RegexStringComparator::has_pattern_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegexStringComparator::set_has_pattern_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegexStringComparator::clear_has_pattern_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegexStringComparator::clear_pattern_flags() {
  pattern_flags_ = 0;
  clear_has_pattern_flags();
}
inline ::google::protobuf::int32 RegexStringComparator::pattern_flags() const {
  return pattern_flags_;
}
inline void RegexStringComparator::set_pattern_flags(::google::protobuf::int32 value) {
  set_has_pattern_flags();
  pattern_flags_ = value;
}

// required string charset = 3;
inline bool RegexStringComparator::has_charset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegexStringComparator::set_has_charset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegexStringComparator::clear_has_charset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegexStringComparator::clear_charset() {
  if (charset_ != &::google::protobuf::internal::kEmptyString) {
    charset_->clear();
  }
  clear_has_charset();
}
inline const ::std::string& RegexStringComparator::charset() const {
  return *charset_;
}
inline void RegexStringComparator::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void RegexStringComparator::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
}
inline void RegexStringComparator::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegexStringComparator::mutable_charset() {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    charset_ = new ::std::string;
  }
  return charset_;
}
inline ::std::string* RegexStringComparator::release_charset() {
  clear_has_charset();
  if (charset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegexStringComparator::set_allocated_charset(::std::string* charset) {
  if (charset_ != &::google::protobuf::internal::kEmptyString) {
    delete charset_;
  }
  if (charset) {
    set_has_charset();
    charset_ = charset;
  } else {
    clear_has_charset();
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string engine = 4;
inline bool RegexStringComparator::has_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegexStringComparator::set_has_engine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegexStringComparator::clear_has_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegexStringComparator::clear_engine() {
  if (engine_ != &::google::protobuf::internal::kEmptyString) {
    engine_->clear();
  }
  clear_has_engine();
}
inline const ::std::string& RegexStringComparator::engine() const {
  return *engine_;
}
inline void RegexStringComparator::set_engine(const ::std::string& value) {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::kEmptyString) {
    engine_ = new ::std::string;
  }
  engine_->assign(value);
}
inline void RegexStringComparator::set_engine(const char* value) {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::kEmptyString) {
    engine_ = new ::std::string;
  }
  engine_->assign(value);
}
inline void RegexStringComparator::set_engine(const char* value, size_t size) {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::kEmptyString) {
    engine_ = new ::std::string;
  }
  engine_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegexStringComparator::mutable_engine() {
  set_has_engine();
  if (engine_ == &::google::protobuf::internal::kEmptyString) {
    engine_ = new ::std::string;
  }
  return engine_;
}
inline ::std::string* RegexStringComparator::release_engine() {
  clear_has_engine();
  if (engine_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = engine_;
    engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegexStringComparator::set_allocated_engine(::std::string* engine) {
  if (engine_ != &::google::protobuf::internal::kEmptyString) {
    delete engine_;
  }
  if (engine) {
    set_has_engine();
    engine_ = engine;
  } else {
    clear_has_engine();
    engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SubstringComparator

// required string substr = 1;
inline bool SubstringComparator::has_substr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubstringComparator::set_has_substr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubstringComparator::clear_has_substr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubstringComparator::clear_substr() {
  if (substr_ != &::google::protobuf::internal::kEmptyString) {
    substr_->clear();
  }
  clear_has_substr();
}
inline const ::std::string& SubstringComparator::substr() const {
  return *substr_;
}
inline void SubstringComparator::set_substr(const ::std::string& value) {
  set_has_substr();
  if (substr_ == &::google::protobuf::internal::kEmptyString) {
    substr_ = new ::std::string;
  }
  substr_->assign(value);
}
inline void SubstringComparator::set_substr(const char* value) {
  set_has_substr();
  if (substr_ == &::google::protobuf::internal::kEmptyString) {
    substr_ = new ::std::string;
  }
  substr_->assign(value);
}
inline void SubstringComparator::set_substr(const char* value, size_t size) {
  set_has_substr();
  if (substr_ == &::google::protobuf::internal::kEmptyString) {
    substr_ = new ::std::string;
  }
  substr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubstringComparator::mutable_substr() {
  set_has_substr();
  if (substr_ == &::google::protobuf::internal::kEmptyString) {
    substr_ = new ::std::string;
  }
  return substr_;
}
inline ::std::string* SubstringComparator::release_substr() {
  clear_has_substr();
  if (substr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = substr_;
    substr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubstringComparator::set_allocated_substr(::std::string* substr) {
  if (substr_ != &::google::protobuf::internal::kEmptyString) {
    delete substr_;
  }
  if (substr) {
    set_has_substr();
    substr_ = substr;
  } else {
    clear_has_substr();
    substr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::BitComparator_BitwiseOp>() {
  return ::hbase::pb::BitComparator_BitwiseOp_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Comparator_2eproto__INCLUDED
