// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SecureBulkLoad.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SecureBulkLoad.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* SecureBulkLoadHFilesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecureBulkLoadHFilesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecureBulkLoadHFilesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecureBulkLoadHFilesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelegationToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelegationToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareBulkLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareBulkLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareBulkLoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareBulkLoadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupBulkLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupBulkLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupBulkLoadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupBulkLoadResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SecureBulkLoad_2eproto() {
  protobuf_AddDesc_SecureBulkLoad_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SecureBulkLoad.proto");
  GOOGLE_CHECK(file != NULL);
  SecureBulkLoadHFilesRequest_descriptor_ = file->message_type(0);
  static const int SecureBulkLoadHFilesRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesRequest, family_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesRequest, assign_seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesRequest, fs_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesRequest, bulk_token_),
  };
  SecureBulkLoadHFilesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecureBulkLoadHFilesRequest_descriptor_,
      SecureBulkLoadHFilesRequest::default_instance_,
      SecureBulkLoadHFilesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecureBulkLoadHFilesRequest));
  SecureBulkLoadHFilesResponse_descriptor_ = file->message_type(1);
  static const int SecureBulkLoadHFilesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesResponse, loaded_),
  };
  SecureBulkLoadHFilesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecureBulkLoadHFilesResponse_descriptor_,
      SecureBulkLoadHFilesResponse::default_instance_,
      SecureBulkLoadHFilesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecureBulkLoadHFilesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecureBulkLoadHFilesResponse));
  DelegationToken_descriptor_ = file->message_type(2);
  static const int DelegationToken_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelegationToken, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelegationToken, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelegationToken, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelegationToken, service_),
  };
  DelegationToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelegationToken_descriptor_,
      DelegationToken::default_instance_,
      DelegationToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelegationToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelegationToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelegationToken));
  PrepareBulkLoadRequest_descriptor_ = file->message_type(3);
  static const int PrepareBulkLoadRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBulkLoadRequest, table_name_),
  };
  PrepareBulkLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareBulkLoadRequest_descriptor_,
      PrepareBulkLoadRequest::default_instance_,
      PrepareBulkLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBulkLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBulkLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareBulkLoadRequest));
  PrepareBulkLoadResponse_descriptor_ = file->message_type(4);
  static const int PrepareBulkLoadResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBulkLoadResponse, bulk_token_),
  };
  PrepareBulkLoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareBulkLoadResponse_descriptor_,
      PrepareBulkLoadResponse::default_instance_,
      PrepareBulkLoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBulkLoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareBulkLoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareBulkLoadResponse));
  CleanupBulkLoadRequest_descriptor_ = file->message_type(5);
  static const int CleanupBulkLoadRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupBulkLoadRequest, bulk_token_),
  };
  CleanupBulkLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CleanupBulkLoadRequest_descriptor_,
      CleanupBulkLoadRequest::default_instance_,
      CleanupBulkLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupBulkLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupBulkLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CleanupBulkLoadRequest));
  CleanupBulkLoadResponse_descriptor_ = file->message_type(6);
  static const int CleanupBulkLoadResponse_offsets_[1] = {
  };
  CleanupBulkLoadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CleanupBulkLoadResponse_descriptor_,
      CleanupBulkLoadResponse::default_instance_,
      CleanupBulkLoadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupBulkLoadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupBulkLoadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CleanupBulkLoadResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SecureBulkLoad_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecureBulkLoadHFilesRequest_descriptor_, &SecureBulkLoadHFilesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecureBulkLoadHFilesResponse_descriptor_, &SecureBulkLoadHFilesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelegationToken_descriptor_, &DelegationToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareBulkLoadRequest_descriptor_, &PrepareBulkLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareBulkLoadResponse_descriptor_, &PrepareBulkLoadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CleanupBulkLoadRequest_descriptor_, &CleanupBulkLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CleanupBulkLoadResponse_descriptor_, &CleanupBulkLoadResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SecureBulkLoad_2eproto() {
  delete SecureBulkLoadHFilesRequest::default_instance_;
  delete SecureBulkLoadHFilesRequest_reflection_;
  delete SecureBulkLoadHFilesResponse::default_instance_;
  delete SecureBulkLoadHFilesResponse_reflection_;
  delete DelegationToken::default_instance_;
  delete DelegationToken_reflection_;
  delete PrepareBulkLoadRequest::default_instance_;
  delete PrepareBulkLoadRequest_reflection_;
  delete PrepareBulkLoadResponse::default_instance_;
  delete PrepareBulkLoadResponse_reflection_;
  delete CleanupBulkLoadRequest::default_instance_;
  delete CleanupBulkLoadRequest_reflection_;
  delete CleanupBulkLoadResponse::default_instance_;
  delete CleanupBulkLoadResponse_reflection_;
}

void protobuf_AddDesc_SecureBulkLoad_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SecureBulkLoad.proto\022\010hbase.pb\032\013HBase."
    "proto\032\014Client.proto\"\266\001\n\033SecureBulkLoadHF"
    "ilesRequest\022>\n\013family_path\030\001 \003(\0132).hbase"
    ".pb.BulkLoadHFileRequest.FamilyPath\022\026\n\016a"
    "ssign_seq_num\030\002 \001(\010\022+\n\010fs_token\030\003 \002(\0132\031."
    "hbase.pb.DelegationToken\022\022\n\nbulk_token\030\004"
    " \002(\t\".\n\034SecureBulkLoadHFilesResponse\022\016\n\006"
    "loaded\030\001 \002(\010\"V\n\017DelegationToken\022\022\n\nident"
    "ifier\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\022\014\n\004kind\030\003 "
    "\001(\t\022\017\n\007service\030\004 \001(\t\"A\n\026PrepareBulkLoadR"
    "equest\022\'\n\ntable_name\030\001 \002(\0132\023.hbase.pb.Ta"
    "bleName\"-\n\027PrepareBulkLoadResponse\022\022\n\nbu"
    "lk_token\030\001 \002(\t\",\n\026CleanupBulkLoadRequest"
    "\022\022\n\nbulk_token\030\001 \002(\t\"\031\n\027CleanupBulkLoadR"
    "esponse2\256\002\n\025SecureBulkLoadService\022V\n\017Pre"
    "pareBulkLoad\022 .hbase.pb.PrepareBulkLoadR"
    "equest\032!.hbase.pb.PrepareBulkLoadRespons"
    "e\022e\n\024SecureBulkLoadHFiles\022%.hbase.pb.Sec"
    "ureBulkLoadHFilesRequest\032&.hbase.pb.Secu"
    "reBulkLoadHFilesResponse\022V\n\017CleanupBulkL"
    "oad\022 .hbase.pb.CleanupBulkLoadRequest\032!."
    "hbase.pb.CleanupBulkLoadResponseBJ\n*org."
    "apache.hadoop.hbase.protobuf.generatedB\024"
    "SecureBulkLoadProtosH\001\210\001\001\240\001\001", 948);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SecureBulkLoad.proto", &protobuf_RegisterTypes);
  SecureBulkLoadHFilesRequest::default_instance_ = new SecureBulkLoadHFilesRequest();
  SecureBulkLoadHFilesResponse::default_instance_ = new SecureBulkLoadHFilesResponse();
  DelegationToken::default_instance_ = new DelegationToken();
  PrepareBulkLoadRequest::default_instance_ = new PrepareBulkLoadRequest();
  PrepareBulkLoadResponse::default_instance_ = new PrepareBulkLoadResponse();
  CleanupBulkLoadRequest::default_instance_ = new CleanupBulkLoadRequest();
  CleanupBulkLoadResponse::default_instance_ = new CleanupBulkLoadResponse();
  SecureBulkLoadHFilesRequest::default_instance_->InitAsDefaultInstance();
  SecureBulkLoadHFilesResponse::default_instance_->InitAsDefaultInstance();
  DelegationToken::default_instance_->InitAsDefaultInstance();
  PrepareBulkLoadRequest::default_instance_->InitAsDefaultInstance();
  PrepareBulkLoadResponse::default_instance_->InitAsDefaultInstance();
  CleanupBulkLoadRequest::default_instance_->InitAsDefaultInstance();
  CleanupBulkLoadResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SecureBulkLoad_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SecureBulkLoad_2eproto {
  StaticDescriptorInitializer_SecureBulkLoad_2eproto() {
    protobuf_AddDesc_SecureBulkLoad_2eproto();
  }
} static_descriptor_initializer_SecureBulkLoad_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SecureBulkLoadHFilesRequest::kFamilyPathFieldNumber;
const int SecureBulkLoadHFilesRequest::kAssignSeqNumFieldNumber;
const int SecureBulkLoadHFilesRequest::kFsTokenFieldNumber;
const int SecureBulkLoadHFilesRequest::kBulkTokenFieldNumber;
#endif  // !_MSC_VER

SecureBulkLoadHFilesRequest::SecureBulkLoadHFilesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecureBulkLoadHFilesRequest::InitAsDefaultInstance() {
  fs_token_ = const_cast< ::hbase::pb::DelegationToken*>(&::hbase::pb::DelegationToken::default_instance());
}

SecureBulkLoadHFilesRequest::SecureBulkLoadHFilesRequest(const SecureBulkLoadHFilesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecureBulkLoadHFilesRequest::SharedCtor() {
  _cached_size_ = 0;
  assign_seq_num_ = false;
  fs_token_ = NULL;
  bulk_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecureBulkLoadHFilesRequest::~SecureBulkLoadHFilesRequest() {
  SharedDtor();
}

void SecureBulkLoadHFilesRequest::SharedDtor() {
  if (bulk_token_ != &::google::protobuf::internal::kEmptyString) {
    delete bulk_token_;
  }
  if (this != default_instance_) {
    delete fs_token_;
  }
}

void SecureBulkLoadHFilesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecureBulkLoadHFilesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecureBulkLoadHFilesRequest_descriptor_;
}

const SecureBulkLoadHFilesRequest& SecureBulkLoadHFilesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

SecureBulkLoadHFilesRequest* SecureBulkLoadHFilesRequest::default_instance_ = NULL;

SecureBulkLoadHFilesRequest* SecureBulkLoadHFilesRequest::New() const {
  return new SecureBulkLoadHFilesRequest;
}

void SecureBulkLoadHFilesRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    assign_seq_num_ = false;
    if (has_fs_token()) {
      if (fs_token_ != NULL) fs_token_->::hbase::pb::DelegationToken::Clear();
    }
    if (has_bulk_token()) {
      if (bulk_token_ != &::google::protobuf::internal::kEmptyString) {
        bulk_token_->clear();
      }
    }
  }
  family_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecureBulkLoadHFilesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_family_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_family_path;
        if (input->ExpectTag(16)) goto parse_assign_seq_num;
        break;
      }

      // optional bool assign_seq_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assign_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assign_seq_num_)));
          set_has_assign_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fs_token;
        break;
      }

      // required .hbase.pb.DelegationToken fs_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fs_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fs_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bulk_token;
        break;
      }

      // required string bulk_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulk_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulk_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulk_token().data(), this->bulk_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecureBulkLoadHFilesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 1;
  for (int i = 0; i < this->family_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->family_path(i), output);
  }

  // optional bool assign_seq_num = 2;
  if (has_assign_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->assign_seq_num(), output);
  }

  // required .hbase.pb.DelegationToken fs_token = 3;
  if (has_fs_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fs_token(), output);
  }

  // required string bulk_token = 4;
  if (has_bulk_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulk_token().data(), this->bulk_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bulk_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecureBulkLoadHFilesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 1;
  for (int i = 0; i < this->family_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->family_path(i), target);
  }

  // optional bool assign_seq_num = 2;
  if (has_assign_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->assign_seq_num(), target);
  }

  // required .hbase.pb.DelegationToken fs_token = 3;
  if (has_fs_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fs_token(), target);
  }

  // required string bulk_token = 4;
  if (has_bulk_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulk_token().data(), this->bulk_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bulk_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecureBulkLoadHFilesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool assign_seq_num = 2;
    if (has_assign_seq_num()) {
      total_size += 1 + 1;
    }

    // required .hbase.pb.DelegationToken fs_token = 3;
    if (has_fs_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fs_token());
    }

    // required string bulk_token = 4;
    if (has_bulk_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulk_token());
    }

  }
  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 1;
  total_size += 1 * this->family_path_size();
  for (int i = 0; i < this->family_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->family_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecureBulkLoadHFilesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecureBulkLoadHFilesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecureBulkLoadHFilesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecureBulkLoadHFilesRequest::MergeFrom(const SecureBulkLoadHFilesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  family_path_.MergeFrom(from.family_path_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_assign_seq_num()) {
      set_assign_seq_num(from.assign_seq_num());
    }
    if (from.has_fs_token()) {
      mutable_fs_token()->::hbase::pb::DelegationToken::MergeFrom(from.fs_token());
    }
    if (from.has_bulk_token()) {
      set_bulk_token(from.bulk_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecureBulkLoadHFilesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecureBulkLoadHFilesRequest::CopyFrom(const SecureBulkLoadHFilesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureBulkLoadHFilesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  for (int i = 0; i < family_path_size(); i++) {
    if (!this->family_path(i).IsInitialized()) return false;
  }
  return true;
}

void SecureBulkLoadHFilesRequest::Swap(SecureBulkLoadHFilesRequest* other) {
  if (other != this) {
    family_path_.Swap(&other->family_path_);
    std::swap(assign_seq_num_, other->assign_seq_num_);
    std::swap(fs_token_, other->fs_token_);
    std::swap(bulk_token_, other->bulk_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecureBulkLoadHFilesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecureBulkLoadHFilesRequest_descriptor_;
  metadata.reflection = SecureBulkLoadHFilesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecureBulkLoadHFilesResponse::kLoadedFieldNumber;
#endif  // !_MSC_VER

SecureBulkLoadHFilesResponse::SecureBulkLoadHFilesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecureBulkLoadHFilesResponse::InitAsDefaultInstance() {
}

SecureBulkLoadHFilesResponse::SecureBulkLoadHFilesResponse(const SecureBulkLoadHFilesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecureBulkLoadHFilesResponse::SharedCtor() {
  _cached_size_ = 0;
  loaded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecureBulkLoadHFilesResponse::~SecureBulkLoadHFilesResponse() {
  SharedDtor();
}

void SecureBulkLoadHFilesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecureBulkLoadHFilesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecureBulkLoadHFilesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecureBulkLoadHFilesResponse_descriptor_;
}

const SecureBulkLoadHFilesResponse& SecureBulkLoadHFilesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

SecureBulkLoadHFilesResponse* SecureBulkLoadHFilesResponse::default_instance_ = NULL;

SecureBulkLoadHFilesResponse* SecureBulkLoadHFilesResponse::New() const {
  return new SecureBulkLoadHFilesResponse;
}

void SecureBulkLoadHFilesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loaded_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecureBulkLoadHFilesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool loaded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loaded_)));
          set_has_loaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecureBulkLoadHFilesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool loaded = 1;
  if (has_loaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->loaded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecureBulkLoadHFilesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool loaded = 1;
  if (has_loaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->loaded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecureBulkLoadHFilesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool loaded = 1;
    if (has_loaded()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecureBulkLoadHFilesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecureBulkLoadHFilesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecureBulkLoadHFilesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecureBulkLoadHFilesResponse::MergeFrom(const SecureBulkLoadHFilesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loaded()) {
      set_loaded(from.loaded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecureBulkLoadHFilesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecureBulkLoadHFilesResponse::CopyFrom(const SecureBulkLoadHFilesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureBulkLoadHFilesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SecureBulkLoadHFilesResponse::Swap(SecureBulkLoadHFilesResponse* other) {
  if (other != this) {
    std::swap(loaded_, other->loaded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecureBulkLoadHFilesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecureBulkLoadHFilesResponse_descriptor_;
  metadata.reflection = SecureBulkLoadHFilesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelegationToken::kIdentifierFieldNumber;
const int DelegationToken::kPasswordFieldNumber;
const int DelegationToken::kKindFieldNumber;
const int DelegationToken::kServiceFieldNumber;
#endif  // !_MSC_VER

DelegationToken::DelegationToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelegationToken::InitAsDefaultInstance() {
}

DelegationToken::DelegationToken(const DelegationToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelegationToken::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelegationToken::~DelegationToken() {
  SharedDtor();
}

void DelegationToken::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (kind_ != &::google::protobuf::internal::kEmptyString) {
    delete kind_;
  }
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (this != default_instance_) {
  }
}

void DelegationToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelegationToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelegationToken_descriptor_;
}

const DelegationToken& DelegationToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

DelegationToken* DelegationToken::default_instance_ = NULL;

DelegationToken* DelegationToken::New() const {
  return new DelegationToken;
}

void DelegationToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_kind()) {
      if (kind_ != &::google::protobuf::internal::kEmptyString) {
        kind_->clear();
      }
    }
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelegationToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kind;
        break;
      }

      // optional string kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kind().data(), this->kind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_service;
        break;
      }

      // optional string service = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelegationToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->identifier(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  // optional string kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kind().data(), this->kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->kind(), output);
  }

  // optional string service = 4;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->service(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelegationToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes identifier = 1;
  if (has_identifier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identifier(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional string kind = 3;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kind().data(), this->kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kind(), target);
  }

  // optional string service = 4;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelegationToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identifier());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional string kind = 3;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kind());
    }

    // optional string service = 4;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelegationToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelegationToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelegationToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelegationToken::MergeFrom(const DelegationToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelegationToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegationToken::CopyFrom(const DelegationToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationToken::IsInitialized() const {

  return true;
}

void DelegationToken::Swap(DelegationToken* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(password_, other->password_);
    std::swap(kind_, other->kind_);
    std::swap(service_, other->service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelegationToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelegationToken_descriptor_;
  metadata.reflection = DelegationToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareBulkLoadRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

PrepareBulkLoadRequest::PrepareBulkLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrepareBulkLoadRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

PrepareBulkLoadRequest::PrepareBulkLoadRequest(const PrepareBulkLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrepareBulkLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareBulkLoadRequest::~PrepareBulkLoadRequest() {
  SharedDtor();
}

void PrepareBulkLoadRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void PrepareBulkLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareBulkLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareBulkLoadRequest_descriptor_;
}

const PrepareBulkLoadRequest& PrepareBulkLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

PrepareBulkLoadRequest* PrepareBulkLoadRequest::default_instance_ = NULL;

PrepareBulkLoadRequest* PrepareBulkLoadRequest::New() const {
  return new PrepareBulkLoadRequest;
}

void PrepareBulkLoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareBulkLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrepareBulkLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrepareBulkLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrepareBulkLoadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareBulkLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareBulkLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareBulkLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareBulkLoadRequest::MergeFrom(const PrepareBulkLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareBulkLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareBulkLoadRequest::CopyFrom(const PrepareBulkLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareBulkLoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void PrepareBulkLoadRequest::Swap(PrepareBulkLoadRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareBulkLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareBulkLoadRequest_descriptor_;
  metadata.reflection = PrepareBulkLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareBulkLoadResponse::kBulkTokenFieldNumber;
#endif  // !_MSC_VER

PrepareBulkLoadResponse::PrepareBulkLoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrepareBulkLoadResponse::InitAsDefaultInstance() {
}

PrepareBulkLoadResponse::PrepareBulkLoadResponse(const PrepareBulkLoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrepareBulkLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  bulk_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareBulkLoadResponse::~PrepareBulkLoadResponse() {
  SharedDtor();
}

void PrepareBulkLoadResponse::SharedDtor() {
  if (bulk_token_ != &::google::protobuf::internal::kEmptyString) {
    delete bulk_token_;
  }
  if (this != default_instance_) {
  }
}

void PrepareBulkLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareBulkLoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareBulkLoadResponse_descriptor_;
}

const PrepareBulkLoadResponse& PrepareBulkLoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

PrepareBulkLoadResponse* PrepareBulkLoadResponse::default_instance_ = NULL;

PrepareBulkLoadResponse* PrepareBulkLoadResponse::New() const {
  return new PrepareBulkLoadResponse;
}

void PrepareBulkLoadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bulk_token()) {
      if (bulk_token_ != &::google::protobuf::internal::kEmptyString) {
        bulk_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareBulkLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bulk_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulk_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulk_token().data(), this->bulk_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrepareBulkLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string bulk_token = 1;
  if (has_bulk_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulk_token().data(), this->bulk_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bulk_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrepareBulkLoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string bulk_token = 1;
  if (has_bulk_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulk_token().data(), this->bulk_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bulk_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrepareBulkLoadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bulk_token = 1;
    if (has_bulk_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulk_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareBulkLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareBulkLoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareBulkLoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareBulkLoadResponse::MergeFrom(const PrepareBulkLoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulk_token()) {
      set_bulk_token(from.bulk_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareBulkLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareBulkLoadResponse::CopyFrom(const PrepareBulkLoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareBulkLoadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrepareBulkLoadResponse::Swap(PrepareBulkLoadResponse* other) {
  if (other != this) {
    std::swap(bulk_token_, other->bulk_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareBulkLoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareBulkLoadResponse_descriptor_;
  metadata.reflection = PrepareBulkLoadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CleanupBulkLoadRequest::kBulkTokenFieldNumber;
#endif  // !_MSC_VER

CleanupBulkLoadRequest::CleanupBulkLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CleanupBulkLoadRequest::InitAsDefaultInstance() {
}

CleanupBulkLoadRequest::CleanupBulkLoadRequest(const CleanupBulkLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CleanupBulkLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  bulk_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanupBulkLoadRequest::~CleanupBulkLoadRequest() {
  SharedDtor();
}

void CleanupBulkLoadRequest::SharedDtor() {
  if (bulk_token_ != &::google::protobuf::internal::kEmptyString) {
    delete bulk_token_;
  }
  if (this != default_instance_) {
  }
}

void CleanupBulkLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupBulkLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupBulkLoadRequest_descriptor_;
}

const CleanupBulkLoadRequest& CleanupBulkLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

CleanupBulkLoadRequest* CleanupBulkLoadRequest::default_instance_ = NULL;

CleanupBulkLoadRequest* CleanupBulkLoadRequest::New() const {
  return new CleanupBulkLoadRequest;
}

void CleanupBulkLoadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bulk_token()) {
      if (bulk_token_ != &::google::protobuf::internal::kEmptyString) {
        bulk_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CleanupBulkLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bulk_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulk_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulk_token().data(), this->bulk_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CleanupBulkLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string bulk_token = 1;
  if (has_bulk_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulk_token().data(), this->bulk_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bulk_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CleanupBulkLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string bulk_token = 1;
  if (has_bulk_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulk_token().data(), this->bulk_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bulk_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CleanupBulkLoadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bulk_token = 1;
    if (has_bulk_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulk_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupBulkLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CleanupBulkLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CleanupBulkLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CleanupBulkLoadRequest::MergeFrom(const CleanupBulkLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulk_token()) {
      set_bulk_token(from.bulk_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CleanupBulkLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupBulkLoadRequest::CopyFrom(const CleanupBulkLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupBulkLoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CleanupBulkLoadRequest::Swap(CleanupBulkLoadRequest* other) {
  if (other != this) {
    std::swap(bulk_token_, other->bulk_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CleanupBulkLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupBulkLoadRequest_descriptor_;
  metadata.reflection = CleanupBulkLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CleanupBulkLoadResponse::CleanupBulkLoadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CleanupBulkLoadResponse::InitAsDefaultInstance() {
}

CleanupBulkLoadResponse::CleanupBulkLoadResponse(const CleanupBulkLoadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CleanupBulkLoadResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanupBulkLoadResponse::~CleanupBulkLoadResponse() {
  SharedDtor();
}

void CleanupBulkLoadResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CleanupBulkLoadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupBulkLoadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupBulkLoadResponse_descriptor_;
}

const CleanupBulkLoadResponse& CleanupBulkLoadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SecureBulkLoad_2eproto();
  return *default_instance_;
}

CleanupBulkLoadResponse* CleanupBulkLoadResponse::default_instance_ = NULL;

CleanupBulkLoadResponse* CleanupBulkLoadResponse::New() const {
  return new CleanupBulkLoadResponse;
}

void CleanupBulkLoadResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CleanupBulkLoadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CleanupBulkLoadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CleanupBulkLoadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CleanupBulkLoadResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupBulkLoadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CleanupBulkLoadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CleanupBulkLoadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CleanupBulkLoadResponse::MergeFrom(const CleanupBulkLoadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CleanupBulkLoadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupBulkLoadResponse::CopyFrom(const CleanupBulkLoadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupBulkLoadResponse::IsInitialized() const {

  return true;
}

void CleanupBulkLoadResponse::Swap(CleanupBulkLoadResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CleanupBulkLoadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupBulkLoadResponse_descriptor_;
  metadata.reflection = CleanupBulkLoadResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
