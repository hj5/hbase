// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterStatus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClusterStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* RegionState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegionState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RegionInTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionInTransition_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreSequenceId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreSequenceId_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionStoreSequenceIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionStoreSequenceIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicationLoadSink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicationLoadSink_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicationLoadSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicationLoadSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClusterStatus_2eproto() {
  protobuf_AddDesc_ClusterStatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClusterStatus.proto");
  GOOGLE_CHECK(file != NULL);
  RegionState_descriptor_ = file->message_type(0);
  static const int RegionState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionState, region_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionState, stamp_),
  };
  RegionState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionState_descriptor_,
      RegionState::default_instance_,
      RegionState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionState));
  RegionState_State_descriptor_ = RegionState_descriptor_->enum_type(0);
  RegionInTransition_descriptor_ = file->message_type(1);
  static const int RegionInTransition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInTransition, spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInTransition, region_state_),
  };
  RegionInTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionInTransition_descriptor_,
      RegionInTransition::default_instance_,
      RegionInTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionInTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionInTransition));
  StoreSequenceId_descriptor_ = file->message_type(2);
  static const int StoreSequenceId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreSequenceId, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreSequenceId, sequence_id_),
  };
  StoreSequenceId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreSequenceId_descriptor_,
      StoreSequenceId::default_instance_,
      StoreSequenceId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreSequenceId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreSequenceId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreSequenceId));
  RegionStoreSequenceIds_descriptor_ = file->message_type(3);
  static const int RegionStoreSequenceIds_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStoreSequenceIds, last_flushed_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStoreSequenceIds, store_sequence_id_),
  };
  RegionStoreSequenceIds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionStoreSequenceIds_descriptor_,
      RegionStoreSequenceIds::default_instance_,
      RegionStoreSequenceIds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStoreSequenceIds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStoreSequenceIds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionStoreSequenceIds));
  RegionLoad_descriptor_ = file->message_type(4);
  static const int RegionLoad_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, region_specifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, storefiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, store_uncompressed_size_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, storefile_size_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, memstore_size_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, storefile_index_size_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, read_requests_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, write_requests_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, total_compacting_kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, current_compacted_kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, root_index_size_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, total_static_index_size_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, total_static_bloom_size_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, complete_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, data_locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, last_major_compaction_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, store_complete_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, filtered_read_requests_count_),
  };
  RegionLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionLoad_descriptor_,
      RegionLoad::default_instance_,
      RegionLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionLoad));
  ReplicationLoadSink_descriptor_ = file->message_type(5);
  static const int ReplicationLoadSink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSink, ageoflastappliedop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSink, timestampsoflastappliedop_),
  };
  ReplicationLoadSink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplicationLoadSink_descriptor_,
      ReplicationLoadSink::default_instance_,
      ReplicationLoadSink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplicationLoadSink));
  ReplicationLoadSource_descriptor_ = file->message_type(6);
  static const int ReplicationLoadSource_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, peerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, ageoflastshippedop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, sizeoflogqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, timestampoflastshippedop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, replicationlag_),
  };
  ReplicationLoadSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplicationLoadSource_descriptor_,
      ReplicationLoadSource::default_instance_,
      ReplicationLoadSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicationLoadSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplicationLoadSource));
  ServerLoad_descriptor_ = file->message_type(7);
  static const int ServerLoad_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, number_of_requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, total_number_of_requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, used_heap_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, max_heap_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, region_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, coprocessors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, report_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, report_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, info_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, replloadsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, replloadsink_),
  };
  ServerLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerLoad_descriptor_,
      ServerLoad::default_instance_,
      ServerLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerLoad));
  LiveServerInfo_descriptor_ = file->message_type(8);
  static const int LiveServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveServerInfo, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveServerInfo, server_load_),
  };
  LiveServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LiveServerInfo_descriptor_,
      LiveServerInfo::default_instance_,
      LiveServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LiveServerInfo));
  ClusterStatus_descriptor_ = file->message_type(9);
  static const int ClusterStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, hbase_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, live_servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, dead_servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, regions_in_transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, master_coprocessors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, backup_masters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, balancer_on_),
  };
  ClusterStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterStatus_descriptor_,
      ClusterStatus::default_instance_,
      ClusterStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterStatus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClusterStatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionState_descriptor_, &RegionState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionInTransition_descriptor_, &RegionInTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreSequenceId_descriptor_, &StoreSequenceId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionStoreSequenceIds_descriptor_, &RegionStoreSequenceIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionLoad_descriptor_, &RegionLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplicationLoadSink_descriptor_, &ReplicationLoadSink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplicationLoadSource_descriptor_, &ReplicationLoadSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerLoad_descriptor_, &ServerLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LiveServerInfo_descriptor_, &LiveServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterStatus_descriptor_, &ClusterStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClusterStatus_2eproto() {
  delete RegionState::default_instance_;
  delete RegionState_reflection_;
  delete RegionInTransition::default_instance_;
  delete RegionInTransition_reflection_;
  delete StoreSequenceId::default_instance_;
  delete StoreSequenceId_reflection_;
  delete RegionStoreSequenceIds::default_instance_;
  delete RegionStoreSequenceIds_reflection_;
  delete RegionLoad::default_instance_;
  delete RegionLoad_reflection_;
  delete ReplicationLoadSink::default_instance_;
  delete ReplicationLoadSink_reflection_;
  delete ReplicationLoadSource::default_instance_;
  delete ReplicationLoadSource_reflection_;
  delete ServerLoad::default_instance_;
  delete ServerLoad_reflection_;
  delete LiveServerInfo::default_instance_;
  delete LiveServerInfo_reflection_;
  delete ClusterStatus::default_instance_;
  delete ClusterStatus_reflection_;
}

void protobuf_AddDesc_ClusterStatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_ClusterId_2eproto();
  ::hbase::pb::protobuf_AddDesc_FS_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ClusterStatus.proto\022\010hbase.pb\032\013HBase.p"
    "roto\032\017ClusterId.proto\032\010FS.proto\"\331\002\n\013Regi"
    "onState\022)\n\013region_info\030\001 \002(\0132\024.hbase.pb."
    "RegionInfo\022*\n\005state\030\002 \002(\0162\033.hbase.pb.Reg"
    "ionState.State\022\r\n\005stamp\030\003 \001(\004\"\343\001\n\005State\022"
    "\013\n\007OFFLINE\020\000\022\020\n\014PENDING_OPEN\020\001\022\013\n\007OPENIN"
    "G\020\002\022\010\n\004OPEN\020\003\022\021\n\rPENDING_CLOSE\020\004\022\013\n\007CLOS"
    "ING\020\005\022\n\n\006CLOSED\020\006\022\r\n\tSPLITTING\020\007\022\t\n\005SPLI"
    "T\020\010\022\017\n\013FAILED_OPEN\020\t\022\020\n\014FAILED_CLOSE\020\n\022\013"
    "\n\007MERGING\020\013\022\n\n\006MERGED\020\014\022\021\n\rSPLITTING_NEW"
    "\020\r\022\017\n\013MERGING_NEW\020\016\"j\n\022RegionInTransitio"
    "n\022\'\n\004spec\030\001 \002(\0132\031.hbase.pb.RegionSpecifi"
    "er\022+\n\014region_state\030\002 \002(\0132\025.hbase.pb.Regi"
    "onState\";\n\017StoreSequenceId\022\023\n\013family_nam"
    "e\030\001 \002(\014\022\023\n\013sequence_id\030\002 \002(\004\"p\n\026RegionSt"
    "oreSequenceIds\022 \n\030last_flushed_sequence_"
    "id\030\001 \002(\004\0224\n\021store_sequence_id\030\002 \003(\0132\031.hb"
    "ase.pb.StoreSequenceId\"\372\004\n\nRegionLoad\0223\n"
    "\020region_specifier\030\001 \002(\0132\031.hbase.pb.Regio"
    "nSpecifier\022\016\n\006stores\030\002 \001(\r\022\022\n\nstorefiles"
    "\030\003 \001(\r\022\"\n\032store_uncompressed_size_MB\030\004 \001"
    "(\r\022\031\n\021storefile_size_MB\030\005 \001(\r\022\030\n\020memstor"
    "e_size_MB\030\006 \001(\r\022\037\n\027storefile_index_size_"
    "MB\030\007 \001(\r\022\033\n\023read_requests_count\030\010 \001(\004\022\034\n"
    "\024write_requests_count\030\t \001(\004\022\034\n\024total_com"
    "pacting_KVs\030\n \001(\004\022\035\n\025current_compacted_K"
    "Vs\030\013 \001(\004\022\032\n\022root_index_size_KB\030\014 \001(\r\022\"\n\032"
    "total_static_index_size_KB\030\r \001(\r\022\"\n\032tota"
    "l_static_bloom_size_KB\030\016 \001(\r\022\034\n\024complete"
    "_sequence_id\030\017 \001(\004\022\025\n\rdata_locality\030\020 \001("
    "\002\022#\n\030last_major_compaction_ts\030\021 \001(\004:\0010\022="
    "\n\032store_complete_sequence_id\030\022 \003(\0132\031.hba"
    "se.pb.StoreSequenceId\022$\n\034filtered_read_r"
    "equests_count\030\023 \001(\004\"T\n\023ReplicationLoadSi"
    "nk\022\032\n\022ageOfLastAppliedOp\030\001 \002(\004\022!\n\031timeSt"
    "ampsOfLastAppliedOp\030\002 \002(\004\"\225\001\n\025Replicatio"
    "nLoadSource\022\016\n\006peerID\030\001 \002(\t\022\032\n\022ageOfLast"
    "ShippedOp\030\002 \002(\004\022\026\n\016sizeOfLogQueue\030\003 \002(\r\022"
    " \n\030timeStampOfLastShippedOp\030\004 \002(\004\022\026\n\016rep"
    "licationLag\030\005 \002(\004\"\212\003\n\nServerLoad\022\032\n\022numb"
    "er_of_requests\030\001 \001(\004\022 \n\030total_number_of_"
    "requests\030\002 \001(\004\022\024\n\014used_heap_MB\030\003 \001(\r\022\023\n\013"
    "max_heap_MB\030\004 \001(\r\022*\n\014region_loads\030\005 \003(\0132"
    "\024.hbase.pb.RegionLoad\022+\n\014coprocessors\030\006 "
    "\003(\0132\025.hbase.pb.Coprocessor\022\031\n\021report_sta"
    "rt_time\030\007 \001(\004\022\027\n\017report_end_time\030\010 \001(\004\022\030"
    "\n\020info_server_port\030\t \001(\r\0227\n\016replLoadSour"
    "ce\030\n \003(\0132\037.hbase.pb.ReplicationLoadSourc"
    "e\0223\n\014replLoadSink\030\013 \001(\0132\035.hbase.pb.Repli"
    "cationLoadSink\"a\n\016LiveServerInfo\022$\n\006serv"
    "er\030\001 \002(\0132\024.hbase.pb.ServerName\022)\n\013server"
    "_load\030\002 \002(\0132\024.hbase.pb.ServerLoad\"\250\003\n\rCl"
    "usterStatus\0228\n\rhbase_version\030\001 \001(\0132!.hba"
    "se.pb.HBaseVersionFileContent\022.\n\014live_se"
    "rvers\030\002 \003(\0132\030.hbase.pb.LiveServerInfo\022*\n"
    "\014dead_servers\030\003 \003(\0132\024.hbase.pb.ServerNam"
    "e\022;\n\025regions_in_transition\030\004 \003(\0132\034.hbase"
    ".pb.RegionInTransition\022\'\n\ncluster_id\030\005 \001"
    "(\0132\023.hbase.pb.ClusterId\0222\n\023master_coproc"
    "essors\030\006 \003(\0132\025.hbase.pb.Coprocessor\022$\n\006m"
    "aster\030\007 \001(\0132\024.hbase.pb.ServerName\022,\n\016bac"
    "kup_masters\030\010 \003(\0132\024.hbase.pb.ServerName\022"
    "\023\n\013balancer_on\030\t \001(\010BF\n*org.apache.hadoo"
    "p.hbase.protobuf.generatedB\023ClusterStatu"
    "sProtosH\001\240\001\001", 2572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClusterStatus.proto", &protobuf_RegisterTypes);
  RegionState::default_instance_ = new RegionState();
  RegionInTransition::default_instance_ = new RegionInTransition();
  StoreSequenceId::default_instance_ = new StoreSequenceId();
  RegionStoreSequenceIds::default_instance_ = new RegionStoreSequenceIds();
  RegionLoad::default_instance_ = new RegionLoad();
  ReplicationLoadSink::default_instance_ = new ReplicationLoadSink();
  ReplicationLoadSource::default_instance_ = new ReplicationLoadSource();
  ServerLoad::default_instance_ = new ServerLoad();
  LiveServerInfo::default_instance_ = new LiveServerInfo();
  ClusterStatus::default_instance_ = new ClusterStatus();
  RegionState::default_instance_->InitAsDefaultInstance();
  RegionInTransition::default_instance_->InitAsDefaultInstance();
  StoreSequenceId::default_instance_->InitAsDefaultInstance();
  RegionStoreSequenceIds::default_instance_->InitAsDefaultInstance();
  RegionLoad::default_instance_->InitAsDefaultInstance();
  ReplicationLoadSink::default_instance_->InitAsDefaultInstance();
  ReplicationLoadSource::default_instance_->InitAsDefaultInstance();
  ServerLoad::default_instance_->InitAsDefaultInstance();
  LiveServerInfo::default_instance_->InitAsDefaultInstance();
  ClusterStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClusterStatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClusterStatus_2eproto {
  StaticDescriptorInitializer_ClusterStatus_2eproto() {
    protobuf_AddDesc_ClusterStatus_2eproto();
  }
} static_descriptor_initializer_ClusterStatus_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RegionState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionState_State_descriptor_;
}
bool RegionState_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegionState_State RegionState::OFFLINE;
const RegionState_State RegionState::PENDING_OPEN;
const RegionState_State RegionState::OPENING;
const RegionState_State RegionState::OPEN;
const RegionState_State RegionState::PENDING_CLOSE;
const RegionState_State RegionState::CLOSING;
const RegionState_State RegionState::CLOSED;
const RegionState_State RegionState::SPLITTING;
const RegionState_State RegionState::SPLIT;
const RegionState_State RegionState::FAILED_OPEN;
const RegionState_State RegionState::FAILED_CLOSE;
const RegionState_State RegionState::MERGING;
const RegionState_State RegionState::MERGED;
const RegionState_State RegionState::SPLITTING_NEW;
const RegionState_State RegionState::MERGING_NEW;
const RegionState_State RegionState::State_MIN;
const RegionState_State RegionState::State_MAX;
const int RegionState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegionState::kRegionInfoFieldNumber;
const int RegionState::kStateFieldNumber;
const int RegionState::kStampFieldNumber;
#endif  // !_MSC_VER

RegionState::RegionState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionState::InitAsDefaultInstance() {
  region_info_ = const_cast< ::hbase::pb::RegionInfo*>(&::hbase::pb::RegionInfo::default_instance());
}

RegionState::RegionState(const RegionState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionState::SharedCtor() {
  _cached_size_ = 0;
  region_info_ = NULL;
  state_ = 0;
  stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionState::~RegionState() {
  SharedDtor();
}

void RegionState::SharedDtor() {
  if (this != default_instance_) {
    delete region_info_;
  }
}

void RegionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionState_descriptor_;
}

const RegionState& RegionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

RegionState* RegionState::default_instance_ = NULL;

RegionState* RegionState::New() const {
  return new RegionState;
}

void RegionState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region_info()) {
      if (region_info_ != NULL) region_info_->::hbase::pb::RegionInfo::Clear();
    }
    state_ = 0;
    stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .hbase.pb.RegionState.State state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionState_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::RegionState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stamp;
        break;
      }

      // optional uint64 stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionInfo region_info = 1;
  if (has_region_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_info(), output);
  }

  // required .hbase.pb.RegionState.State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 stamp = 3;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionInfo region_info = 1;
  if (has_region_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region_info(), target);
  }

  // required .hbase.pb.RegionState.State state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 stamp = 3;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionInfo region_info = 1;
    if (has_region_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_info());
    }

    // required .hbase.pb.RegionState.State state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint64 stamp = 3;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionState::MergeFrom(const RegionState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_info()) {
      mutable_region_info()->::hbase::pb::RegionInfo::MergeFrom(from.region_info());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionState::CopyFrom(const RegionState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_region_info()) {
    if (!this->region_info().IsInitialized()) return false;
  }
  return true;
}

void RegionState::Swap(RegionState* other) {
  if (other != this) {
    std::swap(region_info_, other->region_info_);
    std::swap(state_, other->state_);
    std::swap(stamp_, other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionState_descriptor_;
  metadata.reflection = RegionState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionInTransition::kSpecFieldNumber;
const int RegionInTransition::kRegionStateFieldNumber;
#endif  // !_MSC_VER

RegionInTransition::RegionInTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionInTransition::InitAsDefaultInstance() {
  spec_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
  region_state_ = const_cast< ::hbase::pb::RegionState*>(&::hbase::pb::RegionState::default_instance());
}

RegionInTransition::RegionInTransition(const RegionInTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionInTransition::SharedCtor() {
  _cached_size_ = 0;
  spec_ = NULL;
  region_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionInTransition::~RegionInTransition() {
  SharedDtor();
}

void RegionInTransition::SharedDtor() {
  if (this != default_instance_) {
    delete spec_;
    delete region_state_;
  }
}

void RegionInTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionInTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionInTransition_descriptor_;
}

const RegionInTransition& RegionInTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

RegionInTransition* RegionInTransition::default_instance_ = NULL;

RegionInTransition* RegionInTransition::New() const {
  return new RegionInTransition;
}

void RegionInTransition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spec()) {
      if (spec_ != NULL) spec_->::hbase::pb::RegionSpecifier::Clear();
    }
    if (has_region_state()) {
      if (region_state_ != NULL) region_state_->::hbase::pb::RegionState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionInTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier spec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_state;
        break;
      }

      // required .hbase.pb.RegionState region_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionInTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier spec = 1;
  if (has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spec(), output);
  }

  // required .hbase.pb.RegionState region_state = 2;
  if (has_region_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionInTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier spec = 1;
  if (has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spec(), target);
  }

  // required .hbase.pb.RegionState region_state = 2;
  if (has_region_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionInTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier spec = 1;
    if (has_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spec());
    }

    // required .hbase.pb.RegionState region_state = 2;
    if (has_region_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionInTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionInTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionInTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionInTransition::MergeFrom(const RegionInTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spec()) {
      mutable_spec()->::hbase::pb::RegionSpecifier::MergeFrom(from.spec());
    }
    if (from.has_region_state()) {
      mutable_region_state()->::hbase::pb::RegionState::MergeFrom(from.region_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionInTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInTransition::CopyFrom(const RegionInTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInTransition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_spec()) {
    if (!this->spec().IsInitialized()) return false;
  }
  if (has_region_state()) {
    if (!this->region_state().IsInitialized()) return false;
  }
  return true;
}

void RegionInTransition::Swap(RegionInTransition* other) {
  if (other != this) {
    std::swap(spec_, other->spec_);
    std::swap(region_state_, other->region_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionInTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionInTransition_descriptor_;
  metadata.reflection = RegionInTransition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreSequenceId::kFamilyNameFieldNumber;
const int StoreSequenceId::kSequenceIdFieldNumber;
#endif  // !_MSC_VER

StoreSequenceId::StoreSequenceId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreSequenceId::InitAsDefaultInstance() {
}

StoreSequenceId::StoreSequenceId(const StoreSequenceId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreSequenceId::SharedCtor() {
  _cached_size_ = 0;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreSequenceId::~StoreSequenceId() {
  SharedDtor();
}

void StoreSequenceId::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void StoreSequenceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreSequenceId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreSequenceId_descriptor_;
}

const StoreSequenceId& StoreSequenceId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

StoreSequenceId* StoreSequenceId::default_instance_ = NULL;

StoreSequenceId* StoreSequenceId::New() const {
  return new StoreSequenceId;
}

void StoreSequenceId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    sequence_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreSequenceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }

      // required uint64 sequence_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreSequenceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family_name(), output);
  }

  // required uint64 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sequence_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreSequenceId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // required uint64 sequence_id = 2;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sequence_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreSequenceId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family_name = 1;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family_name());
    }

    // required uint64 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreSequenceId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreSequenceId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreSequenceId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreSequenceId::MergeFrom(const StoreSequenceId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreSequenceId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreSequenceId::CopyFrom(const StoreSequenceId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreSequenceId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StoreSequenceId::Swap(StoreSequenceId* other) {
  if (other != this) {
    std::swap(family_name_, other->family_name_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreSequenceId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreSequenceId_descriptor_;
  metadata.reflection = StoreSequenceId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionStoreSequenceIds::kLastFlushedSequenceIdFieldNumber;
const int RegionStoreSequenceIds::kStoreSequenceIdFieldNumber;
#endif  // !_MSC_VER

RegionStoreSequenceIds::RegionStoreSequenceIds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionStoreSequenceIds::InitAsDefaultInstance() {
}

RegionStoreSequenceIds::RegionStoreSequenceIds(const RegionStoreSequenceIds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionStoreSequenceIds::SharedCtor() {
  _cached_size_ = 0;
  last_flushed_sequence_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionStoreSequenceIds::~RegionStoreSequenceIds() {
  SharedDtor();
}

void RegionStoreSequenceIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionStoreSequenceIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionStoreSequenceIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionStoreSequenceIds_descriptor_;
}

const RegionStoreSequenceIds& RegionStoreSequenceIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

RegionStoreSequenceIds* RegionStoreSequenceIds::default_instance_ = NULL;

RegionStoreSequenceIds* RegionStoreSequenceIds::New() const {
  return new RegionStoreSequenceIds;
}

void RegionStoreSequenceIds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_flushed_sequence_id_ = GOOGLE_ULONGLONG(0);
  }
  store_sequence_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionStoreSequenceIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 last_flushed_sequence_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_flushed_sequence_id_)));
          set_has_last_flushed_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_sequence_id;
        break;
      }

      // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_sequence_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_sequence_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_sequence_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionStoreSequenceIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 last_flushed_sequence_id = 1;
  if (has_last_flushed_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_flushed_sequence_id(), output);
  }

  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  for (int i = 0; i < this->store_sequence_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store_sequence_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionStoreSequenceIds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 last_flushed_sequence_id = 1;
  if (has_last_flushed_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_flushed_sequence_id(), target);
  }

  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  for (int i = 0; i < this->store_sequence_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store_sequence_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionStoreSequenceIds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 last_flushed_sequence_id = 1;
    if (has_last_flushed_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_flushed_sequence_id());
    }

  }
  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  total_size += 1 * this->store_sequence_id_size();
  for (int i = 0; i < this->store_sequence_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_sequence_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionStoreSequenceIds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionStoreSequenceIds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionStoreSequenceIds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionStoreSequenceIds::MergeFrom(const RegionStoreSequenceIds& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_sequence_id_.MergeFrom(from.store_sequence_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_flushed_sequence_id()) {
      set_last_flushed_sequence_id(from.last_flushed_sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionStoreSequenceIds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionStoreSequenceIds::CopyFrom(const RegionStoreSequenceIds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionStoreSequenceIds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < store_sequence_id_size(); i++) {
    if (!this->store_sequence_id(i).IsInitialized()) return false;
  }
  return true;
}

void RegionStoreSequenceIds::Swap(RegionStoreSequenceIds* other) {
  if (other != this) {
    std::swap(last_flushed_sequence_id_, other->last_flushed_sequence_id_);
    store_sequence_id_.Swap(&other->store_sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionStoreSequenceIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionStoreSequenceIds_descriptor_;
  metadata.reflection = RegionStoreSequenceIds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionLoad::kRegionSpecifierFieldNumber;
const int RegionLoad::kStoresFieldNumber;
const int RegionLoad::kStorefilesFieldNumber;
const int RegionLoad::kStoreUncompressedSizeMBFieldNumber;
const int RegionLoad::kStorefileSizeMBFieldNumber;
const int RegionLoad::kMemstoreSizeMBFieldNumber;
const int RegionLoad::kStorefileIndexSizeMBFieldNumber;
const int RegionLoad::kReadRequestsCountFieldNumber;
const int RegionLoad::kWriteRequestsCountFieldNumber;
const int RegionLoad::kTotalCompactingKVsFieldNumber;
const int RegionLoad::kCurrentCompactedKVsFieldNumber;
const int RegionLoad::kRootIndexSizeKBFieldNumber;
const int RegionLoad::kTotalStaticIndexSizeKBFieldNumber;
const int RegionLoad::kTotalStaticBloomSizeKBFieldNumber;
const int RegionLoad::kCompleteSequenceIdFieldNumber;
const int RegionLoad::kDataLocalityFieldNumber;
const int RegionLoad::kLastMajorCompactionTsFieldNumber;
const int RegionLoad::kStoreCompleteSequenceIdFieldNumber;
const int RegionLoad::kFilteredReadRequestsCountFieldNumber;
#endif  // !_MSC_VER

RegionLoad::RegionLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionLoad::InitAsDefaultInstance() {
  region_specifier_ = const_cast< ::hbase::pb::RegionSpecifier*>(&::hbase::pb::RegionSpecifier::default_instance());
}

RegionLoad::RegionLoad(const RegionLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionLoad::SharedCtor() {
  _cached_size_ = 0;
  region_specifier_ = NULL;
  stores_ = 0u;
  storefiles_ = 0u;
  store_uncompressed_size_mb_ = 0u;
  storefile_size_mb_ = 0u;
  memstore_size_mb_ = 0u;
  storefile_index_size_mb_ = 0u;
  read_requests_count_ = GOOGLE_ULONGLONG(0);
  write_requests_count_ = GOOGLE_ULONGLONG(0);
  total_compacting_kvs_ = GOOGLE_ULONGLONG(0);
  current_compacted_kvs_ = GOOGLE_ULONGLONG(0);
  root_index_size_kb_ = 0u;
  total_static_index_size_kb_ = 0u;
  total_static_bloom_size_kb_ = 0u;
  complete_sequence_id_ = GOOGLE_ULONGLONG(0);
  data_locality_ = 0;
  last_major_compaction_ts_ = GOOGLE_ULONGLONG(0);
  filtered_read_requests_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionLoad::~RegionLoad() {
  SharedDtor();
}

void RegionLoad::SharedDtor() {
  if (this != default_instance_) {
    delete region_specifier_;
  }
}

void RegionLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLoad_descriptor_;
}

const RegionLoad& RegionLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

RegionLoad* RegionLoad::default_instance_ = NULL;

RegionLoad* RegionLoad::New() const {
  return new RegionLoad;
}

void RegionLoad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region_specifier()) {
      if (region_specifier_ != NULL) region_specifier_->::hbase::pb::RegionSpecifier::Clear();
    }
    stores_ = 0u;
    storefiles_ = 0u;
    store_uncompressed_size_mb_ = 0u;
    storefile_size_mb_ = 0u;
    memstore_size_mb_ = 0u;
    storefile_index_size_mb_ = 0u;
    read_requests_count_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    write_requests_count_ = GOOGLE_ULONGLONG(0);
    total_compacting_kvs_ = GOOGLE_ULONGLONG(0);
    current_compacted_kvs_ = GOOGLE_ULONGLONG(0);
    root_index_size_kb_ = 0u;
    total_static_index_size_kb_ = 0u;
    total_static_bloom_size_kb_ = 0u;
    complete_sequence_id_ = GOOGLE_ULONGLONG(0);
    data_locality_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    last_major_compaction_ts_ = GOOGLE_ULONGLONG(0);
    filtered_read_requests_count_ = GOOGLE_ULONGLONG(0);
  }
  store_complete_sequence_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region_specifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_specifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stores;
        break;
      }

      // optional uint32 stores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stores_)));
          set_has_stores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_storefiles;
        break;
      }

      // optional uint32 storefiles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storefiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storefiles_)));
          set_has_storefiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_store_uncompressed_size_MB;
        break;
      }

      // optional uint32 store_uncompressed_size_MB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_uncompressed_size_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_uncompressed_size_mb_)));
          set_has_store_uncompressed_size_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_storefile_size_MB;
        break;
      }

      // optional uint32 storefile_size_MB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storefile_size_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storefile_size_mb_)));
          set_has_storefile_size_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_memstore_size_MB;
        break;
      }

      // optional uint32 memstore_size_MB = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memstore_size_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memstore_size_mb_)));
          set_has_memstore_size_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_storefile_index_size_MB;
        break;
      }

      // optional uint32 storefile_index_size_MB = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storefile_index_size_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storefile_index_size_mb_)));
          set_has_storefile_index_size_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_read_requests_count;
        break;
      }

      // optional uint64 read_requests_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_requests_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_requests_count_)));
          set_has_read_requests_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_write_requests_count;
        break;
      }

      // optional uint64 write_requests_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_requests_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_requests_count_)));
          set_has_write_requests_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_compacting_KVs;
        break;
      }

      // optional uint64 total_compacting_KVs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_compacting_KVs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_compacting_kvs_)));
          set_has_total_compacting_kvs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_current_compacted_KVs;
        break;
      }

      // optional uint64 current_compacted_KVs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_compacted_KVs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_compacted_kvs_)));
          set_has_current_compacted_kvs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_root_index_size_KB;
        break;
      }

      // optional uint32 root_index_size_KB = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_root_index_size_KB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &root_index_size_kb_)));
          set_has_root_index_size_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_static_index_size_KB;
        break;
      }

      // optional uint32 total_static_index_size_KB = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_static_index_size_KB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_static_index_size_kb_)));
          set_has_total_static_index_size_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_total_static_bloom_size_KB;
        break;
      }

      // optional uint32 total_static_bloom_size_KB = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_static_bloom_size_KB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_static_bloom_size_kb_)));
          set_has_total_static_bloom_size_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_complete_sequence_id;
        break;
      }

      // optional uint64 complete_sequence_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &complete_sequence_id_)));
          set_has_complete_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_data_locality;
        break;
      }

      // optional float data_locality = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_locality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_locality_)));
          set_has_data_locality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_last_major_compaction_ts;
        break;
      }

      // optional uint64 last_major_compaction_ts = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_major_compaction_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_major_compaction_ts_)));
          set_has_last_major_compaction_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_store_complete_sequence_id;
        break;
      }

      // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_complete_sequence_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_complete_sequence_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_store_complete_sequence_id;
        if (input->ExpectTag(152)) goto parse_filtered_read_requests_count;
        break;
      }

      // optional uint64 filtered_read_requests_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filtered_read_requests_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filtered_read_requests_count_)));
          set_has_filtered_read_requests_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionSpecifier region_specifier = 1;
  if (has_region_specifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region_specifier(), output);
  }

  // optional uint32 stores = 2;
  if (has_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stores(), output);
  }

  // optional uint32 storefiles = 3;
  if (has_storefiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->storefiles(), output);
  }

  // optional uint32 store_uncompressed_size_MB = 4;
  if (has_store_uncompressed_size_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->store_uncompressed_size_mb(), output);
  }

  // optional uint32 storefile_size_MB = 5;
  if (has_storefile_size_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->storefile_size_mb(), output);
  }

  // optional uint32 memstore_size_MB = 6;
  if (has_memstore_size_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->memstore_size_mb(), output);
  }

  // optional uint32 storefile_index_size_MB = 7;
  if (has_storefile_index_size_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->storefile_index_size_mb(), output);
  }

  // optional uint64 read_requests_count = 8;
  if (has_read_requests_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->read_requests_count(), output);
  }

  // optional uint64 write_requests_count = 9;
  if (has_write_requests_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->write_requests_count(), output);
  }

  // optional uint64 total_compacting_KVs = 10;
  if (has_total_compacting_kvs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_compacting_kvs(), output);
  }

  // optional uint64 current_compacted_KVs = 11;
  if (has_current_compacted_kvs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->current_compacted_kvs(), output);
  }

  // optional uint32 root_index_size_KB = 12;
  if (has_root_index_size_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->root_index_size_kb(), output);
  }

  // optional uint32 total_static_index_size_KB = 13;
  if (has_total_static_index_size_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_static_index_size_kb(), output);
  }

  // optional uint32 total_static_bloom_size_KB = 14;
  if (has_total_static_bloom_size_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_static_bloom_size_kb(), output);
  }

  // optional uint64 complete_sequence_id = 15;
  if (has_complete_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->complete_sequence_id(), output);
  }

  // optional float data_locality = 16;
  if (has_data_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->data_locality(), output);
  }

  // optional uint64 last_major_compaction_ts = 17 [default = 0];
  if (has_last_major_compaction_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->last_major_compaction_ts(), output);
  }

  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  for (int i = 0; i < this->store_complete_sequence_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->store_complete_sequence_id(i), output);
  }

  // optional uint64 filtered_read_requests_count = 19;
  if (has_filtered_read_requests_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->filtered_read_requests_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionSpecifier region_specifier = 1;
  if (has_region_specifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->region_specifier(), target);
  }

  // optional uint32 stores = 2;
  if (has_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stores(), target);
  }

  // optional uint32 storefiles = 3;
  if (has_storefiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->storefiles(), target);
  }

  // optional uint32 store_uncompressed_size_MB = 4;
  if (has_store_uncompressed_size_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->store_uncompressed_size_mb(), target);
  }

  // optional uint32 storefile_size_MB = 5;
  if (has_storefile_size_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->storefile_size_mb(), target);
  }

  // optional uint32 memstore_size_MB = 6;
  if (has_memstore_size_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->memstore_size_mb(), target);
  }

  // optional uint32 storefile_index_size_MB = 7;
  if (has_storefile_index_size_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->storefile_index_size_mb(), target);
  }

  // optional uint64 read_requests_count = 8;
  if (has_read_requests_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->read_requests_count(), target);
  }

  // optional uint64 write_requests_count = 9;
  if (has_write_requests_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->write_requests_count(), target);
  }

  // optional uint64 total_compacting_KVs = 10;
  if (has_total_compacting_kvs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_compacting_kvs(), target);
  }

  // optional uint64 current_compacted_KVs = 11;
  if (has_current_compacted_kvs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->current_compacted_kvs(), target);
  }

  // optional uint32 root_index_size_KB = 12;
  if (has_root_index_size_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->root_index_size_kb(), target);
  }

  // optional uint32 total_static_index_size_KB = 13;
  if (has_total_static_index_size_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_static_index_size_kb(), target);
  }

  // optional uint32 total_static_bloom_size_KB = 14;
  if (has_total_static_bloom_size_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_static_bloom_size_kb(), target);
  }

  // optional uint64 complete_sequence_id = 15;
  if (has_complete_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->complete_sequence_id(), target);
  }

  // optional float data_locality = 16;
  if (has_data_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->data_locality(), target);
  }

  // optional uint64 last_major_compaction_ts = 17 [default = 0];
  if (has_last_major_compaction_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->last_major_compaction_ts(), target);
  }

  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  for (int i = 0; i < this->store_complete_sequence_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->store_complete_sequence_id(i), target);
  }

  // optional uint64 filtered_read_requests_count = 19;
  if (has_filtered_read_requests_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->filtered_read_requests_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionSpecifier region_specifier = 1;
    if (has_region_specifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region_specifier());
    }

    // optional uint32 stores = 2;
    if (has_stores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stores());
    }

    // optional uint32 storefiles = 3;
    if (has_storefiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storefiles());
    }

    // optional uint32 store_uncompressed_size_MB = 4;
    if (has_store_uncompressed_size_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_uncompressed_size_mb());
    }

    // optional uint32 storefile_size_MB = 5;
    if (has_storefile_size_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storefile_size_mb());
    }

    // optional uint32 memstore_size_MB = 6;
    if (has_memstore_size_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memstore_size_mb());
    }

    // optional uint32 storefile_index_size_MB = 7;
    if (has_storefile_index_size_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storefile_index_size_mb());
    }

    // optional uint64 read_requests_count = 8;
    if (has_read_requests_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_requests_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 write_requests_count = 9;
    if (has_write_requests_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_requests_count());
    }

    // optional uint64 total_compacting_KVs = 10;
    if (has_total_compacting_kvs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_compacting_kvs());
    }

    // optional uint64 current_compacted_KVs = 11;
    if (has_current_compacted_kvs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_compacted_kvs());
    }

    // optional uint32 root_index_size_KB = 12;
    if (has_root_index_size_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->root_index_size_kb());
    }

    // optional uint32 total_static_index_size_KB = 13;
    if (has_total_static_index_size_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_static_index_size_kb());
    }

    // optional uint32 total_static_bloom_size_KB = 14;
    if (has_total_static_bloom_size_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_static_bloom_size_kb());
    }

    // optional uint64 complete_sequence_id = 15;
    if (has_complete_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->complete_sequence_id());
    }

    // optional float data_locality = 16;
    if (has_data_locality()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 last_major_compaction_ts = 17 [default = 0];
    if (has_last_major_compaction_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_major_compaction_ts());
    }

    // optional uint64 filtered_read_requests_count = 19;
    if (has_filtered_read_requests_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filtered_read_requests_count());
    }

  }
  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  total_size += 2 * this->store_complete_sequence_id_size();
  for (int i = 0; i < this->store_complete_sequence_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_complete_sequence_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionLoad::MergeFrom(const RegionLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_complete_sequence_id_.MergeFrom(from.store_complete_sequence_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_specifier()) {
      mutable_region_specifier()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_specifier());
    }
    if (from.has_stores()) {
      set_stores(from.stores());
    }
    if (from.has_storefiles()) {
      set_storefiles(from.storefiles());
    }
    if (from.has_store_uncompressed_size_mb()) {
      set_store_uncompressed_size_mb(from.store_uncompressed_size_mb());
    }
    if (from.has_storefile_size_mb()) {
      set_storefile_size_mb(from.storefile_size_mb());
    }
    if (from.has_memstore_size_mb()) {
      set_memstore_size_mb(from.memstore_size_mb());
    }
    if (from.has_storefile_index_size_mb()) {
      set_storefile_index_size_mb(from.storefile_index_size_mb());
    }
    if (from.has_read_requests_count()) {
      set_read_requests_count(from.read_requests_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_write_requests_count()) {
      set_write_requests_count(from.write_requests_count());
    }
    if (from.has_total_compacting_kvs()) {
      set_total_compacting_kvs(from.total_compacting_kvs());
    }
    if (from.has_current_compacted_kvs()) {
      set_current_compacted_kvs(from.current_compacted_kvs());
    }
    if (from.has_root_index_size_kb()) {
      set_root_index_size_kb(from.root_index_size_kb());
    }
    if (from.has_total_static_index_size_kb()) {
      set_total_static_index_size_kb(from.total_static_index_size_kb());
    }
    if (from.has_total_static_bloom_size_kb()) {
      set_total_static_bloom_size_kb(from.total_static_bloom_size_kb());
    }
    if (from.has_complete_sequence_id()) {
      set_complete_sequence_id(from.complete_sequence_id());
    }
    if (from.has_data_locality()) {
      set_data_locality(from.data_locality());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_last_major_compaction_ts()) {
      set_last_major_compaction_ts(from.last_major_compaction_ts());
    }
    if (from.has_filtered_read_requests_count()) {
      set_filtered_read_requests_count(from.filtered_read_requests_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLoad::CopyFrom(const RegionLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_region_specifier()) {
    if (!this->region_specifier().IsInitialized()) return false;
  }
  for (int i = 0; i < store_complete_sequence_id_size(); i++) {
    if (!this->store_complete_sequence_id(i).IsInitialized()) return false;
  }
  return true;
}

void RegionLoad::Swap(RegionLoad* other) {
  if (other != this) {
    std::swap(region_specifier_, other->region_specifier_);
    std::swap(stores_, other->stores_);
    std::swap(storefiles_, other->storefiles_);
    std::swap(store_uncompressed_size_mb_, other->store_uncompressed_size_mb_);
    std::swap(storefile_size_mb_, other->storefile_size_mb_);
    std::swap(memstore_size_mb_, other->memstore_size_mb_);
    std::swap(storefile_index_size_mb_, other->storefile_index_size_mb_);
    std::swap(read_requests_count_, other->read_requests_count_);
    std::swap(write_requests_count_, other->write_requests_count_);
    std::swap(total_compacting_kvs_, other->total_compacting_kvs_);
    std::swap(current_compacted_kvs_, other->current_compacted_kvs_);
    std::swap(root_index_size_kb_, other->root_index_size_kb_);
    std::swap(total_static_index_size_kb_, other->total_static_index_size_kb_);
    std::swap(total_static_bloom_size_kb_, other->total_static_bloom_size_kb_);
    std::swap(complete_sequence_id_, other->complete_sequence_id_);
    std::swap(data_locality_, other->data_locality_);
    std::swap(last_major_compaction_ts_, other->last_major_compaction_ts_);
    store_complete_sequence_id_.Swap(&other->store_complete_sequence_id_);
    std::swap(filtered_read_requests_count_, other->filtered_read_requests_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLoad_descriptor_;
  metadata.reflection = RegionLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplicationLoadSink::kAgeOfLastAppliedOpFieldNumber;
const int ReplicationLoadSink::kTimeStampsOfLastAppliedOpFieldNumber;
#endif  // !_MSC_VER

ReplicationLoadSink::ReplicationLoadSink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplicationLoadSink::InitAsDefaultInstance() {
}

ReplicationLoadSink::ReplicationLoadSink(const ReplicationLoadSink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplicationLoadSink::SharedCtor() {
  _cached_size_ = 0;
  ageoflastappliedop_ = GOOGLE_ULONGLONG(0);
  timestampsoflastappliedop_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicationLoadSink::~ReplicationLoadSink() {
  SharedDtor();
}

void ReplicationLoadSink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplicationLoadSink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicationLoadSink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicationLoadSink_descriptor_;
}

const ReplicationLoadSink& ReplicationLoadSink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

ReplicationLoadSink* ReplicationLoadSink::default_instance_ = NULL;

ReplicationLoadSink* ReplicationLoadSink::New() const {
  return new ReplicationLoadSink;
}

void ReplicationLoadSink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ageoflastappliedop_ = GOOGLE_ULONGLONG(0);
    timestampsoflastappliedop_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplicationLoadSink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ageOfLastAppliedOp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ageoflastappliedop_)));
          set_has_ageoflastappliedop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeStampsOfLastAppliedOp;
        break;
      }

      // required uint64 timeStampsOfLastAppliedOp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStampsOfLastAppliedOp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampsoflastappliedop_)));
          set_has_timestampsoflastappliedop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplicationLoadSink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ageOfLastAppliedOp = 1;
  if (has_ageoflastappliedop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ageoflastappliedop(), output);
  }

  // required uint64 timeStampsOfLastAppliedOp = 2;
  if (has_timestampsoflastappliedop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestampsoflastappliedop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplicationLoadSink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ageOfLastAppliedOp = 1;
  if (has_ageoflastappliedop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ageoflastappliedop(), target);
  }

  // required uint64 timeStampsOfLastAppliedOp = 2;
  if (has_timestampsoflastappliedop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestampsoflastappliedop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplicationLoadSink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ageOfLastAppliedOp = 1;
    if (has_ageoflastappliedop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ageoflastappliedop());
    }

    // required uint64 timeStampsOfLastAppliedOp = 2;
    if (has_timestampsoflastappliedop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampsoflastappliedop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicationLoadSink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplicationLoadSink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplicationLoadSink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicationLoadSink::MergeFrom(const ReplicationLoadSink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ageoflastappliedop()) {
      set_ageoflastappliedop(from.ageoflastappliedop());
    }
    if (from.has_timestampsoflastappliedop()) {
      set_timestampsoflastappliedop(from.timestampsoflastappliedop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplicationLoadSink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationLoadSink::CopyFrom(const ReplicationLoadSink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationLoadSink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplicationLoadSink::Swap(ReplicationLoadSink* other) {
  if (other != this) {
    std::swap(ageoflastappliedop_, other->ageoflastappliedop_);
    std::swap(timestampsoflastappliedop_, other->timestampsoflastappliedop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplicationLoadSink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicationLoadSink_descriptor_;
  metadata.reflection = ReplicationLoadSink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplicationLoadSource::kPeerIDFieldNumber;
const int ReplicationLoadSource::kAgeOfLastShippedOpFieldNumber;
const int ReplicationLoadSource::kSizeOfLogQueueFieldNumber;
const int ReplicationLoadSource::kTimeStampOfLastShippedOpFieldNumber;
const int ReplicationLoadSource::kReplicationLagFieldNumber;
#endif  // !_MSC_VER

ReplicationLoadSource::ReplicationLoadSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplicationLoadSource::InitAsDefaultInstance() {
}

ReplicationLoadSource::ReplicationLoadSource(const ReplicationLoadSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplicationLoadSource::SharedCtor() {
  _cached_size_ = 0;
  peerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ageoflastshippedop_ = GOOGLE_ULONGLONG(0);
  sizeoflogqueue_ = 0u;
  timestampoflastshippedop_ = GOOGLE_ULONGLONG(0);
  replicationlag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicationLoadSource::~ReplicationLoadSource() {
  SharedDtor();
}

void ReplicationLoadSource::SharedDtor() {
  if (peerid_ != &::google::protobuf::internal::kEmptyString) {
    delete peerid_;
  }
  if (this != default_instance_) {
  }
}

void ReplicationLoadSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicationLoadSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicationLoadSource_descriptor_;
}

const ReplicationLoadSource& ReplicationLoadSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

ReplicationLoadSource* ReplicationLoadSource::default_instance_ = NULL;

ReplicationLoadSource* ReplicationLoadSource::New() const {
  return new ReplicationLoadSource;
}

void ReplicationLoadSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peerid()) {
      if (peerid_ != &::google::protobuf::internal::kEmptyString) {
        peerid_->clear();
      }
    }
    ageoflastshippedop_ = GOOGLE_ULONGLONG(0);
    sizeoflogqueue_ = 0u;
    timestampoflastshippedop_ = GOOGLE_ULONGLONG(0);
    replicationlag_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplicationLoadSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peerid().data(), this->peerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ageOfLastShippedOp;
        break;
      }

      // required uint64 ageOfLastShippedOp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ageOfLastShippedOp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ageoflastshippedop_)));
          set_has_ageoflastshippedop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sizeOfLogQueue;
        break;
      }

      // required uint32 sizeOfLogQueue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeOfLogQueue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeoflogqueue_)));
          set_has_sizeoflogqueue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeStampOfLastShippedOp;
        break;
      }

      // required uint64 timeStampOfLastShippedOp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStampOfLastShippedOp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampoflastshippedop_)));
          set_has_timestampoflastshippedop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_replicationLag;
        break;
      }

      // required uint64 replicationLag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replicationLag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replicationlag_)));
          set_has_replicationlag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplicationLoadSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string peerID = 1;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peerid().data(), this->peerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peerid(), output);
  }

  // required uint64 ageOfLastShippedOp = 2;
  if (has_ageoflastshippedop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ageoflastshippedop(), output);
  }

  // required uint32 sizeOfLogQueue = 3;
  if (has_sizeoflogqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sizeoflogqueue(), output);
  }

  // required uint64 timeStampOfLastShippedOp = 4;
  if (has_timestampoflastshippedop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestampoflastshippedop(), output);
  }

  // required uint64 replicationLag = 5;
  if (has_replicationlag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->replicationlag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplicationLoadSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string peerID = 1;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peerid().data(), this->peerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peerid(), target);
  }

  // required uint64 ageOfLastShippedOp = 2;
  if (has_ageoflastshippedop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ageoflastshippedop(), target);
  }

  // required uint32 sizeOfLogQueue = 3;
  if (has_sizeoflogqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sizeoflogqueue(), target);
  }

  // required uint64 timeStampOfLastShippedOp = 4;
  if (has_timestampoflastshippedop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestampoflastshippedop(), target);
  }

  // required uint64 replicationLag = 5;
  if (has_replicationlag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->replicationlag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplicationLoadSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string peerID = 1;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peerid());
    }

    // required uint64 ageOfLastShippedOp = 2;
    if (has_ageoflastshippedop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ageoflastshippedop());
    }

    // required uint32 sizeOfLogQueue = 3;
    if (has_sizeoflogqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizeoflogqueue());
    }

    // required uint64 timeStampOfLastShippedOp = 4;
    if (has_timestampoflastshippedop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampoflastshippedop());
    }

    // required uint64 replicationLag = 5;
    if (has_replicationlag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replicationlag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicationLoadSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplicationLoadSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplicationLoadSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicationLoadSource::MergeFrom(const ReplicationLoadSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peerid()) {
      set_peerid(from.peerid());
    }
    if (from.has_ageoflastshippedop()) {
      set_ageoflastshippedop(from.ageoflastshippedop());
    }
    if (from.has_sizeoflogqueue()) {
      set_sizeoflogqueue(from.sizeoflogqueue());
    }
    if (from.has_timestampoflastshippedop()) {
      set_timestampoflastshippedop(from.timestampoflastshippedop());
    }
    if (from.has_replicationlag()) {
      set_replicationlag(from.replicationlag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplicationLoadSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationLoadSource::CopyFrom(const ReplicationLoadSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationLoadSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ReplicationLoadSource::Swap(ReplicationLoadSource* other) {
  if (other != this) {
    std::swap(peerid_, other->peerid_);
    std::swap(ageoflastshippedop_, other->ageoflastshippedop_);
    std::swap(sizeoflogqueue_, other->sizeoflogqueue_);
    std::swap(timestampoflastshippedop_, other->timestampoflastshippedop_);
    std::swap(replicationlag_, other->replicationlag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplicationLoadSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicationLoadSource_descriptor_;
  metadata.reflection = ReplicationLoadSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerLoad::kNumberOfRequestsFieldNumber;
const int ServerLoad::kTotalNumberOfRequestsFieldNumber;
const int ServerLoad::kUsedHeapMBFieldNumber;
const int ServerLoad::kMaxHeapMBFieldNumber;
const int ServerLoad::kRegionLoadsFieldNumber;
const int ServerLoad::kCoprocessorsFieldNumber;
const int ServerLoad::kReportStartTimeFieldNumber;
const int ServerLoad::kReportEndTimeFieldNumber;
const int ServerLoad::kInfoServerPortFieldNumber;
const int ServerLoad::kReplLoadSourceFieldNumber;
const int ServerLoad::kReplLoadSinkFieldNumber;
#endif  // !_MSC_VER

ServerLoad::ServerLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerLoad::InitAsDefaultInstance() {
  replloadsink_ = const_cast< ::hbase::pb::ReplicationLoadSink*>(&::hbase::pb::ReplicationLoadSink::default_instance());
}

ServerLoad::ServerLoad(const ServerLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerLoad::SharedCtor() {
  _cached_size_ = 0;
  number_of_requests_ = GOOGLE_ULONGLONG(0);
  total_number_of_requests_ = GOOGLE_ULONGLONG(0);
  used_heap_mb_ = 0u;
  max_heap_mb_ = 0u;
  report_start_time_ = GOOGLE_ULONGLONG(0);
  report_end_time_ = GOOGLE_ULONGLONG(0);
  info_server_port_ = 0u;
  replloadsink_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerLoad::~ServerLoad() {
  SharedDtor();
}

void ServerLoad::SharedDtor() {
  if (this != default_instance_) {
    delete replloadsink_;
  }
}

void ServerLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerLoad_descriptor_;
}

const ServerLoad& ServerLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

ServerLoad* ServerLoad::default_instance_ = NULL;

ServerLoad* ServerLoad::New() const {
  return new ServerLoad;
}

void ServerLoad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_of_requests_ = GOOGLE_ULONGLONG(0);
    total_number_of_requests_ = GOOGLE_ULONGLONG(0);
    used_heap_mb_ = 0u;
    max_heap_mb_ = 0u;
    report_start_time_ = GOOGLE_ULONGLONG(0);
    report_end_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    info_server_port_ = 0u;
    if (has_replloadsink()) {
      if (replloadsink_ != NULL) replloadsink_->::hbase::pb::ReplicationLoadSink::Clear();
    }
  }
  region_loads_.Clear();
  coprocessors_.Clear();
  replloadsource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 number_of_requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_of_requests_)));
          set_has_number_of_requests();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_number_of_requests;
        break;
      }

      // optional uint64 total_number_of_requests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_number_of_requests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_number_of_requests_)));
          set_has_total_number_of_requests();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_heap_MB;
        break;
      }

      // optional uint32 used_heap_MB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_heap_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_heap_mb_)));
          set_has_used_heap_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_heap_MB;
        break;
      }

      // optional uint32 max_heap_MB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_heap_MB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heap_mb_)));
          set_has_max_heap_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_region_loads;
        break;
      }

      // repeated .hbase.pb.RegionLoad region_loads = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_loads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_loads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_region_loads;
        if (input->ExpectTag(50)) goto parse_coprocessors;
        break;
      }

      // repeated .hbase.pb.Coprocessor coprocessors = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coprocessors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coprocessors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_coprocessors;
        if (input->ExpectTag(56)) goto parse_report_start_time;
        break;
      }

      // optional uint64 report_start_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &report_start_time_)));
          set_has_report_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_report_end_time;
        break;
      }

      // optional uint64 report_end_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &report_end_time_)));
          set_has_report_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_info_server_port;
        break;
      }

      // optional uint32 info_server_port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_server_port_)));
          set_has_info_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_replLoadSource;
        break;
      }

      // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replLoadSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replloadsource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_replLoadSource;
        if (input->ExpectTag(90)) goto parse_replLoadSink;
        break;
      }

      // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replLoadSink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replloadsink()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 number_of_requests = 1;
  if (has_number_of_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->number_of_requests(), output);
  }

  // optional uint64 total_number_of_requests = 2;
  if (has_total_number_of_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_number_of_requests(), output);
  }

  // optional uint32 used_heap_MB = 3;
  if (has_used_heap_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->used_heap_mb(), output);
  }

  // optional uint32 max_heap_MB = 4;
  if (has_max_heap_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_heap_mb(), output);
  }

  // repeated .hbase.pb.RegionLoad region_loads = 5;
  for (int i = 0; i < this->region_loads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->region_loads(i), output);
  }

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  for (int i = 0; i < this->coprocessors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->coprocessors(i), output);
  }

  // optional uint64 report_start_time = 7;
  if (has_report_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->report_start_time(), output);
  }

  // optional uint64 report_end_time = 8;
  if (has_report_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->report_end_time(), output);
  }

  // optional uint32 info_server_port = 9;
  if (has_info_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->info_server_port(), output);
  }

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  for (int i = 0; i < this->replloadsource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->replloadsource(i), output);
  }

  // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
  if (has_replloadsink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->replloadsink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 number_of_requests = 1;
  if (has_number_of_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->number_of_requests(), target);
  }

  // optional uint64 total_number_of_requests = 2;
  if (has_total_number_of_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_number_of_requests(), target);
  }

  // optional uint32 used_heap_MB = 3;
  if (has_used_heap_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->used_heap_mb(), target);
  }

  // optional uint32 max_heap_MB = 4;
  if (has_max_heap_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_heap_mb(), target);
  }

  // repeated .hbase.pb.RegionLoad region_loads = 5;
  for (int i = 0; i < this->region_loads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->region_loads(i), target);
  }

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  for (int i = 0; i < this->coprocessors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->coprocessors(i), target);
  }

  // optional uint64 report_start_time = 7;
  if (has_report_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->report_start_time(), target);
  }

  // optional uint64 report_end_time = 8;
  if (has_report_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->report_end_time(), target);
  }

  // optional uint32 info_server_port = 9;
  if (has_info_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->info_server_port(), target);
  }

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  for (int i = 0; i < this->replloadsource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->replloadsource(i), target);
  }

  // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
  if (has_replloadsink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->replloadsink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 number_of_requests = 1;
    if (has_number_of_requests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->number_of_requests());
    }

    // optional uint64 total_number_of_requests = 2;
    if (has_total_number_of_requests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_number_of_requests());
    }

    // optional uint32 used_heap_MB = 3;
    if (has_used_heap_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_heap_mb());
    }

    // optional uint32 max_heap_MB = 4;
    if (has_max_heap_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_heap_mb());
    }

    // optional uint64 report_start_time = 7;
    if (has_report_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->report_start_time());
    }

    // optional uint64 report_end_time = 8;
    if (has_report_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->report_end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 info_server_port = 9;
    if (has_info_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_server_port());
    }

    // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
    if (has_replloadsink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replloadsink());
    }

  }
  // repeated .hbase.pb.RegionLoad region_loads = 5;
  total_size += 1 * this->region_loads_size();
  for (int i = 0; i < this->region_loads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_loads(i));
  }

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  total_size += 1 * this->coprocessors_size();
  for (int i = 0; i < this->coprocessors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coprocessors(i));
  }

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  total_size += 1 * this->replloadsource_size();
  for (int i = 0; i < this->replloadsource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replloadsource(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerLoad::MergeFrom(const ServerLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_loads_.MergeFrom(from.region_loads_);
  coprocessors_.MergeFrom(from.coprocessors_);
  replloadsource_.MergeFrom(from.replloadsource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number_of_requests()) {
      set_number_of_requests(from.number_of_requests());
    }
    if (from.has_total_number_of_requests()) {
      set_total_number_of_requests(from.total_number_of_requests());
    }
    if (from.has_used_heap_mb()) {
      set_used_heap_mb(from.used_heap_mb());
    }
    if (from.has_max_heap_mb()) {
      set_max_heap_mb(from.max_heap_mb());
    }
    if (from.has_report_start_time()) {
      set_report_start_time(from.report_start_time());
    }
    if (from.has_report_end_time()) {
      set_report_end_time(from.report_end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_info_server_port()) {
      set_info_server_port(from.info_server_port());
    }
    if (from.has_replloadsink()) {
      mutable_replloadsink()->::hbase::pb::ReplicationLoadSink::MergeFrom(from.replloadsink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoad::CopyFrom(const ServerLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoad::IsInitialized() const {

  for (int i = 0; i < region_loads_size(); i++) {
    if (!this->region_loads(i).IsInitialized()) return false;
  }
  for (int i = 0; i < coprocessors_size(); i++) {
    if (!this->coprocessors(i).IsInitialized()) return false;
  }
  for (int i = 0; i < replloadsource_size(); i++) {
    if (!this->replloadsource(i).IsInitialized()) return false;
  }
  if (has_replloadsink()) {
    if (!this->replloadsink().IsInitialized()) return false;
  }
  return true;
}

void ServerLoad::Swap(ServerLoad* other) {
  if (other != this) {
    std::swap(number_of_requests_, other->number_of_requests_);
    std::swap(total_number_of_requests_, other->total_number_of_requests_);
    std::swap(used_heap_mb_, other->used_heap_mb_);
    std::swap(max_heap_mb_, other->max_heap_mb_);
    region_loads_.Swap(&other->region_loads_);
    coprocessors_.Swap(&other->coprocessors_);
    std::swap(report_start_time_, other->report_start_time_);
    std::swap(report_end_time_, other->report_end_time_);
    std::swap(info_server_port_, other->info_server_port_);
    replloadsource_.Swap(&other->replloadsource_);
    std::swap(replloadsink_, other->replloadsink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerLoad_descriptor_;
  metadata.reflection = ServerLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveServerInfo::kServerFieldNumber;
const int LiveServerInfo::kServerLoadFieldNumber;
#endif  // !_MSC_VER

LiveServerInfo::LiveServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LiveServerInfo::InitAsDefaultInstance() {
  server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
  server_load_ = const_cast< ::hbase::pb::ServerLoad*>(&::hbase::pb::ServerLoad::default_instance());
}

LiveServerInfo::LiveServerInfo(const LiveServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LiveServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  server_load_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveServerInfo::~LiveServerInfo() {
  SharedDtor();
}

void LiveServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
    delete server_load_;
  }
}

void LiveServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveServerInfo_descriptor_;
}

const LiveServerInfo& LiveServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

LiveServerInfo* LiveServerInfo::default_instance_ = NULL;

LiveServerInfo* LiveServerInfo::New() const {
  return new LiveServerInfo;
}

void LiveServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
    }
    if (has_server_load()) {
      if (server_load_ != NULL) server_load_->::hbase::pb::ServerLoad::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LiveServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_load;
        break;
      }

      // required .hbase.pb.ServerLoad server_load = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_load:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_load()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LiveServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(), output);
  }

  // required .hbase.pb.ServerLoad server_load = 2;
  if (has_server_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_load(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LiveServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(), target);
  }

  // required .hbase.pb.ServerLoad server_load = 2;
  if (has_server_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_load(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LiveServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // required .hbase.pb.ServerLoad server_load = 2;
    if (has_server_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_load());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LiveServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveServerInfo::MergeFrom(const LiveServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (from.has_server_load()) {
      mutable_server_load()->::hbase::pb::ServerLoad::MergeFrom(from.server_load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LiveServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveServerInfo::CopyFrom(const LiveServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  if (has_server_load()) {
    if (!this->server_load().IsInitialized()) return false;
  }
  return true;
}

void LiveServerInfo::Swap(LiveServerInfo* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(server_load_, other->server_load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LiveServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveServerInfo_descriptor_;
  metadata.reflection = LiveServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterStatus::kHbaseVersionFieldNumber;
const int ClusterStatus::kLiveServersFieldNumber;
const int ClusterStatus::kDeadServersFieldNumber;
const int ClusterStatus::kRegionsInTransitionFieldNumber;
const int ClusterStatus::kClusterIdFieldNumber;
const int ClusterStatus::kMasterCoprocessorsFieldNumber;
const int ClusterStatus::kMasterFieldNumber;
const int ClusterStatus::kBackupMastersFieldNumber;
const int ClusterStatus::kBalancerOnFieldNumber;
#endif  // !_MSC_VER

ClusterStatus::ClusterStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClusterStatus::InitAsDefaultInstance() {
  hbase_version_ = const_cast< ::hbase::pb::HBaseVersionFileContent*>(&::hbase::pb::HBaseVersionFileContent::default_instance());
  cluster_id_ = const_cast< ::hbase::pb::ClusterId*>(&::hbase::pb::ClusterId::default_instance());
  master_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

ClusterStatus::ClusterStatus(const ClusterStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClusterStatus::SharedCtor() {
  _cached_size_ = 0;
  hbase_version_ = NULL;
  cluster_id_ = NULL;
  master_ = NULL;
  balancer_on_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterStatus::~ClusterStatus() {
  SharedDtor();
}

void ClusterStatus::SharedDtor() {
  if (this != default_instance_) {
    delete hbase_version_;
    delete cluster_id_;
    delete master_;
  }
}

void ClusterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterStatus_descriptor_;
}

const ClusterStatus& ClusterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClusterStatus_2eproto();
  return *default_instance_;
}

ClusterStatus* ClusterStatus::default_instance_ = NULL;

ClusterStatus* ClusterStatus::New() const {
  return new ClusterStatus;
}

void ClusterStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hbase_version()) {
      if (hbase_version_ != NULL) hbase_version_->::hbase::pb::HBaseVersionFileContent::Clear();
    }
    if (has_cluster_id()) {
      if (cluster_id_ != NULL) cluster_id_->::hbase::pb::ClusterId::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::hbase::pb::ServerName::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    balancer_on_ = false;
  }
  live_servers_.Clear();
  dead_servers_.Clear();
  regions_in_transition_.Clear();
  master_coprocessors_.Clear();
  backup_masters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hbase_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_live_servers;
        break;
      }

      // repeated .hbase.pb.LiveServerInfo live_servers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_live_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_live_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_live_servers;
        if (input->ExpectTag(26)) goto parse_dead_servers;
        break;
      }

      // repeated .hbase.pb.ServerName dead_servers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dead_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dead_servers;
        if (input->ExpectTag(34)) goto parse_regions_in_transition;
        break;
      }

      // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regions_in_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regions_in_transition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_regions_in_transition;
        if (input->ExpectTag(42)) goto parse_cluster_id;
        break;
      }

      // optional .hbase.pb.ClusterId cluster_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_master_coprocessors;
        break;
      }

      // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_coprocessors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_coprocessors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_master_coprocessors;
        if (input->ExpectTag(58)) goto parse_master;
        break;
      }

      // optional .hbase.pb.ServerName master = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_backup_masters;
        break;
      }

      // repeated .hbase.pb.ServerName backup_masters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup_masters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backup_masters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_backup_masters;
        if (input->ExpectTag(72)) goto parse_balancer_on;
        break;
      }

      // optional bool balancer_on = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balancer_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &balancer_on_)));
          set_has_balancer_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClusterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
  if (has_hbase_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hbase_version(), output);
  }

  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  for (int i = 0; i < this->live_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->live_servers(i), output);
  }

  // repeated .hbase.pb.ServerName dead_servers = 3;
  for (int i = 0; i < this->dead_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dead_servers(i), output);
  }

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  for (int i = 0; i < this->regions_in_transition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->regions_in_transition(i), output);
  }

  // optional .hbase.pb.ClusterId cluster_id = 5;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cluster_id(), output);
  }

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  for (int i = 0; i < this->master_coprocessors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->master_coprocessors(i), output);
  }

  // optional .hbase.pb.ServerName master = 7;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->master(), output);
  }

  // repeated .hbase.pb.ServerName backup_masters = 8;
  for (int i = 0; i < this->backup_masters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->backup_masters(i), output);
  }

  // optional bool balancer_on = 9;
  if (has_balancer_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->balancer_on(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClusterStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
  if (has_hbase_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hbase_version(), target);
  }

  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  for (int i = 0; i < this->live_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->live_servers(i), target);
  }

  // repeated .hbase.pb.ServerName dead_servers = 3;
  for (int i = 0; i < this->dead_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dead_servers(i), target);
  }

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  for (int i = 0; i < this->regions_in_transition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->regions_in_transition(i), target);
  }

  // optional .hbase.pb.ClusterId cluster_id = 5;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cluster_id(), target);
  }

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  for (int i = 0; i < this->master_coprocessors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->master_coprocessors(i), target);
  }

  // optional .hbase.pb.ServerName master = 7;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->master(), target);
  }

  // repeated .hbase.pb.ServerName backup_masters = 8;
  for (int i = 0; i < this->backup_masters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->backup_masters(i), target);
  }

  // optional bool balancer_on = 9;
  if (has_balancer_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->balancer_on(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClusterStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
    if (has_hbase_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hbase_version());
    }

    // optional .hbase.pb.ClusterId cluster_id = 5;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster_id());
    }

    // optional .hbase.pb.ServerName master = 7;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool balancer_on = 9;
    if (has_balancer_on()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  total_size += 1 * this->live_servers_size();
  for (int i = 0; i < this->live_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->live_servers(i));
  }

  // repeated .hbase.pb.ServerName dead_servers = 3;
  total_size += 1 * this->dead_servers_size();
  for (int i = 0; i < this->dead_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dead_servers(i));
  }

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  total_size += 1 * this->regions_in_transition_size();
  for (int i = 0; i < this->regions_in_transition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regions_in_transition(i));
  }

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  total_size += 1 * this->master_coprocessors_size();
  for (int i = 0; i < this->master_coprocessors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_coprocessors(i));
  }

  // repeated .hbase.pb.ServerName backup_masters = 8;
  total_size += 1 * this->backup_masters_size();
  for (int i = 0; i < this->backup_masters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backup_masters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterStatus::MergeFrom(const ClusterStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  live_servers_.MergeFrom(from.live_servers_);
  dead_servers_.MergeFrom(from.dead_servers_);
  regions_in_transition_.MergeFrom(from.regions_in_transition_);
  master_coprocessors_.MergeFrom(from.master_coprocessors_);
  backup_masters_.MergeFrom(from.backup_masters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hbase_version()) {
      mutable_hbase_version()->::hbase::pb::HBaseVersionFileContent::MergeFrom(from.hbase_version());
    }
    if (from.has_cluster_id()) {
      mutable_cluster_id()->::hbase::pb::ClusterId::MergeFrom(from.cluster_id());
    }
    if (from.has_master()) {
      mutable_master()->::hbase::pb::ServerName::MergeFrom(from.master());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_balancer_on()) {
      set_balancer_on(from.balancer_on());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterStatus::CopyFrom(const ClusterStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterStatus::IsInitialized() const {

  if (has_hbase_version()) {
    if (!this->hbase_version().IsInitialized()) return false;
  }
  for (int i = 0; i < live_servers_size(); i++) {
    if (!this->live_servers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dead_servers_size(); i++) {
    if (!this->dead_servers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < regions_in_transition_size(); i++) {
    if (!this->regions_in_transition(i).IsInitialized()) return false;
  }
  if (has_cluster_id()) {
    if (!this->cluster_id().IsInitialized()) return false;
  }
  for (int i = 0; i < master_coprocessors_size(); i++) {
    if (!this->master_coprocessors(i).IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  for (int i = 0; i < backup_masters_size(); i++) {
    if (!this->backup_masters(i).IsInitialized()) return false;
  }
  return true;
}

void ClusterStatus::Swap(ClusterStatus* other) {
  if (other != this) {
    std::swap(hbase_version_, other->hbase_version_);
    live_servers_.Swap(&other->live_servers_);
    dead_servers_.Swap(&other->dead_servers_);
    regions_in_transition_.Swap(&other->regions_in_transition_);
    std::swap(cluster_id_, other->cluster_id_);
    master_coprocessors_.Swap(&other->master_coprocessors_);
    std::swap(master_, other->master_);
    backup_masters_.Swap(&other->backup_masters_);
    std::swap(balancer_on_, other->balancer_on_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterStatus_descriptor_;
  metadata.reflection = ClusterStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
