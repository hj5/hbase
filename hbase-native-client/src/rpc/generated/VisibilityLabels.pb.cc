// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisibilityLabels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VisibilityLabels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* VisibilityLabelsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisibilityLabelsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisibilityLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisibilityLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisibilityLabelsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisibilityLabelsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAuthsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAuthsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAuthorizations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAuthorizations_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiUserAuthorizations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiUserAuthorizations_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAuthsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAuthsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAuthsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAuthsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLabelsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLabelsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLabelsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLabelsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VisibilityLabels_2eproto() {
  protobuf_AddDesc_VisibilityLabels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VisibilityLabels.proto");
  GOOGLE_CHECK(file != NULL);
  VisibilityLabelsRequest_descriptor_ = file->message_type(0);
  static const int VisibilityLabelsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabelsRequest, vislabel_),
  };
  VisibilityLabelsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisibilityLabelsRequest_descriptor_,
      VisibilityLabelsRequest::default_instance_,
      VisibilityLabelsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabelsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabelsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisibilityLabelsRequest));
  VisibilityLabel_descriptor_ = file->message_type(1);
  static const int VisibilityLabel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabel, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabel, ordinal_),
  };
  VisibilityLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisibilityLabel_descriptor_,
      VisibilityLabel::default_instance_,
      VisibilityLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisibilityLabel));
  VisibilityLabelsResponse_descriptor_ = file->message_type(2);
  static const int VisibilityLabelsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabelsResponse, result_),
  };
  VisibilityLabelsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisibilityLabelsResponse_descriptor_,
      VisibilityLabelsResponse::default_instance_,
      VisibilityLabelsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabelsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibilityLabelsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisibilityLabelsResponse));
  SetAuthsRequest_descriptor_ = file->message_type(3);
  static const int SetAuthsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthsRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthsRequest, auth_),
  };
  SetAuthsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAuthsRequest_descriptor_,
      SetAuthsRequest::default_instance_,
      SetAuthsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAuthsRequest));
  UserAuthorizations_descriptor_ = file->message_type(4);
  static const int UserAuthorizations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthorizations, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthorizations, auth_),
  };
  UserAuthorizations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAuthorizations_descriptor_,
      UserAuthorizations::default_instance_,
      UserAuthorizations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthorizations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAuthorizations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAuthorizations));
  MultiUserAuthorizations_descriptor_ = file->message_type(5);
  static const int MultiUserAuthorizations_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiUserAuthorizations, userauths_),
  };
  MultiUserAuthorizations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiUserAuthorizations_descriptor_,
      MultiUserAuthorizations::default_instance_,
      MultiUserAuthorizations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiUserAuthorizations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiUserAuthorizations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiUserAuthorizations));
  GetAuthsRequest_descriptor_ = file->message_type(6);
  static const int GetAuthsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsRequest, user_),
  };
  GetAuthsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAuthsRequest_descriptor_,
      GetAuthsRequest::default_instance_,
      GetAuthsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAuthsRequest));
  GetAuthsResponse_descriptor_ = file->message_type(7);
  static const int GetAuthsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsResponse, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsResponse, auth_),
  };
  GetAuthsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAuthsResponse_descriptor_,
      GetAuthsResponse::default_instance_,
      GetAuthsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAuthsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAuthsResponse));
  ListLabelsRequest_descriptor_ = file->message_type(8);
  static const int ListLabelsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLabelsRequest, regex_),
  };
  ListLabelsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListLabelsRequest_descriptor_,
      ListLabelsRequest::default_instance_,
      ListLabelsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLabelsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLabelsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListLabelsRequest));
  ListLabelsResponse_descriptor_ = file->message_type(9);
  static const int ListLabelsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLabelsResponse, label_),
  };
  ListLabelsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListLabelsResponse_descriptor_,
      ListLabelsResponse::default_instance_,
      ListLabelsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLabelsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLabelsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListLabelsResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VisibilityLabels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisibilityLabelsRequest_descriptor_, &VisibilityLabelsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisibilityLabel_descriptor_, &VisibilityLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisibilityLabelsResponse_descriptor_, &VisibilityLabelsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAuthsRequest_descriptor_, &SetAuthsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAuthorizations_descriptor_, &UserAuthorizations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiUserAuthorizations_descriptor_, &MultiUserAuthorizations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAuthsRequest_descriptor_, &GetAuthsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAuthsResponse_descriptor_, &GetAuthsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListLabelsRequest_descriptor_, &ListLabelsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListLabelsResponse_descriptor_, &ListLabelsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VisibilityLabels_2eproto() {
  delete VisibilityLabelsRequest::default_instance_;
  delete VisibilityLabelsRequest_reflection_;
  delete VisibilityLabel::default_instance_;
  delete VisibilityLabel_reflection_;
  delete VisibilityLabelsResponse::default_instance_;
  delete VisibilityLabelsResponse_reflection_;
  delete SetAuthsRequest::default_instance_;
  delete SetAuthsRequest_reflection_;
  delete UserAuthorizations::default_instance_;
  delete UserAuthorizations_reflection_;
  delete MultiUserAuthorizations::default_instance_;
  delete MultiUserAuthorizations_reflection_;
  delete GetAuthsRequest::default_instance_;
  delete GetAuthsRequest_reflection_;
  delete GetAuthsResponse::default_instance_;
  delete GetAuthsResponse_reflection_;
  delete ListLabelsRequest::default_instance_;
  delete ListLabelsRequest_reflection_;
  delete ListLabelsResponse::default_instance_;
  delete ListLabelsResponse_reflection_;
}

void protobuf_AddDesc_VisibilityLabels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026VisibilityLabels.proto\022\010hbase.pb\032\014Clie"
    "nt.proto\"F\n\027VisibilityLabelsRequest\022+\n\010v"
    "isLabel\030\001 \003(\0132\031.hbase.pb.VisibilityLabel"
    "\"1\n\017VisibilityLabel\022\r\n\005label\030\001 \002(\014\022\017\n\007or"
    "dinal\030\002 \001(\r\"H\n\030VisibilityLabelsResponse\022"
    ",\n\006result\030\001 \003(\0132\034.hbase.pb.RegionActionR"
    "esult\"-\n\017SetAuthsRequest\022\014\n\004user\030\001 \002(\014\022\014"
    "\n\004auth\030\002 \003(\014\"0\n\022UserAuthorizations\022\014\n\004us"
    "er\030\001 \002(\014\022\014\n\004auth\030\002 \003(\r\"J\n\027MultiUserAutho"
    "rizations\022/\n\tuserAuths\030\001 \003(\0132\034.hbase.pb."
    "UserAuthorizations\"\037\n\017GetAuthsRequest\022\014\n"
    "\004user\030\001 \002(\014\".\n\020GetAuthsResponse\022\014\n\004user\030"
    "\001 \002(\014\022\014\n\004auth\030\002 \003(\014\"\"\n\021ListLabelsRequest"
    "\022\r\n\005regex\030\001 \001(\t\"#\n\022ListLabelsResponse\022\r\n"
    "\005label\030\001 \003(\0142\221\003\n\027VisibilityLabelsService"
    "\022R\n\taddLabels\022!.hbase.pb.VisibilityLabel"
    "sRequest\032\".hbase.pb.VisibilityLabelsResp"
    "onse\022I\n\010setAuths\022\031.hbase.pb.SetAuthsRequ"
    "est\032\".hbase.pb.VisibilityLabelsResponse\022"
    "K\n\nclearAuths\022\031.hbase.pb.SetAuthsRequest"
    "\032\".hbase.pb.VisibilityLabelsResponse\022A\n\010"
    "getAuths\022\031.hbase.pb.GetAuthsRequest\032\032.hb"
    "ase.pb.GetAuthsResponse\022G\n\nlistLabels\022\033."
    "hbase.pb.ListLabelsRequest\032\034.hbase.pb.Li"
    "stLabelsResponseBL\n*org.apache.hadoop.hb"
    "ase.protobuf.generatedB\026VisibilityLabels"
    "ProtosH\001\210\001\001\240\001\001", 1054);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VisibilityLabels.proto", &protobuf_RegisterTypes);
  VisibilityLabelsRequest::default_instance_ = new VisibilityLabelsRequest();
  VisibilityLabel::default_instance_ = new VisibilityLabel();
  VisibilityLabelsResponse::default_instance_ = new VisibilityLabelsResponse();
  SetAuthsRequest::default_instance_ = new SetAuthsRequest();
  UserAuthorizations::default_instance_ = new UserAuthorizations();
  MultiUserAuthorizations::default_instance_ = new MultiUserAuthorizations();
  GetAuthsRequest::default_instance_ = new GetAuthsRequest();
  GetAuthsResponse::default_instance_ = new GetAuthsResponse();
  ListLabelsRequest::default_instance_ = new ListLabelsRequest();
  ListLabelsResponse::default_instance_ = new ListLabelsResponse();
  VisibilityLabelsRequest::default_instance_->InitAsDefaultInstance();
  VisibilityLabel::default_instance_->InitAsDefaultInstance();
  VisibilityLabelsResponse::default_instance_->InitAsDefaultInstance();
  SetAuthsRequest::default_instance_->InitAsDefaultInstance();
  UserAuthorizations::default_instance_->InitAsDefaultInstance();
  MultiUserAuthorizations::default_instance_->InitAsDefaultInstance();
  GetAuthsRequest::default_instance_->InitAsDefaultInstance();
  GetAuthsResponse::default_instance_->InitAsDefaultInstance();
  ListLabelsRequest::default_instance_->InitAsDefaultInstance();
  ListLabelsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VisibilityLabels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VisibilityLabels_2eproto {
  StaticDescriptorInitializer_VisibilityLabels_2eproto() {
    protobuf_AddDesc_VisibilityLabels_2eproto();
  }
} static_descriptor_initializer_VisibilityLabels_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VisibilityLabelsRequest::kVisLabelFieldNumber;
#endif  // !_MSC_VER

VisibilityLabelsRequest::VisibilityLabelsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisibilityLabelsRequest::InitAsDefaultInstance() {
}

VisibilityLabelsRequest::VisibilityLabelsRequest(const VisibilityLabelsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisibilityLabelsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisibilityLabelsRequest::~VisibilityLabelsRequest() {
  SharedDtor();
}

void VisibilityLabelsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisibilityLabelsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisibilityLabelsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisibilityLabelsRequest_descriptor_;
}

const VisibilityLabelsRequest& VisibilityLabelsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

VisibilityLabelsRequest* VisibilityLabelsRequest::default_instance_ = NULL;

VisibilityLabelsRequest* VisibilityLabelsRequest::New() const {
  return new VisibilityLabelsRequest;
}

void VisibilityLabelsRequest::Clear() {
  vislabel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisibilityLabelsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.VisibilityLabel visLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vislabel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_visLabel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisibilityLabelsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  for (int i = 0; i < this->vislabel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vislabel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisibilityLabelsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  for (int i = 0; i < this->vislabel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vislabel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisibilityLabelsRequest::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  total_size += 1 * this->vislabel_size();
  for (int i = 0; i < this->vislabel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vislabel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisibilityLabelsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisibilityLabelsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisibilityLabelsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisibilityLabelsRequest::MergeFrom(const VisibilityLabelsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  vislabel_.MergeFrom(from.vislabel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisibilityLabelsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibilityLabelsRequest::CopyFrom(const VisibilityLabelsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityLabelsRequest::IsInitialized() const {

  for (int i = 0; i < vislabel_size(); i++) {
    if (!this->vislabel(i).IsInitialized()) return false;
  }
  return true;
}

void VisibilityLabelsRequest::Swap(VisibilityLabelsRequest* other) {
  if (other != this) {
    vislabel_.Swap(&other->vislabel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisibilityLabelsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisibilityLabelsRequest_descriptor_;
  metadata.reflection = VisibilityLabelsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisibilityLabel::kLabelFieldNumber;
const int VisibilityLabel::kOrdinalFieldNumber;
#endif  // !_MSC_VER

VisibilityLabel::VisibilityLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisibilityLabel::InitAsDefaultInstance() {
}

VisibilityLabel::VisibilityLabel(const VisibilityLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisibilityLabel::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordinal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisibilityLabel::~VisibilityLabel() {
  SharedDtor();
}

void VisibilityLabel::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void VisibilityLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisibilityLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisibilityLabel_descriptor_;
}

const VisibilityLabel& VisibilityLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

VisibilityLabel* VisibilityLabel::default_instance_ = NULL;

VisibilityLabel* VisibilityLabel::New() const {
  return new VisibilityLabel;
}

void VisibilityLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    ordinal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisibilityLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ordinal;
        break;
      }

      // optional uint32 ordinal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
          set_has_ordinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisibilityLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->label(), output);
  }

  // optional uint32 ordinal = 2;
  if (has_ordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordinal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisibilityLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes label = 1;
  if (has_label()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->label(), target);
  }

  // optional uint32 ordinal = 2;
  if (has_ordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordinal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisibilityLabel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->label());
    }

    // optional uint32 ordinal = 2;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisibilityLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisibilityLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisibilityLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisibilityLabel::MergeFrom(const VisibilityLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_ordinal()) {
      set_ordinal(from.ordinal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisibilityLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibilityLabel::CopyFrom(const VisibilityLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityLabel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VisibilityLabel::Swap(VisibilityLabel* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(ordinal_, other->ordinal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisibilityLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisibilityLabel_descriptor_;
  metadata.reflection = VisibilityLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisibilityLabelsResponse::kResultFieldNumber;
#endif  // !_MSC_VER

VisibilityLabelsResponse::VisibilityLabelsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisibilityLabelsResponse::InitAsDefaultInstance() {
}

VisibilityLabelsResponse::VisibilityLabelsResponse(const VisibilityLabelsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisibilityLabelsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisibilityLabelsResponse::~VisibilityLabelsResponse() {
  SharedDtor();
}

void VisibilityLabelsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisibilityLabelsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisibilityLabelsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisibilityLabelsResponse_descriptor_;
}

const VisibilityLabelsResponse& VisibilityLabelsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

VisibilityLabelsResponse* VisibilityLabelsResponse::default_instance_ = NULL;

VisibilityLabelsResponse* VisibilityLabelsResponse::New() const {
  return new VisibilityLabelsResponse;
}

void VisibilityLabelsResponse::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisibilityLabelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionActionResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisibilityLabelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.RegionActionResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisibilityLabelsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.RegionActionResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisibilityLabelsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.RegionActionResult result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisibilityLabelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisibilityLabelsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisibilityLabelsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisibilityLabelsResponse::MergeFrom(const VisibilityLabelsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisibilityLabelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibilityLabelsResponse::CopyFrom(const VisibilityLabelsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityLabelsResponse::IsInitialized() const {

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void VisibilityLabelsResponse::Swap(VisibilityLabelsResponse* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisibilityLabelsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisibilityLabelsResponse_descriptor_;
  metadata.reflection = VisibilityLabelsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAuthsRequest::kUserFieldNumber;
const int SetAuthsRequest::kAuthFieldNumber;
#endif  // !_MSC_VER

SetAuthsRequest::SetAuthsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetAuthsRequest::InitAsDefaultInstance() {
}

SetAuthsRequest::SetAuthsRequest(const SetAuthsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetAuthsRequest::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAuthsRequest::~SetAuthsRequest() {
  SharedDtor();
}

void SetAuthsRequest::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void SetAuthsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAuthsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAuthsRequest_descriptor_;
}

const SetAuthsRequest& SetAuthsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

SetAuthsRequest* SetAuthsRequest::default_instance_ = NULL;

SetAuthsRequest* SetAuthsRequest::New() const {
  return new SetAuthsRequest;
}

void SetAuthsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  auth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAuthsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth;
        break;
      }

      // repeated bytes auth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_auth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetAuthsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // repeated bytes auth = 2;
  for (int i = 0; i < this->auth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->auth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetAuthsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // repeated bytes auth = 2;
  for (int i = 0; i < this->auth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->auth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetAuthsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

  }
  // repeated bytes auth = 2;
  total_size += 1 * this->auth_size();
  for (int i = 0; i < this->auth_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->auth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAuthsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAuthsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAuthsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAuthsRequest::MergeFrom(const SetAuthsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  auth_.MergeFrom(from.auth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAuthsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAuthsRequest::CopyFrom(const SetAuthsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAuthsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetAuthsRequest::Swap(SetAuthsRequest* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    auth_.Swap(&other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAuthsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAuthsRequest_descriptor_;
  metadata.reflection = SetAuthsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAuthorizations::kUserFieldNumber;
const int UserAuthorizations::kAuthFieldNumber;
#endif  // !_MSC_VER

UserAuthorizations::UserAuthorizations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserAuthorizations::InitAsDefaultInstance() {
}

UserAuthorizations::UserAuthorizations(const UserAuthorizations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserAuthorizations::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAuthorizations::~UserAuthorizations() {
  SharedDtor();
}

void UserAuthorizations::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void UserAuthorizations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAuthorizations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAuthorizations_descriptor_;
}

const UserAuthorizations& UserAuthorizations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

UserAuthorizations* UserAuthorizations::default_instance_ = NULL;

UserAuthorizations* UserAuthorizations::New() const {
  return new UserAuthorizations;
}

void UserAuthorizations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  auth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAuthorizations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auth;
        break;
      }

      // repeated uint32 auth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_auth())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_auth())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auth;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserAuthorizations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // repeated uint32 auth = 2;
  for (int i = 0; i < this->auth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->auth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserAuthorizations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // repeated uint32 auth = 2;
  for (int i = 0; i < this->auth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->auth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserAuthorizations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

  }
  // repeated uint32 auth = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->auth_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->auth(i));
    }
    total_size += 1 * this->auth_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAuthorizations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAuthorizations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAuthorizations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAuthorizations::MergeFrom(const UserAuthorizations& from) {
  GOOGLE_CHECK_NE(&from, this);
  auth_.MergeFrom(from.auth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAuthorizations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuthorizations::CopyFrom(const UserAuthorizations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthorizations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserAuthorizations::Swap(UserAuthorizations* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    auth_.Swap(&other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAuthorizations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAuthorizations_descriptor_;
  metadata.reflection = UserAuthorizations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiUserAuthorizations::kUserAuthsFieldNumber;
#endif  // !_MSC_VER

MultiUserAuthorizations::MultiUserAuthorizations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiUserAuthorizations::InitAsDefaultInstance() {
}

MultiUserAuthorizations::MultiUserAuthorizations(const MultiUserAuthorizations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiUserAuthorizations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiUserAuthorizations::~MultiUserAuthorizations() {
  SharedDtor();
}

void MultiUserAuthorizations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiUserAuthorizations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiUserAuthorizations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiUserAuthorizations_descriptor_;
}

const MultiUserAuthorizations& MultiUserAuthorizations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

MultiUserAuthorizations* MultiUserAuthorizations::default_instance_ = NULL;

MultiUserAuthorizations* MultiUserAuthorizations::New() const {
  return new MultiUserAuthorizations;
}

void MultiUserAuthorizations::Clear() {
  userauths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiUserAuthorizations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.UserAuthorizations userAuths = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userAuths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userauths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userAuths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiUserAuthorizations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  for (int i = 0; i < this->userauths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userauths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiUserAuthorizations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  for (int i = 0; i < this->userauths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userauths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiUserAuthorizations::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  total_size += 1 * this->userauths_size();
  for (int i = 0; i < this->userauths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userauths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiUserAuthorizations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiUserAuthorizations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiUserAuthorizations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiUserAuthorizations::MergeFrom(const MultiUserAuthorizations& from) {
  GOOGLE_CHECK_NE(&from, this);
  userauths_.MergeFrom(from.userauths_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiUserAuthorizations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiUserAuthorizations::CopyFrom(const MultiUserAuthorizations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiUserAuthorizations::IsInitialized() const {

  for (int i = 0; i < userauths_size(); i++) {
    if (!this->userauths(i).IsInitialized()) return false;
  }
  return true;
}

void MultiUserAuthorizations::Swap(MultiUserAuthorizations* other) {
  if (other != this) {
    userauths_.Swap(&other->userauths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiUserAuthorizations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiUserAuthorizations_descriptor_;
  metadata.reflection = MultiUserAuthorizations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAuthsRequest::kUserFieldNumber;
#endif  // !_MSC_VER

GetAuthsRequest::GetAuthsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAuthsRequest::InitAsDefaultInstance() {
}

GetAuthsRequest::GetAuthsRequest(const GetAuthsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAuthsRequest::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthsRequest::~GetAuthsRequest() {
  SharedDtor();
}

void GetAuthsRequest::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GetAuthsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAuthsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAuthsRequest_descriptor_;
}

const GetAuthsRequest& GetAuthsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

GetAuthsRequest* GetAuthsRequest::default_instance_ = NULL;

GetAuthsRequest* GetAuthsRequest::New() const {
  return new GetAuthsRequest;
}

void GetAuthsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAuthsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAuthsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAuthsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAuthsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAuthsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAuthsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAuthsRequest::MergeFrom(const GetAuthsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAuthsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthsRequest::CopyFrom(const GetAuthsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAuthsRequest::Swap(GetAuthsRequest* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAuthsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAuthsRequest_descriptor_;
  metadata.reflection = GetAuthsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAuthsResponse::kUserFieldNumber;
const int GetAuthsResponse::kAuthFieldNumber;
#endif  // !_MSC_VER

GetAuthsResponse::GetAuthsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAuthsResponse::InitAsDefaultInstance() {
}

GetAuthsResponse::GetAuthsResponse(const GetAuthsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAuthsResponse::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAuthsResponse::~GetAuthsResponse() {
  SharedDtor();
}

void GetAuthsResponse::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GetAuthsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAuthsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAuthsResponse_descriptor_;
}

const GetAuthsResponse& GetAuthsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

GetAuthsResponse* GetAuthsResponse::default_instance_ = NULL;

GetAuthsResponse* GetAuthsResponse::New() const {
  return new GetAuthsResponse;
}

void GetAuthsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  auth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAuthsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth;
        break;
      }

      // repeated bytes auth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_auth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_auth;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAuthsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // repeated bytes auth = 2;
  for (int i = 0; i < this->auth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->auth(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAuthsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // repeated bytes auth = 2;
  for (int i = 0; i < this->auth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->auth(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAuthsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

  }
  // repeated bytes auth = 2;
  total_size += 1 * this->auth_size();
  for (int i = 0; i < this->auth_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->auth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAuthsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAuthsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAuthsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAuthsResponse::MergeFrom(const GetAuthsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  auth_.MergeFrom(from.auth_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAuthsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthsResponse::CopyFrom(const GetAuthsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAuthsResponse::Swap(GetAuthsResponse* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    auth_.Swap(&other->auth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAuthsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAuthsResponse_descriptor_;
  metadata.reflection = GetAuthsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListLabelsRequest::kRegexFieldNumber;
#endif  // !_MSC_VER

ListLabelsRequest::ListLabelsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListLabelsRequest::InitAsDefaultInstance() {
}

ListLabelsRequest::ListLabelsRequest(const ListLabelsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListLabelsRequest::SharedCtor() {
  _cached_size_ = 0;
  regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListLabelsRequest::~ListLabelsRequest() {
  SharedDtor();
}

void ListLabelsRequest::SharedDtor() {
  if (regex_ != &::google::protobuf::internal::kEmptyString) {
    delete regex_;
  }
  if (this != default_instance_) {
  }
}

void ListLabelsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLabelsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLabelsRequest_descriptor_;
}

const ListLabelsRequest& ListLabelsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

ListLabelsRequest* ListLabelsRequest::default_instance_ = NULL;

ListLabelsRequest* ListLabelsRequest::New() const {
  return new ListLabelsRequest;
}

void ListLabelsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regex()) {
      if (regex_ != &::google::protobuf::internal::kEmptyString) {
        regex_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListLabelsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListLabelsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string regex = 1;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->regex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListLabelsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string regex = 1;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->regex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListLabelsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string regex = 1;
    if (has_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLabelsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListLabelsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListLabelsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListLabelsRequest::MergeFrom(const ListLabelsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regex()) {
      set_regex(from.regex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListLabelsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLabelsRequest::CopyFrom(const ListLabelsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelsRequest::IsInitialized() const {

  return true;
}

void ListLabelsRequest::Swap(ListLabelsRequest* other) {
  if (other != this) {
    std::swap(regex_, other->regex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListLabelsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLabelsRequest_descriptor_;
  metadata.reflection = ListLabelsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListLabelsResponse::kLabelFieldNumber;
#endif  // !_MSC_VER

ListLabelsResponse::ListLabelsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListLabelsResponse::InitAsDefaultInstance() {
}

ListLabelsResponse::ListLabelsResponse(const ListLabelsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListLabelsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListLabelsResponse::~ListLabelsResponse() {
  SharedDtor();
}

void ListLabelsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLabelsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLabelsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLabelsResponse_descriptor_;
}

const ListLabelsResponse& ListLabelsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisibilityLabels_2eproto();
  return *default_instance_;
}

ListLabelsResponse* ListLabelsResponse::default_instance_ = NULL;

ListLabelsResponse* ListLabelsResponse::New() const {
  return new ListLabelsResponse;
}

void ListLabelsResponse::Clear() {
  label_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListLabelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_label;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListLabelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes label = 1;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->label(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListLabelsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes label = 1;
  for (int i = 0; i < this->label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->label(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListLabelsResponse::ByteSize() const {
  int total_size = 0;

  // repeated bytes label = 1;
  total_size += 1 * this->label_size();
  for (int i = 0; i < this->label_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->label(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLabelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListLabelsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListLabelsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListLabelsResponse::MergeFrom(const ListLabelsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListLabelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLabelsResponse::CopyFrom(const ListLabelsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelsResponse::IsInitialized() const {

  return true;
}

void ListLabelsResponse::Swap(ListLabelsResponse* other) {
  if (other != this) {
    label_.Swap(&other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListLabelsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLabelsResponse_descriptor_;
  metadata.reflection = ListLabelsResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
