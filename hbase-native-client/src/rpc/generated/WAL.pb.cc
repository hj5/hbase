// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WAL.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WAL.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* WALHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WALHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* WALKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WALKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* FamilyScope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FamilyScope_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactionDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactionDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushDescriptor_StoreFlushDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushDescriptor_StoreFlushDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FlushDescriptor_FlushAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StoreDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulkLoadDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulkLoadDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionEventDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionEventDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegionEventDescriptor_EventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WALTrailer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WALTrailer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScopeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WAL_2eproto() {
  protobuf_AddDesc_WAL_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WAL.proto");
  GOOGLE_CHECK(file != NULL);
  WALHeader_descriptor_ = file->message_type(0);
  static const int WALHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, has_compression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, encryption_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, has_tag_compression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, writer_cls_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, cell_codec_cls_name_),
  };
  WALHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WALHeader_descriptor_,
      WALHeader::default_instance_,
      WALHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WALHeader));
  WALKey_descriptor_ = file->message_type(1);
  static const int WALKey_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, encoded_region_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, log_sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, write_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, scopes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, following_kv_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, cluster_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, noncegroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, orig_sequence_number_),
  };
  WALKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WALKey_descriptor_,
      WALKey::default_instance_,
      WALKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WALKey));
  FamilyScope_descriptor_ = file->message_type(2);
  static const int FamilyScope_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyScope, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyScope, scope_type_),
  };
  FamilyScope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FamilyScope_descriptor_,
      FamilyScope::default_instance_,
      FamilyScope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyScope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FamilyScope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FamilyScope));
  CompactionDescriptor_descriptor_ = file->message_type(3);
  static const int CompactionDescriptor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, encoded_region_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, compaction_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, compaction_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, store_home_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, region_name_),
  };
  CompactionDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompactionDescriptor_descriptor_,
      CompactionDescriptor::default_instance_,
      CompactionDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactionDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompactionDescriptor));
  FlushDescriptor_descriptor_ = file->message_type(4);
  static const int FlushDescriptor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, encoded_region_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, flush_sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, store_flushes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, region_name_),
  };
  FlushDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushDescriptor_descriptor_,
      FlushDescriptor::default_instance_,
      FlushDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushDescriptor));
  FlushDescriptor_StoreFlushDescriptor_descriptor_ = FlushDescriptor_descriptor_->nested_type(0);
  static const int FlushDescriptor_StoreFlushDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor_StoreFlushDescriptor, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor_StoreFlushDescriptor, store_home_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor_StoreFlushDescriptor, flush_output_),
  };
  FlushDescriptor_StoreFlushDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushDescriptor_StoreFlushDescriptor_descriptor_,
      FlushDescriptor_StoreFlushDescriptor::default_instance_,
      FlushDescriptor_StoreFlushDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor_StoreFlushDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushDescriptor_StoreFlushDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushDescriptor_StoreFlushDescriptor));
  FlushDescriptor_FlushAction_descriptor_ = FlushDescriptor_descriptor_->enum_type(0);
  StoreDescriptor_descriptor_ = file->message_type(5);
  static const int StoreDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, store_home_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, store_file_),
  };
  StoreDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreDescriptor_descriptor_,
      StoreDescriptor::default_instance_,
      StoreDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreDescriptor));
  BulkLoadDescriptor_descriptor_ = file->message_type(6);
  static const int BulkLoadDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadDescriptor, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadDescriptor, encoded_region_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadDescriptor, stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadDescriptor, bulkload_seq_num_),
  };
  BulkLoadDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BulkLoadDescriptor_descriptor_,
      BulkLoadDescriptor::default_instance_,
      BulkLoadDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulkLoadDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BulkLoadDescriptor));
  RegionEventDescriptor_descriptor_ = file->message_type(7);
  static const int RegionEventDescriptor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, encoded_region_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, log_sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, region_name_),
  };
  RegionEventDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionEventDescriptor_descriptor_,
      RegionEventDescriptor::default_instance_,
      RegionEventDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionEventDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionEventDescriptor));
  RegionEventDescriptor_EventType_descriptor_ = RegionEventDescriptor_descriptor_->enum_type(0);
  WALTrailer_descriptor_ = file->message_type(8);
  static const int WALTrailer_offsets_[1] = {
  };
  WALTrailer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WALTrailer_descriptor_,
      WALTrailer::default_instance_,
      WALTrailer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALTrailer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WALTrailer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WALTrailer));
  ScopeType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WAL_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WALHeader_descriptor_, &WALHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WALKey_descriptor_, &WALKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FamilyScope_descriptor_, &FamilyScope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompactionDescriptor_descriptor_, &CompactionDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushDescriptor_descriptor_, &FlushDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushDescriptor_StoreFlushDescriptor_descriptor_, &FlushDescriptor_StoreFlushDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreDescriptor_descriptor_, &StoreDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BulkLoadDescriptor_descriptor_, &BulkLoadDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionEventDescriptor_descriptor_, &RegionEventDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WALTrailer_descriptor_, &WALTrailer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WAL_2eproto() {
  delete WALHeader::default_instance_;
  delete WALHeader_reflection_;
  delete WALKey::default_instance_;
  delete WALKey_reflection_;
  delete FamilyScope::default_instance_;
  delete FamilyScope_reflection_;
  delete CompactionDescriptor::default_instance_;
  delete CompactionDescriptor_reflection_;
  delete FlushDescriptor::default_instance_;
  delete FlushDescriptor_reflection_;
  delete FlushDescriptor_StoreFlushDescriptor::default_instance_;
  delete FlushDescriptor_StoreFlushDescriptor_reflection_;
  delete StoreDescriptor::default_instance_;
  delete StoreDescriptor_reflection_;
  delete BulkLoadDescriptor::default_instance_;
  delete BulkLoadDescriptor_reflection_;
  delete RegionEventDescriptor::default_instance_;
  delete RegionEventDescriptor_reflection_;
  delete WALTrailer::default_instance_;
  delete WALTrailer_reflection_;
}

void protobuf_AddDesc_WAL_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_Client_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tWAL.proto\022\010hbase.pb\032\013HBase.proto\032\014Clie"
    "nt.proto\"\217\001\n\tWALHeader\022\027\n\017has_compressio"
    "n\030\001 \001(\010\022\026\n\016encryption_key\030\002 \001(\014\022\033\n\023has_t"
    "ag_compression\030\003 \001(\010\022\027\n\017writer_cls_name\030"
    "\004 \001(\t\022\033\n\023cell_codec_cls_name\030\005 \001(\t\"\273\002\n\006W"
    "ALKey\022\033\n\023encoded_region_name\030\001 \002(\014\022\022\n\nta"
    "ble_name\030\002 \002(\014\022\033\n\023log_sequence_number\030\003 "
    "\002(\004\022\022\n\nwrite_time\030\004 \002(\004\022&\n\ncluster_id\030\005 "
    "\001(\0132\016.hbase.pb.UUIDB\002\030\001\022%\n\006scopes\030\006 \003(\0132"
    "\025.hbase.pb.FamilyScope\022\032\n\022following_kv_c"
    "ount\030\007 \001(\r\022#\n\013cluster_ids\030\010 \003(\0132\016.hbase."
    "pb.UUID\022\022\n\nnonceGroup\030\t \001(\004\022\r\n\005nonce\030\n \001"
    "(\004\022\034\n\024orig_sequence_number\030\013 \001(\004\"F\n\013Fami"
    "lyScope\022\016\n\006family\030\001 \002(\014\022\'\n\nscope_type\030\002 "
    "\002(\0162\023.hbase.pb.ScopeType\"\276\001\n\024CompactionD"
    "escriptor\022\022\n\ntable_name\030\001 \002(\014\022\033\n\023encoded"
    "_region_name\030\002 \002(\014\022\023\n\013family_name\030\003 \002(\014\022"
    "\030\n\020compaction_input\030\004 \003(\t\022\031\n\021compaction_"
    "output\030\005 \003(\t\022\026\n\016store_home_dir\030\006 \002(\t\022\023\n\013"
    "region_name\030\007 \001(\014\"\244\003\n\017FlushDescriptor\0225\n"
    "\006action\030\001 \002(\0162%.hbase.pb.FlushDescriptor"
    ".FlushAction\022\022\n\ntable_name\030\002 \002(\014\022\033\n\023enco"
    "ded_region_name\030\003 \002(\014\022\035\n\025flush_sequence_"
    "number\030\004 \001(\004\022E\n\rstore_flushes\030\005 \003(\0132..hb"
    "ase.pb.FlushDescriptor.StoreFlushDescrip"
    "tor\022\023\n\013region_name\030\006 \001(\014\032Y\n\024StoreFlushDe"
    "scriptor\022\023\n\013family_name\030\001 \002(\014\022\026\n\016store_h"
    "ome_dir\030\002 \002(\t\022\024\n\014flush_output\030\003 \003(\t\"S\n\013F"
    "lushAction\022\017\n\013START_FLUSH\020\000\022\020\n\014COMMIT_FL"
    "USH\020\001\022\017\n\013ABORT_FLUSH\020\002\022\020\n\014CANNOT_FLUSH\020\003"
    "\"R\n\017StoreDescriptor\022\023\n\013family_name\030\001 \002(\014"
    "\022\026\n\016store_home_dir\030\002 \002(\t\022\022\n\nstore_file\030\003"
    " \003(\t\"\237\001\n\022BulkLoadDescriptor\022\'\n\ntable_nam"
    "e\030\001 \002(\0132\023.hbase.pb.TableName\022\033\n\023encoded_"
    "region_name\030\002 \002(\014\022)\n\006stores\030\003 \003(\0132\031.hbas"
    "e.pb.StoreDescriptor\022\030\n\020bulkload_seq_num"
    "\030\004 \002(\003\"\272\002\n\025RegionEventDescriptor\022=\n\neven"
    "t_type\030\001 \002(\0162).hbase.pb.RegionEventDescr"
    "iptor.EventType\022\022\n\ntable_name\030\002 \002(\014\022\033\n\023e"
    "ncoded_region_name\030\003 \002(\014\022\033\n\023log_sequence"
    "_number\030\004 \001(\004\022)\n\006stores\030\005 \003(\0132\031.hbase.pb"
    ".StoreDescriptor\022$\n\006server\030\006 \001(\0132\024.hbase"
    ".pb.ServerName\022\023\n\013region_name\030\007 \001(\014\".\n\tE"
    "ventType\022\017\n\013REGION_OPEN\020\000\022\020\n\014REGION_CLOS"
    "E\020\001\"\014\n\nWALTrailer*F\n\tScopeType\022\033\n\027REPLIC"
    "ATION_SCOPE_LOCAL\020\000\022\034\n\030REPLICATION_SCOPE"
    "_GLOBAL\020\001B\?\n*org.apache.hadoop.hbase.pro"
    "tobuf.generatedB\tWALProtosH\001\210\001\000\240\001\001", 1914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WAL.proto", &protobuf_RegisterTypes);
  WALHeader::default_instance_ = new WALHeader();
  WALKey::default_instance_ = new WALKey();
  FamilyScope::default_instance_ = new FamilyScope();
  CompactionDescriptor::default_instance_ = new CompactionDescriptor();
  FlushDescriptor::default_instance_ = new FlushDescriptor();
  FlushDescriptor_StoreFlushDescriptor::default_instance_ = new FlushDescriptor_StoreFlushDescriptor();
  StoreDescriptor::default_instance_ = new StoreDescriptor();
  BulkLoadDescriptor::default_instance_ = new BulkLoadDescriptor();
  RegionEventDescriptor::default_instance_ = new RegionEventDescriptor();
  WALTrailer::default_instance_ = new WALTrailer();
  WALHeader::default_instance_->InitAsDefaultInstance();
  WALKey::default_instance_->InitAsDefaultInstance();
  FamilyScope::default_instance_->InitAsDefaultInstance();
  CompactionDescriptor::default_instance_->InitAsDefaultInstance();
  FlushDescriptor::default_instance_->InitAsDefaultInstance();
  FlushDescriptor_StoreFlushDescriptor::default_instance_->InitAsDefaultInstance();
  StoreDescriptor::default_instance_->InitAsDefaultInstance();
  BulkLoadDescriptor::default_instance_->InitAsDefaultInstance();
  RegionEventDescriptor::default_instance_->InitAsDefaultInstance();
  WALTrailer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WAL_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WAL_2eproto {
  StaticDescriptorInitializer_WAL_2eproto() {
    protobuf_AddDesc_WAL_2eproto();
  }
} static_descriptor_initializer_WAL_2eproto_;
const ::google::protobuf::EnumDescriptor* ScopeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScopeType_descriptor_;
}
bool ScopeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WALHeader::kHasCompressionFieldNumber;
const int WALHeader::kEncryptionKeyFieldNumber;
const int WALHeader::kHasTagCompressionFieldNumber;
const int WALHeader::kWriterClsNameFieldNumber;
const int WALHeader::kCellCodecClsNameFieldNumber;
#endif  // !_MSC_VER

WALHeader::WALHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WALHeader::InitAsDefaultInstance() {
}

WALHeader::WALHeader(const WALHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WALHeader::SharedCtor() {
  _cached_size_ = 0;
  has_compression_ = false;
  encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_tag_compression_ = false;
  writer_cls_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_codec_cls_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WALHeader::~WALHeader() {
  SharedDtor();
}

void WALHeader::SharedDtor() {
  if (encryption_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encryption_key_;
  }
  if (writer_cls_name_ != &::google::protobuf::internal::kEmptyString) {
    delete writer_cls_name_;
  }
  if (cell_codec_cls_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_codec_cls_name_;
  }
  if (this != default_instance_) {
  }
}

void WALHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WALHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WALHeader_descriptor_;
}

const WALHeader& WALHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

WALHeader* WALHeader::default_instance_ = NULL;

WALHeader* WALHeader::New() const {
  return new WALHeader;
}

void WALHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    has_compression_ = false;
    if (has_encryption_key()) {
      if (encryption_key_ != &::google::protobuf::internal::kEmptyString) {
        encryption_key_->clear();
      }
    }
    has_tag_compression_ = false;
    if (has_writer_cls_name()) {
      if (writer_cls_name_ != &::google::protobuf::internal::kEmptyString) {
        writer_cls_name_->clear();
      }
    }
    if (has_cell_codec_cls_name()) {
      if (cell_codec_cls_name_ != &::google::protobuf::internal::kEmptyString) {
        cell_codec_cls_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WALHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_compression = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_compression_)));
          set_has_has_compression();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encryption_key;
        break;
      }

      // optional bytes encryption_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryption_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_tag_compression;
        break;
      }

      // optional bool has_tag_compression = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_tag_compression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_tag_compression_)));
          set_has_has_tag_compression();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_writer_cls_name;
        break;
      }

      // optional string writer_cls_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_writer_cls_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_writer_cls_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->writer_cls_name().data(), this->writer_cls_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell_codec_cls_name;
        break;
      }

      // optional string cell_codec_cls_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_codec_cls_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_codec_cls_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cell_codec_cls_name().data(), this->cell_codec_cls_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WALHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool has_compression = 1;
  if (has_has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_compression(), output);
  }

  // optional bytes encryption_key = 2;
  if (has_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encryption_key(), output);
  }

  // optional bool has_tag_compression = 3;
  if (has_has_tag_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_tag_compression(), output);
  }

  // optional string writer_cls_name = 4;
  if (has_writer_cls_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->writer_cls_name().data(), this->writer_cls_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->writer_cls_name(), output);
  }

  // optional string cell_codec_cls_name = 5;
  if (has_cell_codec_cls_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell_codec_cls_name().data(), this->cell_codec_cls_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cell_codec_cls_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WALHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool has_compression = 1;
  if (has_has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_compression(), target);
  }

  // optional bytes encryption_key = 2;
  if (has_encryption_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encryption_key(), target);
  }

  // optional bool has_tag_compression = 3;
  if (has_has_tag_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_tag_compression(), target);
  }

  // optional string writer_cls_name = 4;
  if (has_writer_cls_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->writer_cls_name().data(), this->writer_cls_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->writer_cls_name(), target);
  }

  // optional string cell_codec_cls_name = 5;
  if (has_cell_codec_cls_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell_codec_cls_name().data(), this->cell_codec_cls_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cell_codec_cls_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WALHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool has_compression = 1;
    if (has_has_compression()) {
      total_size += 1 + 1;
    }

    // optional bytes encryption_key = 2;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional bool has_tag_compression = 3;
    if (has_has_tag_compression()) {
      total_size += 1 + 1;
    }

    // optional string writer_cls_name = 4;
    if (has_writer_cls_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->writer_cls_name());
    }

    // optional string cell_codec_cls_name = 5;
    if (has_cell_codec_cls_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell_codec_cls_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WALHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WALHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WALHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WALHeader::MergeFrom(const WALHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_compression()) {
      set_has_compression(from.has_compression());
    }
    if (from.has_encryption_key()) {
      set_encryption_key(from.encryption_key());
    }
    if (from.has_has_tag_compression()) {
      set_has_tag_compression(from.has_tag_compression());
    }
    if (from.has_writer_cls_name()) {
      set_writer_cls_name(from.writer_cls_name());
    }
    if (from.has_cell_codec_cls_name()) {
      set_cell_codec_cls_name(from.cell_codec_cls_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WALHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALHeader::CopyFrom(const WALHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALHeader::IsInitialized() const {

  return true;
}

void WALHeader::Swap(WALHeader* other) {
  if (other != this) {
    std::swap(has_compression_, other->has_compression_);
    std::swap(encryption_key_, other->encryption_key_);
    std::swap(has_tag_compression_, other->has_tag_compression_);
    std::swap(writer_cls_name_, other->writer_cls_name_);
    std::swap(cell_codec_cls_name_, other->cell_codec_cls_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WALHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WALHeader_descriptor_;
  metadata.reflection = WALHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WALKey::kEncodedRegionNameFieldNumber;
const int WALKey::kTableNameFieldNumber;
const int WALKey::kLogSequenceNumberFieldNumber;
const int WALKey::kWriteTimeFieldNumber;
const int WALKey::kClusterIdFieldNumber;
const int WALKey::kScopesFieldNumber;
const int WALKey::kFollowingKvCountFieldNumber;
const int WALKey::kClusterIdsFieldNumber;
const int WALKey::kNonceGroupFieldNumber;
const int WALKey::kNonceFieldNumber;
const int WALKey::kOrigSequenceNumberFieldNumber;
#endif  // !_MSC_VER

WALKey::WALKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WALKey::InitAsDefaultInstance() {
  cluster_id_ = const_cast< ::hbase::pb::UUID*>(&::hbase::pb::UUID::default_instance());
}

WALKey::WALKey(const WALKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WALKey::SharedCtor() {
  _cached_size_ = 0;
  encoded_region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_sequence_number_ = GOOGLE_ULONGLONG(0);
  write_time_ = GOOGLE_ULONGLONG(0);
  cluster_id_ = NULL;
  following_kv_count_ = 0u;
  noncegroup_ = GOOGLE_ULONGLONG(0);
  nonce_ = GOOGLE_ULONGLONG(0);
  orig_sequence_number_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WALKey::~WALKey() {
  SharedDtor();
}

void WALKey::SharedDtor() {
  if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_region_name_;
  }
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
    delete cluster_id_;
  }
}

void WALKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WALKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WALKey_descriptor_;
}

const WALKey& WALKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

WALKey* WALKey::default_instance_ = NULL;

WALKey* WALKey::New() const {
  return new WALKey;
}

void WALKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encoded_region_name()) {
      if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
        encoded_region_name_->clear();
      }
    }
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    log_sequence_number_ = GOOGLE_ULONGLONG(0);
    write_time_ = GOOGLE_ULONGLONG(0);
    if (has_cluster_id()) {
      if (cluster_id_ != NULL) cluster_id_->::hbase::pb::UUID::Clear();
    }
    following_kv_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    noncegroup_ = GOOGLE_ULONGLONG(0);
    nonce_ = GOOGLE_ULONGLONG(0);
    orig_sequence_number_ = GOOGLE_ULONGLONG(0);
  }
  scopes_.Clear();
  cluster_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WALKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encoded_region_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_log_sequence_number;
        break;
      }

      // required uint64 log_sequence_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_sequence_number_)));
          set_has_log_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_write_time;
        break;
      }

      // required uint64 write_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_time_)));
          set_has_write_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cluster_id;
        break;
      }

      // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_scopes;
        break;
      }

      // repeated .hbase.pb.FamilyScope scopes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scopes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scopes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_scopes;
        if (input->ExpectTag(56)) goto parse_following_kv_count;
        break;
      }

      // optional uint32 following_kv_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_following_kv_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &following_kv_count_)));
          set_has_following_kv_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cluster_ids;
        break;
      }

      // repeated .hbase.pb.UUID cluster_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cluster_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cluster_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cluster_ids;
        if (input->ExpectTag(72)) goto parse_nonceGroup;
        break;
      }

      // optional uint64 nonceGroup = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonceGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &noncegroup_)));
          set_has_noncegroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_orig_sequence_number;
        break;
      }

      // optional uint64 orig_sequence_number = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orig_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orig_sequence_number_)));
          set_has_orig_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WALKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes encoded_region_name = 1;
  if (has_encoded_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encoded_region_name(), output);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table_name(), output);
  }

  // required uint64 log_sequence_number = 3;
  if (has_log_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->log_sequence_number(), output);
  }

  // required uint64 write_time = 4;
  if (has_write_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_time(), output);
  }

  // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cluster_id(), output);
  }

  // repeated .hbase.pb.FamilyScope scopes = 6;
  for (int i = 0; i < this->scopes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scopes(i), output);
  }

  // optional uint32 following_kv_count = 7;
  if (has_following_kv_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->following_kv_count(), output);
  }

  // repeated .hbase.pb.UUID cluster_ids = 8;
  for (int i = 0; i < this->cluster_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cluster_ids(i), output);
  }

  // optional uint64 nonceGroup = 9;
  if (has_noncegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->noncegroup(), output);
  }

  // optional uint64 nonce = 10;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->nonce(), output);
  }

  // optional uint64 orig_sequence_number = 11;
  if (has_orig_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->orig_sequence_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WALKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encoded_region_name = 1;
  if (has_encoded_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encoded_region_name(), target);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required uint64 log_sequence_number = 3;
  if (has_log_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->log_sequence_number(), target);
  }

  // required uint64 write_time = 4;
  if (has_write_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->write_time(), target);
  }

  // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cluster_id(), target);
  }

  // repeated .hbase.pb.FamilyScope scopes = 6;
  for (int i = 0; i < this->scopes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scopes(i), target);
  }

  // optional uint32 following_kv_count = 7;
  if (has_following_kv_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->following_kv_count(), target);
  }

  // repeated .hbase.pb.UUID cluster_ids = 8;
  for (int i = 0; i < this->cluster_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cluster_ids(i), target);
  }

  // optional uint64 nonceGroup = 9;
  if (has_noncegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->noncegroup(), target);
  }

  // optional uint64 nonce = 10;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->nonce(), target);
  }

  // optional uint64 orig_sequence_number = 11;
  if (has_orig_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->orig_sequence_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WALKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encoded_region_name = 1;
    if (has_encoded_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_region_name());
    }

    // required bytes table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required uint64 log_sequence_number = 3;
    if (has_log_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_sequence_number());
    }

    // required uint64 write_time = 4;
    if (has_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_time());
    }

    // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster_id());
    }

    // optional uint32 following_kv_count = 7;
    if (has_following_kv_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->following_kv_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 nonceGroup = 9;
    if (has_noncegroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->noncegroup());
    }

    // optional uint64 nonce = 10;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

    // optional uint64 orig_sequence_number = 11;
    if (has_orig_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orig_sequence_number());
    }

  }
  // repeated .hbase.pb.FamilyScope scopes = 6;
  total_size += 1 * this->scopes_size();
  for (int i = 0; i < this->scopes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scopes(i));
  }

  // repeated .hbase.pb.UUID cluster_ids = 8;
  total_size += 1 * this->cluster_ids_size();
  for (int i = 0; i < this->cluster_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cluster_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WALKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WALKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WALKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WALKey::MergeFrom(const WALKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  scopes_.MergeFrom(from.scopes_);
  cluster_ids_.MergeFrom(from.cluster_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoded_region_name()) {
      set_encoded_region_name(from.encoded_region_name());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_log_sequence_number()) {
      set_log_sequence_number(from.log_sequence_number());
    }
    if (from.has_write_time()) {
      set_write_time(from.write_time());
    }
    if (from.has_cluster_id()) {
      mutable_cluster_id()->::hbase::pb::UUID::MergeFrom(from.cluster_id());
    }
    if (from.has_following_kv_count()) {
      set_following_kv_count(from.following_kv_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_noncegroup()) {
      set_noncegroup(from.noncegroup());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_orig_sequence_number()) {
      set_orig_sequence_number(from.orig_sequence_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WALKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALKey::CopyFrom(const WALKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_cluster_id()) {
    if (!this->cluster_id().IsInitialized()) return false;
  }
  for (int i = 0; i < scopes_size(); i++) {
    if (!this->scopes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cluster_ids_size(); i++) {
    if (!this->cluster_ids(i).IsInitialized()) return false;
  }
  return true;
}

void WALKey::Swap(WALKey* other) {
  if (other != this) {
    std::swap(encoded_region_name_, other->encoded_region_name_);
    std::swap(table_name_, other->table_name_);
    std::swap(log_sequence_number_, other->log_sequence_number_);
    std::swap(write_time_, other->write_time_);
    std::swap(cluster_id_, other->cluster_id_);
    scopes_.Swap(&other->scopes_);
    std::swap(following_kv_count_, other->following_kv_count_);
    cluster_ids_.Swap(&other->cluster_ids_);
    std::swap(noncegroup_, other->noncegroup_);
    std::swap(nonce_, other->nonce_);
    std::swap(orig_sequence_number_, other->orig_sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WALKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WALKey_descriptor_;
  metadata.reflection = WALKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FamilyScope::kFamilyFieldNumber;
const int FamilyScope::kScopeTypeFieldNumber;
#endif  // !_MSC_VER

FamilyScope::FamilyScope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FamilyScope::InitAsDefaultInstance() {
}

FamilyScope::FamilyScope(const FamilyScope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FamilyScope::SharedCtor() {
  _cached_size_ = 0;
  family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scope_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FamilyScope::~FamilyScope() {
  SharedDtor();
}

void FamilyScope::SharedDtor() {
  if (family_ != &::google::protobuf::internal::kEmptyString) {
    delete family_;
  }
  if (this != default_instance_) {
  }
}

void FamilyScope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FamilyScope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FamilyScope_descriptor_;
}

const FamilyScope& FamilyScope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

FamilyScope* FamilyScope::default_instance_ = NULL;

FamilyScope* FamilyScope::New() const {
  return new FamilyScope;
}

void FamilyScope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family()) {
      if (family_ != &::google::protobuf::internal::kEmptyString) {
        family_->clear();
      }
    }
    scope_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FamilyScope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scope_type;
        break;
      }

      // required .hbase.pb.ScopeType scope_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scope_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::ScopeType_IsValid(value)) {
            set_scope_type(static_cast< ::hbase::pb::ScopeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FamilyScope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family = 1;
  if (has_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family(), output);
  }

  // required .hbase.pb.ScopeType scope_type = 2;
  if (has_scope_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scope_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FamilyScope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family = 1;
  if (has_family()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // required .hbase.pb.ScopeType scope_type = 2;
  if (has_scope_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scope_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FamilyScope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family = 1;
    if (has_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family());
    }

    // required .hbase.pb.ScopeType scope_type = 2;
    if (has_scope_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FamilyScope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FamilyScope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FamilyScope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FamilyScope::MergeFrom(const FamilyScope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family()) {
      set_family(from.family());
    }
    if (from.has_scope_type()) {
      set_scope_type(from.scope_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FamilyScope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyScope::CopyFrom(const FamilyScope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyScope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FamilyScope::Swap(FamilyScope* other) {
  if (other != this) {
    std::swap(family_, other->family_);
    std::swap(scope_type_, other->scope_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FamilyScope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FamilyScope_descriptor_;
  metadata.reflection = FamilyScope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompactionDescriptor::kTableNameFieldNumber;
const int CompactionDescriptor::kEncodedRegionNameFieldNumber;
const int CompactionDescriptor::kFamilyNameFieldNumber;
const int CompactionDescriptor::kCompactionInputFieldNumber;
const int CompactionDescriptor::kCompactionOutputFieldNumber;
const int CompactionDescriptor::kStoreHomeDirFieldNumber;
const int CompactionDescriptor::kRegionNameFieldNumber;
#endif  // !_MSC_VER

CompactionDescriptor::CompactionDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompactionDescriptor::InitAsDefaultInstance() {
}

CompactionDescriptor::CompactionDescriptor(const CompactionDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompactionDescriptor::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  store_home_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompactionDescriptor::~CompactionDescriptor() {
  SharedDtor();
}

void CompactionDescriptor::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_region_name_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (store_home_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete store_home_dir_;
  }
  if (region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete region_name_;
  }
  if (this != default_instance_) {
  }
}

void CompactionDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactionDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactionDescriptor_descriptor_;
}

const CompactionDescriptor& CompactionDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

CompactionDescriptor* CompactionDescriptor::default_instance_ = NULL;

CompactionDescriptor* CompactionDescriptor::New() const {
  return new CompactionDescriptor;
}

void CompactionDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_encoded_region_name()) {
      if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
        encoded_region_name_->clear();
      }
    }
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    if (has_store_home_dir()) {
      if (store_home_dir_ != &::google::protobuf::internal::kEmptyString) {
        store_home_dir_->clear();
      }
    }
    if (has_region_name()) {
      if (region_name_ != &::google::protobuf::internal::kEmptyString) {
        region_name_->clear();
      }
    }
  }
  compaction_input_.Clear();
  compaction_output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompactionDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_region_name;
        break;
      }

      // required bytes encoded_region_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_name;
        break;
      }

      // required bytes family_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_compaction_input;
        break;
      }

      // repeated string compaction_input = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compaction_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_compaction_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compaction_input(this->compaction_input_size() - 1).data(),
            this->compaction_input(this->compaction_input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_compaction_input;
        if (input->ExpectTag(42)) goto parse_compaction_output;
        break;
      }

      // repeated string compaction_output = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compaction_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_compaction_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compaction_output(this->compaction_output_size() - 1).data(),
            this->compaction_output(this->compaction_output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_compaction_output;
        if (input->ExpectTag(50)) goto parse_store_home_dir;
        break;
      }

      // required string store_home_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_home_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_home_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_home_dir().data(), this->store_home_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_region_name;
        break;
      }

      // optional bytes region_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompactionDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // required bytes encoded_region_name = 2;
  if (has_encoded_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_region_name(), output);
  }

  // required bytes family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->family_name(), output);
  }

  // repeated string compaction_input = 4;
  for (int i = 0; i < this->compaction_input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->compaction_input(i).data(), this->compaction_input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->compaction_input(i), output);
  }

  // repeated string compaction_output = 5;
  for (int i = 0; i < this->compaction_output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->compaction_output(i).data(), this->compaction_output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->compaction_output(i), output);
  }

  // required string store_home_dir = 6;
  if (has_store_home_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_home_dir().data(), this->store_home_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->store_home_dir(), output);
  }

  // optional bytes region_name = 7;
  if (has_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->region_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompactionDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required bytes encoded_region_name = 2;
  if (has_encoded_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_region_name(), target);
  }

  // required bytes family_name = 3;
  if (has_family_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->family_name(), target);
  }

  // repeated string compaction_input = 4;
  for (int i = 0; i < this->compaction_input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compaction_input(i).data(), this->compaction_input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->compaction_input(i), target);
  }

  // repeated string compaction_output = 5;
  for (int i = 0; i < this->compaction_output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compaction_output(i).data(), this->compaction_output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->compaction_output(i), target);
  }

  // required string store_home_dir = 6;
  if (has_store_home_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_home_dir().data(), this->store_home_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->store_home_dir(), target);
  }

  // optional bytes region_name = 7;
  if (has_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->region_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompactionDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes encoded_region_name = 2;
    if (has_encoded_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_region_name());
    }

    // required bytes family_name = 3;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family_name());
    }

    // required string store_home_dir = 6;
    if (has_store_home_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_home_dir());
    }

    // optional bytes region_name = 7;
    if (has_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region_name());
    }

  }
  // repeated string compaction_input = 4;
  total_size += 1 * this->compaction_input_size();
  for (int i = 0; i < this->compaction_input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->compaction_input(i));
  }

  // repeated string compaction_output = 5;
  total_size += 1 * this->compaction_output_size();
  for (int i = 0; i < this->compaction_output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->compaction_output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactionDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompactionDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompactionDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompactionDescriptor::MergeFrom(const CompactionDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  compaction_input_.MergeFrom(from.compaction_input_);
  compaction_output_.MergeFrom(from.compaction_output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_encoded_region_name()) {
      set_encoded_region_name(from.encoded_region_name());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_store_home_dir()) {
      set_store_home_dir(from.store_home_dir());
    }
    if (from.has_region_name()) {
      set_region_name(from.region_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompactionDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionDescriptor::CopyFrom(const CompactionDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void CompactionDescriptor::Swap(CompactionDescriptor* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(encoded_region_name_, other->encoded_region_name_);
    std::swap(family_name_, other->family_name_);
    compaction_input_.Swap(&other->compaction_input_);
    compaction_output_.Swap(&other->compaction_output_);
    std::swap(store_home_dir_, other->store_home_dir_);
    std::swap(region_name_, other->region_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompactionDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactionDescriptor_descriptor_;
  metadata.reflection = CompactionDescriptor_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FlushDescriptor_FlushAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushDescriptor_FlushAction_descriptor_;
}
bool FlushDescriptor_FlushAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FlushDescriptor_FlushAction FlushDescriptor::START_FLUSH;
const FlushDescriptor_FlushAction FlushDescriptor::COMMIT_FLUSH;
const FlushDescriptor_FlushAction FlushDescriptor::ABORT_FLUSH;
const FlushDescriptor_FlushAction FlushDescriptor::CANNOT_FLUSH;
const FlushDescriptor_FlushAction FlushDescriptor::FlushAction_MIN;
const FlushDescriptor_FlushAction FlushDescriptor::FlushAction_MAX;
const int FlushDescriptor::FlushAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FlushDescriptor_StoreFlushDescriptor::kFamilyNameFieldNumber;
const int FlushDescriptor_StoreFlushDescriptor::kStoreHomeDirFieldNumber;
const int FlushDescriptor_StoreFlushDescriptor::kFlushOutputFieldNumber;
#endif  // !_MSC_VER

FlushDescriptor_StoreFlushDescriptor::FlushDescriptor_StoreFlushDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushDescriptor_StoreFlushDescriptor::InitAsDefaultInstance() {
}

FlushDescriptor_StoreFlushDescriptor::FlushDescriptor_StoreFlushDescriptor(const FlushDescriptor_StoreFlushDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushDescriptor_StoreFlushDescriptor::SharedCtor() {
  _cached_size_ = 0;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  store_home_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushDescriptor_StoreFlushDescriptor::~FlushDescriptor_StoreFlushDescriptor() {
  SharedDtor();
}

void FlushDescriptor_StoreFlushDescriptor::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (store_home_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete store_home_dir_;
  }
  if (this != default_instance_) {
  }
}

void FlushDescriptor_StoreFlushDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushDescriptor_StoreFlushDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushDescriptor_StoreFlushDescriptor_descriptor_;
}

const FlushDescriptor_StoreFlushDescriptor& FlushDescriptor_StoreFlushDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

FlushDescriptor_StoreFlushDescriptor* FlushDescriptor_StoreFlushDescriptor::default_instance_ = NULL;

FlushDescriptor_StoreFlushDescriptor* FlushDescriptor_StoreFlushDescriptor::New() const {
  return new FlushDescriptor_StoreFlushDescriptor;
}

void FlushDescriptor_StoreFlushDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    if (has_store_home_dir()) {
      if (store_home_dir_ != &::google::protobuf::internal::kEmptyString) {
        store_home_dir_->clear();
      }
    }
  }
  flush_output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushDescriptor_StoreFlushDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_home_dir;
        break;
      }

      // required string store_home_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_home_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_home_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_home_dir().data(), this->store_home_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_flush_output;
        break;
      }

      // repeated string flush_output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flush_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_flush_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flush_output(this->flush_output_size() - 1).data(),
            this->flush_output(this->flush_output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_flush_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushDescriptor_StoreFlushDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family_name(), output);
  }

  // required string store_home_dir = 2;
  if (has_store_home_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_home_dir().data(), this->store_home_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->store_home_dir(), output);
  }

  // repeated string flush_output = 3;
  for (int i = 0; i < this->flush_output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->flush_output(i).data(), this->flush_output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->flush_output(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushDescriptor_StoreFlushDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // required string store_home_dir = 2;
  if (has_store_home_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_home_dir().data(), this->store_home_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->store_home_dir(), target);
  }

  // repeated string flush_output = 3;
  for (int i = 0; i < this->flush_output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flush_output(i).data(), this->flush_output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->flush_output(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushDescriptor_StoreFlushDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family_name = 1;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family_name());
    }

    // required string store_home_dir = 2;
    if (has_store_home_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_home_dir());
    }

  }
  // repeated string flush_output = 3;
  total_size += 1 * this->flush_output_size();
  for (int i = 0; i < this->flush_output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->flush_output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushDescriptor_StoreFlushDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushDescriptor_StoreFlushDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushDescriptor_StoreFlushDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushDescriptor_StoreFlushDescriptor::MergeFrom(const FlushDescriptor_StoreFlushDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  flush_output_.MergeFrom(from.flush_output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_store_home_dir()) {
      set_store_home_dir(from.store_home_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushDescriptor_StoreFlushDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDescriptor_StoreFlushDescriptor::CopyFrom(const FlushDescriptor_StoreFlushDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDescriptor_StoreFlushDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FlushDescriptor_StoreFlushDescriptor::Swap(FlushDescriptor_StoreFlushDescriptor* other) {
  if (other != this) {
    std::swap(family_name_, other->family_name_);
    std::swap(store_home_dir_, other->store_home_dir_);
    flush_output_.Swap(&other->flush_output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushDescriptor_StoreFlushDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushDescriptor_StoreFlushDescriptor_descriptor_;
  metadata.reflection = FlushDescriptor_StoreFlushDescriptor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FlushDescriptor::kActionFieldNumber;
const int FlushDescriptor::kTableNameFieldNumber;
const int FlushDescriptor::kEncodedRegionNameFieldNumber;
const int FlushDescriptor::kFlushSequenceNumberFieldNumber;
const int FlushDescriptor::kStoreFlushesFieldNumber;
const int FlushDescriptor::kRegionNameFieldNumber;
#endif  // !_MSC_VER

FlushDescriptor::FlushDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushDescriptor::InitAsDefaultInstance() {
}

FlushDescriptor::FlushDescriptor(const FlushDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushDescriptor::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flush_sequence_number_ = GOOGLE_ULONGLONG(0);
  region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushDescriptor::~FlushDescriptor() {
  SharedDtor();
}

void FlushDescriptor::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_region_name_;
  }
  if (region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete region_name_;
  }
  if (this != default_instance_) {
  }
}

void FlushDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushDescriptor_descriptor_;
}

const FlushDescriptor& FlushDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

FlushDescriptor* FlushDescriptor::default_instance_ = NULL;

FlushDescriptor* FlushDescriptor::New() const {
  return new FlushDescriptor;
}

void FlushDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_encoded_region_name()) {
      if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
        encoded_region_name_->clear();
      }
    }
    flush_sequence_number_ = GOOGLE_ULONGLONG(0);
    if (has_region_name()) {
      if (region_name_ != &::google::protobuf::internal::kEmptyString) {
        region_name_->clear();
      }
    }
  }
  store_flushes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::FlushDescriptor_FlushAction_IsValid(value)) {
            set_action(static_cast< ::hbase::pb::FlushDescriptor_FlushAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encoded_region_name;
        break;
      }

      // required bytes encoded_region_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flush_sequence_number;
        break;
      }

      // optional uint64 flush_sequence_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_sequence_number_)));
          set_has_flush_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_store_flushes;
        break;
      }

      // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_flushes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_flushes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_store_flushes;
        if (input->ExpectTag(50)) goto parse_region_name;
        break;
      }

      // optional bytes region_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table_name(), output);
  }

  // required bytes encoded_region_name = 3;
  if (has_encoded_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encoded_region_name(), output);
  }

  // optional uint64 flush_sequence_number = 4;
  if (has_flush_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->flush_sequence_number(), output);
  }

  // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
  for (int i = 0; i < this->store_flushes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->store_flushes(i), output);
  }

  // optional bytes region_name = 6;
  if (has_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->region_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required bytes encoded_region_name = 3;
  if (has_encoded_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encoded_region_name(), target);
  }

  // optional uint64 flush_sequence_number = 4;
  if (has_flush_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->flush_sequence_number(), target);
  }

  // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
  for (int i = 0; i < this->store_flushes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->store_flushes(i), target);
  }

  // optional bytes region_name = 6;
  if (has_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->region_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required bytes table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes encoded_region_name = 3;
    if (has_encoded_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_region_name());
    }

    // optional uint64 flush_sequence_number = 4;
    if (has_flush_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_sequence_number());
    }

    // optional bytes region_name = 6;
    if (has_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region_name());
    }

  }
  // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
  total_size += 1 * this->store_flushes_size();
  for (int i = 0; i < this->store_flushes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_flushes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushDescriptor::MergeFrom(const FlushDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_flushes_.MergeFrom(from.store_flushes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_encoded_region_name()) {
      set_encoded_region_name(from.encoded_region_name());
    }
    if (from.has_flush_sequence_number()) {
      set_flush_sequence_number(from.flush_sequence_number());
    }
    if (from.has_region_name()) {
      set_region_name(from.region_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDescriptor::CopyFrom(const FlushDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < store_flushes_size(); i++) {
    if (!this->store_flushes(i).IsInitialized()) return false;
  }
  return true;
}

void FlushDescriptor::Swap(FlushDescriptor* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(table_name_, other->table_name_);
    std::swap(encoded_region_name_, other->encoded_region_name_);
    std::swap(flush_sequence_number_, other->flush_sequence_number_);
    store_flushes_.Swap(&other->store_flushes_);
    std::swap(region_name_, other->region_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushDescriptor_descriptor_;
  metadata.reflection = FlushDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreDescriptor::kFamilyNameFieldNumber;
const int StoreDescriptor::kStoreHomeDirFieldNumber;
const int StoreDescriptor::kStoreFileFieldNumber;
#endif  // !_MSC_VER

StoreDescriptor::StoreDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreDescriptor::InitAsDefaultInstance() {
}

StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreDescriptor::SharedCtor() {
  _cached_size_ = 0;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  store_home_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreDescriptor::~StoreDescriptor() {
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (store_home_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete store_home_dir_;
  }
  if (this != default_instance_) {
  }
}

void StoreDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreDescriptor_descriptor_;
}

const StoreDescriptor& StoreDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

StoreDescriptor* StoreDescriptor::default_instance_ = NULL;

StoreDescriptor* StoreDescriptor::New() const {
  return new StoreDescriptor;
}

void StoreDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    if (has_store_home_dir()) {
      if (store_home_dir_ != &::google::protobuf::internal::kEmptyString) {
        store_home_dir_->clear();
      }
    }
  }
  store_file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_home_dir;
        break;
      }

      // required string store_home_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_home_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_home_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_home_dir().data(), this->store_home_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_store_file;
        break;
      }

      // repeated string store_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_store_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->store_file(this->store_file_size() - 1).data(),
            this->store_file(this->store_file_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_store_file;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->family_name(), output);
  }

  // required string store_home_dir = 2;
  if (has_store_home_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_home_dir().data(), this->store_home_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->store_home_dir(), output);
  }

  // repeated string store_file = 3;
  for (int i = 0; i < this->store_file_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->store_file(i).data(), this->store_file(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->store_file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes family_name = 1;
  if (has_family_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // required string store_home_dir = 2;
  if (has_store_home_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_home_dir().data(), this->store_home_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->store_home_dir(), target);
  }

  // repeated string store_file = 3;
  for (int i = 0; i < this->store_file_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->store_file(i).data(), this->store_file(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->store_file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes family_name = 1;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->family_name());
    }

    // required string store_home_dir = 2;
    if (has_store_home_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_home_dir());
    }

  }
  // repeated string store_file = 3;
  total_size += 1 * this->store_file_size();
  for (int i = 0; i < this->store_file_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->store_file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_file_.MergeFrom(from.store_file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_store_home_dir()) {
      set_store_home_dir(from.store_home_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StoreDescriptor::Swap(StoreDescriptor* other) {
  if (other != this) {
    std::swap(family_name_, other->family_name_);
    std::swap(store_home_dir_, other->store_home_dir_);
    store_file_.Swap(&other->store_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreDescriptor_descriptor_;
  metadata.reflection = StoreDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BulkLoadDescriptor::kTableNameFieldNumber;
const int BulkLoadDescriptor::kEncodedRegionNameFieldNumber;
const int BulkLoadDescriptor::kStoresFieldNumber;
const int BulkLoadDescriptor::kBulkloadSeqNumFieldNumber;
#endif  // !_MSC_VER

BulkLoadDescriptor::BulkLoadDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BulkLoadDescriptor::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

BulkLoadDescriptor::BulkLoadDescriptor(const BulkLoadDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BulkLoadDescriptor::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  encoded_region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bulkload_seq_num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulkLoadDescriptor::~BulkLoadDescriptor() {
  SharedDtor();
}

void BulkLoadDescriptor::SharedDtor() {
  if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_region_name_;
  }
  if (this != default_instance_) {
    delete table_name_;
  }
}

void BulkLoadDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulkLoadDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulkLoadDescriptor_descriptor_;
}

const BulkLoadDescriptor& BulkLoadDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

BulkLoadDescriptor* BulkLoadDescriptor::default_instance_ = NULL;

BulkLoadDescriptor* BulkLoadDescriptor::New() const {
  return new BulkLoadDescriptor;
}

void BulkLoadDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
    if (has_encoded_region_name()) {
      if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
        encoded_region_name_->clear();
      }
    }
    bulkload_seq_num_ = GOOGLE_LONGLONG(0);
  }
  stores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BulkLoadDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_region_name;
        break;
      }

      // required bytes encoded_region_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stores;
        break;
      }

      // repeated .hbase.pb.StoreDescriptor stores = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stores;
        if (input->ExpectTag(32)) goto parse_bulkload_seq_num;
        break;
      }

      // required int64 bulkload_seq_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulkload_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bulkload_seq_num_)));
          set_has_bulkload_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulkLoadDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  // required bytes encoded_region_name = 2;
  if (has_encoded_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_region_name(), output);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 3;
  for (int i = 0; i < this->stores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stores(i), output);
  }

  // required int64 bulkload_seq_num = 4;
  if (has_bulkload_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bulkload_seq_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BulkLoadDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  // required bytes encoded_region_name = 2;
  if (has_encoded_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_region_name(), target);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 3;
  for (int i = 0; i < this->stores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stores(i), target);
  }

  // required int64 bulkload_seq_num = 4;
  if (has_bulkload_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bulkload_seq_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BulkLoadDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

    // required bytes encoded_region_name = 2;
    if (has_encoded_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_region_name());
    }

    // required int64 bulkload_seq_num = 4;
    if (has_bulkload_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bulkload_seq_num());
    }

  }
  // repeated .hbase.pb.StoreDescriptor stores = 3;
  total_size += 1 * this->stores_size();
  for (int i = 0; i < this->stores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulkLoadDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BulkLoadDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BulkLoadDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BulkLoadDescriptor::MergeFrom(const BulkLoadDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  stores_.MergeFrom(from.stores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (from.has_encoded_region_name()) {
      set_encoded_region_name(from.encoded_region_name());
    }
    if (from.has_bulkload_seq_num()) {
      set_bulkload_seq_num(from.bulkload_seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BulkLoadDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadDescriptor::CopyFrom(const BulkLoadDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  for (int i = 0; i < stores_size(); i++) {
    if (!this->stores(i).IsInitialized()) return false;
  }
  return true;
}

void BulkLoadDescriptor::Swap(BulkLoadDescriptor* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(encoded_region_name_, other->encoded_region_name_);
    stores_.Swap(&other->stores_);
    std::swap(bulkload_seq_num_, other->bulkload_seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BulkLoadDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulkLoadDescriptor_descriptor_;
  metadata.reflection = BulkLoadDescriptor_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegionEventDescriptor_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionEventDescriptor_EventType_descriptor_;
}
bool RegionEventDescriptor_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegionEventDescriptor_EventType RegionEventDescriptor::REGION_OPEN;
const RegionEventDescriptor_EventType RegionEventDescriptor::REGION_CLOSE;
const RegionEventDescriptor_EventType RegionEventDescriptor::EventType_MIN;
const RegionEventDescriptor_EventType RegionEventDescriptor::EventType_MAX;
const int RegionEventDescriptor::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegionEventDescriptor::kEventTypeFieldNumber;
const int RegionEventDescriptor::kTableNameFieldNumber;
const int RegionEventDescriptor::kEncodedRegionNameFieldNumber;
const int RegionEventDescriptor::kLogSequenceNumberFieldNumber;
const int RegionEventDescriptor::kStoresFieldNumber;
const int RegionEventDescriptor::kServerFieldNumber;
const int RegionEventDescriptor::kRegionNameFieldNumber;
#endif  // !_MSC_VER

RegionEventDescriptor::RegionEventDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionEventDescriptor::InitAsDefaultInstance() {
  server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

RegionEventDescriptor::RegionEventDescriptor(const RegionEventDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionEventDescriptor::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_sequence_number_ = GOOGLE_ULONGLONG(0);
  server_ = NULL;
  region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionEventDescriptor::~RegionEventDescriptor() {
  SharedDtor();
}

void RegionEventDescriptor::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_region_name_;
  }
  if (region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete region_name_;
  }
  if (this != default_instance_) {
    delete server_;
  }
}

void RegionEventDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionEventDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionEventDescriptor_descriptor_;
}

const RegionEventDescriptor& RegionEventDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

RegionEventDescriptor* RegionEventDescriptor::default_instance_ = NULL;

RegionEventDescriptor* RegionEventDescriptor::New() const {
  return new RegionEventDescriptor;
}

void RegionEventDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_encoded_region_name()) {
      if (encoded_region_name_ != &::google::protobuf::internal::kEmptyString) {
        encoded_region_name_->clear();
      }
    }
    log_sequence_number_ = GOOGLE_ULONGLONG(0);
    if (has_server()) {
      if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
    }
    if (has_region_name()) {
      if (region_name_ != &::google::protobuf::internal::kEmptyString) {
        region_name_->clear();
      }
    }
  }
  stores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionEventDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionEventDescriptor_EventType_IsValid(value)) {
            set_event_type(static_cast< ::hbase::pb::RegionEventDescriptor_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encoded_region_name;
        break;
      }

      // required bytes encoded_region_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_log_sequence_number;
        break;
      }

      // optional uint64 log_sequence_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_sequence_number_)));
          set_has_log_sequence_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stores;
        break;
      }

      // repeated .hbase.pb.StoreDescriptor stores = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stores;
        if (input->ExpectTag(50)) goto parse_server;
        break;
      }

      // optional .hbase.pb.ServerName server = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_region_name;
        break;
      }

      // optional bytes region_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionEventDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table_name(), output);
  }

  // required bytes encoded_region_name = 3;
  if (has_encoded_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encoded_region_name(), output);
  }

  // optional uint64 log_sequence_number = 4;
  if (has_log_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_sequence_number(), output);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 5;
  for (int i = 0; i < this->stores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stores(i), output);
  }

  // optional .hbase.pb.ServerName server = 6;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->server(), output);
  }

  // optional bytes region_name = 7;
  if (has_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->region_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionEventDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required bytes encoded_region_name = 3;
  if (has_encoded_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encoded_region_name(), target);
  }

  // optional uint64 log_sequence_number = 4;
  if (has_log_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_sequence_number(), target);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 5;
  for (int i = 0; i < this->stores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stores(i), target);
  }

  // optional .hbase.pb.ServerName server = 6;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->server(), target);
  }

  // optional bytes region_name = 7;
  if (has_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->region_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionEventDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // required bytes table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required bytes encoded_region_name = 3;
    if (has_encoded_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_region_name());
    }

    // optional uint64 log_sequence_number = 4;
    if (has_log_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_sequence_number());
    }

    // optional .hbase.pb.ServerName server = 6;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // optional bytes region_name = 7;
    if (has_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region_name());
    }

  }
  // repeated .hbase.pb.StoreDescriptor stores = 5;
  total_size += 1 * this->stores_size();
  for (int i = 0; i < this->stores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionEventDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionEventDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionEventDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionEventDescriptor::MergeFrom(const RegionEventDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  stores_.MergeFrom(from.stores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_encoded_region_name()) {
      set_encoded_region_name(from.encoded_region_name());
    }
    if (from.has_log_sequence_number()) {
      set_log_sequence_number(from.log_sequence_number());
    }
    if (from.has_server()) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (from.has_region_name()) {
      set_region_name(from.region_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionEventDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionEventDescriptor::CopyFrom(const RegionEventDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionEventDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < stores_size(); i++) {
    if (!this->stores(i).IsInitialized()) return false;
  }
  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void RegionEventDescriptor::Swap(RegionEventDescriptor* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(table_name_, other->table_name_);
    std::swap(encoded_region_name_, other->encoded_region_name_);
    std::swap(log_sequence_number_, other->log_sequence_number_);
    stores_.Swap(&other->stores_);
    std::swap(server_, other->server_);
    std::swap(region_name_, other->region_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionEventDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionEventDescriptor_descriptor_;
  metadata.reflection = RegionEventDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WALTrailer::WALTrailer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WALTrailer::InitAsDefaultInstance() {
}

WALTrailer::WALTrailer(const WALTrailer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WALTrailer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WALTrailer::~WALTrailer() {
  SharedDtor();
}

void WALTrailer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WALTrailer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WALTrailer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WALTrailer_descriptor_;
}

const WALTrailer& WALTrailer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WAL_2eproto();
  return *default_instance_;
}

WALTrailer* WALTrailer::default_instance_ = NULL;

WALTrailer* WALTrailer::New() const {
  return new WALTrailer;
}

void WALTrailer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WALTrailer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WALTrailer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WALTrailer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WALTrailer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WALTrailer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WALTrailer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WALTrailer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WALTrailer::MergeFrom(const WALTrailer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WALTrailer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALTrailer::CopyFrom(const WALTrailer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALTrailer::IsInitialized() const {

  return true;
}

void WALTrailer::Swap(WALTrailer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WALTrailer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WALTrailer_descriptor_;
  metadata.reflection = WALTrailer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
