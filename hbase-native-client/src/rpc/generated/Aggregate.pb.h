// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Aggregate.proto

#ifndef PROTOBUF_Aggregate_2eproto__INCLUDED
#define PROTOBUF_Aggregate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Client.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Aggregate_2eproto();
void protobuf_AssignDesc_Aggregate_2eproto();
void protobuf_ShutdownFile_Aggregate_2eproto();

class AggregateRequest;
class AggregateResponse;

// ===================================================================

class AggregateRequest : public ::google::protobuf::Message {
 public:
  AggregateRequest();
  virtual ~AggregateRequest();

  AggregateRequest(const AggregateRequest& from);

  inline AggregateRequest& operator=(const AggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AggregateRequest& default_instance();

  void Swap(AggregateRequest* other);

  // implements Message ----------------------------------------------

  AggregateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AggregateRequest& from);
  void MergeFrom(const AggregateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string interpreter_class_name = 1;
  inline bool has_interpreter_class_name() const;
  inline void clear_interpreter_class_name();
  static const int kInterpreterClassNameFieldNumber = 1;
  inline const ::std::string& interpreter_class_name() const;
  inline void set_interpreter_class_name(const ::std::string& value);
  inline void set_interpreter_class_name(const char* value);
  inline void set_interpreter_class_name(const char* value, size_t size);
  inline ::std::string* mutable_interpreter_class_name();
  inline ::std::string* release_interpreter_class_name();
  inline void set_allocated_interpreter_class_name(::std::string* interpreter_class_name);

  // required .hbase.pb.Scan scan = 2;
  inline bool has_scan() const;
  inline void clear_scan();
  static const int kScanFieldNumber = 2;
  inline const ::hbase::pb::Scan& scan() const;
  inline ::hbase::pb::Scan* mutable_scan();
  inline ::hbase::pb::Scan* release_scan();
  inline void set_allocated_scan(::hbase::pb::Scan* scan);

  // optional bytes interpreter_specific_bytes = 3;
  inline bool has_interpreter_specific_bytes() const;
  inline void clear_interpreter_specific_bytes();
  static const int kInterpreterSpecificBytesFieldNumber = 3;
  inline const ::std::string& interpreter_specific_bytes() const;
  inline void set_interpreter_specific_bytes(const ::std::string& value);
  inline void set_interpreter_specific_bytes(const char* value);
  inline void set_interpreter_specific_bytes(const void* value, size_t size);
  inline ::std::string* mutable_interpreter_specific_bytes();
  inline ::std::string* release_interpreter_specific_bytes();
  inline void set_allocated_interpreter_specific_bytes(::std::string* interpreter_specific_bytes);

  // @@protoc_insertion_point(class_scope:hbase.pb.AggregateRequest)
 private:
  inline void set_has_interpreter_class_name();
  inline void clear_has_interpreter_class_name();
  inline void set_has_scan();
  inline void clear_has_scan();
  inline void set_has_interpreter_specific_bytes();
  inline void clear_has_interpreter_specific_bytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* interpreter_class_name_;
  ::hbase::pb::Scan* scan_;
  ::std::string* interpreter_specific_bytes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Aggregate_2eproto();
  friend void protobuf_AssignDesc_Aggregate_2eproto();
  friend void protobuf_ShutdownFile_Aggregate_2eproto();

  void InitAsDefaultInstance();
  static AggregateRequest* default_instance_;
};
// -------------------------------------------------------------------

class AggregateResponse : public ::google::protobuf::Message {
 public:
  AggregateResponse();
  virtual ~AggregateResponse();

  AggregateResponse(const AggregateResponse& from);

  inline AggregateResponse& operator=(const AggregateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AggregateResponse& default_instance();

  void Swap(AggregateResponse* other);

  // implements Message ----------------------------------------------

  AggregateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AggregateResponse& from);
  void MergeFrom(const AggregateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes first_part = 1;
  inline int first_part_size() const;
  inline void clear_first_part();
  static const int kFirstPartFieldNumber = 1;
  inline const ::std::string& first_part(int index) const;
  inline ::std::string* mutable_first_part(int index);
  inline void set_first_part(int index, const ::std::string& value);
  inline void set_first_part(int index, const char* value);
  inline void set_first_part(int index, const void* value, size_t size);
  inline ::std::string* add_first_part();
  inline void add_first_part(const ::std::string& value);
  inline void add_first_part(const char* value);
  inline void add_first_part(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& first_part() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_first_part();

  // optional bytes second_part = 2;
  inline bool has_second_part() const;
  inline void clear_second_part();
  static const int kSecondPartFieldNumber = 2;
  inline const ::std::string& second_part() const;
  inline void set_second_part(const ::std::string& value);
  inline void set_second_part(const char* value);
  inline void set_second_part(const void* value, size_t size);
  inline ::std::string* mutable_second_part();
  inline ::std::string* release_second_part();
  inline void set_allocated_second_part(::std::string* second_part);

  // @@protoc_insertion_point(class_scope:hbase.pb.AggregateResponse)
 private:
  inline void set_has_second_part();
  inline void clear_has_second_part();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> first_part_;
  ::std::string* second_part_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Aggregate_2eproto();
  friend void protobuf_AssignDesc_Aggregate_2eproto();
  friend void protobuf_ShutdownFile_Aggregate_2eproto();

  void InitAsDefaultInstance();
  static AggregateResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AggregateRequest

// required string interpreter_class_name = 1;
inline bool AggregateRequest::has_interpreter_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AggregateRequest::set_has_interpreter_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AggregateRequest::clear_has_interpreter_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AggregateRequest::clear_interpreter_class_name() {
  if (interpreter_class_name_ != &::google::protobuf::internal::kEmptyString) {
    interpreter_class_name_->clear();
  }
  clear_has_interpreter_class_name();
}
inline const ::std::string& AggregateRequest::interpreter_class_name() const {
  return *interpreter_class_name_;
}
inline void AggregateRequest::set_interpreter_class_name(const ::std::string& value) {
  set_has_interpreter_class_name();
  if (interpreter_class_name_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_class_name_ = new ::std::string;
  }
  interpreter_class_name_->assign(value);
}
inline void AggregateRequest::set_interpreter_class_name(const char* value) {
  set_has_interpreter_class_name();
  if (interpreter_class_name_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_class_name_ = new ::std::string;
  }
  interpreter_class_name_->assign(value);
}
inline void AggregateRequest::set_interpreter_class_name(const char* value, size_t size) {
  set_has_interpreter_class_name();
  if (interpreter_class_name_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_class_name_ = new ::std::string;
  }
  interpreter_class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AggregateRequest::mutable_interpreter_class_name() {
  set_has_interpreter_class_name();
  if (interpreter_class_name_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_class_name_ = new ::std::string;
  }
  return interpreter_class_name_;
}
inline ::std::string* AggregateRequest::release_interpreter_class_name() {
  clear_has_interpreter_class_name();
  if (interpreter_class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = interpreter_class_name_;
    interpreter_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AggregateRequest::set_allocated_interpreter_class_name(::std::string* interpreter_class_name) {
  if (interpreter_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete interpreter_class_name_;
  }
  if (interpreter_class_name) {
    set_has_interpreter_class_name();
    interpreter_class_name_ = interpreter_class_name;
  } else {
    clear_has_interpreter_class_name();
    interpreter_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .hbase.pb.Scan scan = 2;
inline bool AggregateRequest::has_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AggregateRequest::set_has_scan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AggregateRequest::clear_has_scan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AggregateRequest::clear_scan() {
  if (scan_ != NULL) scan_->::hbase::pb::Scan::Clear();
  clear_has_scan();
}
inline const ::hbase::pb::Scan& AggregateRequest::scan() const {
  return scan_ != NULL ? *scan_ : *default_instance_->scan_;
}
inline ::hbase::pb::Scan* AggregateRequest::mutable_scan() {
  set_has_scan();
  if (scan_ == NULL) scan_ = new ::hbase::pb::Scan;
  return scan_;
}
inline ::hbase::pb::Scan* AggregateRequest::release_scan() {
  clear_has_scan();
  ::hbase::pb::Scan* temp = scan_;
  scan_ = NULL;
  return temp;
}
inline void AggregateRequest::set_allocated_scan(::hbase::pb::Scan* scan) {
  delete scan_;
  scan_ = scan;
  if (scan) {
    set_has_scan();
  } else {
    clear_has_scan();
  }
}

// optional bytes interpreter_specific_bytes = 3;
inline bool AggregateRequest::has_interpreter_specific_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AggregateRequest::set_has_interpreter_specific_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AggregateRequest::clear_has_interpreter_specific_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AggregateRequest::clear_interpreter_specific_bytes() {
  if (interpreter_specific_bytes_ != &::google::protobuf::internal::kEmptyString) {
    interpreter_specific_bytes_->clear();
  }
  clear_has_interpreter_specific_bytes();
}
inline const ::std::string& AggregateRequest::interpreter_specific_bytes() const {
  return *interpreter_specific_bytes_;
}
inline void AggregateRequest::set_interpreter_specific_bytes(const ::std::string& value) {
  set_has_interpreter_specific_bytes();
  if (interpreter_specific_bytes_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_specific_bytes_ = new ::std::string;
  }
  interpreter_specific_bytes_->assign(value);
}
inline void AggregateRequest::set_interpreter_specific_bytes(const char* value) {
  set_has_interpreter_specific_bytes();
  if (interpreter_specific_bytes_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_specific_bytes_ = new ::std::string;
  }
  interpreter_specific_bytes_->assign(value);
}
inline void AggregateRequest::set_interpreter_specific_bytes(const void* value, size_t size) {
  set_has_interpreter_specific_bytes();
  if (interpreter_specific_bytes_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_specific_bytes_ = new ::std::string;
  }
  interpreter_specific_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AggregateRequest::mutable_interpreter_specific_bytes() {
  set_has_interpreter_specific_bytes();
  if (interpreter_specific_bytes_ == &::google::protobuf::internal::kEmptyString) {
    interpreter_specific_bytes_ = new ::std::string;
  }
  return interpreter_specific_bytes_;
}
inline ::std::string* AggregateRequest::release_interpreter_specific_bytes() {
  clear_has_interpreter_specific_bytes();
  if (interpreter_specific_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = interpreter_specific_bytes_;
    interpreter_specific_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AggregateRequest::set_allocated_interpreter_specific_bytes(::std::string* interpreter_specific_bytes) {
  if (interpreter_specific_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete interpreter_specific_bytes_;
  }
  if (interpreter_specific_bytes) {
    set_has_interpreter_specific_bytes();
    interpreter_specific_bytes_ = interpreter_specific_bytes;
  } else {
    clear_has_interpreter_specific_bytes();
    interpreter_specific_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AggregateResponse

// repeated bytes first_part = 1;
inline int AggregateResponse::first_part_size() const {
  return first_part_.size();
}
inline void AggregateResponse::clear_first_part() {
  first_part_.Clear();
}
inline const ::std::string& AggregateResponse::first_part(int index) const {
  return first_part_.Get(index);
}
inline ::std::string* AggregateResponse::mutable_first_part(int index) {
  return first_part_.Mutable(index);
}
inline void AggregateResponse::set_first_part(int index, const ::std::string& value) {
  first_part_.Mutable(index)->assign(value);
}
inline void AggregateResponse::set_first_part(int index, const char* value) {
  first_part_.Mutable(index)->assign(value);
}
inline void AggregateResponse::set_first_part(int index, const void* value, size_t size) {
  first_part_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AggregateResponse::add_first_part() {
  return first_part_.Add();
}
inline void AggregateResponse::add_first_part(const ::std::string& value) {
  first_part_.Add()->assign(value);
}
inline void AggregateResponse::add_first_part(const char* value) {
  first_part_.Add()->assign(value);
}
inline void AggregateResponse::add_first_part(const void* value, size_t size) {
  first_part_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AggregateResponse::first_part() const {
  return first_part_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AggregateResponse::mutable_first_part() {
  return &first_part_;
}

// optional bytes second_part = 2;
inline bool AggregateResponse::has_second_part() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AggregateResponse::set_has_second_part() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AggregateResponse::clear_has_second_part() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AggregateResponse::clear_second_part() {
  if (second_part_ != &::google::protobuf::internal::kEmptyString) {
    second_part_->clear();
  }
  clear_has_second_part();
}
inline const ::std::string& AggregateResponse::second_part() const {
  return *second_part_;
}
inline void AggregateResponse::set_second_part(const ::std::string& value) {
  set_has_second_part();
  if (second_part_ == &::google::protobuf::internal::kEmptyString) {
    second_part_ = new ::std::string;
  }
  second_part_->assign(value);
}
inline void AggregateResponse::set_second_part(const char* value) {
  set_has_second_part();
  if (second_part_ == &::google::protobuf::internal::kEmptyString) {
    second_part_ = new ::std::string;
  }
  second_part_->assign(value);
}
inline void AggregateResponse::set_second_part(const void* value, size_t size) {
  set_has_second_part();
  if (second_part_ == &::google::protobuf::internal::kEmptyString) {
    second_part_ = new ::std::string;
  }
  second_part_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AggregateResponse::mutable_second_part() {
  set_has_second_part();
  if (second_part_ == &::google::protobuf::internal::kEmptyString) {
    second_part_ = new ::std::string;
  }
  return second_part_;
}
inline ::std::string* AggregateResponse::release_second_part() {
  clear_has_second_part();
  if (second_part_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = second_part_;
    second_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AggregateResponse::set_allocated_second_part(::std::string* second_part) {
  if (second_part_ != &::google::protobuf::internal::kEmptyString) {
    delete second_part_;
  }
  if (second_part) {
    set_has_second_part();
    second_part_ = second_part;
  } else {
    clear_has_second_part();
    second_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Aggregate_2eproto__INCLUDED
