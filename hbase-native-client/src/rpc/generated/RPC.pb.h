// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPC.proto

#ifndef PROTOBUF_RPC_2eproto__INCLUDED
#define PROTOBUF_RPC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Tracing.pb.h"
#include "HBase.pb.h"
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RPC_2eproto();
void protobuf_AssignDesc_RPC_2eproto();
void protobuf_ShutdownFile_RPC_2eproto();

class UserInformation;
class ConnectionHeader;
class CellBlockMeta;
class ExceptionResponse;
class RequestHeader;
class ResponseHeader;

// ===================================================================

class UserInformation : public ::google::protobuf::Message {
 public:
  UserInformation();
  virtual ~UserInformation();

  UserInformation(const UserInformation& from);

  inline UserInformation& operator=(const UserInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInformation& default_instance();

  void Swap(UserInformation* other);

  // implements Message ----------------------------------------------

  UserInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInformation& from);
  void MergeFrom(const UserInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string effective_user = 1;
  inline bool has_effective_user() const;
  inline void clear_effective_user();
  static const int kEffectiveUserFieldNumber = 1;
  inline const ::std::string& effective_user() const;
  inline void set_effective_user(const ::std::string& value);
  inline void set_effective_user(const char* value);
  inline void set_effective_user(const char* value, size_t size);
  inline ::std::string* mutable_effective_user();
  inline ::std::string* release_effective_user();
  inline void set_allocated_effective_user(::std::string* effective_user);

  // optional string real_user = 2;
  inline bool has_real_user() const;
  inline void clear_real_user();
  static const int kRealUserFieldNumber = 2;
  inline const ::std::string& real_user() const;
  inline void set_real_user(const ::std::string& value);
  inline void set_real_user(const char* value);
  inline void set_real_user(const char* value, size_t size);
  inline ::std::string* mutable_real_user();
  inline ::std::string* release_real_user();
  inline void set_allocated_real_user(::std::string* real_user);

  // @@protoc_insertion_point(class_scope:hbase.pb.UserInformation)
 private:
  inline void set_has_effective_user();
  inline void clear_has_effective_user();
  inline void set_has_real_user();
  inline void clear_has_real_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* effective_user_;
  ::std::string* real_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RPC_2eproto();
  friend void protobuf_AssignDesc_RPC_2eproto();
  friend void protobuf_ShutdownFile_RPC_2eproto();

  void InitAsDefaultInstance();
  static UserInformation* default_instance_;
};
// -------------------------------------------------------------------

class ConnectionHeader : public ::google::protobuf::Message {
 public:
  ConnectionHeader();
  virtual ~ConnectionHeader();

  ConnectionHeader(const ConnectionHeader& from);

  inline ConnectionHeader& operator=(const ConnectionHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionHeader& default_instance();

  void Swap(ConnectionHeader* other);

  // implements Message ----------------------------------------------

  ConnectionHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionHeader& from);
  void MergeFrom(const ConnectionHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hbase.pb.UserInformation user_info = 1;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::hbase::pb::UserInformation& user_info() const;
  inline ::hbase::pb::UserInformation* mutable_user_info();
  inline ::hbase::pb::UserInformation* release_user_info();
  inline void set_allocated_user_info(::hbase::pb::UserInformation* user_info);

  // optional string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // optional string cell_block_codec_class = 3;
  inline bool has_cell_block_codec_class() const;
  inline void clear_cell_block_codec_class();
  static const int kCellBlockCodecClassFieldNumber = 3;
  inline const ::std::string& cell_block_codec_class() const;
  inline void set_cell_block_codec_class(const ::std::string& value);
  inline void set_cell_block_codec_class(const char* value);
  inline void set_cell_block_codec_class(const char* value, size_t size);
  inline ::std::string* mutable_cell_block_codec_class();
  inline ::std::string* release_cell_block_codec_class();
  inline void set_allocated_cell_block_codec_class(::std::string* cell_block_codec_class);

  // optional string cell_block_compressor_class = 4;
  inline bool has_cell_block_compressor_class() const;
  inline void clear_cell_block_compressor_class();
  static const int kCellBlockCompressorClassFieldNumber = 4;
  inline const ::std::string& cell_block_compressor_class() const;
  inline void set_cell_block_compressor_class(const ::std::string& value);
  inline void set_cell_block_compressor_class(const char* value);
  inline void set_cell_block_compressor_class(const char* value, size_t size);
  inline ::std::string* mutable_cell_block_compressor_class();
  inline ::std::string* release_cell_block_compressor_class();
  inline void set_allocated_cell_block_compressor_class(::std::string* cell_block_compressor_class);

  // optional .hbase.pb.VersionInfo version_info = 5;
  inline bool has_version_info() const;
  inline void clear_version_info();
  static const int kVersionInfoFieldNumber = 5;
  inline const ::hbase::pb::VersionInfo& version_info() const;
  inline ::hbase::pb::VersionInfo* mutable_version_info();
  inline ::hbase::pb::VersionInfo* release_version_info();
  inline void set_allocated_version_info(::hbase::pb::VersionInfo* version_info);

  // @@protoc_insertion_point(class_scope:hbase.pb.ConnectionHeader)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_cell_block_codec_class();
  inline void clear_has_cell_block_codec_class();
  inline void set_has_cell_block_compressor_class();
  inline void clear_has_cell_block_compressor_class();
  inline void set_has_version_info();
  inline void clear_has_version_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::UserInformation* user_info_;
  ::std::string* service_name_;
  ::std::string* cell_block_codec_class_;
  ::std::string* cell_block_compressor_class_;
  ::hbase::pb::VersionInfo* version_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RPC_2eproto();
  friend void protobuf_AssignDesc_RPC_2eproto();
  friend void protobuf_ShutdownFile_RPC_2eproto();

  void InitAsDefaultInstance();
  static ConnectionHeader* default_instance_;
};
// -------------------------------------------------------------------

class CellBlockMeta : public ::google::protobuf::Message {
 public:
  CellBlockMeta();
  virtual ~CellBlockMeta();

  CellBlockMeta(const CellBlockMeta& from);

  inline CellBlockMeta& operator=(const CellBlockMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CellBlockMeta& default_instance();

  void Swap(CellBlockMeta* other);

  // implements Message ----------------------------------------------

  CellBlockMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellBlockMeta& from);
  void MergeFrom(const CellBlockMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 length = 1;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CellBlockMeta)
 private:
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RPC_2eproto();
  friend void protobuf_AssignDesc_RPC_2eproto();
  friend void protobuf_ShutdownFile_RPC_2eproto();

  void InitAsDefaultInstance();
  static CellBlockMeta* default_instance_;
};
// -------------------------------------------------------------------

class ExceptionResponse : public ::google::protobuf::Message {
 public:
  ExceptionResponse();
  virtual ~ExceptionResponse();

  ExceptionResponse(const ExceptionResponse& from);

  inline ExceptionResponse& operator=(const ExceptionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExceptionResponse& default_instance();

  void Swap(ExceptionResponse* other);

  // implements Message ----------------------------------------------

  ExceptionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExceptionResponse& from);
  void MergeFrom(const ExceptionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string exception_class_name = 1;
  inline bool has_exception_class_name() const;
  inline void clear_exception_class_name();
  static const int kExceptionClassNameFieldNumber = 1;
  inline const ::std::string& exception_class_name() const;
  inline void set_exception_class_name(const ::std::string& value);
  inline void set_exception_class_name(const char* value);
  inline void set_exception_class_name(const char* value, size_t size);
  inline ::std::string* mutable_exception_class_name();
  inline ::std::string* release_exception_class_name();
  inline void set_allocated_exception_class_name(::std::string* exception_class_name);

  // optional string stack_trace = 2;
  inline bool has_stack_trace() const;
  inline void clear_stack_trace();
  static const int kStackTraceFieldNumber = 2;
  inline const ::std::string& stack_trace() const;
  inline void set_stack_trace(const ::std::string& value);
  inline void set_stack_trace(const char* value);
  inline void set_stack_trace(const char* value, size_t size);
  inline ::std::string* mutable_stack_trace();
  inline ::std::string* release_stack_trace();
  inline void set_allocated_stack_trace(::std::string* stack_trace);

  // optional string hostname = 3;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional bool do_not_retry = 5;
  inline bool has_do_not_retry() const;
  inline void clear_do_not_retry();
  static const int kDoNotRetryFieldNumber = 5;
  inline bool do_not_retry() const;
  inline void set_do_not_retry(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ExceptionResponse)
 private:
  inline void set_has_exception_class_name();
  inline void clear_has_exception_class_name();
  inline void set_has_stack_trace();
  inline void clear_has_stack_trace();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_do_not_retry();
  inline void clear_has_do_not_retry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* exception_class_name_;
  ::std::string* stack_trace_;
  ::std::string* hostname_;
  ::google::protobuf::int32 port_;
  bool do_not_retry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RPC_2eproto();
  friend void protobuf_AssignDesc_RPC_2eproto();
  friend void protobuf_ShutdownFile_RPC_2eproto();

  void InitAsDefaultInstance();
  static ExceptionResponse* default_instance_;
};
// -------------------------------------------------------------------

class RequestHeader : public ::google::protobuf::Message {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHeader& default_instance();

  void Swap(RequestHeader* other);

  // implements Message ----------------------------------------------

  RequestHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 call_id = 1;
  inline bool has_call_id() const;
  inline void clear_call_id();
  static const int kCallIdFieldNumber = 1;
  inline ::google::protobuf::uint32 call_id() const;
  inline void set_call_id(::google::protobuf::uint32 value);

  // optional .hbase.pb.RPCTInfo trace_info = 2;
  inline bool has_trace_info() const;
  inline void clear_trace_info();
  static const int kTraceInfoFieldNumber = 2;
  inline const ::hbase::pb::RPCTInfo& trace_info() const;
  inline ::hbase::pb::RPCTInfo* mutable_trace_info();
  inline ::hbase::pb::RPCTInfo* release_trace_info();
  inline void set_allocated_trace_info(::hbase::pb::RPCTInfo* trace_info);

  // optional string method_name = 3;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 3;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  inline void set_allocated_method_name(::std::string* method_name);

  // optional bool request_param = 4;
  inline bool has_request_param() const;
  inline void clear_request_param();
  static const int kRequestParamFieldNumber = 4;
  inline bool request_param() const;
  inline void set_request_param(bool value);

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
  inline bool has_cell_block_meta() const;
  inline void clear_cell_block_meta();
  static const int kCellBlockMetaFieldNumber = 5;
  inline const ::hbase::pb::CellBlockMeta& cell_block_meta() const;
  inline ::hbase::pb::CellBlockMeta* mutable_cell_block_meta();
  inline ::hbase::pb::CellBlockMeta* release_cell_block_meta();
  inline void set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta);

  // optional uint32 priority = 6;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 6;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.RequestHeader)
 private:
  inline void set_has_call_id();
  inline void clear_has_call_id();
  inline void set_has_trace_info();
  inline void clear_has_trace_info();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_request_param();
  inline void clear_has_request_param();
  inline void set_has_cell_block_meta();
  inline void clear_has_cell_block_meta();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::RPCTInfo* trace_info_;
  ::google::protobuf::uint32 call_id_;
  bool request_param_;
  ::std::string* method_name_;
  ::hbase::pb::CellBlockMeta* cell_block_meta_;
  ::google::protobuf::uint32 priority_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_RPC_2eproto();
  friend void protobuf_AssignDesc_RPC_2eproto();
  friend void protobuf_ShutdownFile_RPC_2eproto();

  void InitAsDefaultInstance();
  static RequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  void Swap(ResponseHeader* other);

  // implements Message ----------------------------------------------

  ResponseHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 call_id = 1;
  inline bool has_call_id() const;
  inline void clear_call_id();
  static const int kCallIdFieldNumber = 1;
  inline ::google::protobuf::uint32 call_id() const;
  inline void set_call_id(::google::protobuf::uint32 value);

  // optional .hbase.pb.ExceptionResponse exception = 2;
  inline bool has_exception() const;
  inline void clear_exception();
  static const int kExceptionFieldNumber = 2;
  inline const ::hbase::pb::ExceptionResponse& exception() const;
  inline ::hbase::pb::ExceptionResponse* mutable_exception();
  inline ::hbase::pb::ExceptionResponse* release_exception();
  inline void set_allocated_exception(::hbase::pb::ExceptionResponse* exception);

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
  inline bool has_cell_block_meta() const;
  inline void clear_cell_block_meta();
  static const int kCellBlockMetaFieldNumber = 3;
  inline const ::hbase::pb::CellBlockMeta& cell_block_meta() const;
  inline ::hbase::pb::CellBlockMeta* mutable_cell_block_meta();
  inline ::hbase::pb::CellBlockMeta* release_cell_block_meta();
  inline void set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta);

  // @@protoc_insertion_point(class_scope:hbase.pb.ResponseHeader)
 private:
  inline void set_has_call_id();
  inline void clear_has_call_id();
  inline void set_has_exception();
  inline void clear_has_exception();
  inline void set_has_cell_block_meta();
  inline void clear_has_cell_block_meta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::hbase::pb::ExceptionResponse* exception_;
  ::hbase::pb::CellBlockMeta* cell_block_meta_;
  ::google::protobuf::uint32 call_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RPC_2eproto();
  friend void protobuf_AssignDesc_RPC_2eproto();
  friend void protobuf_ShutdownFile_RPC_2eproto();

  void InitAsDefaultInstance();
  static ResponseHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// UserInformation

// required string effective_user = 1;
inline bool UserInformation::has_effective_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInformation::set_has_effective_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInformation::clear_has_effective_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInformation::clear_effective_user() {
  if (effective_user_ != &::google::protobuf::internal::kEmptyString) {
    effective_user_->clear();
  }
  clear_has_effective_user();
}
inline const ::std::string& UserInformation::effective_user() const {
  return *effective_user_;
}
inline void UserInformation::set_effective_user(const ::std::string& value) {
  set_has_effective_user();
  if (effective_user_ == &::google::protobuf::internal::kEmptyString) {
    effective_user_ = new ::std::string;
  }
  effective_user_->assign(value);
}
inline void UserInformation::set_effective_user(const char* value) {
  set_has_effective_user();
  if (effective_user_ == &::google::protobuf::internal::kEmptyString) {
    effective_user_ = new ::std::string;
  }
  effective_user_->assign(value);
}
inline void UserInformation::set_effective_user(const char* value, size_t size) {
  set_has_effective_user();
  if (effective_user_ == &::google::protobuf::internal::kEmptyString) {
    effective_user_ = new ::std::string;
  }
  effective_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInformation::mutable_effective_user() {
  set_has_effective_user();
  if (effective_user_ == &::google::protobuf::internal::kEmptyString) {
    effective_user_ = new ::std::string;
  }
  return effective_user_;
}
inline ::std::string* UserInformation::release_effective_user() {
  clear_has_effective_user();
  if (effective_user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effective_user_;
    effective_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInformation::set_allocated_effective_user(::std::string* effective_user) {
  if (effective_user_ != &::google::protobuf::internal::kEmptyString) {
    delete effective_user_;
  }
  if (effective_user) {
    set_has_effective_user();
    effective_user_ = effective_user;
  } else {
    clear_has_effective_user();
    effective_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string real_user = 2;
inline bool UserInformation::has_real_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInformation::set_has_real_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInformation::clear_has_real_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInformation::clear_real_user() {
  if (real_user_ != &::google::protobuf::internal::kEmptyString) {
    real_user_->clear();
  }
  clear_has_real_user();
}
inline const ::std::string& UserInformation::real_user() const {
  return *real_user_;
}
inline void UserInformation::set_real_user(const ::std::string& value) {
  set_has_real_user();
  if (real_user_ == &::google::protobuf::internal::kEmptyString) {
    real_user_ = new ::std::string;
  }
  real_user_->assign(value);
}
inline void UserInformation::set_real_user(const char* value) {
  set_has_real_user();
  if (real_user_ == &::google::protobuf::internal::kEmptyString) {
    real_user_ = new ::std::string;
  }
  real_user_->assign(value);
}
inline void UserInformation::set_real_user(const char* value, size_t size) {
  set_has_real_user();
  if (real_user_ == &::google::protobuf::internal::kEmptyString) {
    real_user_ = new ::std::string;
  }
  real_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInformation::mutable_real_user() {
  set_has_real_user();
  if (real_user_ == &::google::protobuf::internal::kEmptyString) {
    real_user_ = new ::std::string;
  }
  return real_user_;
}
inline ::std::string* UserInformation::release_real_user() {
  clear_has_real_user();
  if (real_user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_user_;
    real_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInformation::set_allocated_real_user(::std::string* real_user) {
  if (real_user_ != &::google::protobuf::internal::kEmptyString) {
    delete real_user_;
  }
  if (real_user) {
    set_has_real_user();
    real_user_ = real_user;
  } else {
    clear_has_real_user();
    real_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConnectionHeader

// optional .hbase.pb.UserInformation user_info = 1;
inline bool ConnectionHeader::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionHeader::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionHeader::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionHeader::clear_user_info() {
  if (user_info_ != NULL) user_info_->::hbase::pb::UserInformation::Clear();
  clear_has_user_info();
}
inline const ::hbase::pb::UserInformation& ConnectionHeader::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::hbase::pb::UserInformation* ConnectionHeader::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::hbase::pb::UserInformation;
  return user_info_;
}
inline ::hbase::pb::UserInformation* ConnectionHeader::release_user_info() {
  clear_has_user_info();
  ::hbase::pb::UserInformation* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void ConnectionHeader::set_allocated_user_info(::hbase::pb::UserInformation* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
}

// optional string service_name = 2;
inline bool ConnectionHeader::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionHeader::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionHeader::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionHeader::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& ConnectionHeader::service_name() const {
  return *service_name_;
}
inline void ConnectionHeader::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void ConnectionHeader::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void ConnectionHeader::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectionHeader::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* ConnectionHeader::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConnectionHeader::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cell_block_codec_class = 3;
inline bool ConnectionHeader::has_cell_block_codec_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionHeader::set_has_cell_block_codec_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionHeader::clear_has_cell_block_codec_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionHeader::clear_cell_block_codec_class() {
  if (cell_block_codec_class_ != &::google::protobuf::internal::kEmptyString) {
    cell_block_codec_class_->clear();
  }
  clear_has_cell_block_codec_class();
}
inline const ::std::string& ConnectionHeader::cell_block_codec_class() const {
  return *cell_block_codec_class_;
}
inline void ConnectionHeader::set_cell_block_codec_class(const ::std::string& value) {
  set_has_cell_block_codec_class();
  if (cell_block_codec_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_codec_class_ = new ::std::string;
  }
  cell_block_codec_class_->assign(value);
}
inline void ConnectionHeader::set_cell_block_codec_class(const char* value) {
  set_has_cell_block_codec_class();
  if (cell_block_codec_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_codec_class_ = new ::std::string;
  }
  cell_block_codec_class_->assign(value);
}
inline void ConnectionHeader::set_cell_block_codec_class(const char* value, size_t size) {
  set_has_cell_block_codec_class();
  if (cell_block_codec_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_codec_class_ = new ::std::string;
  }
  cell_block_codec_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectionHeader::mutable_cell_block_codec_class() {
  set_has_cell_block_codec_class();
  if (cell_block_codec_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_codec_class_ = new ::std::string;
  }
  return cell_block_codec_class_;
}
inline ::std::string* ConnectionHeader::release_cell_block_codec_class() {
  clear_has_cell_block_codec_class();
  if (cell_block_codec_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cell_block_codec_class_;
    cell_block_codec_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConnectionHeader::set_allocated_cell_block_codec_class(::std::string* cell_block_codec_class) {
  if (cell_block_codec_class_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_block_codec_class_;
  }
  if (cell_block_codec_class) {
    set_has_cell_block_codec_class();
    cell_block_codec_class_ = cell_block_codec_class;
  } else {
    clear_has_cell_block_codec_class();
    cell_block_codec_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cell_block_compressor_class = 4;
inline bool ConnectionHeader::has_cell_block_compressor_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionHeader::set_has_cell_block_compressor_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionHeader::clear_has_cell_block_compressor_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionHeader::clear_cell_block_compressor_class() {
  if (cell_block_compressor_class_ != &::google::protobuf::internal::kEmptyString) {
    cell_block_compressor_class_->clear();
  }
  clear_has_cell_block_compressor_class();
}
inline const ::std::string& ConnectionHeader::cell_block_compressor_class() const {
  return *cell_block_compressor_class_;
}
inline void ConnectionHeader::set_cell_block_compressor_class(const ::std::string& value) {
  set_has_cell_block_compressor_class();
  if (cell_block_compressor_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_compressor_class_ = new ::std::string;
  }
  cell_block_compressor_class_->assign(value);
}
inline void ConnectionHeader::set_cell_block_compressor_class(const char* value) {
  set_has_cell_block_compressor_class();
  if (cell_block_compressor_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_compressor_class_ = new ::std::string;
  }
  cell_block_compressor_class_->assign(value);
}
inline void ConnectionHeader::set_cell_block_compressor_class(const char* value, size_t size) {
  set_has_cell_block_compressor_class();
  if (cell_block_compressor_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_compressor_class_ = new ::std::string;
  }
  cell_block_compressor_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectionHeader::mutable_cell_block_compressor_class() {
  set_has_cell_block_compressor_class();
  if (cell_block_compressor_class_ == &::google::protobuf::internal::kEmptyString) {
    cell_block_compressor_class_ = new ::std::string;
  }
  return cell_block_compressor_class_;
}
inline ::std::string* ConnectionHeader::release_cell_block_compressor_class() {
  clear_has_cell_block_compressor_class();
  if (cell_block_compressor_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cell_block_compressor_class_;
    cell_block_compressor_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConnectionHeader::set_allocated_cell_block_compressor_class(::std::string* cell_block_compressor_class) {
  if (cell_block_compressor_class_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_block_compressor_class_;
  }
  if (cell_block_compressor_class) {
    set_has_cell_block_compressor_class();
    cell_block_compressor_class_ = cell_block_compressor_class;
  } else {
    clear_has_cell_block_compressor_class();
    cell_block_compressor_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .hbase.pb.VersionInfo version_info = 5;
inline bool ConnectionHeader::has_version_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectionHeader::set_has_version_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectionHeader::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectionHeader::clear_version_info() {
  if (version_info_ != NULL) version_info_->::hbase::pb::VersionInfo::Clear();
  clear_has_version_info();
}
inline const ::hbase::pb::VersionInfo& ConnectionHeader::version_info() const {
  return version_info_ != NULL ? *version_info_ : *default_instance_->version_info_;
}
inline ::hbase::pb::VersionInfo* ConnectionHeader::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) version_info_ = new ::hbase::pb::VersionInfo;
  return version_info_;
}
inline ::hbase::pb::VersionInfo* ConnectionHeader::release_version_info() {
  clear_has_version_info();
  ::hbase::pb::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
inline void ConnectionHeader::set_allocated_version_info(::hbase::pb::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
}

// -------------------------------------------------------------------

// CellBlockMeta

// optional uint32 length = 1;
inline bool CellBlockMeta::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CellBlockMeta::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CellBlockMeta::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CellBlockMeta::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 CellBlockMeta::length() const {
  return length_;
}
inline void CellBlockMeta::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// ExceptionResponse

// optional string exception_class_name = 1;
inline bool ExceptionResponse::has_exception_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExceptionResponse::set_has_exception_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExceptionResponse::clear_has_exception_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExceptionResponse::clear_exception_class_name() {
  if (exception_class_name_ != &::google::protobuf::internal::kEmptyString) {
    exception_class_name_->clear();
  }
  clear_has_exception_class_name();
}
inline const ::std::string& ExceptionResponse::exception_class_name() const {
  return *exception_class_name_;
}
inline void ExceptionResponse::set_exception_class_name(const ::std::string& value) {
  set_has_exception_class_name();
  if (exception_class_name_ == &::google::protobuf::internal::kEmptyString) {
    exception_class_name_ = new ::std::string;
  }
  exception_class_name_->assign(value);
}
inline void ExceptionResponse::set_exception_class_name(const char* value) {
  set_has_exception_class_name();
  if (exception_class_name_ == &::google::protobuf::internal::kEmptyString) {
    exception_class_name_ = new ::std::string;
  }
  exception_class_name_->assign(value);
}
inline void ExceptionResponse::set_exception_class_name(const char* value, size_t size) {
  set_has_exception_class_name();
  if (exception_class_name_ == &::google::protobuf::internal::kEmptyString) {
    exception_class_name_ = new ::std::string;
  }
  exception_class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExceptionResponse::mutable_exception_class_name() {
  set_has_exception_class_name();
  if (exception_class_name_ == &::google::protobuf::internal::kEmptyString) {
    exception_class_name_ = new ::std::string;
  }
  return exception_class_name_;
}
inline ::std::string* ExceptionResponse::release_exception_class_name() {
  clear_has_exception_class_name();
  if (exception_class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exception_class_name_;
    exception_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExceptionResponse::set_allocated_exception_class_name(::std::string* exception_class_name) {
  if (exception_class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete exception_class_name_;
  }
  if (exception_class_name) {
    set_has_exception_class_name();
    exception_class_name_ = exception_class_name;
  } else {
    clear_has_exception_class_name();
    exception_class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string stack_trace = 2;
inline bool ExceptionResponse::has_stack_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExceptionResponse::set_has_stack_trace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExceptionResponse::clear_has_stack_trace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExceptionResponse::clear_stack_trace() {
  if (stack_trace_ != &::google::protobuf::internal::kEmptyString) {
    stack_trace_->clear();
  }
  clear_has_stack_trace();
}
inline const ::std::string& ExceptionResponse::stack_trace() const {
  return *stack_trace_;
}
inline void ExceptionResponse::set_stack_trace(const ::std::string& value) {
  set_has_stack_trace();
  if (stack_trace_ == &::google::protobuf::internal::kEmptyString) {
    stack_trace_ = new ::std::string;
  }
  stack_trace_->assign(value);
}
inline void ExceptionResponse::set_stack_trace(const char* value) {
  set_has_stack_trace();
  if (stack_trace_ == &::google::protobuf::internal::kEmptyString) {
    stack_trace_ = new ::std::string;
  }
  stack_trace_->assign(value);
}
inline void ExceptionResponse::set_stack_trace(const char* value, size_t size) {
  set_has_stack_trace();
  if (stack_trace_ == &::google::protobuf::internal::kEmptyString) {
    stack_trace_ = new ::std::string;
  }
  stack_trace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExceptionResponse::mutable_stack_trace() {
  set_has_stack_trace();
  if (stack_trace_ == &::google::protobuf::internal::kEmptyString) {
    stack_trace_ = new ::std::string;
  }
  return stack_trace_;
}
inline ::std::string* ExceptionResponse::release_stack_trace() {
  clear_has_stack_trace();
  if (stack_trace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stack_trace_;
    stack_trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExceptionResponse::set_allocated_stack_trace(::std::string* stack_trace) {
  if (stack_trace_ != &::google::protobuf::internal::kEmptyString) {
    delete stack_trace_;
  }
  if (stack_trace) {
    set_has_stack_trace();
    stack_trace_ = stack_trace;
  } else {
    clear_has_stack_trace();
    stack_trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hostname = 3;
inline bool ExceptionResponse::has_hostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExceptionResponse::set_has_hostname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExceptionResponse::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExceptionResponse::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& ExceptionResponse::hostname() const {
  return *hostname_;
}
inline void ExceptionResponse::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void ExceptionResponse::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void ExceptionResponse::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExceptionResponse::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* ExceptionResponse::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExceptionResponse::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool ExceptionResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExceptionResponse::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExceptionResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExceptionResponse::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ExceptionResponse::port() const {
  return port_;
}
inline void ExceptionResponse::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional bool do_not_retry = 5;
inline bool ExceptionResponse::has_do_not_retry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExceptionResponse::set_has_do_not_retry() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExceptionResponse::clear_has_do_not_retry() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExceptionResponse::clear_do_not_retry() {
  do_not_retry_ = false;
  clear_has_do_not_retry();
}
inline bool ExceptionResponse::do_not_retry() const {
  return do_not_retry_;
}
inline void ExceptionResponse::set_do_not_retry(bool value) {
  set_has_do_not_retry();
  do_not_retry_ = value;
}

// -------------------------------------------------------------------

// RequestHeader

// optional uint32 call_id = 1;
inline bool RequestHeader::has_call_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestHeader::set_has_call_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestHeader::clear_has_call_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestHeader::clear_call_id() {
  call_id_ = 0u;
  clear_has_call_id();
}
inline ::google::protobuf::uint32 RequestHeader::call_id() const {
  return call_id_;
}
inline void RequestHeader::set_call_id(::google::protobuf::uint32 value) {
  set_has_call_id();
  call_id_ = value;
}

// optional .hbase.pb.RPCTInfo trace_info = 2;
inline bool RequestHeader::has_trace_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestHeader::set_has_trace_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestHeader::clear_has_trace_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestHeader::clear_trace_info() {
  if (trace_info_ != NULL) trace_info_->::hbase::pb::RPCTInfo::Clear();
  clear_has_trace_info();
}
inline const ::hbase::pb::RPCTInfo& RequestHeader::trace_info() const {
  return trace_info_ != NULL ? *trace_info_ : *default_instance_->trace_info_;
}
inline ::hbase::pb::RPCTInfo* RequestHeader::mutable_trace_info() {
  set_has_trace_info();
  if (trace_info_ == NULL) trace_info_ = new ::hbase::pb::RPCTInfo;
  return trace_info_;
}
inline ::hbase::pb::RPCTInfo* RequestHeader::release_trace_info() {
  clear_has_trace_info();
  ::hbase::pb::RPCTInfo* temp = trace_info_;
  trace_info_ = NULL;
  return temp;
}
inline void RequestHeader::set_allocated_trace_info(::hbase::pb::RPCTInfo* trace_info) {
  delete trace_info_;
  trace_info_ = trace_info;
  if (trace_info) {
    set_has_trace_info();
  } else {
    clear_has_trace_info();
  }
}

// optional string method_name = 3;
inline bool RequestHeader::has_method_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestHeader::set_has_method_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestHeader::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestHeader::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& RequestHeader::method_name() const {
  return *method_name_;
}
inline void RequestHeader::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RequestHeader::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void RequestHeader::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestHeader::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* RequestHeader::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestHeader::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool request_param = 4;
inline bool RequestHeader::has_request_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestHeader::set_has_request_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestHeader::clear_has_request_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestHeader::clear_request_param() {
  request_param_ = false;
  clear_has_request_param();
}
inline bool RequestHeader::request_param() const {
  return request_param_;
}
inline void RequestHeader::set_request_param(bool value) {
  set_has_request_param();
  request_param_ = value;
}

// optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
inline bool RequestHeader::has_cell_block_meta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestHeader::set_has_cell_block_meta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestHeader::clear_has_cell_block_meta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestHeader::clear_cell_block_meta() {
  if (cell_block_meta_ != NULL) cell_block_meta_->::hbase::pb::CellBlockMeta::Clear();
  clear_has_cell_block_meta();
}
inline const ::hbase::pb::CellBlockMeta& RequestHeader::cell_block_meta() const {
  return cell_block_meta_ != NULL ? *cell_block_meta_ : *default_instance_->cell_block_meta_;
}
inline ::hbase::pb::CellBlockMeta* RequestHeader::mutable_cell_block_meta() {
  set_has_cell_block_meta();
  if (cell_block_meta_ == NULL) cell_block_meta_ = new ::hbase::pb::CellBlockMeta;
  return cell_block_meta_;
}
inline ::hbase::pb::CellBlockMeta* RequestHeader::release_cell_block_meta() {
  clear_has_cell_block_meta();
  ::hbase::pb::CellBlockMeta* temp = cell_block_meta_;
  cell_block_meta_ = NULL;
  return temp;
}
inline void RequestHeader::set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta) {
  delete cell_block_meta_;
  cell_block_meta_ = cell_block_meta;
  if (cell_block_meta) {
    set_has_cell_block_meta();
  } else {
    clear_has_cell_block_meta();
  }
}

// optional uint32 priority = 6;
inline bool RequestHeader::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestHeader::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestHeader::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestHeader::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 RequestHeader::priority() const {
  return priority_;
}
inline void RequestHeader::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
}

// -------------------------------------------------------------------

// ResponseHeader

// optional uint32 call_id = 1;
inline bool ResponseHeader::has_call_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeader::set_has_call_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHeader::clear_has_call_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHeader::clear_call_id() {
  call_id_ = 0u;
  clear_has_call_id();
}
inline ::google::protobuf::uint32 ResponseHeader::call_id() const {
  return call_id_;
}
inline void ResponseHeader::set_call_id(::google::protobuf::uint32 value) {
  set_has_call_id();
  call_id_ = value;
}

// optional .hbase.pb.ExceptionResponse exception = 2;
inline bool ResponseHeader::has_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeader::set_has_exception() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHeader::clear_has_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHeader::clear_exception() {
  if (exception_ != NULL) exception_->::hbase::pb::ExceptionResponse::Clear();
  clear_has_exception();
}
inline const ::hbase::pb::ExceptionResponse& ResponseHeader::exception() const {
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
inline ::hbase::pb::ExceptionResponse* ResponseHeader::mutable_exception() {
  set_has_exception();
  if (exception_ == NULL) exception_ = new ::hbase::pb::ExceptionResponse;
  return exception_;
}
inline ::hbase::pb::ExceptionResponse* ResponseHeader::release_exception() {
  clear_has_exception();
  ::hbase::pb::ExceptionResponse* temp = exception_;
  exception_ = NULL;
  return temp;
}
inline void ResponseHeader::set_allocated_exception(::hbase::pb::ExceptionResponse* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    set_has_exception();
  } else {
    clear_has_exception();
  }
}

// optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
inline bool ResponseHeader::has_cell_block_meta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseHeader::set_has_cell_block_meta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseHeader::clear_has_cell_block_meta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseHeader::clear_cell_block_meta() {
  if (cell_block_meta_ != NULL) cell_block_meta_->::hbase::pb::CellBlockMeta::Clear();
  clear_has_cell_block_meta();
}
inline const ::hbase::pb::CellBlockMeta& ResponseHeader::cell_block_meta() const {
  return cell_block_meta_ != NULL ? *cell_block_meta_ : *default_instance_->cell_block_meta_;
}
inline ::hbase::pb::CellBlockMeta* ResponseHeader::mutable_cell_block_meta() {
  set_has_cell_block_meta();
  if (cell_block_meta_ == NULL) cell_block_meta_ = new ::hbase::pb::CellBlockMeta;
  return cell_block_meta_;
}
inline ::hbase::pb::CellBlockMeta* ResponseHeader::release_cell_block_meta() {
  clear_has_cell_block_meta();
  ::hbase::pb::CellBlockMeta* temp = cell_block_meta_;
  cell_block_meta_ = NULL;
  return temp;
}
inline void ResponseHeader::set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta) {
  delete cell_block_meta_;
  cell_block_meta_ = cell_block_meta;
  if (cell_block_meta) {
    set_has_cell_block_meta();
  } else {
    clear_has_cell_block_meta();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RPC_2eproto__INCLUDED
