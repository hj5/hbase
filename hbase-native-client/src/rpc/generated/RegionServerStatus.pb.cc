// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegionServerStatus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RegionServerStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* RegionServerStartupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionServerStartupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionServerStartupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionServerStartupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionServerReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionServerReportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionServerReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionServerReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportRSFatalErrorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRSFatalErrorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportRSFatalErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRSFatalErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastFlushedSequenceIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastFlushedSequenceIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastFlushedSequenceIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastFlushedSequenceIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionStateTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionStateTransition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegionStateTransition_TransitionCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReportRegionStateTransitionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRegionStateTransitionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportRegionStateTransitionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRegionStateTransitionResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RegionServerStatus_2eproto() {
  protobuf_AddDesc_RegionServerStatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RegionServerStatus.proto");
  GOOGLE_CHECK(file != NULL);
  RegionServerStartupRequest_descriptor_ = file->message_type(0);
  static const int RegionServerStartupRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupRequest, server_start_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupRequest, server_current_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupRequest, use_this_hostname_instead_),
  };
  RegionServerStartupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionServerStartupRequest_descriptor_,
      RegionServerStartupRequest::default_instance_,
      RegionServerStartupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionServerStartupRequest));
  RegionServerStartupResponse_descriptor_ = file->message_type(1);
  static const int RegionServerStartupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupResponse, map_entries_),
  };
  RegionServerStartupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionServerStartupResponse_descriptor_,
      RegionServerStartupResponse::default_instance_,
      RegionServerStartupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerStartupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionServerStartupResponse));
  RegionServerReportRequest_descriptor_ = file->message_type(2);
  static const int RegionServerReportRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerReportRequest, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerReportRequest, load_),
  };
  RegionServerReportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionServerReportRequest_descriptor_,
      RegionServerReportRequest::default_instance_,
      RegionServerReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerReportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerReportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionServerReportRequest));
  RegionServerReportResponse_descriptor_ = file->message_type(3);
  static const int RegionServerReportResponse_offsets_[1] = {
  };
  RegionServerReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionServerReportResponse_descriptor_,
      RegionServerReportResponse::default_instance_,
      RegionServerReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionServerReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionServerReportResponse));
  ReportRSFatalErrorRequest_descriptor_ = file->message_type(4);
  static const int ReportRSFatalErrorRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRSFatalErrorRequest, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRSFatalErrorRequest, error_message_),
  };
  ReportRSFatalErrorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRSFatalErrorRequest_descriptor_,
      ReportRSFatalErrorRequest::default_instance_,
      ReportRSFatalErrorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRSFatalErrorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRSFatalErrorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRSFatalErrorRequest));
  ReportRSFatalErrorResponse_descriptor_ = file->message_type(5);
  static const int ReportRSFatalErrorResponse_offsets_[1] = {
  };
  ReportRSFatalErrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRSFatalErrorResponse_descriptor_,
      ReportRSFatalErrorResponse::default_instance_,
      ReportRSFatalErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRSFatalErrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRSFatalErrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRSFatalErrorResponse));
  GetLastFlushedSequenceIdRequest_descriptor_ = file->message_type(6);
  static const int GetLastFlushedSequenceIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdRequest, region_name_),
  };
  GetLastFlushedSequenceIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLastFlushedSequenceIdRequest_descriptor_,
      GetLastFlushedSequenceIdRequest::default_instance_,
      GetLastFlushedSequenceIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastFlushedSequenceIdRequest));
  GetLastFlushedSequenceIdResponse_descriptor_ = file->message_type(7);
  static const int GetLastFlushedSequenceIdResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdResponse, last_flushed_sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdResponse, store_last_flushed_sequence_id_),
  };
  GetLastFlushedSequenceIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLastFlushedSequenceIdResponse_descriptor_,
      GetLastFlushedSequenceIdResponse::default_instance_,
      GetLastFlushedSequenceIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastFlushedSequenceIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastFlushedSequenceIdResponse));
  RegionStateTransition_descriptor_ = file->message_type(8);
  static const int RegionStateTransition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStateTransition, transition_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStateTransition, region_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStateTransition, open_seq_num_),
  };
  RegionStateTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionStateTransition_descriptor_,
      RegionStateTransition::default_instance_,
      RegionStateTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStateTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionStateTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionStateTransition));
  RegionStateTransition_TransitionCode_descriptor_ = RegionStateTransition_descriptor_->enum_type(0);
  ReportRegionStateTransitionRequest_descriptor_ = file->message_type(9);
  static const int ReportRegionStateTransitionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionRequest, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionRequest, transition_),
  };
  ReportRegionStateTransitionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRegionStateTransitionRequest_descriptor_,
      ReportRegionStateTransitionRequest::default_instance_,
      ReportRegionStateTransitionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRegionStateTransitionRequest));
  ReportRegionStateTransitionResponse_descriptor_ = file->message_type(10);
  static const int ReportRegionStateTransitionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionResponse, error_message_),
  };
  ReportRegionStateTransitionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportRegionStateTransitionResponse_descriptor_,
      ReportRegionStateTransitionResponse::default_instance_,
      ReportRegionStateTransitionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRegionStateTransitionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportRegionStateTransitionResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RegionServerStatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionServerStartupRequest_descriptor_, &RegionServerStartupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionServerStartupResponse_descriptor_, &RegionServerStartupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionServerReportRequest_descriptor_, &RegionServerReportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionServerReportResponse_descriptor_, &RegionServerReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRSFatalErrorRequest_descriptor_, &ReportRSFatalErrorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRSFatalErrorResponse_descriptor_, &ReportRSFatalErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastFlushedSequenceIdRequest_descriptor_, &GetLastFlushedSequenceIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastFlushedSequenceIdResponse_descriptor_, &GetLastFlushedSequenceIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionStateTransition_descriptor_, &RegionStateTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRegionStateTransitionRequest_descriptor_, &ReportRegionStateTransitionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportRegionStateTransitionResponse_descriptor_, &ReportRegionStateTransitionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RegionServerStatus_2eproto() {
  delete RegionServerStartupRequest::default_instance_;
  delete RegionServerStartupRequest_reflection_;
  delete RegionServerStartupResponse::default_instance_;
  delete RegionServerStartupResponse_reflection_;
  delete RegionServerReportRequest::default_instance_;
  delete RegionServerReportRequest_reflection_;
  delete RegionServerReportResponse::default_instance_;
  delete RegionServerReportResponse_reflection_;
  delete ReportRSFatalErrorRequest::default_instance_;
  delete ReportRSFatalErrorRequest_reflection_;
  delete ReportRSFatalErrorResponse::default_instance_;
  delete ReportRSFatalErrorResponse_reflection_;
  delete GetLastFlushedSequenceIdRequest::default_instance_;
  delete GetLastFlushedSequenceIdRequest_reflection_;
  delete GetLastFlushedSequenceIdResponse::default_instance_;
  delete GetLastFlushedSequenceIdResponse_reflection_;
  delete RegionStateTransition::default_instance_;
  delete RegionStateTransition_reflection_;
  delete ReportRegionStateTransitionRequest::default_instance_;
  delete ReportRegionStateTransitionRequest_reflection_;
  delete ReportRegionStateTransitionResponse::default_instance_;
  delete ReportRegionStateTransitionResponse_reflection_;
}

void protobuf_AddDesc_RegionServerStatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_ClusterStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030RegionServerStatus.proto\022\010hbase.pb\032\013HB"
    "ase.proto\032\023ClusterStatus.proto\"\205\001\n\032Regio"
    "nServerStartupRequest\022\014\n\004port\030\001 \002(\r\022\031\n\021s"
    "erver_start_code\030\002 \002(\004\022\033\n\023server_current"
    "_time\030\003 \002(\004\022!\n\031use_this_hostname_instead"
    "\030\004 \001(\t\"L\n\033RegionServerStartupResponse\022-\n"
    "\013map_entries\030\001 \003(\0132\030.hbase.pb.NameString"
    "Pair\"e\n\031RegionServerReportRequest\022$\n\006ser"
    "ver\030\001 \002(\0132\024.hbase.pb.ServerName\022\"\n\004load\030"
    "\002 \001(\0132\024.hbase.pb.ServerLoad\"\034\n\032RegionSer"
    "verReportResponse\"X\n\031ReportRSFatalErrorR"
    "equest\022$\n\006server\030\001 \002(\0132\024.hbase.pb.Server"
    "Name\022\025\n\rerror_message\030\002 \002(\t\"\034\n\032ReportRSF"
    "atalErrorResponse\"6\n\037GetLastFlushedSeque"
    "nceIdRequest\022\023\n\013region_name\030\001 \002(\014\"\207\001\n Ge"
    "tLastFlushedSequenceIdResponse\022 \n\030last_f"
    "lushed_sequence_id\030\001 \002(\004\022A\n\036store_last_f"
    "lushed_sequence_id\030\002 \003(\0132\031.hbase.pb.Stor"
    "eSequenceId\"\344\002\n\025RegionStateTransition\022G\n"
    "\017transition_code\030\001 \002(\0162..hbase.pb.Region"
    "StateTransition.TransitionCode\022)\n\013region"
    "_info\030\002 \003(\0132\024.hbase.pb.RegionInfo\022\024\n\014ope"
    "n_seq_num\030\003 \001(\004\"\300\001\n\016TransitionCode\022\n\n\006OP"
    "ENED\020\000\022\017\n\013FAILED_OPEN\020\001\022\n\n\006CLOSED\020\002\022\022\n\016R"
    "EADY_TO_SPLIT\020\003\022\022\n\016READY_TO_MERGE\020\004\022\016\n\nS"
    "PLIT_PONR\020\005\022\016\n\nMERGE_PONR\020\006\022\t\n\005SPLIT\020\007\022\n"
    "\n\006MERGED\020\010\022\022\n\016SPLIT_REVERTED\020\t\022\022\n\016MERGE_"
    "REVERTED\020\n\"\177\n\"ReportRegionStateTransitio"
    "nRequest\022$\n\006server\030\001 \002(\0132\024.hbase.pb.Serv"
    "erName\0223\n\ntransition\030\002 \003(\0132\037.hbase.pb.Re"
    "gionStateTransition\"<\n#ReportRegionState"
    "TransitionResponse\022\025\n\rerror_message\030\001 \001("
    "\t2\260\004\n\031RegionServerStatusService\022b\n\023Regio"
    "nServerStartup\022$.hbase.pb.RegionServerSt"
    "artupRequest\032%.hbase.pb.RegionServerStar"
    "tupResponse\022_\n\022RegionServerReport\022#.hbas"
    "e.pb.RegionServerReportRequest\032$.hbase.p"
    "b.RegionServerReportResponse\022_\n\022ReportRS"
    "FatalError\022#.hbase.pb.ReportRSFatalError"
    "Request\032$.hbase.pb.ReportRSFatalErrorRes"
    "ponse\022q\n\030GetLastFlushedSequenceId\022).hbas"
    "e.pb.GetLastFlushedSequenceIdRequest\032*.h"
    "base.pb.GetLastFlushedSequenceIdResponse"
    "\022z\n\033ReportRegionStateTransition\022,.hbase."
    "pb.ReportRegionStateTransitionRequest\032-."
    "hbase.pb.ReportRegionStateTransitionResp"
    "onseBN\n*org.apache.hadoop.hbase.protobuf"
    ".generatedB\030RegionServerStatusProtosH\001\210\001"
    "\001\240\001\001", 1924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RegionServerStatus.proto", &protobuf_RegisterTypes);
  RegionServerStartupRequest::default_instance_ = new RegionServerStartupRequest();
  RegionServerStartupResponse::default_instance_ = new RegionServerStartupResponse();
  RegionServerReportRequest::default_instance_ = new RegionServerReportRequest();
  RegionServerReportResponse::default_instance_ = new RegionServerReportResponse();
  ReportRSFatalErrorRequest::default_instance_ = new ReportRSFatalErrorRequest();
  ReportRSFatalErrorResponse::default_instance_ = new ReportRSFatalErrorResponse();
  GetLastFlushedSequenceIdRequest::default_instance_ = new GetLastFlushedSequenceIdRequest();
  GetLastFlushedSequenceIdResponse::default_instance_ = new GetLastFlushedSequenceIdResponse();
  RegionStateTransition::default_instance_ = new RegionStateTransition();
  ReportRegionStateTransitionRequest::default_instance_ = new ReportRegionStateTransitionRequest();
  ReportRegionStateTransitionResponse::default_instance_ = new ReportRegionStateTransitionResponse();
  RegionServerStartupRequest::default_instance_->InitAsDefaultInstance();
  RegionServerStartupResponse::default_instance_->InitAsDefaultInstance();
  RegionServerReportRequest::default_instance_->InitAsDefaultInstance();
  RegionServerReportResponse::default_instance_->InitAsDefaultInstance();
  ReportRSFatalErrorRequest::default_instance_->InitAsDefaultInstance();
  ReportRSFatalErrorResponse::default_instance_->InitAsDefaultInstance();
  GetLastFlushedSequenceIdRequest::default_instance_->InitAsDefaultInstance();
  GetLastFlushedSequenceIdResponse::default_instance_->InitAsDefaultInstance();
  RegionStateTransition::default_instance_->InitAsDefaultInstance();
  ReportRegionStateTransitionRequest::default_instance_->InitAsDefaultInstance();
  ReportRegionStateTransitionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RegionServerStatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RegionServerStatus_2eproto {
  StaticDescriptorInitializer_RegionServerStatus_2eproto() {
    protobuf_AddDesc_RegionServerStatus_2eproto();
  }
} static_descriptor_initializer_RegionServerStatus_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegionServerStartupRequest::kPortFieldNumber;
const int RegionServerStartupRequest::kServerStartCodeFieldNumber;
const int RegionServerStartupRequest::kServerCurrentTimeFieldNumber;
const int RegionServerStartupRequest::kUseThisHostnameInsteadFieldNumber;
#endif  // !_MSC_VER

RegionServerStartupRequest::RegionServerStartupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionServerStartupRequest::InitAsDefaultInstance() {
}

RegionServerStartupRequest::RegionServerStartupRequest(const RegionServerStartupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionServerStartupRequest::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  server_start_code_ = GOOGLE_ULONGLONG(0);
  server_current_time_ = GOOGLE_ULONGLONG(0);
  use_this_hostname_instead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionServerStartupRequest::~RegionServerStartupRequest() {
  SharedDtor();
}

void RegionServerStartupRequest::SharedDtor() {
  if (use_this_hostname_instead_ != &::google::protobuf::internal::kEmptyString) {
    delete use_this_hostname_instead_;
  }
  if (this != default_instance_) {
  }
}

void RegionServerStartupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionServerStartupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionServerStartupRequest_descriptor_;
}

const RegionServerStartupRequest& RegionServerStartupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

RegionServerStartupRequest* RegionServerStartupRequest::default_instance_ = NULL;

RegionServerStartupRequest* RegionServerStartupRequest::New() const {
  return new RegionServerStartupRequest;
}

void RegionServerStartupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    server_start_code_ = GOOGLE_ULONGLONG(0);
    server_current_time_ = GOOGLE_ULONGLONG(0);
    if (has_use_this_hostname_instead()) {
      if (use_this_hostname_instead_ != &::google::protobuf::internal::kEmptyString) {
        use_this_hostname_instead_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionServerStartupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_start_code;
        break;
      }

      // required uint64 server_start_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_start_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_start_code_)));
          set_has_server_start_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_current_time;
        break;
      }

      // required uint64 server_current_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_current_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_current_time_)));
          set_has_server_current_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_use_this_hostname_instead;
        break;
      }

      // optional string use_this_hostname_instead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_use_this_hostname_instead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_use_this_hostname_instead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->use_this_hostname_instead().data(), this->use_this_hostname_instead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionServerStartupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required uint64 server_start_code = 2;
  if (has_server_start_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_start_code(), output);
  }

  // required uint64 server_current_time = 3;
  if (has_server_current_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_current_time(), output);
  }

  // optional string use_this_hostname_instead = 4;
  if (has_use_this_hostname_instead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->use_this_hostname_instead().data(), this->use_this_hostname_instead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->use_this_hostname_instead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionServerStartupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required uint64 server_start_code = 2;
  if (has_server_start_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_start_code(), target);
  }

  // required uint64 server_current_time = 3;
  if (has_server_current_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_current_time(), target);
  }

  // optional string use_this_hostname_instead = 4;
  if (has_use_this_hostname_instead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->use_this_hostname_instead().data(), this->use_this_hostname_instead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->use_this_hostname_instead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionServerStartupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint64 server_start_code = 2;
    if (has_server_start_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_start_code());
    }

    // required uint64 server_current_time = 3;
    if (has_server_current_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_current_time());
    }

    // optional string use_this_hostname_instead = 4;
    if (has_use_this_hostname_instead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->use_this_hostname_instead());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionServerStartupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionServerStartupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionServerStartupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionServerStartupRequest::MergeFrom(const RegionServerStartupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_server_start_code()) {
      set_server_start_code(from.server_start_code());
    }
    if (from.has_server_current_time()) {
      set_server_current_time(from.server_current_time());
    }
    if (from.has_use_this_hostname_instead()) {
      set_use_this_hostname_instead(from.use_this_hostname_instead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionServerStartupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionServerStartupRequest::CopyFrom(const RegionServerStartupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionServerStartupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegionServerStartupRequest::Swap(RegionServerStartupRequest* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(server_start_code_, other->server_start_code_);
    std::swap(server_current_time_, other->server_current_time_);
    std::swap(use_this_hostname_instead_, other->use_this_hostname_instead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionServerStartupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionServerStartupRequest_descriptor_;
  metadata.reflection = RegionServerStartupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionServerStartupResponse::kMapEntriesFieldNumber;
#endif  // !_MSC_VER

RegionServerStartupResponse::RegionServerStartupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionServerStartupResponse::InitAsDefaultInstance() {
}

RegionServerStartupResponse::RegionServerStartupResponse(const RegionServerStartupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionServerStartupResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionServerStartupResponse::~RegionServerStartupResponse() {
  SharedDtor();
}

void RegionServerStartupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionServerStartupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionServerStartupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionServerStartupResponse_descriptor_;
}

const RegionServerStartupResponse& RegionServerStartupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

RegionServerStartupResponse* RegionServerStartupResponse::default_instance_ = NULL;

RegionServerStartupResponse* RegionServerStartupResponse::New() const {
  return new RegionServerStartupResponse;
}

void RegionServerStartupResponse::Clear() {
  map_entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionServerStartupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.NameStringPair map_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionServerStartupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.NameStringPair map_entries = 1;
  for (int i = 0; i < this->map_entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionServerStartupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.NameStringPair map_entries = 1;
  for (int i = 0; i < this->map_entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionServerStartupResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.NameStringPair map_entries = 1;
  total_size += 1 * this->map_entries_size();
  for (int i = 0; i < this->map_entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionServerStartupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionServerStartupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionServerStartupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionServerStartupResponse::MergeFrom(const RegionServerStartupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_entries_.MergeFrom(from.map_entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionServerStartupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionServerStartupResponse::CopyFrom(const RegionServerStartupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionServerStartupResponse::IsInitialized() const {

  for (int i = 0; i < map_entries_size(); i++) {
    if (!this->map_entries(i).IsInitialized()) return false;
  }
  return true;
}

void RegionServerStartupResponse::Swap(RegionServerStartupResponse* other) {
  if (other != this) {
    map_entries_.Swap(&other->map_entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionServerStartupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionServerStartupResponse_descriptor_;
  metadata.reflection = RegionServerStartupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionServerReportRequest::kServerFieldNumber;
const int RegionServerReportRequest::kLoadFieldNumber;
#endif  // !_MSC_VER

RegionServerReportRequest::RegionServerReportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionServerReportRequest::InitAsDefaultInstance() {
  server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
  load_ = const_cast< ::hbase::pb::ServerLoad*>(&::hbase::pb::ServerLoad::default_instance());
}

RegionServerReportRequest::RegionServerReportRequest(const RegionServerReportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionServerReportRequest::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  load_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionServerReportRequest::~RegionServerReportRequest() {
  SharedDtor();
}

void RegionServerReportRequest::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
    delete load_;
  }
}

void RegionServerReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionServerReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionServerReportRequest_descriptor_;
}

const RegionServerReportRequest& RegionServerReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

RegionServerReportRequest* RegionServerReportRequest::default_instance_ = NULL;

RegionServerReportRequest* RegionServerReportRequest::New() const {
  return new RegionServerReportRequest;
}

void RegionServerReportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
    }
    if (has_load()) {
      if (load_ != NULL) load_->::hbase::pb::ServerLoad::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionServerReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_load;
        break;
      }

      // optional .hbase.pb.ServerLoad load = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionServerReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(), output);
  }

  // optional .hbase.pb.ServerLoad load = 2;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->load(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionServerReportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(), target);
  }

  // optional .hbase.pb.ServerLoad load = 2;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->load(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionServerReportRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // optional .hbase.pb.ServerLoad load = 2;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionServerReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionServerReportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionServerReportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionServerReportRequest::MergeFrom(const RegionServerReportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (from.has_load()) {
      mutable_load()->::hbase::pb::ServerLoad::MergeFrom(from.load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionServerReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionServerReportRequest::CopyFrom(const RegionServerReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionServerReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  if (has_load()) {
    if (!this->load().IsInitialized()) return false;
  }
  return true;
}

void RegionServerReportRequest::Swap(RegionServerReportRequest* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(load_, other->load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionServerReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionServerReportRequest_descriptor_;
  metadata.reflection = RegionServerReportRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RegionServerReportResponse::RegionServerReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionServerReportResponse::InitAsDefaultInstance() {
}

RegionServerReportResponse::RegionServerReportResponse(const RegionServerReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionServerReportResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionServerReportResponse::~RegionServerReportResponse() {
  SharedDtor();
}

void RegionServerReportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionServerReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionServerReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionServerReportResponse_descriptor_;
}

const RegionServerReportResponse& RegionServerReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

RegionServerReportResponse* RegionServerReportResponse::default_instance_ = NULL;

RegionServerReportResponse* RegionServerReportResponse::New() const {
  return new RegionServerReportResponse;
}

void RegionServerReportResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionServerReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RegionServerReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionServerReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionServerReportResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionServerReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionServerReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionServerReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionServerReportResponse::MergeFrom(const RegionServerReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionServerReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionServerReportResponse::CopyFrom(const RegionServerReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionServerReportResponse::IsInitialized() const {

  return true;
}

void RegionServerReportResponse::Swap(RegionServerReportResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionServerReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionServerReportResponse_descriptor_;
  metadata.reflection = RegionServerReportResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportRSFatalErrorRequest::kServerFieldNumber;
const int ReportRSFatalErrorRequest::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ReportRSFatalErrorRequest::ReportRSFatalErrorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRSFatalErrorRequest::InitAsDefaultInstance() {
  server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

ReportRSFatalErrorRequest::ReportRSFatalErrorRequest(const ReportRSFatalErrorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRSFatalErrorRequest::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRSFatalErrorRequest::~ReportRSFatalErrorRequest() {
  SharedDtor();
}

void ReportRSFatalErrorRequest::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete server_;
  }
}

void ReportRSFatalErrorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRSFatalErrorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRSFatalErrorRequest_descriptor_;
}

const ReportRSFatalErrorRequest& ReportRSFatalErrorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

ReportRSFatalErrorRequest* ReportRSFatalErrorRequest::default_instance_ = NULL;

ReportRSFatalErrorRequest* ReportRSFatalErrorRequest::New() const {
  return new ReportRSFatalErrorRequest;
}

void ReportRSFatalErrorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRSFatalErrorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // required string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportRSFatalErrorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(), output);
  }

  // required string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRSFatalErrorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(), target);
  }

  // required string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRSFatalErrorRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

    // required string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRSFatalErrorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRSFatalErrorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRSFatalErrorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRSFatalErrorRequest::MergeFrom(const ReportRSFatalErrorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRSFatalErrorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRSFatalErrorRequest::CopyFrom(const ReportRSFatalErrorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRSFatalErrorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void ReportRSFatalErrorRequest::Swap(ReportRSFatalErrorRequest* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRSFatalErrorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRSFatalErrorRequest_descriptor_;
  metadata.reflection = ReportRSFatalErrorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReportRSFatalErrorResponse::ReportRSFatalErrorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRSFatalErrorResponse::InitAsDefaultInstance() {
}

ReportRSFatalErrorResponse::ReportRSFatalErrorResponse(const ReportRSFatalErrorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRSFatalErrorResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRSFatalErrorResponse::~ReportRSFatalErrorResponse() {
  SharedDtor();
}

void ReportRSFatalErrorResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportRSFatalErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRSFatalErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRSFatalErrorResponse_descriptor_;
}

const ReportRSFatalErrorResponse& ReportRSFatalErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

ReportRSFatalErrorResponse* ReportRSFatalErrorResponse::default_instance_ = NULL;

ReportRSFatalErrorResponse* ReportRSFatalErrorResponse::New() const {
  return new ReportRSFatalErrorResponse;
}

void ReportRSFatalErrorResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRSFatalErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReportRSFatalErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRSFatalErrorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRSFatalErrorResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRSFatalErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRSFatalErrorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRSFatalErrorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRSFatalErrorResponse::MergeFrom(const ReportRSFatalErrorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRSFatalErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRSFatalErrorResponse::CopyFrom(const ReportRSFatalErrorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRSFatalErrorResponse::IsInitialized() const {

  return true;
}

void ReportRSFatalErrorResponse::Swap(ReportRSFatalErrorResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRSFatalErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRSFatalErrorResponse_descriptor_;
  metadata.reflection = ReportRSFatalErrorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastFlushedSequenceIdRequest::kRegionNameFieldNumber;
#endif  // !_MSC_VER

GetLastFlushedSequenceIdRequest::GetLastFlushedSequenceIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLastFlushedSequenceIdRequest::InitAsDefaultInstance() {
}

GetLastFlushedSequenceIdRequest::GetLastFlushedSequenceIdRequest(const GetLastFlushedSequenceIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLastFlushedSequenceIdRequest::SharedCtor() {
  _cached_size_ = 0;
  region_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastFlushedSequenceIdRequest::~GetLastFlushedSequenceIdRequest() {
  SharedDtor();
}

void GetLastFlushedSequenceIdRequest::SharedDtor() {
  if (region_name_ != &::google::protobuf::internal::kEmptyString) {
    delete region_name_;
  }
  if (this != default_instance_) {
  }
}

void GetLastFlushedSequenceIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastFlushedSequenceIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastFlushedSequenceIdRequest_descriptor_;
}

const GetLastFlushedSequenceIdRequest& GetLastFlushedSequenceIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

GetLastFlushedSequenceIdRequest* GetLastFlushedSequenceIdRequest::default_instance_ = NULL;

GetLastFlushedSequenceIdRequest* GetLastFlushedSequenceIdRequest::New() const {
  return new GetLastFlushedSequenceIdRequest;
}

void GetLastFlushedSequenceIdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_region_name()) {
      if (region_name_ != &::google::protobuf::internal::kEmptyString) {
        region_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastFlushedSequenceIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes region_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLastFlushedSequenceIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes region_name = 1;
  if (has_region_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->region_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLastFlushedSequenceIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes region_name = 1;
  if (has_region_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->region_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLastFlushedSequenceIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes region_name = 1;
    if (has_region_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastFlushedSequenceIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastFlushedSequenceIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLastFlushedSequenceIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastFlushedSequenceIdRequest::MergeFrom(const GetLastFlushedSequenceIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_name()) {
      set_region_name(from.region_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastFlushedSequenceIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastFlushedSequenceIdRequest::CopyFrom(const GetLastFlushedSequenceIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastFlushedSequenceIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLastFlushedSequenceIdRequest::Swap(GetLastFlushedSequenceIdRequest* other) {
  if (other != this) {
    std::swap(region_name_, other->region_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLastFlushedSequenceIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastFlushedSequenceIdRequest_descriptor_;
  metadata.reflection = GetLastFlushedSequenceIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastFlushedSequenceIdResponse::kLastFlushedSequenceIdFieldNumber;
const int GetLastFlushedSequenceIdResponse::kStoreLastFlushedSequenceIdFieldNumber;
#endif  // !_MSC_VER

GetLastFlushedSequenceIdResponse::GetLastFlushedSequenceIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLastFlushedSequenceIdResponse::InitAsDefaultInstance() {
}

GetLastFlushedSequenceIdResponse::GetLastFlushedSequenceIdResponse(const GetLastFlushedSequenceIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLastFlushedSequenceIdResponse::SharedCtor() {
  _cached_size_ = 0;
  last_flushed_sequence_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastFlushedSequenceIdResponse::~GetLastFlushedSequenceIdResponse() {
  SharedDtor();
}

void GetLastFlushedSequenceIdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLastFlushedSequenceIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastFlushedSequenceIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastFlushedSequenceIdResponse_descriptor_;
}

const GetLastFlushedSequenceIdResponse& GetLastFlushedSequenceIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

GetLastFlushedSequenceIdResponse* GetLastFlushedSequenceIdResponse::default_instance_ = NULL;

GetLastFlushedSequenceIdResponse* GetLastFlushedSequenceIdResponse::New() const {
  return new GetLastFlushedSequenceIdResponse;
}

void GetLastFlushedSequenceIdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_flushed_sequence_id_ = GOOGLE_ULONGLONG(0);
  }
  store_last_flushed_sequence_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastFlushedSequenceIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 last_flushed_sequence_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_flushed_sequence_id_)));
          set_has_last_flushed_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_last_flushed_sequence_id;
        break;
      }

      // repeated .hbase.pb.StoreSequenceId store_last_flushed_sequence_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_last_flushed_sequence_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_last_flushed_sequence_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_store_last_flushed_sequence_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLastFlushedSequenceIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 last_flushed_sequence_id = 1;
  if (has_last_flushed_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_flushed_sequence_id(), output);
  }

  // repeated .hbase.pb.StoreSequenceId store_last_flushed_sequence_id = 2;
  for (int i = 0; i < this->store_last_flushed_sequence_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->store_last_flushed_sequence_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLastFlushedSequenceIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 last_flushed_sequence_id = 1;
  if (has_last_flushed_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_flushed_sequence_id(), target);
  }

  // repeated .hbase.pb.StoreSequenceId store_last_flushed_sequence_id = 2;
  for (int i = 0; i < this->store_last_flushed_sequence_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->store_last_flushed_sequence_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLastFlushedSequenceIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 last_flushed_sequence_id = 1;
    if (has_last_flushed_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_flushed_sequence_id());
    }

  }
  // repeated .hbase.pb.StoreSequenceId store_last_flushed_sequence_id = 2;
  total_size += 1 * this->store_last_flushed_sequence_id_size();
  for (int i = 0; i < this->store_last_flushed_sequence_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store_last_flushed_sequence_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastFlushedSequenceIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastFlushedSequenceIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLastFlushedSequenceIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastFlushedSequenceIdResponse::MergeFrom(const GetLastFlushedSequenceIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_last_flushed_sequence_id_.MergeFrom(from.store_last_flushed_sequence_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_flushed_sequence_id()) {
      set_last_flushed_sequence_id(from.last_flushed_sequence_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastFlushedSequenceIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastFlushedSequenceIdResponse::CopyFrom(const GetLastFlushedSequenceIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastFlushedSequenceIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < store_last_flushed_sequence_id_size(); i++) {
    if (!this->store_last_flushed_sequence_id(i).IsInitialized()) return false;
  }
  return true;
}

void GetLastFlushedSequenceIdResponse::Swap(GetLastFlushedSequenceIdResponse* other) {
  if (other != this) {
    std::swap(last_flushed_sequence_id_, other->last_flushed_sequence_id_);
    store_last_flushed_sequence_id_.Swap(&other->store_last_flushed_sequence_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLastFlushedSequenceIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastFlushedSequenceIdResponse_descriptor_;
  metadata.reflection = GetLastFlushedSequenceIdResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegionStateTransition_TransitionCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionStateTransition_TransitionCode_descriptor_;
}
bool RegionStateTransition_TransitionCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegionStateTransition_TransitionCode RegionStateTransition::OPENED;
const RegionStateTransition_TransitionCode RegionStateTransition::FAILED_OPEN;
const RegionStateTransition_TransitionCode RegionStateTransition::CLOSED;
const RegionStateTransition_TransitionCode RegionStateTransition::READY_TO_SPLIT;
const RegionStateTransition_TransitionCode RegionStateTransition::READY_TO_MERGE;
const RegionStateTransition_TransitionCode RegionStateTransition::SPLIT_PONR;
const RegionStateTransition_TransitionCode RegionStateTransition::MERGE_PONR;
const RegionStateTransition_TransitionCode RegionStateTransition::SPLIT;
const RegionStateTransition_TransitionCode RegionStateTransition::MERGED;
const RegionStateTransition_TransitionCode RegionStateTransition::SPLIT_REVERTED;
const RegionStateTransition_TransitionCode RegionStateTransition::MERGE_REVERTED;
const RegionStateTransition_TransitionCode RegionStateTransition::TransitionCode_MIN;
const RegionStateTransition_TransitionCode RegionStateTransition::TransitionCode_MAX;
const int RegionStateTransition::TransitionCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegionStateTransition::kTransitionCodeFieldNumber;
const int RegionStateTransition::kRegionInfoFieldNumber;
const int RegionStateTransition::kOpenSeqNumFieldNumber;
#endif  // !_MSC_VER

RegionStateTransition::RegionStateTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegionStateTransition::InitAsDefaultInstance() {
}

RegionStateTransition::RegionStateTransition(const RegionStateTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegionStateTransition::SharedCtor() {
  _cached_size_ = 0;
  transition_code_ = 0;
  open_seq_num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionStateTransition::~RegionStateTransition() {
  SharedDtor();
}

void RegionStateTransition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionStateTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionStateTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionStateTransition_descriptor_;
}

const RegionStateTransition& RegionStateTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

RegionStateTransition* RegionStateTransition::default_instance_ = NULL;

RegionStateTransition* RegionStateTransition::New() const {
  return new RegionStateTransition;
}

void RegionStateTransition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transition_code_ = 0;
    open_seq_num_ = GOOGLE_ULONGLONG(0);
  }
  region_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionStateTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionStateTransition.TransitionCode transition_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionStateTransition_TransitionCode_IsValid(value)) {
            set_transition_code(static_cast< ::hbase::pb::RegionStateTransition_TransitionCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_info;
        break;
      }

      // repeated .hbase.pb.RegionInfo region_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region_info;
        if (input->ExpectTag(24)) goto parse_open_seq_num;
        break;
      }

      // optional uint64 open_seq_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_seq_num_)));
          set_has_open_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegionStateTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.RegionStateTransition.TransitionCode transition_code = 1;
  if (has_transition_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transition_code(), output);
  }

  // repeated .hbase.pb.RegionInfo region_info = 2;
  for (int i = 0; i < this->region_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region_info(i), output);
  }

  // optional uint64 open_seq_num = 3;
  if (has_open_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->open_seq_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegionStateTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.RegionStateTransition.TransitionCode transition_code = 1;
  if (has_transition_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transition_code(), target);
  }

  // repeated .hbase.pb.RegionInfo region_info = 2;
  for (int i = 0; i < this->region_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region_info(i), target);
  }

  // optional uint64 open_seq_num = 3;
  if (has_open_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->open_seq_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegionStateTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.RegionStateTransition.TransitionCode transition_code = 1;
    if (has_transition_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transition_code());
    }

    // optional uint64 open_seq_num = 3;
    if (has_open_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_seq_num());
    }

  }
  // repeated .hbase.pb.RegionInfo region_info = 2;
  total_size += 1 * this->region_info_size();
  for (int i = 0; i < this->region_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionStateTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionStateTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionStateTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionStateTransition::MergeFrom(const RegionStateTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_info_.MergeFrom(from.region_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transition_code()) {
      set_transition_code(from.transition_code());
    }
    if (from.has_open_seq_num()) {
      set_open_seq_num(from.open_seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionStateTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionStateTransition::CopyFrom(const RegionStateTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionStateTransition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < region_info_size(); i++) {
    if (!this->region_info(i).IsInitialized()) return false;
  }
  return true;
}

void RegionStateTransition::Swap(RegionStateTransition* other) {
  if (other != this) {
    std::swap(transition_code_, other->transition_code_);
    region_info_.Swap(&other->region_info_);
    std::swap(open_seq_num_, other->open_seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionStateTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionStateTransition_descriptor_;
  metadata.reflection = RegionStateTransition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportRegionStateTransitionRequest::kServerFieldNumber;
const int ReportRegionStateTransitionRequest::kTransitionFieldNumber;
#endif  // !_MSC_VER

ReportRegionStateTransitionRequest::ReportRegionStateTransitionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRegionStateTransitionRequest::InitAsDefaultInstance() {
  server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

ReportRegionStateTransitionRequest::ReportRegionStateTransitionRequest(const ReportRegionStateTransitionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRegionStateTransitionRequest::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRegionStateTransitionRequest::~ReportRegionStateTransitionRequest() {
  SharedDtor();
}

void ReportRegionStateTransitionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
  }
}

void ReportRegionStateTransitionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRegionStateTransitionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRegionStateTransitionRequest_descriptor_;
}

const ReportRegionStateTransitionRequest& ReportRegionStateTransitionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

ReportRegionStateTransitionRequest* ReportRegionStateTransitionRequest::default_instance_ = NULL;

ReportRegionStateTransitionRequest* ReportRegionStateTransitionRequest::New() const {
  return new ReportRegionStateTransitionRequest;
}

void ReportRegionStateTransitionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
    }
  }
  transition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRegionStateTransitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // repeated .hbase.pb.RegionStateTransition transition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportRegionStateTransitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server(), output);
  }

  // repeated .hbase.pb.RegionStateTransition transition = 2;
  for (int i = 0; i < this->transition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRegionStateTransitionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server(), target);
  }

  // repeated .hbase.pb.RegionStateTransition transition = 2;
  for (int i = 0; i < this->transition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRegionStateTransitionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

  }
  // repeated .hbase.pb.RegionStateTransition transition = 2;
  total_size += 1 * this->transition_size();
  for (int i = 0; i < this->transition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRegionStateTransitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRegionStateTransitionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRegionStateTransitionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRegionStateTransitionRequest::MergeFrom(const ReportRegionStateTransitionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  transition_.MergeFrom(from.transition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRegionStateTransitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRegionStateTransitionRequest::CopyFrom(const ReportRegionStateTransitionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRegionStateTransitionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  for (int i = 0; i < transition_size(); i++) {
    if (!this->transition(i).IsInitialized()) return false;
  }
  return true;
}

void ReportRegionStateTransitionRequest::Swap(ReportRegionStateTransitionRequest* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    transition_.Swap(&other->transition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRegionStateTransitionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRegionStateTransitionRequest_descriptor_;
  metadata.reflection = ReportRegionStateTransitionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportRegionStateTransitionResponse::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ReportRegionStateTransitionResponse::ReportRegionStateTransitionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportRegionStateTransitionResponse::InitAsDefaultInstance() {
}

ReportRegionStateTransitionResponse::ReportRegionStateTransitionResponse(const ReportRegionStateTransitionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportRegionStateTransitionResponse::SharedCtor() {
  _cached_size_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportRegionStateTransitionResponse::~ReportRegionStateTransitionResponse() {
  SharedDtor();
}

void ReportRegionStateTransitionResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void ReportRegionStateTransitionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRegionStateTransitionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRegionStateTransitionResponse_descriptor_;
}

const ReportRegionStateTransitionResponse& ReportRegionStateTransitionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionServerStatus_2eproto();
  return *default_instance_;
}

ReportRegionStateTransitionResponse* ReportRegionStateTransitionResponse::default_instance_ = NULL;

ReportRegionStateTransitionResponse* ReportRegionStateTransitionResponse::New() const {
  return new ReportRegionStateTransitionResponse;
}

void ReportRegionStateTransitionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportRegionStateTransitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportRegionStateTransitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportRegionStateTransitionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportRegionStateTransitionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error_message = 1;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRegionStateTransitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportRegionStateTransitionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportRegionStateTransitionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportRegionStateTransitionResponse::MergeFrom(const ReportRegionStateTransitionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportRegionStateTransitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRegionStateTransitionResponse::CopyFrom(const ReportRegionStateTransitionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRegionStateTransitionResponse::IsInitialized() const {

  return true;
}

void ReportRegionStateTransitionResponse::Swap(ReportRegionStateTransitionResponse* other) {
  if (other != this) {
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportRegionStateTransitionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRegionStateTransitionResponse_descriptor_;
  metadata.reflection = ReportRegionStateTransitionResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
