// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FS.proto

#ifndef PROTOBUF_FS_2eproto__INCLUDED
#define PROTOBUF_FS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FS_2eproto();
void protobuf_AssignDesc_FS_2eproto();
void protobuf_ShutdownFile_FS_2eproto();

class HBaseVersionFileContent;
class Reference;

enum Reference_Range {
  Reference_Range_TOP = 0,
  Reference_Range_BOTTOM = 1
};
bool Reference_Range_IsValid(int value);
const Reference_Range Reference_Range_Range_MIN = Reference_Range_TOP;
const Reference_Range Reference_Range_Range_MAX = Reference_Range_BOTTOM;
const int Reference_Range_Range_ARRAYSIZE = Reference_Range_Range_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reference_Range_descriptor();
inline const ::std::string& Reference_Range_Name(Reference_Range value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reference_Range_descriptor(), value);
}
inline bool Reference_Range_Parse(
    const ::std::string& name, Reference_Range* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reference_Range>(
    Reference_Range_descriptor(), name, value);
}
// ===================================================================

class HBaseVersionFileContent : public ::google::protobuf::Message {
 public:
  HBaseVersionFileContent();
  virtual ~HBaseVersionFileContent();

  HBaseVersionFileContent(const HBaseVersionFileContent& from);

  inline HBaseVersionFileContent& operator=(const HBaseVersionFileContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HBaseVersionFileContent& default_instance();

  void Swap(HBaseVersionFileContent* other);

  // implements Message ----------------------------------------------

  HBaseVersionFileContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HBaseVersionFileContent& from);
  void MergeFrom(const HBaseVersionFileContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:hbase.pb.HBaseVersionFileContent)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FS_2eproto();
  friend void protobuf_AssignDesc_FS_2eproto();
  friend void protobuf_ShutdownFile_FS_2eproto();

  void InitAsDefaultInstance();
  static HBaseVersionFileContent* default_instance_;
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::Message {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  void Swap(Reference* other);

  // implements Message ----------------------------------------------

  Reference* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reference_Range Range;
  static const Range TOP = Reference_Range_TOP;
  static const Range BOTTOM = Reference_Range_BOTTOM;
  static inline bool Range_IsValid(int value) {
    return Reference_Range_IsValid(value);
  }
  static const Range Range_MIN =
    Reference_Range_Range_MIN;
  static const Range Range_MAX =
    Reference_Range_Range_MAX;
  static const int Range_ARRAYSIZE =
    Reference_Range_Range_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Range_descriptor() {
    return Reference_Range_descriptor();
  }
  static inline const ::std::string& Range_Name(Range value) {
    return Reference_Range_Name(value);
  }
  static inline bool Range_Parse(const ::std::string& name,
      Range* value) {
    return Reference_Range_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes splitkey = 1;
  inline bool has_splitkey() const;
  inline void clear_splitkey();
  static const int kSplitkeyFieldNumber = 1;
  inline const ::std::string& splitkey() const;
  inline void set_splitkey(const ::std::string& value);
  inline void set_splitkey(const char* value);
  inline void set_splitkey(const void* value, size_t size);
  inline ::std::string* mutable_splitkey();
  inline ::std::string* release_splitkey();
  inline void set_allocated_splitkey(::std::string* splitkey);

  // required .hbase.pb.Reference.Range range = 2;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 2;
  inline ::hbase::pb::Reference_Range range() const;
  inline void set_range(::hbase::pb::Reference_Range value);

  // @@protoc_insertion_point(class_scope:hbase.pb.Reference)
 private:
  inline void set_has_splitkey();
  inline void clear_has_splitkey();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* splitkey_;
  int range_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FS_2eproto();
  friend void protobuf_AssignDesc_FS_2eproto();
  friend void protobuf_ShutdownFile_FS_2eproto();

  void InitAsDefaultInstance();
  static Reference* default_instance_;
};
// ===================================================================


// ===================================================================

// HBaseVersionFileContent

// required string version = 1;
inline bool HBaseVersionFileContent::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HBaseVersionFileContent::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HBaseVersionFileContent::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HBaseVersionFileContent::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& HBaseVersionFileContent::version() const {
  return *version_;
}
inline void HBaseVersionFileContent::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void HBaseVersionFileContent::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void HBaseVersionFileContent::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HBaseVersionFileContent::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* HBaseVersionFileContent::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HBaseVersionFileContent::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Reference

// required bytes splitkey = 1;
inline bool Reference::has_splitkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reference::set_has_splitkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reference::clear_has_splitkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reference::clear_splitkey() {
  if (splitkey_ != &::google::protobuf::internal::kEmptyString) {
    splitkey_->clear();
  }
  clear_has_splitkey();
}
inline const ::std::string& Reference::splitkey() const {
  return *splitkey_;
}
inline void Reference::set_splitkey(const ::std::string& value) {
  set_has_splitkey();
  if (splitkey_ == &::google::protobuf::internal::kEmptyString) {
    splitkey_ = new ::std::string;
  }
  splitkey_->assign(value);
}
inline void Reference::set_splitkey(const char* value) {
  set_has_splitkey();
  if (splitkey_ == &::google::protobuf::internal::kEmptyString) {
    splitkey_ = new ::std::string;
  }
  splitkey_->assign(value);
}
inline void Reference::set_splitkey(const void* value, size_t size) {
  set_has_splitkey();
  if (splitkey_ == &::google::protobuf::internal::kEmptyString) {
    splitkey_ = new ::std::string;
  }
  splitkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Reference::mutable_splitkey() {
  set_has_splitkey();
  if (splitkey_ == &::google::protobuf::internal::kEmptyString) {
    splitkey_ = new ::std::string;
  }
  return splitkey_;
}
inline ::std::string* Reference::release_splitkey() {
  clear_has_splitkey();
  if (splitkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splitkey_;
    splitkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Reference::set_allocated_splitkey(::std::string* splitkey) {
  if (splitkey_ != &::google::protobuf::internal::kEmptyString) {
    delete splitkey_;
  }
  if (splitkey) {
    set_has_splitkey();
    splitkey_ = splitkey;
  } else {
    clear_has_splitkey();
    splitkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .hbase.pb.Reference.Range range = 2;
inline bool Reference::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reference::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reference::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reference::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::hbase::pb::Reference_Range Reference::range() const {
  return static_cast< ::hbase::pb::Reference_Range >(range_);
}
inline void Reference::set_range(::hbase::pb::Reference_Range value) {
  assert(::hbase::pb::Reference_Range_IsValid(value));
  set_has_range();
  range_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::Reference_Range>() {
  return ::hbase::pb::Reference_Range_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FS_2eproto__INCLUDED
