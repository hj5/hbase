// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RSGroupAdmin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RSGroupAdmin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hbase {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* ListTablesOfRSGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTablesOfRSGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTablesOfRSGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTablesOfRSGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRSGroupInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRSGroupInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRSGroupInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRSGroupInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRSGroupInfoOfTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRSGroupInfoOfTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRSGroupInfoOfTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRSGroupInfoOfTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveServersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveServersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveServersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveServersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveTablesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveTablesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveTablesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveTablesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRSGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRSGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRSGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRSGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRSGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRSGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRSGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRSGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalanceRSGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalanceRSGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalanceRSGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalanceRSGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRSGroupInfosRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRSGroupInfosRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRSGroupInfosResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRSGroupInfosResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRSGroupInfoOfServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRSGroupInfoOfServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRSGroupInfoOfServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRSGroupInfoOfServerResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RSGroupAdmin_2eproto() {
  protobuf_AddDesc_RSGroupAdmin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RSGroupAdmin.proto");
  GOOGLE_CHECK(file != NULL);
  ListTablesOfRSGroupRequest_descriptor_ = file->message_type(0);
  static const int ListTablesOfRSGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesOfRSGroupRequest, r_s_group_name_),
  };
  ListTablesOfRSGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTablesOfRSGroupRequest_descriptor_,
      ListTablesOfRSGroupRequest::default_instance_,
      ListTablesOfRSGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesOfRSGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesOfRSGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTablesOfRSGroupRequest));
  ListTablesOfRSGroupResponse_descriptor_ = file->message_type(1);
  static const int ListTablesOfRSGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesOfRSGroupResponse, table_name_),
  };
  ListTablesOfRSGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTablesOfRSGroupResponse_descriptor_,
      ListTablesOfRSGroupResponse::default_instance_,
      ListTablesOfRSGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesOfRSGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTablesOfRSGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTablesOfRSGroupResponse));
  GetRSGroupInfoRequest_descriptor_ = file->message_type(2);
  static const int GetRSGroupInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoRequest, r_s_group_name_),
  };
  GetRSGroupInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRSGroupInfoRequest_descriptor_,
      GetRSGroupInfoRequest::default_instance_,
      GetRSGroupInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRSGroupInfoRequest));
  GetRSGroupInfoResponse_descriptor_ = file->message_type(3);
  static const int GetRSGroupInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoResponse, r_s_group_info_),
  };
  GetRSGroupInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRSGroupInfoResponse_descriptor_,
      GetRSGroupInfoResponse::default_instance_,
      GetRSGroupInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRSGroupInfoResponse));
  GetRSGroupInfoOfTableRequest_descriptor_ = file->message_type(4);
  static const int GetRSGroupInfoOfTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfTableRequest, table_name_),
  };
  GetRSGroupInfoOfTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRSGroupInfoOfTableRequest_descriptor_,
      GetRSGroupInfoOfTableRequest::default_instance_,
      GetRSGroupInfoOfTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRSGroupInfoOfTableRequest));
  GetRSGroupInfoOfTableResponse_descriptor_ = file->message_type(5);
  static const int GetRSGroupInfoOfTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfTableResponse, r_s_group_info_),
  };
  GetRSGroupInfoOfTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRSGroupInfoOfTableResponse_descriptor_,
      GetRSGroupInfoOfTableResponse::default_instance_,
      GetRSGroupInfoOfTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRSGroupInfoOfTableResponse));
  MoveServersRequest_descriptor_ = file->message_type(6);
  static const int MoveServersRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveServersRequest, target_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveServersRequest, servers_),
  };
  MoveServersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveServersRequest_descriptor_,
      MoveServersRequest::default_instance_,
      MoveServersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveServersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveServersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveServersRequest));
  MoveServersResponse_descriptor_ = file->message_type(7);
  static const int MoveServersResponse_offsets_[1] = {
  };
  MoveServersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveServersResponse_descriptor_,
      MoveServersResponse::default_instance_,
      MoveServersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveServersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveServersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveServersResponse));
  MoveTablesRequest_descriptor_ = file->message_type(8);
  static const int MoveTablesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTablesRequest, target_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTablesRequest, table_name_),
  };
  MoveTablesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveTablesRequest_descriptor_,
      MoveTablesRequest::default_instance_,
      MoveTablesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTablesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTablesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveTablesRequest));
  MoveTablesResponse_descriptor_ = file->message_type(9);
  static const int MoveTablesResponse_offsets_[1] = {
  };
  MoveTablesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveTablesResponse_descriptor_,
      MoveTablesResponse::default_instance_,
      MoveTablesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTablesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTablesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveTablesResponse));
  AddRSGroupRequest_descriptor_ = file->message_type(10);
  static const int AddRSGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRSGroupRequest, r_s_group_name_),
  };
  AddRSGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRSGroupRequest_descriptor_,
      AddRSGroupRequest::default_instance_,
      AddRSGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRSGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRSGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRSGroupRequest));
  AddRSGroupResponse_descriptor_ = file->message_type(11);
  static const int AddRSGroupResponse_offsets_[1] = {
  };
  AddRSGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRSGroupResponse_descriptor_,
      AddRSGroupResponse::default_instance_,
      AddRSGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRSGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRSGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRSGroupResponse));
  RemoveRSGroupRequest_descriptor_ = file->message_type(12);
  static const int RemoveRSGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRSGroupRequest, r_s_group_name_),
  };
  RemoveRSGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRSGroupRequest_descriptor_,
      RemoveRSGroupRequest::default_instance_,
      RemoveRSGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRSGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRSGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRSGroupRequest));
  RemoveRSGroupResponse_descriptor_ = file->message_type(13);
  static const int RemoveRSGroupResponse_offsets_[1] = {
  };
  RemoveRSGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRSGroupResponse_descriptor_,
      RemoveRSGroupResponse::default_instance_,
      RemoveRSGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRSGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRSGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRSGroupResponse));
  BalanceRSGroupRequest_descriptor_ = file->message_type(14);
  static const int BalanceRSGroupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRSGroupRequest, r_s_group_name_),
  };
  BalanceRSGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BalanceRSGroupRequest_descriptor_,
      BalanceRSGroupRequest::default_instance_,
      BalanceRSGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRSGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRSGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BalanceRSGroupRequest));
  BalanceRSGroupResponse_descriptor_ = file->message_type(15);
  static const int BalanceRSGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRSGroupResponse, balanceran_),
  };
  BalanceRSGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BalanceRSGroupResponse_descriptor_,
      BalanceRSGroupResponse::default_instance_,
      BalanceRSGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRSGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceRSGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BalanceRSGroupResponse));
  ListRSGroupInfosRequest_descriptor_ = file->message_type(16);
  static const int ListRSGroupInfosRequest_offsets_[1] = {
  };
  ListRSGroupInfosRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRSGroupInfosRequest_descriptor_,
      ListRSGroupInfosRequest::default_instance_,
      ListRSGroupInfosRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRSGroupInfosRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRSGroupInfosRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRSGroupInfosRequest));
  ListRSGroupInfosResponse_descriptor_ = file->message_type(17);
  static const int ListRSGroupInfosResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRSGroupInfosResponse, r_s_group_info_),
  };
  ListRSGroupInfosResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRSGroupInfosResponse_descriptor_,
      ListRSGroupInfosResponse::default_instance_,
      ListRSGroupInfosResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRSGroupInfosResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRSGroupInfosResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRSGroupInfosResponse));
  GetRSGroupInfoOfServerRequest_descriptor_ = file->message_type(18);
  static const int GetRSGroupInfoOfServerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfServerRequest, server_),
  };
  GetRSGroupInfoOfServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRSGroupInfoOfServerRequest_descriptor_,
      GetRSGroupInfoOfServerRequest::default_instance_,
      GetRSGroupInfoOfServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRSGroupInfoOfServerRequest));
  GetRSGroupInfoOfServerResponse_descriptor_ = file->message_type(19);
  static const int GetRSGroupInfoOfServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfServerResponse, r_s_group_info_),
  };
  GetRSGroupInfoOfServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRSGroupInfoOfServerResponse_descriptor_,
      GetRSGroupInfoOfServerResponse::default_instance_,
      GetRSGroupInfoOfServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRSGroupInfoOfServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRSGroupInfoOfServerResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RSGroupAdmin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTablesOfRSGroupRequest_descriptor_, &ListTablesOfRSGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTablesOfRSGroupResponse_descriptor_, &ListTablesOfRSGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRSGroupInfoRequest_descriptor_, &GetRSGroupInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRSGroupInfoResponse_descriptor_, &GetRSGroupInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRSGroupInfoOfTableRequest_descriptor_, &GetRSGroupInfoOfTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRSGroupInfoOfTableResponse_descriptor_, &GetRSGroupInfoOfTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveServersRequest_descriptor_, &MoveServersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveServersResponse_descriptor_, &MoveServersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveTablesRequest_descriptor_, &MoveTablesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveTablesResponse_descriptor_, &MoveTablesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRSGroupRequest_descriptor_, &AddRSGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRSGroupResponse_descriptor_, &AddRSGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRSGroupRequest_descriptor_, &RemoveRSGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRSGroupResponse_descriptor_, &RemoveRSGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BalanceRSGroupRequest_descriptor_, &BalanceRSGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BalanceRSGroupResponse_descriptor_, &BalanceRSGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRSGroupInfosRequest_descriptor_, &ListRSGroupInfosRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRSGroupInfosResponse_descriptor_, &ListRSGroupInfosResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRSGroupInfoOfServerRequest_descriptor_, &GetRSGroupInfoOfServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRSGroupInfoOfServerResponse_descriptor_, &GetRSGroupInfoOfServerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RSGroupAdmin_2eproto() {
  delete ListTablesOfRSGroupRequest::default_instance_;
  delete ListTablesOfRSGroupRequest_reflection_;
  delete ListTablesOfRSGroupResponse::default_instance_;
  delete ListTablesOfRSGroupResponse_reflection_;
  delete GetRSGroupInfoRequest::default_instance_;
  delete GetRSGroupInfoRequest_reflection_;
  delete GetRSGroupInfoResponse::default_instance_;
  delete GetRSGroupInfoResponse_reflection_;
  delete GetRSGroupInfoOfTableRequest::default_instance_;
  delete GetRSGroupInfoOfTableRequest_reflection_;
  delete GetRSGroupInfoOfTableResponse::default_instance_;
  delete GetRSGroupInfoOfTableResponse_reflection_;
  delete MoveServersRequest::default_instance_;
  delete MoveServersRequest_reflection_;
  delete MoveServersResponse::default_instance_;
  delete MoveServersResponse_reflection_;
  delete MoveTablesRequest::default_instance_;
  delete MoveTablesRequest_reflection_;
  delete MoveTablesResponse::default_instance_;
  delete MoveTablesResponse_reflection_;
  delete AddRSGroupRequest::default_instance_;
  delete AddRSGroupRequest_reflection_;
  delete AddRSGroupResponse::default_instance_;
  delete AddRSGroupResponse_reflection_;
  delete RemoveRSGroupRequest::default_instance_;
  delete RemoveRSGroupRequest_reflection_;
  delete RemoveRSGroupResponse::default_instance_;
  delete RemoveRSGroupResponse_reflection_;
  delete BalanceRSGroupRequest::default_instance_;
  delete BalanceRSGroupRequest_reflection_;
  delete BalanceRSGroupResponse::default_instance_;
  delete BalanceRSGroupResponse_reflection_;
  delete ListRSGroupInfosRequest::default_instance_;
  delete ListRSGroupInfosRequest_reflection_;
  delete ListRSGroupInfosResponse::default_instance_;
  delete ListRSGroupInfosResponse_reflection_;
  delete GetRSGroupInfoOfServerRequest::default_instance_;
  delete GetRSGroupInfoOfServerRequest_reflection_;
  delete GetRSGroupInfoOfServerResponse::default_instance_;
  delete GetRSGroupInfoOfServerResponse_reflection_;
}

void protobuf_AddDesc_RSGroupAdmin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hbase::pb::protobuf_AddDesc_HBase_2eproto();
  ::hbase::pb::protobuf_AddDesc_RSGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RSGroupAdmin.proto\022\010hbase.pb\032\013HBase.pr"
    "oto\032\rRSGroup.proto\"4\n\032ListTablesOfRSGrou"
    "pRequest\022\026\n\016r_s_group_name\030\001 \002(\t\"F\n\033List"
    "TablesOfRSGroupResponse\022\'\n\ntable_name\030\001 "
    "\003(\0132\023.hbase.pb.TableName\"/\n\025GetRSGroupIn"
    "foRequest\022\026\n\016r_s_group_name\030\001 \002(\t\"G\n\026Get"
    "RSGroupInfoResponse\022-\n\016r_s_group_info\030\001 "
    "\001(\0132\025.hbase.pb.RSGroupInfo\"G\n\034GetRSGroup"
    "InfoOfTableRequest\022\'\n\ntable_name\030\001 \002(\0132\023"
    ".hbase.pb.TableName\"N\n\035GetRSGroupInfoOfT"
    "ableResponse\022-\n\016r_s_group_info\030\001 \001(\0132\025.h"
    "base.pb.RSGroupInfo\"Q\n\022MoveServersReques"
    "t\022\024\n\014target_group\030\001 \002(\t\022%\n\007servers\030\003 \003(\013"
    "2\024.hbase.pb.ServerName\"\025\n\023MoveServersRes"
    "ponse\"R\n\021MoveTablesRequest\022\024\n\014target_gro"
    "up\030\001 \002(\t\022\'\n\ntable_name\030\002 \003(\0132\023.hbase.pb."
    "TableName\"\024\n\022MoveTablesResponse\"+\n\021AddRS"
    "GroupRequest\022\026\n\016r_s_group_name\030\001 \002(\t\"\024\n\022"
    "AddRSGroupResponse\".\n\024RemoveRSGroupReque"
    "st\022\026\n\016r_s_group_name\030\001 \002(\t\"\027\n\025RemoveRSGr"
    "oupResponse\"/\n\025BalanceRSGroupRequest\022\026\n\016"
    "r_s_group_name\030\001 \002(\t\",\n\026BalanceRSGroupRe"
    "sponse\022\022\n\nbalanceRan\030\001 \002(\010\"\031\n\027ListRSGrou"
    "pInfosRequest\"I\n\030ListRSGroupInfosRespons"
    "e\022-\n\016r_s_group_info\030\001 \003(\0132\025.hbase.pb.RSG"
    "roupInfo\"E\n\035GetRSGroupInfoOfServerReques"
    "t\022$\n\006server\030\002 \002(\0132\024.hbase.pb.ServerName\""
    "O\n\036GetRSGroupInfoOfServerResponse\022-\n\016r_s"
    "_group_info\030\001 \001(\0132\025.hbase.pb.RSGroupInfo"
    "2\241\006\n\023RSGroupAdminService\022S\n\016GetRSGroupIn"
    "fo\022\037.hbase.pb.GetRSGroupInfoRequest\032 .hb"
    "ase.pb.GetRSGroupInfoResponse\022h\n\025GetRSGr"
    "oupInfoOfTable\022&.hbase.pb.GetRSGroupInfo"
    "OfTableRequest\032\'.hbase.pb.GetRSGroupInfo"
    "OfTableResponse\022k\n\026GetRSGroupInfoOfServe"
    "r\022\'.hbase.pb.GetRSGroupInfoOfServerReque"
    "st\032(.hbase.pb.GetRSGroupInfoOfServerResp"
    "onse\022J\n\013MoveServers\022\034.hbase.pb.MoveServe"
    "rsRequest\032\035.hbase.pb.MoveServersResponse"
    "\022G\n\nMoveTables\022\033.hbase.pb.MoveTablesRequ"
    "est\032\034.hbase.pb.MoveTablesResponse\022G\n\nAdd"
    "RSGroup\022\033.hbase.pb.AddRSGroupRequest\032\034.h"
    "base.pb.AddRSGroupResponse\022P\n\rRemoveRSGr"
    "oup\022\036.hbase.pb.RemoveRSGroupRequest\032\037.hb"
    "ase.pb.RemoveRSGroupResponse\022S\n\016BalanceR"
    "SGroup\022\037.hbase.pb.BalanceRSGroupRequest\032"
    " .hbase.pb.BalanceRSGroupResponse\022Y\n\020Lis"
    "tRSGroupInfos\022!.hbase.pb.ListRSGroupInfo"
    "sRequest\032\".hbase.pb.ListRSGroupInfosResp"
    "onseBH\n*org.apache.hadoop.hbase.protobuf"
    ".generatedB\022RSGroupAdminProtosH\001\210\001\001\240\001\001", 2038);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RSGroupAdmin.proto", &protobuf_RegisterTypes);
  ListTablesOfRSGroupRequest::default_instance_ = new ListTablesOfRSGroupRequest();
  ListTablesOfRSGroupResponse::default_instance_ = new ListTablesOfRSGroupResponse();
  GetRSGroupInfoRequest::default_instance_ = new GetRSGroupInfoRequest();
  GetRSGroupInfoResponse::default_instance_ = new GetRSGroupInfoResponse();
  GetRSGroupInfoOfTableRequest::default_instance_ = new GetRSGroupInfoOfTableRequest();
  GetRSGroupInfoOfTableResponse::default_instance_ = new GetRSGroupInfoOfTableResponse();
  MoveServersRequest::default_instance_ = new MoveServersRequest();
  MoveServersResponse::default_instance_ = new MoveServersResponse();
  MoveTablesRequest::default_instance_ = new MoveTablesRequest();
  MoveTablesResponse::default_instance_ = new MoveTablesResponse();
  AddRSGroupRequest::default_instance_ = new AddRSGroupRequest();
  AddRSGroupResponse::default_instance_ = new AddRSGroupResponse();
  RemoveRSGroupRequest::default_instance_ = new RemoveRSGroupRequest();
  RemoveRSGroupResponse::default_instance_ = new RemoveRSGroupResponse();
  BalanceRSGroupRequest::default_instance_ = new BalanceRSGroupRequest();
  BalanceRSGroupResponse::default_instance_ = new BalanceRSGroupResponse();
  ListRSGroupInfosRequest::default_instance_ = new ListRSGroupInfosRequest();
  ListRSGroupInfosResponse::default_instance_ = new ListRSGroupInfosResponse();
  GetRSGroupInfoOfServerRequest::default_instance_ = new GetRSGroupInfoOfServerRequest();
  GetRSGroupInfoOfServerResponse::default_instance_ = new GetRSGroupInfoOfServerResponse();
  ListTablesOfRSGroupRequest::default_instance_->InitAsDefaultInstance();
  ListTablesOfRSGroupResponse::default_instance_->InitAsDefaultInstance();
  GetRSGroupInfoRequest::default_instance_->InitAsDefaultInstance();
  GetRSGroupInfoResponse::default_instance_->InitAsDefaultInstance();
  GetRSGroupInfoOfTableRequest::default_instance_->InitAsDefaultInstance();
  GetRSGroupInfoOfTableResponse::default_instance_->InitAsDefaultInstance();
  MoveServersRequest::default_instance_->InitAsDefaultInstance();
  MoveServersResponse::default_instance_->InitAsDefaultInstance();
  MoveTablesRequest::default_instance_->InitAsDefaultInstance();
  MoveTablesResponse::default_instance_->InitAsDefaultInstance();
  AddRSGroupRequest::default_instance_->InitAsDefaultInstance();
  AddRSGroupResponse::default_instance_->InitAsDefaultInstance();
  RemoveRSGroupRequest::default_instance_->InitAsDefaultInstance();
  RemoveRSGroupResponse::default_instance_->InitAsDefaultInstance();
  BalanceRSGroupRequest::default_instance_->InitAsDefaultInstance();
  BalanceRSGroupResponse::default_instance_->InitAsDefaultInstance();
  ListRSGroupInfosRequest::default_instance_->InitAsDefaultInstance();
  ListRSGroupInfosResponse::default_instance_->InitAsDefaultInstance();
  GetRSGroupInfoOfServerRequest::default_instance_->InitAsDefaultInstance();
  GetRSGroupInfoOfServerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RSGroupAdmin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RSGroupAdmin_2eproto {
  StaticDescriptorInitializer_RSGroupAdmin_2eproto() {
    protobuf_AddDesc_RSGroupAdmin_2eproto();
  }
} static_descriptor_initializer_RSGroupAdmin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ListTablesOfRSGroupRequest::kRSGroupNameFieldNumber;
#endif  // !_MSC_VER

ListTablesOfRSGroupRequest::ListTablesOfRSGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListTablesOfRSGroupRequest::InitAsDefaultInstance() {
}

ListTablesOfRSGroupRequest::ListTablesOfRSGroupRequest(const ListTablesOfRSGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListTablesOfRSGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTablesOfRSGroupRequest::~ListTablesOfRSGroupRequest() {
  SharedDtor();
}

void ListTablesOfRSGroupRequest::SharedDtor() {
  if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete r_s_group_name_;
  }
  if (this != default_instance_) {
  }
}

void ListTablesOfRSGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTablesOfRSGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTablesOfRSGroupRequest_descriptor_;
}

const ListTablesOfRSGroupRequest& ListTablesOfRSGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

ListTablesOfRSGroupRequest* ListTablesOfRSGroupRequest::default_instance_ = NULL;

ListTablesOfRSGroupRequest* ListTablesOfRSGroupRequest::New() const {
  return new ListTablesOfRSGroupRequest;
}

void ListTablesOfRSGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_name()) {
      if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
        r_s_group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTablesOfRSGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string r_s_group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_s_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->r_s_group_name().data(), this->r_s_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListTablesOfRSGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->r_s_group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListTablesOfRSGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->r_s_group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListTablesOfRSGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string r_s_group_name = 1;
    if (has_r_s_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_s_group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTablesOfRSGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTablesOfRSGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTablesOfRSGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTablesOfRSGroupRequest::MergeFrom(const ListTablesOfRSGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_name()) {
      set_r_s_group_name(from.r_s_group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTablesOfRSGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTablesOfRSGroupRequest::CopyFrom(const ListTablesOfRSGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTablesOfRSGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListTablesOfRSGroupRequest::Swap(ListTablesOfRSGroupRequest* other) {
  if (other != this) {
    std::swap(r_s_group_name_, other->r_s_group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTablesOfRSGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTablesOfRSGroupRequest_descriptor_;
  metadata.reflection = ListTablesOfRSGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListTablesOfRSGroupResponse::kTableNameFieldNumber;
#endif  // !_MSC_VER

ListTablesOfRSGroupResponse::ListTablesOfRSGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListTablesOfRSGroupResponse::InitAsDefaultInstance() {
}

ListTablesOfRSGroupResponse::ListTablesOfRSGroupResponse(const ListTablesOfRSGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListTablesOfRSGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTablesOfRSGroupResponse::~ListTablesOfRSGroupResponse() {
  SharedDtor();
}

void ListTablesOfRSGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListTablesOfRSGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTablesOfRSGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTablesOfRSGroupResponse_descriptor_;
}

const ListTablesOfRSGroupResponse& ListTablesOfRSGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

ListTablesOfRSGroupResponse* ListTablesOfRSGroupResponse::default_instance_ = NULL;

ListTablesOfRSGroupResponse* ListTablesOfRSGroupResponse::New() const {
  return new ListTablesOfRSGroupResponse;
}

void ListTablesOfRSGroupResponse::Clear() {
  table_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTablesOfRSGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListTablesOfRSGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.TableName table_name = 1;
  for (int i = 0; i < this->table_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListTablesOfRSGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.TableName table_name = 1;
  for (int i = 0; i < this->table_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListTablesOfRSGroupResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.TableName table_name = 1;
  total_size += 1 * this->table_name_size();
  for (int i = 0; i < this->table_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTablesOfRSGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTablesOfRSGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTablesOfRSGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTablesOfRSGroupResponse::MergeFrom(const ListTablesOfRSGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_name_.MergeFrom(from.table_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTablesOfRSGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTablesOfRSGroupResponse::CopyFrom(const ListTablesOfRSGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTablesOfRSGroupResponse::IsInitialized() const {

  for (int i = 0; i < table_name_size(); i++) {
    if (!this->table_name(i).IsInitialized()) return false;
  }
  return true;
}

void ListTablesOfRSGroupResponse::Swap(ListTablesOfRSGroupResponse* other) {
  if (other != this) {
    table_name_.Swap(&other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTablesOfRSGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTablesOfRSGroupResponse_descriptor_;
  metadata.reflection = ListTablesOfRSGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRSGroupInfoRequest::kRSGroupNameFieldNumber;
#endif  // !_MSC_VER

GetRSGroupInfoRequest::GetRSGroupInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRSGroupInfoRequest::InitAsDefaultInstance() {
}

GetRSGroupInfoRequest::GetRSGroupInfoRequest(const GetRSGroupInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRSGroupInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRSGroupInfoRequest::~GetRSGroupInfoRequest() {
  SharedDtor();
}

void GetRSGroupInfoRequest::SharedDtor() {
  if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete r_s_group_name_;
  }
  if (this != default_instance_) {
  }
}

void GetRSGroupInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRSGroupInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRSGroupInfoRequest_descriptor_;
}

const GetRSGroupInfoRequest& GetRSGroupInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

GetRSGroupInfoRequest* GetRSGroupInfoRequest::default_instance_ = NULL;

GetRSGroupInfoRequest* GetRSGroupInfoRequest::New() const {
  return new GetRSGroupInfoRequest;
}

void GetRSGroupInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_name()) {
      if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
        r_s_group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRSGroupInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string r_s_group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_s_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->r_s_group_name().data(), this->r_s_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRSGroupInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->r_s_group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRSGroupInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->r_s_group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRSGroupInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string r_s_group_name = 1;
    if (has_r_s_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_s_group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRSGroupInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRSGroupInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRSGroupInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRSGroupInfoRequest::MergeFrom(const GetRSGroupInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_name()) {
      set_r_s_group_name(from.r_s_group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRSGroupInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRSGroupInfoRequest::CopyFrom(const GetRSGroupInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRSGroupInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetRSGroupInfoRequest::Swap(GetRSGroupInfoRequest* other) {
  if (other != this) {
    std::swap(r_s_group_name_, other->r_s_group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRSGroupInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRSGroupInfoRequest_descriptor_;
  metadata.reflection = GetRSGroupInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRSGroupInfoResponse::kRSGroupInfoFieldNumber;
#endif  // !_MSC_VER

GetRSGroupInfoResponse::GetRSGroupInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRSGroupInfoResponse::InitAsDefaultInstance() {
  r_s_group_info_ = const_cast< ::hbase::pb::RSGroupInfo*>(&::hbase::pb::RSGroupInfo::default_instance());
}

GetRSGroupInfoResponse::GetRSGroupInfoResponse(const GetRSGroupInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRSGroupInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRSGroupInfoResponse::~GetRSGroupInfoResponse() {
  SharedDtor();
}

void GetRSGroupInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete r_s_group_info_;
  }
}

void GetRSGroupInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRSGroupInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRSGroupInfoResponse_descriptor_;
}

const GetRSGroupInfoResponse& GetRSGroupInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

GetRSGroupInfoResponse* GetRSGroupInfoResponse::default_instance_ = NULL;

GetRSGroupInfoResponse* GetRSGroupInfoResponse::New() const {
  return new GetRSGroupInfoResponse;
}

void GetRSGroupInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_info()) {
      if (r_s_group_info_ != NULL) r_s_group_info_->::hbase::pb::RSGroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRSGroupInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r_s_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRSGroupInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
  if (has_r_s_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r_s_group_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRSGroupInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
  if (has_r_s_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r_s_group_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRSGroupInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
    if (has_r_s_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r_s_group_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRSGroupInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRSGroupInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRSGroupInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRSGroupInfoResponse::MergeFrom(const GetRSGroupInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_info()) {
      mutable_r_s_group_info()->::hbase::pb::RSGroupInfo::MergeFrom(from.r_s_group_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRSGroupInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRSGroupInfoResponse::CopyFrom(const GetRSGroupInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRSGroupInfoResponse::IsInitialized() const {

  if (has_r_s_group_info()) {
    if (!this->r_s_group_info().IsInitialized()) return false;
  }
  return true;
}

void GetRSGroupInfoResponse::Swap(GetRSGroupInfoResponse* other) {
  if (other != this) {
    std::swap(r_s_group_info_, other->r_s_group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRSGroupInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRSGroupInfoResponse_descriptor_;
  metadata.reflection = GetRSGroupInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRSGroupInfoOfTableRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

GetRSGroupInfoOfTableRequest::GetRSGroupInfoOfTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRSGroupInfoOfTableRequest::InitAsDefaultInstance() {
  table_name_ = const_cast< ::hbase::pb::TableName*>(&::hbase::pb::TableName::default_instance());
}

GetRSGroupInfoOfTableRequest::GetRSGroupInfoOfTableRequest(const GetRSGroupInfoOfTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRSGroupInfoOfTableRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRSGroupInfoOfTableRequest::~GetRSGroupInfoOfTableRequest() {
  SharedDtor();
}

void GetRSGroupInfoOfTableRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void GetRSGroupInfoOfTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRSGroupInfoOfTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRSGroupInfoOfTableRequest_descriptor_;
}

const GetRSGroupInfoOfTableRequest& GetRSGroupInfoOfTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

GetRSGroupInfoOfTableRequest* GetRSGroupInfoOfTableRequest::default_instance_ = NULL;

GetRSGroupInfoOfTableRequest* GetRSGroupInfoOfTableRequest::New() const {
  return new GetRSGroupInfoOfTableRequest;
}

void GetRSGroupInfoOfTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != NULL) table_name_->::hbase::pb::TableName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRSGroupInfoOfTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRSGroupInfoOfTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRSGroupInfoOfTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRSGroupInfoOfTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.TableName table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRSGroupInfoOfTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRSGroupInfoOfTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRSGroupInfoOfTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRSGroupInfoOfTableRequest::MergeFrom(const GetRSGroupInfoOfTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRSGroupInfoOfTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRSGroupInfoOfTableRequest::CopyFrom(const GetRSGroupInfoOfTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRSGroupInfoOfTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table_name()) {
    if (!this->table_name().IsInitialized()) return false;
  }
  return true;
}

void GetRSGroupInfoOfTableRequest::Swap(GetRSGroupInfoOfTableRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRSGroupInfoOfTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRSGroupInfoOfTableRequest_descriptor_;
  metadata.reflection = GetRSGroupInfoOfTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRSGroupInfoOfTableResponse::kRSGroupInfoFieldNumber;
#endif  // !_MSC_VER

GetRSGroupInfoOfTableResponse::GetRSGroupInfoOfTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRSGroupInfoOfTableResponse::InitAsDefaultInstance() {
  r_s_group_info_ = const_cast< ::hbase::pb::RSGroupInfo*>(&::hbase::pb::RSGroupInfo::default_instance());
}

GetRSGroupInfoOfTableResponse::GetRSGroupInfoOfTableResponse(const GetRSGroupInfoOfTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRSGroupInfoOfTableResponse::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRSGroupInfoOfTableResponse::~GetRSGroupInfoOfTableResponse() {
  SharedDtor();
}

void GetRSGroupInfoOfTableResponse::SharedDtor() {
  if (this != default_instance_) {
    delete r_s_group_info_;
  }
}

void GetRSGroupInfoOfTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRSGroupInfoOfTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRSGroupInfoOfTableResponse_descriptor_;
}

const GetRSGroupInfoOfTableResponse& GetRSGroupInfoOfTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

GetRSGroupInfoOfTableResponse* GetRSGroupInfoOfTableResponse::default_instance_ = NULL;

GetRSGroupInfoOfTableResponse* GetRSGroupInfoOfTableResponse::New() const {
  return new GetRSGroupInfoOfTableResponse;
}

void GetRSGroupInfoOfTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_info()) {
      if (r_s_group_info_ != NULL) r_s_group_info_->::hbase::pb::RSGroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRSGroupInfoOfTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r_s_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRSGroupInfoOfTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
  if (has_r_s_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r_s_group_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRSGroupInfoOfTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
  if (has_r_s_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r_s_group_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRSGroupInfoOfTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
    if (has_r_s_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r_s_group_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRSGroupInfoOfTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRSGroupInfoOfTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRSGroupInfoOfTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRSGroupInfoOfTableResponse::MergeFrom(const GetRSGroupInfoOfTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_info()) {
      mutable_r_s_group_info()->::hbase::pb::RSGroupInfo::MergeFrom(from.r_s_group_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRSGroupInfoOfTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRSGroupInfoOfTableResponse::CopyFrom(const GetRSGroupInfoOfTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRSGroupInfoOfTableResponse::IsInitialized() const {

  if (has_r_s_group_info()) {
    if (!this->r_s_group_info().IsInitialized()) return false;
  }
  return true;
}

void GetRSGroupInfoOfTableResponse::Swap(GetRSGroupInfoOfTableResponse* other) {
  if (other != this) {
    std::swap(r_s_group_info_, other->r_s_group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRSGroupInfoOfTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRSGroupInfoOfTableResponse_descriptor_;
  metadata.reflection = GetRSGroupInfoOfTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveServersRequest::kTargetGroupFieldNumber;
const int MoveServersRequest::kServersFieldNumber;
#endif  // !_MSC_VER

MoveServersRequest::MoveServersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveServersRequest::InitAsDefaultInstance() {
}

MoveServersRequest::MoveServersRequest(const MoveServersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveServersRequest::SharedCtor() {
  _cached_size_ = 0;
  target_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveServersRequest::~MoveServersRequest() {
  SharedDtor();
}

void MoveServersRequest::SharedDtor() {
  if (target_group_ != &::google::protobuf::internal::kEmptyString) {
    delete target_group_;
  }
  if (this != default_instance_) {
  }
}

void MoveServersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveServersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveServersRequest_descriptor_;
}

const MoveServersRequest& MoveServersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

MoveServersRequest* MoveServersRequest::default_instance_ = NULL;

MoveServersRequest* MoveServersRequest::New() const {
  return new MoveServersRequest;
}

void MoveServersRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_group()) {
      if (target_group_ != &::google::protobuf::internal::kEmptyString) {
        target_group_->clear();
      }
    }
  }
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveServersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string target_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_group().data(), this->target_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servers;
        break;
      }

      // repeated .hbase.pb.ServerName servers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveServersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string target_group = 1;
  if (has_target_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_group().data(), this->target_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->target_group(), output);
  }

  // repeated .hbase.pb.ServerName servers = 3;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveServersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string target_group = 1;
  if (has_target_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_group().data(), this->target_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_group(), target);
  }

  // repeated .hbase.pb.ServerName servers = 3;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveServersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string target_group = 1;
    if (has_target_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_group());
    }

  }
  // repeated .hbase.pb.ServerName servers = 3;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveServersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveServersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveServersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveServersRequest::MergeFrom(const MoveServersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_group()) {
      set_target_group(from.target_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveServersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveServersRequest::CopyFrom(const MoveServersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveServersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < servers_size(); i++) {
    if (!this->servers(i).IsInitialized()) return false;
  }
  return true;
}

void MoveServersRequest::Swap(MoveServersRequest* other) {
  if (other != this) {
    std::swap(target_group_, other->target_group_);
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveServersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveServersRequest_descriptor_;
  metadata.reflection = MoveServersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoveServersResponse::MoveServersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveServersResponse::InitAsDefaultInstance() {
}

MoveServersResponse::MoveServersResponse(const MoveServersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveServersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveServersResponse::~MoveServersResponse() {
  SharedDtor();
}

void MoveServersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveServersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveServersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveServersResponse_descriptor_;
}

const MoveServersResponse& MoveServersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

MoveServersResponse* MoveServersResponse::default_instance_ = NULL;

MoveServersResponse* MoveServersResponse::New() const {
  return new MoveServersResponse;
}

void MoveServersResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveServersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MoveServersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveServersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveServersResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveServersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveServersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveServersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveServersResponse::MergeFrom(const MoveServersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveServersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveServersResponse::CopyFrom(const MoveServersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveServersResponse::IsInitialized() const {

  return true;
}

void MoveServersResponse::Swap(MoveServersResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveServersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveServersResponse_descriptor_;
  metadata.reflection = MoveServersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveTablesRequest::kTargetGroupFieldNumber;
const int MoveTablesRequest::kTableNameFieldNumber;
#endif  // !_MSC_VER

MoveTablesRequest::MoveTablesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveTablesRequest::InitAsDefaultInstance() {
}

MoveTablesRequest::MoveTablesRequest(const MoveTablesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveTablesRequest::SharedCtor() {
  _cached_size_ = 0;
  target_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveTablesRequest::~MoveTablesRequest() {
  SharedDtor();
}

void MoveTablesRequest::SharedDtor() {
  if (target_group_ != &::google::protobuf::internal::kEmptyString) {
    delete target_group_;
  }
  if (this != default_instance_) {
  }
}

void MoveTablesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveTablesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveTablesRequest_descriptor_;
}

const MoveTablesRequest& MoveTablesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

MoveTablesRequest* MoveTablesRequest::default_instance_ = NULL;

MoveTablesRequest* MoveTablesRequest::New() const {
  return new MoveTablesRequest;
}

void MoveTablesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_group()) {
      if (target_group_ != &::google::protobuf::internal::kEmptyString) {
        target_group_->clear();
      }
    }
  }
  table_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveTablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string target_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_group().data(), this->target_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // repeated .hbase.pb.TableName table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveTablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string target_group = 1;
  if (has_target_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_group().data(), this->target_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->target_group(), output);
  }

  // repeated .hbase.pb.TableName table_name = 2;
  for (int i = 0; i < this->table_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveTablesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string target_group = 1;
  if (has_target_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_group().data(), this->target_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_group(), target);
  }

  // repeated .hbase.pb.TableName table_name = 2;
  for (int i = 0; i < this->table_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveTablesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string target_group = 1;
    if (has_target_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_group());
    }

  }
  // repeated .hbase.pb.TableName table_name = 2;
  total_size += 1 * this->table_name_size();
  for (int i = 0; i < this->table_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveTablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveTablesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveTablesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveTablesRequest::MergeFrom(const MoveTablesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_name_.MergeFrom(from.table_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_group()) {
      set_target_group(from.target_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveTablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTablesRequest::CopyFrom(const MoveTablesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTablesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < table_name_size(); i++) {
    if (!this->table_name(i).IsInitialized()) return false;
  }
  return true;
}

void MoveTablesRequest::Swap(MoveTablesRequest* other) {
  if (other != this) {
    std::swap(target_group_, other->target_group_);
    table_name_.Swap(&other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveTablesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveTablesRequest_descriptor_;
  metadata.reflection = MoveTablesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MoveTablesResponse::MoveTablesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveTablesResponse::InitAsDefaultInstance() {
}

MoveTablesResponse::MoveTablesResponse(const MoveTablesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveTablesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveTablesResponse::~MoveTablesResponse() {
  SharedDtor();
}

void MoveTablesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveTablesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveTablesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveTablesResponse_descriptor_;
}

const MoveTablesResponse& MoveTablesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

MoveTablesResponse* MoveTablesResponse::default_instance_ = NULL;

MoveTablesResponse* MoveTablesResponse::New() const {
  return new MoveTablesResponse;
}

void MoveTablesResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveTablesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MoveTablesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveTablesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveTablesResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveTablesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveTablesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveTablesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveTablesResponse::MergeFrom(const MoveTablesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveTablesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTablesResponse::CopyFrom(const MoveTablesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTablesResponse::IsInitialized() const {

  return true;
}

void MoveTablesResponse::Swap(MoveTablesResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveTablesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveTablesResponse_descriptor_;
  metadata.reflection = MoveTablesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRSGroupRequest::kRSGroupNameFieldNumber;
#endif  // !_MSC_VER

AddRSGroupRequest::AddRSGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRSGroupRequest::InitAsDefaultInstance() {
}

AddRSGroupRequest::AddRSGroupRequest(const AddRSGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRSGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRSGroupRequest::~AddRSGroupRequest() {
  SharedDtor();
}

void AddRSGroupRequest::SharedDtor() {
  if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete r_s_group_name_;
  }
  if (this != default_instance_) {
  }
}

void AddRSGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRSGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRSGroupRequest_descriptor_;
}

const AddRSGroupRequest& AddRSGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

AddRSGroupRequest* AddRSGroupRequest::default_instance_ = NULL;

AddRSGroupRequest* AddRSGroupRequest::New() const {
  return new AddRSGroupRequest;
}

void AddRSGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_name()) {
      if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
        r_s_group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRSGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string r_s_group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_s_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->r_s_group_name().data(), this->r_s_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddRSGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->r_s_group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRSGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->r_s_group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRSGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string r_s_group_name = 1;
    if (has_r_s_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_s_group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRSGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRSGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRSGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRSGroupRequest::MergeFrom(const AddRSGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_name()) {
      set_r_s_group_name(from.r_s_group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRSGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRSGroupRequest::CopyFrom(const AddRSGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRSGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddRSGroupRequest::Swap(AddRSGroupRequest* other) {
  if (other != this) {
    std::swap(r_s_group_name_, other->r_s_group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRSGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRSGroupRequest_descriptor_;
  metadata.reflection = AddRSGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AddRSGroupResponse::AddRSGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRSGroupResponse::InitAsDefaultInstance() {
}

AddRSGroupResponse::AddRSGroupResponse(const AddRSGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRSGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRSGroupResponse::~AddRSGroupResponse() {
  SharedDtor();
}

void AddRSGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRSGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRSGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRSGroupResponse_descriptor_;
}

const AddRSGroupResponse& AddRSGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

AddRSGroupResponse* AddRSGroupResponse::default_instance_ = NULL;

AddRSGroupResponse* AddRSGroupResponse::New() const {
  return new AddRSGroupResponse;
}

void AddRSGroupResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRSGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AddRSGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRSGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRSGroupResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRSGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRSGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRSGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRSGroupResponse::MergeFrom(const AddRSGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRSGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRSGroupResponse::CopyFrom(const AddRSGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRSGroupResponse::IsInitialized() const {

  return true;
}

void AddRSGroupResponse::Swap(AddRSGroupResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRSGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRSGroupResponse_descriptor_;
  metadata.reflection = AddRSGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRSGroupRequest::kRSGroupNameFieldNumber;
#endif  // !_MSC_VER

RemoveRSGroupRequest::RemoveRSGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRSGroupRequest::InitAsDefaultInstance() {
}

RemoveRSGroupRequest::RemoveRSGroupRequest(const RemoveRSGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRSGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRSGroupRequest::~RemoveRSGroupRequest() {
  SharedDtor();
}

void RemoveRSGroupRequest::SharedDtor() {
  if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete r_s_group_name_;
  }
  if (this != default_instance_) {
  }
}

void RemoveRSGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRSGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRSGroupRequest_descriptor_;
}

const RemoveRSGroupRequest& RemoveRSGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

RemoveRSGroupRequest* RemoveRSGroupRequest::default_instance_ = NULL;

RemoveRSGroupRequest* RemoveRSGroupRequest::New() const {
  return new RemoveRSGroupRequest;
}

void RemoveRSGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_name()) {
      if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
        r_s_group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRSGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string r_s_group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_s_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->r_s_group_name().data(), this->r_s_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRSGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->r_s_group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRSGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->r_s_group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRSGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string r_s_group_name = 1;
    if (has_r_s_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_s_group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRSGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRSGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRSGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRSGroupRequest::MergeFrom(const RemoveRSGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_name()) {
      set_r_s_group_name(from.r_s_group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRSGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRSGroupRequest::CopyFrom(const RemoveRSGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRSGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveRSGroupRequest::Swap(RemoveRSGroupRequest* other) {
  if (other != this) {
    std::swap(r_s_group_name_, other->r_s_group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRSGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRSGroupRequest_descriptor_;
  metadata.reflection = RemoveRSGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RemoveRSGroupResponse::RemoveRSGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRSGroupResponse::InitAsDefaultInstance() {
}

RemoveRSGroupResponse::RemoveRSGroupResponse(const RemoveRSGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRSGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRSGroupResponse::~RemoveRSGroupResponse() {
  SharedDtor();
}

void RemoveRSGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveRSGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRSGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRSGroupResponse_descriptor_;
}

const RemoveRSGroupResponse& RemoveRSGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

RemoveRSGroupResponse* RemoveRSGroupResponse::default_instance_ = NULL;

RemoveRSGroupResponse* RemoveRSGroupResponse::New() const {
  return new RemoveRSGroupResponse;
}

void RemoveRSGroupResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRSGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RemoveRSGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRSGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRSGroupResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRSGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRSGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRSGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRSGroupResponse::MergeFrom(const RemoveRSGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRSGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRSGroupResponse::CopyFrom(const RemoveRSGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRSGroupResponse::IsInitialized() const {

  return true;
}

void RemoveRSGroupResponse::Swap(RemoveRSGroupResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRSGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRSGroupResponse_descriptor_;
  metadata.reflection = RemoveRSGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BalanceRSGroupRequest::kRSGroupNameFieldNumber;
#endif  // !_MSC_VER

BalanceRSGroupRequest::BalanceRSGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BalanceRSGroupRequest::InitAsDefaultInstance() {
}

BalanceRSGroupRequest::BalanceRSGroupRequest(const BalanceRSGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BalanceRSGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BalanceRSGroupRequest::~BalanceRSGroupRequest() {
  SharedDtor();
}

void BalanceRSGroupRequest::SharedDtor() {
  if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete r_s_group_name_;
  }
  if (this != default_instance_) {
  }
}

void BalanceRSGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceRSGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalanceRSGroupRequest_descriptor_;
}

const BalanceRSGroupRequest& BalanceRSGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

BalanceRSGroupRequest* BalanceRSGroupRequest::default_instance_ = NULL;

BalanceRSGroupRequest* BalanceRSGroupRequest::New() const {
  return new BalanceRSGroupRequest;
}

void BalanceRSGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_name()) {
      if (r_s_group_name_ != &::google::protobuf::internal::kEmptyString) {
        r_s_group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BalanceRSGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string r_s_group_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_s_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->r_s_group_name().data(), this->r_s_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BalanceRSGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->r_s_group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BalanceRSGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string r_s_group_name = 1;
  if (has_r_s_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->r_s_group_name().data(), this->r_s_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->r_s_group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BalanceRSGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string r_s_group_name = 1;
    if (has_r_s_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_s_group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceRSGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BalanceRSGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BalanceRSGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BalanceRSGroupRequest::MergeFrom(const BalanceRSGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_name()) {
      set_r_s_group_name(from.r_s_group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BalanceRSGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceRSGroupRequest::CopyFrom(const BalanceRSGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceRSGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BalanceRSGroupRequest::Swap(BalanceRSGroupRequest* other) {
  if (other != this) {
    std::swap(r_s_group_name_, other->r_s_group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BalanceRSGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalanceRSGroupRequest_descriptor_;
  metadata.reflection = BalanceRSGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BalanceRSGroupResponse::kBalanceRanFieldNumber;
#endif  // !_MSC_VER

BalanceRSGroupResponse::BalanceRSGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BalanceRSGroupResponse::InitAsDefaultInstance() {
}

BalanceRSGroupResponse::BalanceRSGroupResponse(const BalanceRSGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BalanceRSGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  balanceran_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BalanceRSGroupResponse::~BalanceRSGroupResponse() {
  SharedDtor();
}

void BalanceRSGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BalanceRSGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceRSGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalanceRSGroupResponse_descriptor_;
}

const BalanceRSGroupResponse& BalanceRSGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

BalanceRSGroupResponse* BalanceRSGroupResponse::default_instance_ = NULL;

BalanceRSGroupResponse* BalanceRSGroupResponse::New() const {
  return new BalanceRSGroupResponse;
}

void BalanceRSGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    balanceran_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BalanceRSGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool balanceRan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &balanceran_)));
          set_has_balanceran();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BalanceRSGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool balanceRan = 1;
  if (has_balanceran()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->balanceran(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BalanceRSGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool balanceRan = 1;
  if (has_balanceran()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->balanceran(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BalanceRSGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool balanceRan = 1;
    if (has_balanceran()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalanceRSGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BalanceRSGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BalanceRSGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BalanceRSGroupResponse::MergeFrom(const BalanceRSGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_balanceran()) {
      set_balanceran(from.balanceran());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BalanceRSGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalanceRSGroupResponse::CopyFrom(const BalanceRSGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceRSGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BalanceRSGroupResponse::Swap(BalanceRSGroupResponse* other) {
  if (other != this) {
    std::swap(balanceran_, other->balanceran_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BalanceRSGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalanceRSGroupResponse_descriptor_;
  metadata.reflection = BalanceRSGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListRSGroupInfosRequest::ListRSGroupInfosRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRSGroupInfosRequest::InitAsDefaultInstance() {
}

ListRSGroupInfosRequest::ListRSGroupInfosRequest(const ListRSGroupInfosRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRSGroupInfosRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRSGroupInfosRequest::~ListRSGroupInfosRequest() {
  SharedDtor();
}

void ListRSGroupInfosRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRSGroupInfosRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRSGroupInfosRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRSGroupInfosRequest_descriptor_;
}

const ListRSGroupInfosRequest& ListRSGroupInfosRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

ListRSGroupInfosRequest* ListRSGroupInfosRequest::default_instance_ = NULL;

ListRSGroupInfosRequest* ListRSGroupInfosRequest::New() const {
  return new ListRSGroupInfosRequest;
}

void ListRSGroupInfosRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRSGroupInfosRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ListRSGroupInfosRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRSGroupInfosRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRSGroupInfosRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRSGroupInfosRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRSGroupInfosRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRSGroupInfosRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRSGroupInfosRequest::MergeFrom(const ListRSGroupInfosRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRSGroupInfosRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRSGroupInfosRequest::CopyFrom(const ListRSGroupInfosRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRSGroupInfosRequest::IsInitialized() const {

  return true;
}

void ListRSGroupInfosRequest::Swap(ListRSGroupInfosRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRSGroupInfosRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRSGroupInfosRequest_descriptor_;
  metadata.reflection = ListRSGroupInfosRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListRSGroupInfosResponse::kRSGroupInfoFieldNumber;
#endif  // !_MSC_VER

ListRSGroupInfosResponse::ListRSGroupInfosResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRSGroupInfosResponse::InitAsDefaultInstance() {
}

ListRSGroupInfosResponse::ListRSGroupInfosResponse(const ListRSGroupInfosResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRSGroupInfosResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRSGroupInfosResponse::~ListRSGroupInfosResponse() {
  SharedDtor();
}

void ListRSGroupInfosResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRSGroupInfosResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRSGroupInfosResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRSGroupInfosResponse_descriptor_;
}

const ListRSGroupInfosResponse& ListRSGroupInfosResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

ListRSGroupInfosResponse* ListRSGroupInfosResponse::default_instance_ = NULL;

ListRSGroupInfosResponse* ListRSGroupInfosResponse::New() const {
  return new ListRSGroupInfosResponse;
}

void ListRSGroupInfosResponse::Clear() {
  r_s_group_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRSGroupInfosResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RSGroupInfo r_s_group_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_r_s_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_r_s_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_r_s_group_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListRSGroupInfosResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hbase.pb.RSGroupInfo r_s_group_info = 1;
  for (int i = 0; i < this->r_s_group_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r_s_group_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRSGroupInfosResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hbase.pb.RSGroupInfo r_s_group_info = 1;
  for (int i = 0; i < this->r_s_group_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r_s_group_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRSGroupInfosResponse::ByteSize() const {
  int total_size = 0;

  // repeated .hbase.pb.RSGroupInfo r_s_group_info = 1;
  total_size += 1 * this->r_s_group_info_size();
  for (int i = 0; i < this->r_s_group_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->r_s_group_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRSGroupInfosResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRSGroupInfosResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRSGroupInfosResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRSGroupInfosResponse::MergeFrom(const ListRSGroupInfosResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  r_s_group_info_.MergeFrom(from.r_s_group_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRSGroupInfosResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRSGroupInfosResponse::CopyFrom(const ListRSGroupInfosResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRSGroupInfosResponse::IsInitialized() const {

  for (int i = 0; i < r_s_group_info_size(); i++) {
    if (!this->r_s_group_info(i).IsInitialized()) return false;
  }
  return true;
}

void ListRSGroupInfosResponse::Swap(ListRSGroupInfosResponse* other) {
  if (other != this) {
    r_s_group_info_.Swap(&other->r_s_group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRSGroupInfosResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRSGroupInfosResponse_descriptor_;
  metadata.reflection = ListRSGroupInfosResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRSGroupInfoOfServerRequest::kServerFieldNumber;
#endif  // !_MSC_VER

GetRSGroupInfoOfServerRequest::GetRSGroupInfoOfServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRSGroupInfoOfServerRequest::InitAsDefaultInstance() {
  server_ = const_cast< ::hbase::pb::ServerName*>(&::hbase::pb::ServerName::default_instance());
}

GetRSGroupInfoOfServerRequest::GetRSGroupInfoOfServerRequest(const GetRSGroupInfoOfServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRSGroupInfoOfServerRequest::SharedCtor() {
  _cached_size_ = 0;
  server_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRSGroupInfoOfServerRequest::~GetRSGroupInfoOfServerRequest() {
  SharedDtor();
}

void GetRSGroupInfoOfServerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete server_;
  }
}

void GetRSGroupInfoOfServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRSGroupInfoOfServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRSGroupInfoOfServerRequest_descriptor_;
}

const GetRSGroupInfoOfServerRequest& GetRSGroupInfoOfServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

GetRSGroupInfoOfServerRequest* GetRSGroupInfoOfServerRequest::default_instance_ = NULL;

GetRSGroupInfoOfServerRequest* GetRSGroupInfoOfServerRequest::New() const {
  return new GetRSGroupInfoOfServerRequest;
}

void GetRSGroupInfoOfServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != NULL) server_->::hbase::pb::ServerName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRSGroupInfoOfServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRSGroupInfoOfServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hbase.pb.ServerName server = 2;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRSGroupInfoOfServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hbase.pb.ServerName server = 2;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRSGroupInfoOfServerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hbase.pb.ServerName server = 2;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRSGroupInfoOfServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRSGroupInfoOfServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRSGroupInfoOfServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRSGroupInfoOfServerRequest::MergeFrom(const GetRSGroupInfoOfServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRSGroupInfoOfServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRSGroupInfoOfServerRequest::CopyFrom(const GetRSGroupInfoOfServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRSGroupInfoOfServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_server()) {
    if (!this->server().IsInitialized()) return false;
  }
  return true;
}

void GetRSGroupInfoOfServerRequest::Swap(GetRSGroupInfoOfServerRequest* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRSGroupInfoOfServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRSGroupInfoOfServerRequest_descriptor_;
  metadata.reflection = GetRSGroupInfoOfServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRSGroupInfoOfServerResponse::kRSGroupInfoFieldNumber;
#endif  // !_MSC_VER

GetRSGroupInfoOfServerResponse::GetRSGroupInfoOfServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRSGroupInfoOfServerResponse::InitAsDefaultInstance() {
  r_s_group_info_ = const_cast< ::hbase::pb::RSGroupInfo*>(&::hbase::pb::RSGroupInfo::default_instance());
}

GetRSGroupInfoOfServerResponse::GetRSGroupInfoOfServerResponse(const GetRSGroupInfoOfServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRSGroupInfoOfServerResponse::SharedCtor() {
  _cached_size_ = 0;
  r_s_group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRSGroupInfoOfServerResponse::~GetRSGroupInfoOfServerResponse() {
  SharedDtor();
}

void GetRSGroupInfoOfServerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete r_s_group_info_;
  }
}

void GetRSGroupInfoOfServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRSGroupInfoOfServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRSGroupInfoOfServerResponse_descriptor_;
}

const GetRSGroupInfoOfServerResponse& GetRSGroupInfoOfServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RSGroupAdmin_2eproto();
  return *default_instance_;
}

GetRSGroupInfoOfServerResponse* GetRSGroupInfoOfServerResponse::default_instance_ = NULL;

GetRSGroupInfoOfServerResponse* GetRSGroupInfoOfServerResponse::New() const {
  return new GetRSGroupInfoOfServerResponse;
}

void GetRSGroupInfoOfServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_s_group_info()) {
      if (r_s_group_info_ != NULL) r_s_group_info_->::hbase::pb::RSGroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRSGroupInfoOfServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r_s_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRSGroupInfoOfServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
  if (has_r_s_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r_s_group_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRSGroupInfoOfServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
  if (has_r_s_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r_s_group_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRSGroupInfoOfServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .hbase.pb.RSGroupInfo r_s_group_info = 1;
    if (has_r_s_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r_s_group_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRSGroupInfoOfServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRSGroupInfoOfServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRSGroupInfoOfServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRSGroupInfoOfServerResponse::MergeFrom(const GetRSGroupInfoOfServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_s_group_info()) {
      mutable_r_s_group_info()->::hbase::pb::RSGroupInfo::MergeFrom(from.r_s_group_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRSGroupInfoOfServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRSGroupInfoOfServerResponse::CopyFrom(const GetRSGroupInfoOfServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRSGroupInfoOfServerResponse::IsInitialized() const {

  if (has_r_s_group_info()) {
    if (!this->r_s_group_info().IsInitialized()) return false;
  }
  return true;
}

void GetRSGroupInfoOfServerResponse::Swap(GetRSGroupInfoOfServerResponse* other) {
  if (other != this) {
    std::swap(r_s_group_info_, other->r_s_group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRSGroupInfoOfServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRSGroupInfoOfServerResponse_descriptor_;
  metadata.reflection = GetRSGroupInfoOfServerResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)
